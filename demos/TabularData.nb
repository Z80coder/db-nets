(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1377091,      26590]
NotebookOptionsPosition[   1371874,      26493]
NotebookOutlinePosition[   1372312,      26510]
CellTagsIndexPosition[   1372269,      26507]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->
  "In[213]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["DifferentiableHardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "DifferentiableHardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardeningLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardeningLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassScores", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNetClassScores", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNeuralNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "NeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "DifferentiableHardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNetFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "NeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "DifferentiableHardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetTransformWeights", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNetTransformWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralReshapeLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNeuralReshapeLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["RandomBalancedNormalSoftBits", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "RandomBalancedNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["ExtractWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "ExtractWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNet", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNet", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomNormalSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "RandomNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetNetArrays", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "GetNetArrays", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanExpression", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNetBooleanExpression", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralChain", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNeuralChain", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomUniformSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "RandomUniformSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "GetWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNetBooleanFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralCount", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNeuralCount", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Require", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "Require", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNetClassBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralExactlyK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNeuralExactlyK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBalanced", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "InitializeBalanced", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "SoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClassificationLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardClassificationLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassify", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNetClassify", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralLTEK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNeuralLTEK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToOne", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "InitializeNearToOne", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Soften", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "Soften", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassifyEvaluation", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNetClassifyEvaluation", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToZero", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "InitializeNearToZero", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["HardDropoutLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardDropoutLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassPrediction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNetClassPrediction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNeuralNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeToConstant", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "InitializeToConstant", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassProbabilities", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNetClassProbabilities", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "HardNeuralNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LogisticClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-22e05d14-48fc-4ab7-83bd-fbc77409256a", {
                   "LogisticClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{
  3.86479111604138*^9, 3.8647911657240562`*^9, 3.864791620800887*^9, 
   3.86479194597997*^9, 3.86479198092934*^9, 3.864792204697258*^9, 
   3.864792687703233*^9, 3.864793105592959*^9, 3.864793526801218*^9, 
   3.864793732850697*^9, 3.864794507927494*^9, 3.864796071752219*^9, 
   3.864825438485825*^9, 3.864825531891514*^9, 3.8648260962141314`*^9, 
   3.864830162877289*^9, 3.8648755408909893`*^9, 3.865049480919162*^9, 
   3.865050046751976*^9, 3.865051042066378*^9, 3.8650523426134*^9, 
   3.8650543558693867`*^9, 3.865058337414798*^9, 3.8650584086343327`*^9, 
   3.86505947338*^9, 3.86506885830449*^9, 3.865397062515942*^9, 
   3.86539822002991*^9, 3.865414037240362*^9, 3.865415448442546*^9, 
   3.865415610582356*^9, 3.8654172214829617`*^9, 3.865417469191354*^9, 
   3.865419590403018*^9, 3.865420075554387*^9, 3.865428054175325*^9, 
   3.8654793173710623`*^9, 3.8655665906709213`*^9, 3.865591995941038*^9, 
   3.865658579968223*^9, 3.865772215681147*^9, 3.865779562552833*^9, 
   3.8658370145359364`*^9, 3.86584060155225*^9, 3.8659992094486027`*^9, 
   3.866003652107215*^9, 3.8660161651613417`*^9, 3.8661754677644978`*^9, 
   3.866258657623454*^9, 3.866285693609187*^9, 3.86635057486532*^9, 
   3.866512485808078*^9, 3.866512816932197*^9, 3.866553529720395*^9, 
   3.8666025113336687`*^9, 3.866606144536639*^9, 3.866608546326232*^9, 
   3.866609704076623*^9, 3.8666137219288273`*^9, 3.86671285229326*^9, 
   3.866788776837541*^9, 3.866788812552528*^9, 3.866794689702251*^9, 
   3.8667979035574636`*^9, 3.8667996941084146`*^9, 3.866800686995532*^9, 
   3.866801936715271*^9, 3.866865563143631*^9, 3.8671595128431797`*^9, 
   3.867322056244096*^9, 3.8674794507502613`*^9, 3.8675828633257*^9, 
   3.867669743397482*^9, 3.867732450434094*^9, 3.867751859422694*^9, 
   3.867752571591299*^9, 3.867811509870346*^9, 3.8678117360040903`*^9, 
   3.8678203831872883`*^9, 3.867843695133718*^9, 3.867850373374954*^9, 
   3.86800725388065*^9, 3.868015027015581*^9, 3.868070609148181*^9, 
   3.8680707782820997`*^9, 3.868071504515008*^9, 3.868078566976554*^9, 
   3.868079276409031*^9, 3.8680936161674767`*^9, 3.868332595482695*^9, 
   3.868343297990016*^9, {3.868434780605877*^9, 3.86843479524651*^9}, 
   3.868445566107071*^9, 3.868519876174618*^9, 3.86853009787873*^9, 
   3.868533409155756*^9, 3.868591470469123*^9, 3.868591573510869*^9, 
   3.8686703712738132`*^9, 3.868674802626226*^9, 3.868944309055069*^9, 
   3.8690237136048*^9, 3.869041334767592*^9, 3.869042729449026*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"7d734899-855d-4a12-bef3-2b463b1bbed9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11075930622028356488125770049659704238270556926357467056696], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11075930622028356488125770049659704238270556926357467056696,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9, 3.8685300999400797`*^9, 3.868533465833148*^9, 
  3.868591722379105*^9, 3.868670373439299*^9, 3.868944316441147*^9, 
  3.869023715466254*^9, 3.869041339373542*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"610e0a40-4cdd-411a-9668-518b1108f58f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "featureValues"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}, {3.868682465592621*^9, 3.868682467103612*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9, {
   3.8686824585003*^9, 3.86868246003918*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"128", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralMajority", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}, {
   3.868520025904859*^9, 3.868520026662962*^9}, {3.868520165374518*^9, 
   3.868520172724663*^9}, {3.868520227657476*^9, 3.8685202280400333`*^9}, {
   3.868520278697311*^9, 3.868520283147401*^9}, {3.8685206145298347`*^9, 
   3.8685206150078983`*^9}, {3.868537004723915*^9, 3.868537005683709*^9}, {
   3.8686716248609867`*^9, 3.86867162498657*^9}, {3.8689423409409943`*^9, 
   3.868942344276237*^9}, {3.868947806296569*^9, 3.868947806625355*^9}, 
   3.868955246204385*^9, {3.868957393208212*^9, 3.8689574013451433`*^9}, {
   3.868957440249872*^9, 3.8689574443738937`*^9}, {3.8689577953130703`*^9, 
   3.868957801168947*^9}, {3.868958026730661*^9, 3.8689580269562798`*^9}, {
   3.868960876079372*^9, 3.8689608783682137`*^9}, {3.868964831153708*^9, 
   3.868964831513155*^9}, {3.868965437993729*^9, 3.868965438129128*^9}, {
   3.868975240520047*^9, 3.868975267560664*^9}, {3.8690319933178453`*^9, 
   3.8690319942928963`*^9}, {3.869034512435259*^9, 3.869034512808312*^9}, {
   3.869034610772094*^9, 3.869034611688615*^9}, {3.86903620618801*^9, 
   3.869036206373323*^9}, {3.8690363476068773`*^9, 3.869036349769408*^9}, {
   3.869036449105991*^9, 3.869036450054133*^9}},
 CellLabel->
  "In[214]:=",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->
  "In[129]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->
  "In[130]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetFlatten", "[", "trainableNet", "]"}]], "Input",
 CellChangeTimes->{{3.869029509503131*^9, 3.869029510968685*^9}, {
  3.869033078018523*^9, 3.86903308126506*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"45322628-cc61-4057-9fa0-4c75c908c79b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Acceptabi..\"", "\"Acceptability\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Acceptability", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss/Error\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Cargo\"", TraditionalForm], 
                    Offset[{0, -7}, {-9.000000133974481, -4.999999758845925}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/Featu..\"", "\"Net/FeatureLayer/Catenate\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "Net/FeatureLayer/Catenate", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-27, 
                    2]}, {-8.000000053589792, -1.9999997856408231`}], 
                    
                    Offset[{
                    0, -13.5}, {-8.000000053589792, -1.9999997856408231`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Doors\"", TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-9.000000107179584, -3.9999997588459255`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Maintenan..\"", "\"MaintenanceCost\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MaintenanceCost", "Tooltip"]& ], 
                    TraditionalForm], 
                    Offset[{0, -7}, {-9.000000080384687, -2.999999758845926}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Passengers\"", TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-9.00000005358979, -1.9999997588459262`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"PurchaseP..\"", "\"PurchasePrice\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "PurchasePrice", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-9.000000026794893, -0.9999997588459264}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Safety\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-8.999999999999996, 
                    2.411540732620606*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Loss/Soft..\"", "\"Loss/SoftmaxLayer\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Loss/SoftmaxLayer", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Loss/Soft..\"", "\"Loss/SoftProbs\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Loss/SoftProbs", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/4\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/4", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{0, -13.5}, {-6.9999999732051, 
                    1.0000001875642788`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/1\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/1", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-9.9999999732051, 1.00000026794897}], 
                    
                    Offset[{0, -13.5}, {-9.9999999732051, 1.00000026794897}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/2\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/2", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-8.9999999732051, 1.000000241154073}], 
                    
                    Offset[{0, -13.5}, {-8.9999999732051, 
                    1.000000241154073}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/3\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/3", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-7.9999999732051, 1.000000214359176}], 
                    
                    Offset[{0, -13.5}, {-7.9999999732051, 
                    1.000000214359176}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/5\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/5", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999973205101, 
                    1.0000001607693818`}], 
                    
                    Offset[{0, -13.5}, {-5.999999973205101, 
                    1.0000001607693818`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/6\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/6", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/7\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/7", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999985262806, 
                    0.5500000388526006}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{-5.217758092674727, 
                    1.7392528529018978`}, {-8.479057033602846, \
-3.437170597317169}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.3162277914367087,
                     0.9486832895772231}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{-4.919349484592805, 
                    2.4596749070632296`}, {-8.455901777458966, \
-2.9118031722999733`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.4472136194660417,
                     0.8944271790168736}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{-3.8890871923183195`, 
                    3.8890874007337004`}, {-8.450000065647494, \
-2.4499997735831194`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334001,
                     0.7071067622396945}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337052`*^-7, 
                    5.499999999999999}, {-8.450000053589791, \
-1.9999997735831196`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.679489696788555*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{3.8890874007337066`, 
                    3.8890871923183137`}, {-8.450000041532087, \
-1.5499997735831197`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396934, -0.7071068001334012}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{4.919349616406269, 
                    2.4596746434363004`}, {-8.455901728595608, \
-1.088196374549995}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.44721357153387276`, -0.894427202982958}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"21\"", TraditionalForm], 
                    
                    Offset[{-5.2177580926747265`, 
                    1.7392528529019016`}, {-7.479056953218154, \
-0.43717062411206753`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.31622779143670937`, 0.9486832895772229}], 
                    InsetBox[
                    FormBox["\"10752\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-9.449999973205099, 
                    1.0000002532117764`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"10752\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-8.4499999732051, 
                    1.0000002264168797`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"21\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461553`*^-7, 
                    5.499999999999997}, {-7.4499999732051005`, 
                    1.0000001996219825`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897189930098`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"21\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-6.4499999732051005`, 
                    1.0000001728270855`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox["\"512\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.4499999732051005`, 
                    1.0000001460321886`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"512\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"128\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Acceptability\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Acceptability", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.000000133974481, -4.999999758845925}, \
{-8.000000053589792, -1.9999997856408231`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Cargo\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Cargo", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.000000107179584, -3.9999997588459255`}, \
{-8.000000053589792, -1.9999997856408231`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Doors\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Doors", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.000000080384687, -2.999999758845926}, \
{-8.000000053589792, -1.9999997856408231`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"MaintenanceCost\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"MaintenanceCost", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.00000005358979, -1.9999997588459262`}, \
{-8.000000053589792, -1.9999997856408231`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Passengers\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Passengers", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.000000026794893, -0.9999997588459264}, \
{-8.000000053589792, -1.9999997856408231`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"PurchasePrice\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"PurchasePrice", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.999999999999996, 
                    2.411540732620606*^-7}, {-8.000000053589792, \
-1.9999997856408231`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Safety\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Safety", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.000000053589792, -1.9999997856408231`}, \
{-6.9999999732051, 1.0000001875642788`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 21\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.9999999732051, 
                    1.00000026794897}, {-8.9999999732051, 
                    1.000000241154073}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 10752\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10752\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.9999999732051, 
                    1.000000241154073}, {-7.9999999732051, 
                    1.000000214359176}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 10752\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10752\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999999732051, 
                    1.000000214359176}, {-6.9999999732051, 
                    1.0000001875642788`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
512\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 512\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
512\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 512\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 512\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 512\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
4\[Times]128\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]128\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.449999985262806, 
                    0.5500000388526006}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Acceptability\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Acceptability", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.479057033602846, -3.437170597317169}, {-0.25,
                     0}, 
                    Offset[8], {1.0000000803846891`, 2.9999999732051013`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Cargo\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Cargo", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.455901777458966, -2.9118031722999733`}, \
{-0.25, 0}, 
                    Offset[8], {1.0000000535897922`, 1.9999999732051024`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Doors\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Doors", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.450000065647494, -2.4499997735831194`}, \
{-0.25, 0}, 
                    Offset[8], {1.0000000267948952`, 0.9999999732051028}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"MaintenanceCost\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"MaintenanceCost", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.450000053589791, -1.9999997735831196`}, \
{-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999982, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Passengers\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Passengers", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.450000041532087, -1.5499997735831197`}, \
{-0.25, 0}, 
                    Offset[8], {0.9999999732051013, -1.0000000267948967`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"PurchasePrice\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"PurchasePrice", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.455901728595608, -1.088196374549995}, {-0.25,
                     0}, 
                    Offset[8], {0.9999999464102043, -2.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Safety\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Safety", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.479056953218154, -0.43717062411206753`}, \
{-0.25, 0}, 
                    Offset[8], {1.0000000803846918`, 2.999999973205102}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 21\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-9.449999973205099, 
                    1.0000002532117764`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 10752\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10752\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.4499999732051, 
                    1.0000002264168797`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 10752\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10752\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.4499999732051005`, 
                    1.0000001996219825`}, {-0.25, 0}, 
                    Offset[8], {1., -2.679489718993011*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
512\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 512\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.4499999732051005`, 
                    1.0000001728270855`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
512\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 512\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.4499999732051005`, 
                    1.0000001460321886`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 512\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 512\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
4\[Times]128\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]128\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999999999993`, 5.3589794058235685`*^-8}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Acceptability\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Acceptability", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7226666666666666, 0.6733333333333333, 
                    0.8926666666666666]], 
                    EdgeForm[
                    RGBColor[0.584, 0.51, 0.839]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"CE\"", 
                    GrayLevel[0.33], Bold, 10, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss/Error\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CrossEntropyLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/Error", Bold], 
                    Style[
                    CrossEntropyLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-9.000000133974481, -4.999999758845925}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Cargo\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Cargo", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-8.000000053589792, -1.9999997856408231`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 
                    16], {-8.000000053589792, -1.9999997856408231`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/FeatureLayer/Catenate\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/FeatureLayer/Catenate", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-9.000000107179584, -3.9999997588459255`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Doors\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Doors", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-9.000000080384687, -2.999999758845926}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MaintenanceCost\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["MaintenanceCost", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-9.00000005358979, -1.9999997588459262`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Passengers\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Passengers", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-9.000000026794893, -0.9999997588459264}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PurchasePrice\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["PurchasePrice", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-8.999999999999996, 2.411540732620606*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Safety\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Safety", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztWFtIk2EYdnO6zaFuc9N5SHSbp6lT2cmpqNOpOwiRUhkUoXkgCoVpSBdF
dROdLqqbLqKuuomC6EARFEGR0F1FEdVVFEQXRecDnZ5HNhiytWn/1oG98Prr
9/7/93zv+73f+72P5SNTA+PitLS0aRl+DAzPugKB4a2DSvyxcnJ648Tk2Kh3
cmZsYizQPJKOQQe0FCpJS0lKUpKS/1syMjJUpaWl4yaTaX9FRcU2rVbbl2hM
vV4/7fF4Xvv9/m/d3d1P8PzS39//w263nxeJROJEYNbU1OwjBrC+wt9Rjkkk
kmyLxXKS42VlZZuExszLy3NxbqvVetrtdj/Nzs42hWxSqbSANpvNdlZoXKfT
ec3n833Kzc21er3eD3g25eTkNFL5O3C/OxyOi0Jiwh8d58UeXtDpdCvoWyQ1
m81HhcRFjDs5L/Z3T3V19e6GhoZjGo3GvVCzsrL0QuLCxwHiVlVV7UK8r+bn
5/tCNuZVc3PzFaxpr5CYFKVSaSNua2vrTZ6hzMzMvJCtrq7uMG3FxcVrhcaF
iFpaWq5zfuKiTniKiopWMX85xvqRAMx5kclkJcA5F55HnZ2d9+HnmkRhhkt6
eroCZ7eO60gGXkr+TUHN1UEbk604Dzui1dtEKu7SIeiZZOuf3ueUJFcKCtgq
xc5Hg8EwIyQu7nQ/52UvhbvvRjTFPTgkJC7vm7a2tlvBvnSzkHPHEvQTWpfL
9Yi9eWFh4WAysdmj9fT0PGe81Wp1ezzfKBSKCvIJ9B8H+ESPa14KNvpiC/qa
t319fa9410d7D3sjR495nDyCvTX6+mfsexkvo9G4dSnY6KV6yYHIEeRy+bKF
drFYLGWeEZM5AZ+NHGe8Ojo67hF7KX4zz7DXDzlnSUnJuoX2ysrKnbTV1tYe
7O3tfRFuQ86vpg0xDywSVgTOdYrf1tfXH4m0JsT1XXt7+232sfQ7xF2o4G4b
gmd9djGg8GU7v+N84JgZC+0hfzDvFvobrcYsprcGR1jO3OC+ku9FWdf83Y1a
40VPP1deXj4Vib+Qp8eDSY6JPH6DM/SRXCHae+AKh4jLPh7xfk/OErKpVCon
+UuknIgkXFtXV9fjYB6t/9W7jC/fA/+8hNy9ExrnuWLNw7o/I68N8eCG7oVY
9bmpqekE44+z/TLIneYQ027+HwBruMuzRz4XD2Y4biwFR3nA91HLWokTZiP/
voz9sceL+TuCmq5hfcA+qZOBl5KU/E3yE7YM2js=
                    "], {{0, 29.333333333333332`}, {16., 0}}, {0, 255}, 
                    ColorFunction -> RGBColor, ImageResolution -> 135.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {16., 29.333333333333332`}, 
                    PlotRange -> {{0, 16.}, {0, 29.333333333333332`}}, 
                    ImageSize -> 16], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Loss/SoftmaxLayer\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "SoftmaxLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/SoftmaxLayer", Bold], 
                    Style[
                    SoftmaxLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Sum]\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Loss/SoftProbs\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Total", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/SoftProbs", Bold], 
                    HoldForm[
                    AggregationLayer[Total]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-6.9999999732051, 1.0000001875642788`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-6.9999999732051, 
                    1.0000001875642788`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/4", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-9.9999999732051, 1.00000026794897}], 
                    
                    
                    Offset[{-10.5, -10.5}, {-9.9999999732051, 
                    1.00000026794897}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-9.9999999732051, 1.00000026794897}], 
                    
                    Offset[{10.5, 10.5}, {-9.9999999732051, 
                    1.00000026794897}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-9.9999999732051, 1.00000026794897}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/1", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-8.9999999732051, 1.000000241154073}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-8.9999999732051, 
                    1.000000241154073}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/2", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-7.9999999732051, 1.000000214359176}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-7.9999999732051, 
                    1.000000214359176}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/3", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-5.999999973205101, 1.0000001607693818`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Mu]\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-5.999999973205101, 
                    1.0000001607693818`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/5\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Mean", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/5", Bold], 
                    HoldForm[
                    AggregationLayer[Mean]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-4.999999973205101, 1.0000001339744848`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/6", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/7", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxTTMoPSmViYGAQBmIQ/fc/GOxPSpJyDD6aYxcTNvfj///v958PMWRnYPhg
z3C1joWBQemAJuPF9///Cx8wDj3DyMCgcKA6svQYSF/aqhnMIPkQpkX3///n
P3CmfhMTiB8K5rMfMAKrVzqwmsVlP0j9DK1nDCB+BGdHHcief2DrFQ+EX593
5Z/eBDuIO2LsIO56b6+7+twPkL75K5P4QO6ZFpr+B2Ru/r/JoiD+yVXGQCOk
D2wIjDQC8VOuSgKVKx9QDHjrjuArHgj8vdsBoV7+QOOyLksQ/xSYL37gwR91
bQRf+IDAim/KIP5UsH38BxyCj8qA+AB196M9
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 8, 21, 8, 8, 8, 8, 8, 8, 21, 21, 21, 21, 21, 
                    21, 21, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {602.9999999999998, 370.0000014737192}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{27.999999999999957`, 25.}, {25., 15.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Acceptability\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Acceptability\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Acceptability"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Acceptability\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Acceptability"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"PurchasePrice\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"PurchasePrice\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"PurchasePrice"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"PurchasePrice\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"PurchasePrice"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"MaintenanceCost\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"MaintenanceCost\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"MaintenanceCost"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"MaintenanceCost\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"MaintenanceCost"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Doors\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Doors\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Doors"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Doors\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Doors"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Passengers\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Passengers\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Passengers"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Passengers\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Passengers"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Cargo\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Cargo\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Cargo"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Cargo\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Cargo"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Safety\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Safety\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Safety"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Safety\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Safety"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{10752}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {10752}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10752}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_572ddd96_70fe_4417_8084_83b93f8bf9df", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
kepE+I3/A8SM2ak=
                    "]]|>, "orcInstance" -> 94815920, "orcModuleId" -> 
                    95299456, "targetMachineId" -> 75835344|>, 
                    139782730577728, 139782730577584, 139782730577664, 
                    139782730571776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_b95dc1a5_c744_488c_9658_959ead1e26ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
1igs/Duzqb/z
                    "]]|>, "orcInstance" -> 94179472, "orcModuleId" -> 
                    76310064, "targetMachineId" -> 96070272|>, 
                    139782730564128, 139782730563728, 139782730563808, 
                    139782730563584, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {10752},
                     "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "0d3040909256d940", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10752}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10752}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{512, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10752}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{512, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_572ddd96_70fe_4417_8084_83b93f8bf9df", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1:eJy9vQlYU0f3OHyzkEQMkABKEJBAXFBRAyKLKCaAggUR12JdWAQVZV/dAgmg
xFYFW2vRuqC1avu6YMEFFFlVqoAoVlB2QdEiBAsCGiD/M/cmEfq93/P9vuf5
Pf8+r9yZuWdmzn7OTGbuaxYQviKAhGFYWzCGObsUNs7VxzANqAcw+ZO+Wnt3
s0ie4zt2udgTwZgxMewUB8PGks0wMtTHwz+6hHdYWEZdQmNZO3xPSmFO1mAY
TqR+FyA2XkR2/n6scxvLWt+ewfHQtI6SukeUmvFcdVMPsITfkwPLGNf0uS6L
pdw/SdZRKZzpFtPTrfZkrT/MfVAG4+7nYlggPK3Ny8ZwAxZjZjMmZRibTYY/
hlOZe8+l+0UFrudO2pKUOX4f9oYhkJCjqX58NzGLNDv4Wwv/f359Z7fsWzNz
16qzjMIVZBaVlizMZHEpJm8Y5K84LRGZGv8IPytM+KQZJOZ7fTbWo5jGtSjN
XMQWD80gWc4brkvUZGhabV1O9VN8hX13SBFrrp0qEE9YbG//VhKWPpxI9yz8
CqM4LqIWDv4L8mOBbuHZ1v32GJn0LYfEPbPfUHc/dXUIP/MRQ8y2pj/l+PO5
h6ZZ73XmCie6GNNIJMlWgUY0E4YX2Jh/z6bxrI8FeDMOaKZYu2zmm4/b+FR/
eXFbtHYPdyx75/I21wKbyTDAc2NSyhGbRUf4Q6UfXQuabfSeeK7QJFssWek6
5odl65f1ekBh5XTaLHLLIv63x86M++FJOfNykXjb4jLm283fuoawBN6V0CCN
Wyw1ubgliTLkeXgaizxGU5vKMZsz6ayhtYRsuJorcNf1JBmf4XOxuWOEs00s
vI+ssdFYDvL3B7kYSZsV8B+dy7RlOWOTjKRm2FEt7Q+ojeKnKTbFEjF3TKO3
iPbLAGoj8TUQ5GLMxyijFe+YqYWtxAaxdLFTrZhLSsfGCuhG6a6Yrh/pd60U
Z2xPVpEPDZVpethY71D+BJKPeFtyi34heZXRgQfY+MyXzQI0zkLsPDZAwuiF
pphuFYxggUa4qLVPHwYM5U4h+9iy9AG99OnEyPsmY2OyQtKvoK6mOAJiSrMO
NoZBydTB5tVy/f89pjfJHwMqpspxKrZSCvWxhdgkHNhvKykLi8mSvBiGV4nY
K6wbH+ptshazH+dDFY3gg8A0hJuHNSdrpUzFHtFeEUOl27L8WNiWLAkjmWQP
rziMQsMQ7v1MrNKPIqTRImhGGdYMbAVWyWWkc7UytfYaUoXiEItKAYMcSJHQ
qBE0bAnIwghkoZciyOBSS1LEGSx9vZTCDIGx+1lP1rdBzsv5B3s8WZlbi7kz
q1O4x/jeP841uzWFWptiVn1kTJGtf/O8cOfupSwnfgZLXESVaCaPoXKkRZz0
ohQS876YOYUaxDfLnMLYHEHTI9tksKTgBPQm7imkOA5oOGYm24pTI7dS4tzp
8Rfpe2r9NF9X0Toz6fC3m0uPx+i7+PSoTHo0lx6K6URF0CPxMmokAKDsR4/J
pMcJ6KHp2vAXVatob8T0iEx6JJe+o4rWJabvYtHjiI7422wWPUpM/0qHwdZ1
3nfgCEaycc440VV03WHPzZbguLXa31astzJgBiY8Epbn3D5Eb4m0ZT1cvH1/
da8+49dLtx9lZhzU+L4o8I8jHZWNZqQHZilFwD0W/KPSs1zmnXPtpmGYGKpc
e7HZ6sWW0A4VMngiDlZIYv6Wt0UongQtDPhXyMW0/dzv0WTdXIE5RkCCPOn8
cy/3r81gcdmoJ/zjM8QUzorc1JUkEh9T/WdcmP7twotjGeoGrBnbt4qvGyzA
sSHjTTCU5g/fUsiZShwxDLD68WTgRBZGU3VDWG1cRKEAMlBDPhpD0/363SKa
AOOOHOrzTw58CobpIjCWEuxPrRQYyUJJIw6me9JdC+OuVfbEaZzrWG0MMyG6
xUrkH+45Ow8ji0ci9teQazxGFVAwfFoMi8Bcpuvv+gfnFSZQ02i3qhOmpxJs
JvCvtfibQvRR4//xyVkSSaDkND6j5o9nF2LkQtKIGVfPWn4GoxZSVLyAGX+P
M6esAMzJqjYE5ul/HhCjjgTL+cOTxBCr2d+MTbJl6L8pxbAyMsJhDIo7EzM4
hmzP9ANjprjdp7pM0CdPXoxtE2veyKDMO4ClB6DxroH9nYTnHIbYuLTFeLM+
aYHUxT6l5ICzmL5zBz06I5L5BtPpZGn3irXnMJ0nFheZVJ4x3szXwMGSjcop
C8pcFhygLCjfcSAmgr6bQd/pnhoRQd8VQYnbkRrBTTUsZ2u/T9du4euE8XVa
u7W7vbXnsEpNGs2Ma81Miv0nbubvd7yT7Fjl4pBDmX8neX4KxbG8Wz/Oj757
K91ua2oU/BWnRqSnRvjR4yzocQMaMGy8ONWXkRrJSY3KSN2ZIbHs6tbuatb+
WKj9nk8JKDtj3HbGuBz/W+9v/NDMuFRi8tCf9jzdxaHMxSED/3urxP6Ii72U
4nikZDZMOpjk+IzimFXCfBCcGuGTGhWRHLOVvsMvNYaTGpOZali5UqcL0/nH
W7stXbtVoNPC1X4PVHAtTOqLJhYLJz41M66XTKxvNm5rMfmbNHEzZ7k9mOKJ
ZMdy70lKQvxS43fQd2Qs9+xN10EcmLht4kN/47dmJo1FJgmkiQhhM5Nuf9qq
vcn25SWOWS4LgCGDxfPbXBylUC05cE8TKE2NB3wY9F0W9KgMyfpWlvb7Qu3X
3to9fF7RU+HEthaD2haTRkDA3dAxK3lBTrJRSon9AReH8pL5t4ocykqAxvnl
7jmRDDpgFQkM9Ek1rLuv/d5Pp7MZ/JnOa77Oa65On7d2GEu7la8N1Z5m2rtm
7TZv7QE+79V7f+NiiUlti8F7M5M3ZialZiYgwbdmppu5Jx3vuCy4RXE4kuxQ
7nMHpA/E7gI83VPjI4B7qdqvWdrdOLYyvnZPunavNzJ1bCeYjAc8oya6c12k
TMMxUdbuXJ7kwOHDT1wzWRaB862snQ+lm/2ylRtKWmm0/psboNhfh4dsjvIP
5bqEh0YEhwRFca1nWc2ZZTWLz90cHsX1DA6L3cHdYW/LtbC1mRkQHAMp0Vex
YUFcK1tLrjXf2nraqtggrgNXGLsFr3KtbObZWM+z4YeExIXOCgkPj5gVF7Qp
JjwqeFfQrKAw/4CQoP/2Jj44MGbrlxeBwdExUcEBsTGqPkATj7HfLokfMYda
xJTwXfjlXNYDprOknMtJPUCdYjHO1va27U82f1jb5S0nTzp92852Tm6WrcFt
69zcHLuby5Mm/apqupZnY/vH7LycG38sJ6Oc9jewVzN4jtWMsgA7oO/yicgA
3peAxjlUlSS9Mb5/RuutEJnpGyQcpF/jbVr9tNu9QW112pDy6rR7a/dmiSX0
nRa4Ve1IjSR0yifiRIl9DsnxXPKCIyXk7WCgxvUtxvVc4zZ/9PetZGKxv3HV
GeMyQhFIT8CPITdOL59/LtnxBBgTZUFm8nwwrPQS5IP8Qb46OhBvqVzdsVTC
E+pbSCZwSBZSZ4tM8jTyBH3XMQcw/aXsI8I/9ReNgU4fIMIsAThzt7L05Zop
YUhPwAFhvit3RscEhfr6LvWP8F3s6+vi6+vtv2l7UKAwKsp/p++KIP8QWxtf
q/9xo/V/b/y/Mss87uQ4/ygrW74Nhs1IebvWyp2dk5SRcX+t0Nuz9RJ3+vnI
Nazx1fYzpN8FnxhHvW9TqWm+acIWjTNWB7OTahFYhGdrCGMSNoddUUg7x9ez
YoYINOew7+EVNlG5yM8iTSt3ZVKM0os9Xa3wChUq5A9FkgMcfYyRRJqWLuQE
rqhlUyiYkM/XsM5K8tR0DPDDuAzaeW+aT/oSfzcmE6MWFeqXC8ZaT3svlZDE
XE5GsWGIcMpeEys+xqJSVgqSLcvOZfFoNCzJz08zuFDjmH5caSEmYDE9hVp3
uD8UH+JwYDLJtEtFBjFtVWISJ32asfscZhCXZqRBdhaK06cbu9sxJYZikgYp
SjihMItkRaXy67mXSJwDHI4uI0n4o6bEuNya6swP8PYE3CZM56yilllK+N5s
Bom8vpvGDxFwSSQl8F+a4NuymRQ2EKkH897XfGhJeqKV3EMLFgjF67l0gGaS
SEw7RgxGI9D2/tM5C7rcY3tGe3OlnIEz94ptPCJ673vTYgppJTRXMZ1aZZRs
+ExixDRiCV2xfKsTEpOsoiwSu55E6r0vpsXjYAJ2oQ19bxLj7PzcdNo5apnG
bqyERtVjFUYkV9H9+ARj/5pFPcd/VGhfJLh3eE4P387MKpyf5YyV61pS5tJN
jfc036kIvaPl1V00u5tk5x09UNRCr7xVf/9Wc4rpYJJpBABZGGc2l5eEllO8
yktmi8kAJC0206xcVn9/WXPpssEkCwQ0zfhc8/v7oe9pXu/vz05HQBnF/ppe
jvWLHzWnTBtMmoaAphtfbK6vDM1hemUWz85EQBeLz2h6ddYv7mxOmT6YNB0B
zTC+1PzsSeglpldW8ewsBHSruEXTa37D/YfNKTMGk2YgIEvjgGZpUaiU5CUt
mi1FiJcVm431MqpfbNTsajSYZImAZhrnNF8qCr1E8rpUNPsSyU5N+Dg6Z9IJ
a+/IE18VT6OMezATrxxwxSu+eKXUA1Xc7uCVO3jlwe0RlVRTvOI65gJzlfEy
1HJJTB9zIaak+b3zTG8W12CADKJzEWAlWmR7cRGhyKuGWSdKLEv0NKqN9Rnm
Wglbh7rp2dRKG7o4SXrO0lxCw9tZCVuHBRW6rg38bqH9ezLoKMlBraMZFKSj
oN7CRbpCx3Jrz9WCeJgtkwKz7WQhyWdqqyQ/7ivqB/4jP/8iG7pGEmOv6csl
R4othX9pUS5otyHNrNJWa6ZMrZnXXf10spkvxuOauX7gzLWUGeW6fiVa/2Hp
bAU1isUHk+4z/cZDWmRZ9FzLhVOYPA8RXE5REey8QE3wHHY3EGxAg15YkpRj
sd7zXEkWyX/sHwKsgu/T162tz3B3034t1vkscBZDf2cBVj1pHMN8YoKYtDTH
ZcFb8jVnQFQHEL3ljMYuXqgeewE7o9SyhHNEyK8QSrhk2sCZD1TjKj1uNtUf
GapfYaiBlApjrsCFsETdL4B9qdQy2TBTWIizO1Bs+o3PAcpfzuJy3SNFgkXc
dEnbhghdmLEZn9H5K3XPLezCUkuXCZeIGaNgxmN7J5brZgrtmPHpujwh8LRQ
V83TWSQVT68t8tbLZkZw6QTzJjSn3hjfyffIojXwvWdJdPWpDJo1iVRCK2Wx
sBf3JDElrDKqB+LpM6qKp8VLERZmEsAilj1QakkxyhGqvNMG3DsJjZirqGQj
7vaIIi9QFwmoS4CfO7xfvVG616fc+laREZVHu0dN8sts2Wvt0U0r1QbvtwxA
W7RxfBeq8f24yG98NjPam8DX3bg59b7BZb4Hl97Av1O8rI0KKinxUatkuoZK
JSdPKPqm3LqWNJGKczYGOLv1APUvF+DsM8TZKkkvzeCEBtA0gKtq+ni1kwqm
Rlg9SqfvZuF6V09K2Hr+8Nhs6o4qLcqsc/d8EDOyNFTMSFqnFskl9rN7lhQI
7rhIztIHzlxe7FGu+54kEYr9WAYskIZUKMBWGdGfarmwDLYjGQkM1DKKQzTv
A554P1lcZZDN3FNFL5IKrYDNW7P9vdmgSyKkS3vE74s0doGEqLqsQqUYbrEn
nLF61ExPZCn9fpzRQ8si06qvwA/vAVBXD5w7A2ru3DMSBpdbHyBPJ7hzRmz6
MiynxFJi4W0CXTKR/E3wLlKaqovGROG2cusjxdOILuegS3iKRoUrMDSzGNel
ac2ptIkf+B4Rmg38wpKtvRpINsFq2WSqhwqaWLS93Ppc8XQqZZykj86chhwG
ewI1fceZen8KebZPMrZPS4rNZjSn/CX2pyRNJZM5YZxvKMzFeETO/CZNbLvZ
0KdoXFKwtiaVvbpQZ+mCXv+jfuPy/MtSn9traZLbyLXQMYDB8LslTNfic/Bw
nazplFSfEbRjrw/jvIMFy/Ub0sKcful3a8lfc1cwWMxtFPI+LcZKBkP80Fww
K0uLY8utNOeKW2gku0I/IqhPlzMSNh0Vjt9qlvEmU8CSaAxW/Z08afOYAMlG
M8GsKtQlwAx1kXzpMsS4v+nomfFhRJdj0OWfTbM3j9kqWW8m4A9oMaCPnxkX
2/UdlovN96sVS78TY/uMqB+wZCI1uSiY5J62lra+aq/f8WSysHR8t4tcJyNj
8q29wBLn+TuSk7DcTNSRg7jEqlRzafrhwgWbDXcUGeBcOry+UOegq+emowKD
PH/7/T0MHU0yNfmjWMmmCffJwkCD7mTmYurEVUkLal3sojbdMuPo8DOCMFht
4vzaBfzSz92/luybGclIH1tPASFF4SwW66hY/HBRkjwjyCI1GrpgLNcqYYtP
2/yyxdrnjPYJnGpxXJ3UuHbhuI4BXH8/XLhws2Gx0DiJnRxAFvKrtpZmmgs2
jyn1zzRnFZNIqWP7YDbGJK6YTXGB9xejXF1dA4/6G5eZcawspkAqpuV2ZC05
ivscEPuMQGtwxAbUiP3uRtY7FuSeGkvQUk5aaDMx+Lu1SdHcWujiTIUuL/Au
HLaqy3RP8rhjQX70eMYOxHlXk24Xit6HjMk+qTE6ryt175TgHsmxOXX8lFYr
j2ZtVz3Q9/2g7/56uEFbkFVO7NiSbvNsJqwxwfMIXDq8dbOtvCMLK+eFoGdZ
5TzxnyEQunOytf/DN4J43nmp5Jvy+4J7EseOiInZwltsbooRybqeS4Wox9fp
JfxSKSVha5j5hGzqP1VaJRtLy75FfqmKofZLB9V+KUa3t8zSZUG9C/ilM9wk
nT+jp051fsvmGrQh6L/ZyP1l8VTub/UpaoD1o3QdOTFNLUyzYwVM0y/YDl16
UZdQvEv3ly6nqZutHxXqDLNiSvyG3A8hTKRj1DnHMTUmZ3Uv/WlZsjDFlfCQ
OgNn9j6UgoekvHAV+2FTkIdsdhVgDfyYzeQp+uCJgsl4JEIITlHP9js1yvoR
V3cSkbH2AoIXi42yqcPgn0MvLTmGZr/1ZfYT6tmv6Nb/aemy5AQxO1l34Mz1
h4bluimlKOlhfDXpu0tbcdfGk5ge/09mkSVpSUxJoXnkHzgmMWpM/Kaqk5rL
VBGwSncGgUkGNWFr9j+AyVTIuMNrx5xAmLSpMSk+pcYkV1f60JLiccsVUDZ+
v+QknqR9QfmiGvCu7omHliUepUqGAcofHx4q173kase8ik3fBQuI9fzp6gjy
q1rhDnoUTs9mWgv1iKjp0Zw6ZVYn6KhuAz/L7bfBMSiR+13tmS9qqjzz3lnC
S+XWz0qXEk6eLzF9mTtYZCn0PGGRpcm0o24JoGUz7Q8Tw5Z5NqcenXWb7yHQ
azMA1f8PDEiagGOSpcYk1yNiRjZzXhHRRbq0OfX5rH4rjwg96kTocgm6mE3E
u+Sou/zpkQVdFnzQwzM1ho+F8Z2Mr+yY//GecRURLJ6hJjhP3afFgzUrm+lv
NZ7AzKs5NW52s/ASiprzrSBqOhY9KdXIRzLcjpM8qCb5r9mS3HLrzL3fECQ7
SUwnFBSWWRYtK9dtoy9DcpVqJGwdXAEZwCbhNTaXIx2LMqFsNgs7Vo7yI+nY
q0h+R8aqBZ2rzo8m6916ZElZe2SRKj/6k8iP1qL8aC13U2RR3uj86GHZd3fK
rTPurVXlR2cOWHtEjG/gDxbnHRmLAupttdgKx6poeG1dlF9ufWnROoKGYInp
N49qH1hKvgF71O4+OwspcI9agb1nq1Odcuqg9aPm8RGEAmcBodY/aGdTQ4V+
QFE9oiiAyI6+dKmgcuc8YhlEE13uQBfbHugS8USLsqvt0R3Eim41K5IK1Ko8
X+9IuSVl49tFuCqbGwyc6WQuKNct1yhyg+zIGtl+mRtkR7Z4dmQtR6IWWKtF
PYWiyo4OL62yzmbGLDdQZUebNuHZUSySc4yk/J7GdMqo7Gir3hyrOY/8DOJV
q+I4W8iONsSUVOlMd7FGvJlJUfGm21rtZuqotnMeZRlkEoS2AaEhrabZ1F1P
tErC73g+RISWMdU2W6EmNErvfbmli+8gQWgxEHqvYkm5rvg+bgC+EC7s2qw8
ug1caSDNChQuaDiF9hSVMr9Y2j0nm3nGagKssoXWfBdYSaeU3SKTYLK5ZtZU
wS8w9Vs09a84zoVzVDj/2EjdNOeRYMJ5AmcpLWHrTp5eNvWXJ1ount0HKhDO
g2qcnWvVOCfqZVZYlgSfW4zjvGLCwJlPFUvLdTNoFe5iP4EtEs4zdwHWpglp
+gtk5mNxlLeoUf7Rq9k2m/l70QRigbetOXXxvPlCD0gOz92HbDuTNneCwUUt
mNkL51adeubf9corLF223yFm/gNm/vWQT7luFu0TzNyNzyxeIsBsdMBj1cPM
y3XwmaPUMxd5pdtlM7PMjAgHs705tW/eFuDvhEmALKkBugg1ifxa3eWJVxV0
yfEnuriHNKfaOm638uAaNfAzUhoKtTRISZJGgdLOtKIlXGujASHtj56p067Z
7V5pGzinnlWmxSm3vlMSShjcdXAaXaX3LCWhMSXd43evtENKlaBWKmyeWkAy
6oU5j8RGeSAgjCt9v6/4Q2UDoV8gq7srDbKpecJrIKUD2sjHEOaq7v3XAPXS
nEeFRnfZ3Tji4eDWnXaDWzeKmUqKKnoHGB+eitP6m5rWk8swx2xmAXsiIZgd
zambna4679YFg2lBBtMsGbivcQlQTTmNO5Vb2uo1gpOws9xaSt9J0NgKseBz
1UNL0k7weROuJM9DNF5T08h3VBvOIDVvziPvie3KqEhP2Nq9CRKIduGvurCM
RIRd0EVdIr50GaLeBbZM/Jvocg669FbPyKb+Dbb2uN7rPdLbt9pqW5Opteez
3oHHliW7ctwIW5s4cOa1zoty3Rz6X27i9c2OoDz1bniXgS/7HnonHlsm7y4k
uvwDXT7qlHkngFcm7QGvXLyb2xlZNACsLDLFWflazcqD3oVO2cwPVqaEpu0B
7jtPnuPBN42ZAdz/hLg/A+/y7gv3vbGF2cxef6KLuwi47yyz9vAz/c1RvYeY
ebpnzIr4L3uPC9/pnetSbyMWJTyf6t7wZftxKGtZet5K9bbl4PLT3NgL6h3I
T9VOwr+91DuXve2ipGcn1ZuQ73UGqZDIQXbSVfr4M54v6qg99RDOoRTgkI1+
L3Ao4b0bX7lJ1fZAoDGDMXBmy0LwIwPNaYOo63t1V2eFuqujfnqVJSWx1w3i
nbcZg3Zc+9hjy6KEmBK+9VD0QtCYCJfuhbjU4eVfOhoWNo+aTRXIL68CBN+4
/D3Ho8o0miaxVnbXOVluWZT4/s8UCgnrZmDYmyURqwQxHaKwTKqbhuvNRtlU
Exa7Qqy/63HPreEauy7e1IncpfQn3HsN7Y5NirlX5GWGnIRW1k9+p8leGq47
02qcVvTkpfnkCFaQ2JV1OWkZDVAIk91aJpfO1Zw0jvU61lcuLaKjUkyivGzy
omqhjfth2U2vmoWH5NKlxItGuXTMWCi1zBdBN237cax3sY/l7g0yp4BMyjMB
g13Equh1czWzWZkgl+bTvSlmrlQXm2pT9t4qz1gZ72sDhKHGlbq8BoW8k/d8
dvoqwZGOoS7eUSdUao/t4tEWCrRSWGzmE89EV33nOZ05aSfiBK42lBX1+Xdl
g76tOWn1mqj61vGy7HM4zHuJtETD1WFpjVOUF+sJ0/2MLKexbmGlvEy0GhFw
rWm3b3X85epEwNxB09ud9wWfvi7ePqOsVYJzNfO7eE5RAfrQu6jd/mq1opM3
t0AuXaSNSL69VC411EGl+Rvk0mAalP7K95JLx+E8m5sol5qgtpaBfJiS7o7m
jOz/VNmeeLDVKUBCBdxyw+qcAoYoqOTV7hT1O4kNE0X2fz7UkbgU8P+HPJJv
eqfk0iWao/hmK+NNcV4lWFVXmz2/sHn2oR6WgfWnsnE0VzSXpONGgmxhGhCn
7Tey0420ZwtkvOeOiK2ywS6ewRqc86eb9jQq4N1gJ+/N/FGMfncj7YQBwecr
NQOne5wCdnlouN7a0OrUyes3xDXt06EOh6GanE6ewQRc0/Ze6b+zQTH3oLzs
HkG4pMN2WX/iyQ6ngDJEroNvtVPAtxTQvl0VHU4r+m+mcc4JVpKWV1TfabL/
IY2zBhQwoedGGucs0sm71XlpJ4IFc01ck/XjT/fHDQH/qq+n+Qxhc1nOrnzX
OUPs5YyKnBqngA9o8J2nqp2ifiQ9iWFprWjOu9z6qQl4a4pX2+QnZXLffqeo
c6S/UP3trqaaT+GgpYDYJYTOTngZUJOT5hOF0PFqzVW4pqRxmgCJja03wB7y
HUCgH5fKcxTGTlGPcXlJOvrvVieK6pyiHpCeEpPkd3zyrbud5rMLYX+l/Xpa
7Q681HQrzScGL9XcTuMkQmn5xg4oXUalirr8tPXf2CAid4TJYoc7bqXVr8Sr
t8I6YoZb89N8riG4sNY7afXFbRvIHzyl1ZdKXRdVnJZL945WjDgZb/PsUUJs
yUsz/t7NUlei/zG0Q3SoLvZkq7yxf26lYqCT1zd3JORfTgEXcFYsawc2AxIi
7J7TWOtQcQqj7hXjYWhrQegieH39bk/u7OWSNM47bK/NFykcAdk8JOs//aK3
1aD+y2kC1zlg3U3yCsWCLt74GWBcKXVzu8A0u1RMq6j+5NsODDITAuevNOUj
ztcqfdKNNJ9gVDrVcSMtIwgvteam+XQhfhyqAc704KX2m2m1x1eC72q6s0z+
uIVHN2bRSs3Z7subbjS239pQ47CxbqeoNTZBcR0M9jpuup8Ogt/CSwOX5dJ7
2qPYuLOL92C80nPmbVDkdfGeW47iasOdtNoAHMWe/DTjrdj9EYwStScubXKK
snw6QtGkaT7Do5UWHMBTykh2/QDuMZLGB18yL7xnbidv87RmMNSe3E7ex7ty
6TGkf/FK/asnWFcvutvz0bcVeNSLuIA8eG0bKt0FvtW2o1JCz/W09YkCF9yI
D1X3FhgFIqwPtYPbx/E/1ARM/BlYt7EjD2cdzR75h6aBLl4qJ+La4yRPI65Z
8Q37pKimgcdgLBnUqhGu6YflOqP4Nq+L1zcL+q/qgf73/6WIt9MyXuM4gYLX
ynA8gXn141Qepvc0qJAUd4+HQD9aVE6xsiPxIGhkEql65MzAIPtm5Kkdu3ix
y+RlJvORop1qctioAGXgCmH4K3Uw0ek/wEMupL/iHZ0WMRKdT+75YPE7kEM7
WQ0O7X4OkN0fA24/4AUJtwKZ0wqw0fWbBa649Yhqcof676Rl/IPzuga4fg73
UXW5aRlKb3UnzWcPeuvVn5dWm4WrB3gwTjZuvTKAU4zWgSangBujQ+QVcPVj
R7E0XsZ7Mw9pQv+OTl5cqLysBVnUvYaOncsU/eB3uSOd+IB0aKwNqLTdXfky
1wHpdRSGXtuAN35CeOPDMjvfpsST4Mk/ohB56y544w68dApweY2XEkDK+8jI
nYKHDviESrFXQZ//xOVxWDZwpSMxtMcpav0TQgev1PSfhpglGUWIXqVc6j9a
N3Z18b42EqCgsedQz7whmK8GBKVAvLlSDb4woNBmBG9i5GV/CglC8y4rHDt5
i42QXlZ/BLlPHiVH6T082DpAqnISL+VCbuJPtIHhnEGG03cIN5yAx3gMOgXa
VIqXEoATNXjpLtjja1SKLYBSEnUkMdUw4LvRDuIT5FYcljJzud2guAMI/gJ6
33Fzg7zs4Gpl5LvavrCLN/exvCxU6QV33lVc7+L9pKcMlfMSFZCk0U2VobQn
Z7gGPM+UhXji86mTd0GDyOZk14fAYDkrgFWXUZoWVriCdHgjpG4DZR9pyjDb
d0qWuAHEMlXaZF86+dnHw1yU6XlXGyQPHHRZ7yz6+Q1uca3X0+q1XtlpR46J
DTuD6P1UAZLIwEuXQd6roTCQD/L8HimD/SkYsVFtiHWJBwE4CQc+CMFUSMwl
f0LM1brFGKfks1ePnaLmRhfvAjH35dOBAmU8k/UPQ8w3ZuMYzE1cTAwwdPlL
slCTeBIEcGCUsetBDngUAkerDSQemJLrDpUKcMLPgKhGIGqgbJoZntpW16Sg
SZM2mOrjk9wQrcQnqb25Gvf2gxABRES+GiaXHkYpW4sjymbx0u18SJvQ29d9
oDvLcbg7J+XSDXhbXJq8LIiYpv3CPnyahrpfClEMBzuvzTPRHaUku7t4bxxH
+cDXd9LWG+Bo9SVsJtAaXEsM2Jpqytr5k2C+3iubGVbLl/c0XUjCmRe6bosY
yb0/RsajTUeaUQfp1uYjwI4ayI3pRkrlkUEeFtvJe6DKy2S3hmqAXTU4msVL
1/WPitbnQNR7R4UfvUZ52QsclYg6Wjsafa6sejh6QLqcyHmBCWxdVMoDFv2G
szK3QS6djLfNOyQve0d0bnrujmfwuzp5dhwxPvnl0/4YTnR/2KtRXuKHu/Iy
Eg1Xnoj2mggcOPR3pHg7msA5/4qyEYfToA7VoDP3WtAQn/YiU1p0t/VTpcIW
LCQS7xR2eJS+rITgRUZsiL/afmcIHPT6TQQC8YkGqYjrb+l4P3ICF6/2GqTi
w2z4GU/4aiCJKPtIkNNKN8SJIHs1BRJj7AiNgqAxAE60k3djPqK1B+RwwZjI
fxtl8zcqrgNjgojcAjRrL17a4SsvW0vQKq67qRw0wVcDRb/mzyfb+30hkVzO
wvPKm14diV7gR/B0/kx7/pWmglC5dOZo7brdxbPDHcm9ivbPjQq7Th49wl2P
tTQx9DTpK+DbhhqnYqO/C0cGnDae7Ul5Wb4Si544wtHc7uTZjk78X0NOs1O1
wurv9W29nVZvqArTg1cB0T9IuPY2D0XiOC6vjjnZngj53n7l2O0/TSAovLKO
8FoQLr1QoTo37UQAwUi78K88CPm+4rmZqBaq8gTFR0DyNTFQejXNGPf7tl28
NTdR7ninC2LWCdwFHQJn1EfEMYhPn0mVeEDak9AzlPbzTiLvzk+rXY2WFLL8
NM5uIinPS6sPFxBcz28f9IUkslaEJ+SAGqcFd5LV+WknHqBlQA04FmTlf9Hc
Ry4TnQLaR+sxrC3N6ATC7e1K2R5adx0N1gD5uzFFmd232w93OEVNe0Jkhldl
n8LBDttJS4ENDTXDemyngJ9GZzmgyF84c1fxsUFeZoWvws905DfWLAT7GaOc
tymeqtT4BQrwhz7ReCLSDmvjKILduWGOwKrrGyHJ8vIg8ptXvHiTCHz0hJq+
jU27T/YnimROUZ3K5Y3dsrrEk8DjLNKoHGWpvGw1MWlm9Rsj8UjFeQEpEwT1
rYjTjSgx/R1PjKAtIwRP3nsgz7+Bp0OQIq1frIwK7bnDNblp9Tomg1OK7Nl9
ijlsh9lZ3qWKoX/dRbm+bH3ZKhlEwm3EmuB2mrHQ+H/Qp423GXnOFNkt0KJp
KD/tB9+cOk5psbs3KCDsxtMR/yD9sRuS3Uoz3kSErE8JHTuGIE3N+FsMCtEI
K8Ta3i7ejXnc1ZCRxcoWslt4thVyaa6mJcrPK+XX04x3EPz+LLqkNJLbQsID
VMrdI3X5QTnfaen8sO6VnUPiCwLg7ccPSm2vWYOvzlGcs5uIq1HSoZ8v4vyC
Bdn6XcTIeQnvlR3lDkrpywxMcHDnStOXIxdtoroCWFaIdCAp/EuUID8I6VIs
/d+7AuAAUtUbRbsLFLHgez4pMarbYuStDLh3Tikgn54LCco8fIlwp4t31AEv
7ZLxvjYlfL1XnRyhewrWqid2EujuSpAp0b1z+V8poYxnp4+PfqpuXoHCTsaj
r2F/58q9d0i2Z2nd3EbFvE7e18YEYYeMXoEEIOu5lfZM1MkbP4E/ak/IKeof
5SRDFTRXCBF771YPLlXEiuRSLTwXvLUUPPFkKNhDk8a/tqEgoC7APTmkY7b4
vlPrEHh3wj/CbDc/ojVNThcPjwljTsSPKZ1j5pWtqzdubmKXavvFzOd9Nrea
5i7Nmnkos95W0eoU1aDEqU9DvQ10pSYxFBzof5RLuD2VdZ98YeGQEYHbax14
pz1K71RR0+vbDguQEDGuiXmNPXGKmuuQaJqOctYvctJ8jsECLqHpFr6AW4N2
0FJ6dnfyaBao1JEPi5uZeFs/JCQ/QqFpgYy3RVcpcAdfBTjXLcTOYfxVmeNw
zU3Q8Fl4D4cunoEhht7sSOiZq+iHVXjwqDy9VC6tmAlc7T8oB1fjqjboIXCd
PviSvOMGjtZm41FY/wUr1Pe4s5VdT6u9jLuJHmhTOgxYK/XhK3sZrBrN8MUc
+PIMc7wELnz9WhtiU6jj43AHpLRi5cQ9u4Zbwa3dN8FXTLEy3seN8rJYmnLx
c/NQf+LSGqcA+6+IbYy0WnzDE2EoHYdv480/KJc24AmPPUTcd6hpHpj3B3xn
7wZoTiz+0hHWaU+IHAhc8Av6pZLHAU9d+Ypw8mPF0ML+f12+q/n3lbrT5CRn
5jf6pFr8bl3B0AVxJit5/CKs7yo16+1AuLx0r2cqiWB6h8Nwza20E7vU0XjQ
tx2W9MuV5LcPDbeCS4rFnRMEsGewyvrJQLm82N2ggCThxmhL+egUUIbHTC9g
RBO+UZoPEfUNWud92gDe/gNeElU7RVUQOtqcl98x5NsE8vxt1PI1Bro9Gh0a
gEF78Uz5M+Q9B3FW7T4FGoJ2ilvyYE14ksi3G+XSUF3jcayGWxWnv7MZsb33
ijcu9VqL/x/fDSWUPBqwaZibml3dO96o66t1Yf/KZK5D9t5CH7V7G9fJOz8T
z5BFMt5NDkb4c5ndcA84o7JRbrG6AJYB+bjTvhEGTjsjCje/VlAJ5eIqHxbT
B3Gx20LC+260w7gB/tlYZTB5QzV9sDQnzE4OZjcBlfrB2Nag3CWlPb+L14e3
te8GR4kpHZ6DFyzY6z3+v+LXDTx+PSfMMRcMmDDleBlv0l5ri2KjGcm/eOyO
/mH6L//5IVr+e6T/7t3JM0o8fok+lrzJ45ft/snRSxzLxVvnSWnT/l53NXpI
Fm+a+1ws3Uo7d2vnyZsfC87vNnV4hQWj9zH57bKhq531bgfsmn8Tu1/d3Zho
Xuy2p3QF/YSm9J9TjaLS87Gm1+7+Sja/czf4dN/hnmTpZsG3t2s+Gin6G93e
+3B/E1vcjH7pdoAPJcaDzjq3MBuu+XHStN6Tb0LlV9/Vu12y8yMGdtvT9pBy
7h13wrnC2N0yWcH9naZWPZJz5LPzrwabWq0mbeOmSP2kmz/zzrKOv7siKs2k
XJSwzJPMjr9LkzpvPT+h/3CdzlY0+881slPD0Y/GuU/nFsdP7D/cqhNxPnlr
+quuntuyxIYy+vea0qg7NaI2BoV71jCdXCMbOp843Mdu1U+fzn0oz+s/Le0+
fPymqNRWA9F497zo3JvtplaLkwCV9Y8BKRl2gXz2zoPtpr/117m9DwYKZdtf
AvYRBPa35HseywquRJpea0DYG9/cbuqw/zvR+MCX2Bj2jXvsI3VdiuN9bCNt
wO9h8O1+dg/C9GGoYz+7ZHwmzVnK2Lf1/EJzzTPHIl66lS8UT2CYmXPOHhuW
WqRs/iPc9Np98Tmy+QnZdtNr79D4J27uNs19QEizu/5NxxC8sZLjfKsBOVrP
G1iaFGn+XrHFPGqj3xmpQq7QZ+kHoCvDwz9i400U20/fSv/tDYzxOz5El1PN
u+HH4aa5hRhSiMKe3Tc/nL4qattlAbxKehy58YKizu1vk/7D0UwxYvaeB7H1
w7tfunnhUh0wbo/9XCAqdTsQBuIu2P7ygqi0GzH8nxM1otJzFChFNJwXlb7R
QG3yG6LSYtQWtQvYvQ0K2xZA51pge8Tt+6KXidqm175BlBwvCDW95p30C/ns
7gvBJeNGMSmszq18JWY0kkkgsGjTa5Go5/omUM9hxLH17fGmVmugzXxPzU5T
h1PbELUDg296hm+KzjUGm+YqxPuQBew2ufqpwE4m+ZV8Nu/xdtM/5dn7ldpz
Qqao62PLtXymc5+G/tzHNnWoINj+z1Djh8+y3aZWMWjKwSvRprmd2IEREpc3
KiZcFZUeH6mwU0w/HP4lCViomd8ef1wRXecWElmILOFTo9vfE/vZj3SQVmxv
6GPfXjKd+3ssFKKjQaO31/cFKxz2tFmexU0leh0o211RaQbOxwlNotI8jVHT
3OljJ5ugoeI39LP1tJBRyEHpHJH6FfecAqXD30bO6z/8i9ZFRGrS43AnWSLg
k9fP/kU7M33xF2b/Xe/mxUCCjhiq3D1YEG/qYIi0pCx+fvvHpi5R6Tca50GI
G9ojfb81LnwgeunGFCEP8Hh7nZunFe4BIuvcDlhD6eLzfni7EZXegH9gpiO4
GrCjWa/MiPE/DMtEpbtGEXNe3sem6IwS/7YGN8+oUTbyELzFbyOdxZ8gKqsu
3FYKQEjNqLRHBhrlgTRq3YMeD6YU0U2u6Ry6m5gArJ9kP52bF7unYDJB3PoL
naaPRW3bkLt49Sb25AXF7b7DdcjTaYouxP883N/g1jWfS7Clcffg1Q+Nblcm
E06ua/sQMgfm38hLdCidJ1XD4hz7i4SM+tmbjMH3PO04hfuevMei0kHcQE6C
qYxHpe58cHhnjyJ3BFx2uzQDMTCywU17nuC49lmhZn7TzvmKDnnf4ZLbtVuE
57XSWf7rjIW5MnlTtKlV5CjXOQZMjTFaRcDzVOMkfzxx9yn2LdBcFZ939aOi
j/0zINCNEIhIAIfZaNkhGJ8UfZx0jHXht+jPYEZW8cigTjwGtg7hLqcdTKuB
CCW7RY8/FIAtONxVORZAB7qcAqYbyT7VSQj+xU5UyOrdrlDMx+8XfHvq6oeh
qztNr/2NXOyJx6Gmv8XWu3XxMYK3z8OH24GeOjGEm/zGSDCgaK10JDnzJpmJ
TJEHyM4jfHYXuIBIUys/HLsL4BADEXb1leGmVnMvkM3rKyFWnS5xC/ka17/w
ejfLcFDOm+GN4K9e4paUB/aaNFr5QE680cr3d4Pb+38pH7hlAZrrTmOoqdUG
3N2A47mmIFzQbtNrItwtyYCO9+LtI7XUbRsY6G7jCMK7HM6TidrilPEw+ucC
iCixprmPCKf8cd2DjwXgUPk4tacqwYEBY/sl50ECD3Yq9jNMHZ4R8bvLqenD
4NXgBjfLOcj8HoOphSBSr8Y2AKl9iNR/vnkgKt2MhLyt8bmoNAGVoureiNqG
lR5m903ZaQAm4977zhtR6QrKcVDJu7KhqeZ7SitH69JgH9tDfxSTQsBCy1E0
iG68MNTezTaajFSt/47tAyKQgZxe4CYJ+pSbWzYvfW/tCdJ/ej43AStf4REU
Qu01Ic5UCMS5c5Vx6epHXzAUXfqVUU71t93gYOKRM3kQWu/mubIQGd67Brdt
p/rYPK2t4POiG/rAytibJkLl4YdBVDkcvQMp4/yC6PkKiBJ9uCoXwKx/IhSN
a0CBfCAgmNff3VnQx9bDPfO7Bf2He1SZRfSdxsTGEDyAgVi+x1kobxS1vTUH
iym+nf5bZX8i2N1bIuxVikoPjFYtsEBH5NxDN/Yj5176bHRucxw0D+dafINt
FBHWIGAPYo9uU1+BLa7dv//b44o+ypbCS0eaL4rfNn4cPIfLrkouutC/EDT5
KT7xbRBq81kiR1l/s8cX/Osh+ihXdLKPXac9Ig36BkByKKo06DkYtx1h2xtu
dvpCrHEac3Ykni9peKx3BFK/oWeNlAskSnl9h29rZSY3TeJMLR5OnGLerjH+
24ECxTKS0Iw281vsve8YvycfCvr2jz32fh4EHn0Un/ohzO4ej6dHIL/deMz6
CG9/GOeDQuGGfpBRxSj3Nu2mqM2L8rbZbsz9/VmK0/vLdkr2mg/LFCsF3lLh
d+aY/GuyT8zgTdEr5yk/3xC1ZVDMwak7y3ZOvKn4DP7je/oobc7vY28yGJ2T
1btpW+A+Fzg4PBze4FZ5QVnduUARCTlhvVvYPMiVL3b1vHQbvG82q+UrFDec
a4I3PEiE+MVLBsxlJ5CcIZpqT0Gdv91TEO2kCG10Q98HsCLut67bp9Vyg9lQ
FGo4P6XOeg/jZhCDAoUDpOJQwz4MXonEEev2LRTcmuliwa0/ajaVFfaoWQ/A
LLQA7AQNwD5TAEwhATBb4a2ZJT8DGMkLwFjTAYwzDsCqNAEsRAPAtidHrKPd
ADDKewATxgGYwOn7nKB0s+CX1s0sAIthAFh4Cozm4AxgpkueHT2TBmDdbmi0
qb+9tK76ITDU8O8xANaPwE5+f2UmZa1Z/dEzlwDMbw2A3Zoxps66eRyM1qsJ
YP+ZHLSO9hxGS94OYEU3J4U+8t749EZQ7WzArdcAwFyZADZlH4w2wQVIOAhg
LZUwWvoWBp34rgG6Q3yGgu4QJ7DQHWId4g4xWzzBQkqezlJeIBYaHvFcfsRl
DNufKsY2UbmMJPQ/qaKEQyKKjH8UfPyLCuh+sfWX+8U+qO13wdj/dr9YeV1X
+fif3wP+XxuJuCc8h2/F/y/3hNEFYPTdBnZRJn7tV2ubQDOFTrcO8EaH6M5h
tKB0F/UxuEKxZpSF6gSdM8eb1FkksSnJ9NfFr+D2lolDnmWR2DuoVTyX4rUL
rC02/MUrebXaQT+uFCsSsJjOEi3yfsdkf4ozn+F3PNlZOIlzfuHWfUbkJcfC
0s/63TIzo9hkBAm+92v089uLZUzm0uZpa7/VmNOcLjlUQikuZM4PVL+Zfmgd
64B/5qta6ibORT+Nxfx9YZyUuXwKurJkq76ytIOivrYyjuyYEWRxiLj7k0U5
OO7Q2qRfjGhU7efiJCyXq62+TPMWU138+X6vn85mw6NTMt5gAlYkTXv8cwDi
Ug5h55dMZ7nqO2LJX/skO3KTwziFzdptaBhMRz1Mn3qYh3sF+psNT1ng95b8
3wtKNLYdzXy37wxzoFnbAl2zQZe08NtOJH31bSdfhpf/UeFZ8in8ftR7QYfG
XO5kwWbwpN8KxJNek5cDjWfHIBotNFQ0bjMmr8kIungFpzHwD8pS40a/o+Kz
MwWz+BocW24eug+Vskp9H6rSTLx37b6Qsfg9HkvHqnJ/7c1jroRxLFZbaKA7
TWuUd5oyDff9Z5yzGaV9RdWkEpprM40qiGZxbeiqmzTinUWWJDv8XsULSZ/2
Nr5HVoVufZHg3hl6mFinVrCInyv5xq/aWF/T/DT/SbJFue4OyrjUheszq9gc
apnGTXQqm4OfmX1LVt+f0BHal1uLJRxqiRZthkW11qUszaLJd7ESLdK0jCLL
ZMMTxH1NXVpcZidlermulLSaFCW0L8wiRWpQVcd8F2ZS5pVbHxAaEidvA/3o
xxdmFVkKDWNKCqUus9HpywPqG65JDuqjrZPYOSWWlAkXYQ6o/0GjTNXNq9Jy
2avdiq7Ypn+5YvtefcX2N1e+TjYzpJlGHFCdUCs5qltjKZlQhUjsBBJdDYm7
Buq7vq91ixaUW98RGlPnI0qeAiXXU+w8mmkxNFJS0Xx0bPowjUTyNrRZQmeQ
OOjS+GIsZSzJ+RaLW6LlLKZlM9cb4Md8CyUmW23MNNtoJGsPFp0yToLRj05Y
n44u2JYK8VO7Xy7YzmMfKLVMNq4i2GdNj8t8XTqtXLdKeOWLmXslmSatT1Wf
ds2kLqRmU2OrtErmDSY7IaaJv1xhdVcfWfVnXyy1pExsE6pOu4IKaMxgxPkZ
rLNj/uOna4auaUZ8uUo7Hb+aygLenVnE0stm7spC1zSFe7mcrVsidbKpO4Hj
My+lLPFG5Ao91POEsJ/BPKa9QuXR2JffvC+xLJpYbkh9qOy+Hd0yFWXlsrSp
FPDWdF3lQRfRXbRfvXkCOvraHx8eMPL3supO3tcuIw8t1X0Ob6IR2+kNrZ/R
AUDaPrQj7/NkBenJhp7ctIGyY/gvmP49txpkBQ3yshZ7/CRCu+2pjoVhgUs0
XD+H1jgFxH2l4WpX0Z+fxtkiWEk6fKjnOjql5nPEZtSe5BvO6D3u62kZq1aQ
Dof13Eirfzhy//Fgh0IklxbRjMexWnov//w9DBlWRxxdw3cPz7Xe6eKd5+Al
exnPgEJsZfbfHmq6nVYbXLic9KSh9UbL6nGsBpuEmrv6DuI0ecxSedkC5S/G
orT+xFB52WQBOgTn357fULdQxnug4uBQIzp28uYnNHpOJ288miemxqaLd4Mo
xXXxbIm5Yzt5NcQxhKWn3QJNypx3GFi/yB+uu5F24tAcYse9NW+4I14X/Wqz
t6I97jT6Hfq8IRqmGkjYfBRGabrdif/scK5pZxdvKlv5a9KCjYq5XTw6cUJk
w7oQoInt1Xq7wQJoytlQ5xS1QIv4EbKyKTHc/fE/WHKBfaUL2gtFJ19j6lYj
xoJA1lOU4m0aRGdLdyOJobPHP6EfweM3oCNgL0ZKKUUu/TgJ5ojZIJc+mYYY
mAjQYlKqjBcn400lEweU+h0U6FzXUtCSpe030zjLUaEpL81nIyr0X0/z2SQA
BE5VX09bn7p5BGPUSBqBfqZUO4TuWq7hmneyLqFzdtIkklPAfrTjPu9Qu1PA
Ybx0BSh1wClttzslSwz7fvSGeqhc2oL2yeef9BWPUqCagk7e1MJRB0aGX9nr
RJr9kFa7BaF2qOdm2omlI0+LJjYx8d/jros0qoiTlw1N/aflZTMFxNmbuERZ
oox3lBDeYCevP3KkJbUOhDc5BWxD7BUB9ui35Dz0YzFdBz8VtiOxtQDUBpf3
XBgFL8i7eH01SKP2wCsZ72Y1C1fj1s/DslRdpR7k31XEd/Ie4Ic/kkT6xAGI
+LS6xJOqAxCHZfFXmwry5dK1S0fuwV9PMy7Fj4T0LzXGzxycJk6I5F4eBZab
tr4Mb5cfxsEKT9/Hq3lsmudIONCkh/iLfP/J41jv7IDzVjOhEBcmz0nzWQcc
TWjNSeMQ9pyTVrsB2Wz7Dd+a62mcQEIX8tJqcbievDROEC6DjttpGctb5NK0
Z7r396X+OatPrjW7tTqmxrjSq3pdyK0ZIizVhvSkt+Zrtsq5JaADYg/Ya+l/
sH6e4xeXpojr5N0gfN1g2GWSG+j04/41F3D7qpRLTSYjDb4il85FuN6oAFw5
XyMcQGl9cBxO1eSmcbYhj3GwKecMIq3/kFz6I00wkvg1yDzrhrp4/SqxDG1U
3Ozi/aS21lMKkOpz5DKaRDLeOcn/46eH4//1p4cDFcQaP3v34M3tiv3SZIxm
/g87WgstcOWNN64Ej967y2aO3oKsc2N6OU/4suXyD7v155ErtBhTh3HELsnt
mk+KG6LSPbAmDcu7Kyo9ceQ1iaZwYJnm6hIbe3dqPjTBmjiQ2OiIvd3Uo3gj
Kp2INjp6T9wVtemfgsLPD0Sl4cavdJlWo3Z6fg82vVaCtgdMHoSbXpt0gWze
UBlK7Cqh/U33B7H1biHToXDzU73bpTl406eXbuVzRo8CK8Zn2PkDcdda/KM8
Bqe0y+7/M0uyY0pp8JqAs2ffFAwVGvJ/XgmMCW4AfNZz8U34D6cuKBz72TO2
T+c+leG7GYdvo814TacHcmNFR4PbgbncUZM8bgk4rXHMVuCcEhpJfX1fVnBF
VEpFVHYdbxS1sTIR+VnRjV2fEvvZj76C2bb/3H+4NZLYFA09cTOxsRix5PZz
UWktKsgbRaWaqH/MIIxki0phx2Wi0rvopWO7qG3rxpYtVsHmGQo7Sbti+LRc
gf/UgC+9/7XeHx69ML8KC/PzvIw7HtxTYyKP/5hx8eKncNNcBhJXVWze43do
qzvnCCGVc7ZPxb+Qz94uiMeU6+aJaN1Mo565wXwoDDUcn/LS2oZxPSidte0R
3+zZUX9tKGSOhZZmDXg1SHYONSwmAfArsfe6fSLBxZkuC7kANgXAvPUArHbM
kpfW3VQA20MGsIUS73W0awBW4gNgZyzPBT+KGA9gPmNTyF/Wokno+5HUry3R
J/zQElWfQ7KQwFrUOlMoPOLCPiIkHcSOCJbro0/66dPpT40ovVx9qns4c8UR
PB9yQemfMwu//MakttM8wplrrntHcBv4k35yRXlWkepya6DqltC4iVR//iNv
DumxEfMSC2vgzzdZjD4Yo4bco4L80ZS6hf8ogqtKx0SCCl1OA58fULWcxeUc
ICmzvwr+/KDMIP43mprn2CmZTGvWe2nRYYAXSyx2BLNY47gGF9FNyzV4Bmqk
zt/+w6oqsnQ5S+XRNMYl+WX+5sxJ1+dmU8sEi7jGAQLiQ0yr8AwxElNliEXO
6fRs5lg95f2mPs3Ngg3icl0LyHXT3e9rxKBPJBFLiFr8e08CyK9Xj5WYllvb
eCnTxAkzL5EiIUEuRHfTzM0M2hBuvngOO1GNWx7rQLFlCUVDidtrsnG5rn0D
3zshnY4+6JKIER90Ecxhfm1RRdIgPWW6GB1wNvX25lbwQ37tpuvrlzWQppVp
7LNJ8qamZhQf5HC/AXzdtPeySsldkuliSOqf0EmkdD2U085Qz9vBqiq2dJmk
mvc3F1gkCaJpRcZKgs9rBwmWA8HuQDDLrFLjKiJ4HLr7xxqrlu98ai7/EX+5
SmqyTFo2Vf9PdLN9LLC0Cl8JOM9Uz9nL6oU5g1RzVqCFmU8HrUXwEnRuTTQ6
6iQKs4KwsfN0j0GWJ3jzRZdbC/AjjLtE7cN67BsxqwSB1XPDo93wljXx6Ex9
f4LeY2WKUP0pvHo8wJyrdgi3hV6xTT0JrZ5Ts1iQ8S263K4QjdfGTwfv8q0u
EPkW41nhrsae3YqaXi3vkQdi4hWt/d2exJmTPacV18M8YUbb0Oo1cQiBvjAX
qM67XH0er8aFxyF8DlYvxqf+LKJXEkcRKnrkj41OjUzoVlVvqWIRp45vD8vi
cPxzQ3ei7idbbWNR991hu/CqbA1elSeMVVJX0f/Rt85t1Lnb9qktRJbSnzNU
M+Rgjw5un26dn6aIDduOED5YczQaDWITFoJXWzfjGOaErUH4V1R/3exJnL4Y
PKXI64Tc7bUo3NTZhTjR0zPYtO7xctLyxv5bn/BXBUY1EKO9+m/AcsLBBIJz
zEmjZ8uhpeb2dai+iKlcV7McBxDhb9OMavHq7ZMQ71/0bqiJE5nuRYO3OTZW
fw6vGY8TaBv6FaRntks7YkUsQjrzmjoS89dVQ9+N1bc/jIr9b3CGfw4LRyxa
2n+hGZGf59Uzf6jm+gaUVfQelC9zzXiG8JSha1H+Jnjjz88RJk15oXi1wbdU
uSDojxmquXNw0ciDGZ/nzkeJXFG73eOmxIN17JQRJ5Fjxj0m7hE0Vg+F103R
H7WA6htVfREXjVC1ETG18ZzTvqkuUfTz1yOV4YjR6lG3CNatGZX7G20YWX1m
VI8YUpfz6wLEzJM1O07W7MpfRzT2kyyeUl1XXm5KDF0InLE71T4lDvHWPtzc
DVlBjS1uXPla2Ii9SQzFAw88Hmio4wEEA32hoX4VQ+AAbaU0+lNeyVkOxIE0
plb0f4kDP9GWpDHZR4g48NQFfahO7d291bdFjan1li7+1Pn4Mj2mpNtvHPqK
BU11ATlTovIQO1nSIssSicpTt5DmevjFlBTGTED3uulqV6jD8TO0/ylpyjvM
rNACYz0rw9BHYGZxsa/IbUnWaA8J36eyx/fixOjbNvpJdhlB7kf8SjMznVnM
nBWM5LXkwEpuxmKm5nRqkWDG3pCjgrU8YwaGfQN0H0Vm0r4n1Amp2ZVWwhfd
W1pdEIr8wK7Kjj5kVu2fwzzwapOdYNTqYzBtHRst2VvlodYoCT5YQxga5MwL
Tivy3uGHiQ6tqwLZnWq/8QSq73Z6qeyuob+3SemaQD+HhmpyXiCATxWmYvOl
ApsXIkXNv5wA4VJgHXhnWDaFanbwixKuLUdoNOU32VePsUTL68jqj4nrlo3y
SKeTVPMO+NacH63DU6LQguhm6CxEhagpLgZVd4a6o+rJJlo0/jbMbtQtK7QE
fOfg1SRRkbBH0YN7ofaBUEvErrCe+3g1T0uti+a4LrpYqr6/bAO6iL7D6Urb
z3/EYhQJ7vkxqFkQZpCS1AsXHeCwIN4WmQogJk0AXQsRnJDoYtlUoT0L/xbz
VLF+oTk7Md9XbG7PbLVJcPWkR/Cxp4OxYZN1n3L1yJbuNFhoxni5ZCzhKQHu
9oywDX0cHyGOD4nAB3OY/xOZeqZZABrDpRb5CZO5WqXaRiyJANuOrjgT3xP1
Q7Pk/KovCBzMuWxB5i5VpCxw/ULnuBHjkonfAxDpWD6X6Ux7/CsmtLBPZyeT
GUK+TxX3rQbJynrHLA2GdYiASiVttcc/3ayc4zo+x9wROH+Hj710dH5nflHi
nClEPzS4svUXGXpvJ77E3Iv4yge+ehgxnV323Dfih6eHKI01lkUbY+2BvkaG
WGySInzq59K7vnMu9ZCzUMy0o7I55db6ripgP9p3czxY5a6lxemQCW9MYgdx
12kGBE55xXkq1t8VY2FtmdwOXCoSYDxaGS3JL50eInB/AakeR7k9+KzIyL3G
Ulj1i8vT2EDjMs9Sq3Okab1vC8WSn4qiU7WkflzxMelcNNo/Z7qySGwGkjZj
JxqPRk/yy6LHdJuUaElo4JTcdasiueA5sCS/KnocK6aEmynkoM3DEyT1jusE
cZFl8h/UBr59iDcNfQZhO6byQs00P/6jQipKZtCnSRIyy3UtS2iuxpOofI90
YIc+uuZOf2opZGkjLs5CehaB9EwhormRLHU/yC5EeLIXDcaKmA/0l5f6Nhlk
MrRL7A+asn/QYN911Xh+bj77A77xN5mrkeVe6ls9ZdyoO4c3Ca0NNTqQYlOW
go39ngQmfrKaNb5aNY5svp0fmmJgHGelK7sgAaNRuBXhTRKrRfofelLxV/kO
wpEBc/x11aQiKo5ku+q725Fc5be2tVnmKeRWDXvBwiTqTzN8st4lad2d/ZY7
nKQzMJvxgaH6xHcQE8PQF9t1KUcGULxA7QWgxLPh6am0Ex8lLHoaw78B5fqj
i0z8/jUET0elfmIj3mNKePSfIUZ8z131RN/rxyZhmD1MiL7rboIRY+Ht9hi2
BNojoW4J/8JHtOdB+2qo/wz/Vo5o74Iy8hGqJ2pnQOdBjLB71RNvh3lZJGJe
1VPVbkYi7Fn1VLXbkgjcVU/V+MugPgH78lTBB5OI/y8P1VPVngj1OdiXp4oP
fyg/w656qtp1gFl6UC8egSeit5pEtKueKvg3Srg3/6KrX1nv/1c7QylD1VPV
bkAm6Fc9Ve2WZKK/6qlqXwD1sdiXp6rdXQnn/i/4tWRCHqqnip+hUEc/JKqe
qvbDZPT/GPDlqWr/jUzwV/VUtWMj9JGu4g+LKOtiX56qdvTfBrAFJgm3hQA0
R5x/lO1ca+vgsOCYYP+Q4F3+McHhYa7hYUFL/YPD0D/fxbFhm1DjJCtfL3gb
F+TruzImKsg/1C0oxitoR4yrf4w/+s3V29cXFVcE+QcS7//rd5z/69eZ/19+
1P1fmM5q9O/A+PfDg3ZEBG2KmRVs5eu7ZccO34igqOjwMKA9ZqdvHH9xVFDQ
Uq/Y0KCo4E34SDFbo8LjlV9AX7RjU1AE4gU+TmhQ6KaInbMi+MH2xJ9gW5sV
sWExwaFBvi6AUUzQyHFGDeobHRTj7R8VE71kFN9959pZBwYGOtj62vE3B/na
2FjZ+drz7W187ecEOMzZbB+w2SFwMy4UlyVhceGb8E54/eso/wggxNfFPyQE
b1i0IyLqC4xXULyv6uvti6KiwqNgfjUxK2N2hgStCoqOAQ77Ll0VFBYdHgXd
Nm1VQ7j7hwVCT4IoJQSaAGcWUd0CA8YERQEflQ0qFsFMau6o2R8FPAqL8Q+Z
FRYOxPtHz4reFB4RNCswaFMI8Yn34M1BiI+zomOAS3j/0e1BYYF4q9WcWfxZ
VtzAQP859gFz/Oc42NoHzZ2zKSjALtDG2p4/18HOf9PcTfaBm2z5m20D/XfY
2/ra2syM2DQzBH21/uul6k/a///6oP2s+JBZnv8yjlme/5fN439nwn8ZiJKs
kepE+I3/A8SM2ak=
                    "]]|>, "orcInstance" -> 94815920, "orcModuleId" -> 
                    95299456, "targetMachineId" -> 75835344|>, 
                    139782730577728, 139782730577584, 139782730577664, 
                    139782730571776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_b95dc1a5_c744_488c_9658_959ead1e26ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
1igs/Duzqb/z
                    "]]|>, "orcInstance" -> 94179472, "orcModuleId" -> 
                    76310064, "targetMachineId" -> 96070272|>, 
                    139782730564128, 139782730563728, 139782730563808, 
                    139782730563584, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {512}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "0d3040909256d940", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 128}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 128}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 128}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/Error" -> <|
                    "Type" -> "CrossEntropyLoss", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "TargetForm" -> "Probabilities", "$InputDimensions" -> {},
                     "$Classes" -> 4, "$IntegerType" -> 
                    NeuralNetworks`IndexIntegerT[1, 4]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Acceptability" -> <|"Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {
                    "\"unacceptable\"", "\"acceptable\"", "\"good\"", 
                    "\"very good\""}, "OutputForm" -> "IndicatorVector", 
                    "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4, 
                    "$Version" -> "13.1.3"|>, 
                    "PurchasePrice" -> <|"Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {
                    "\"high\"", "\"medium\"", "\"low\"", "\"very high\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                    "13.1.3"|>, 
                    "MaintenanceCost" -> <|
                    "Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {
                    "\"medium\"", "\"low\"", "\"very high\"", "\"high\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                    "13.1.3"|>, 
                    "Doors" -> <|"Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {3, 4, 2, 
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                     "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4,
                     "$Version" -> "13.1.3"|>, 
                    "Passengers" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {4, 2, 
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                     "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 3,
                     "$Version" -> "13.1.3"|>, 
                    "Cargo" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {"\"small\"", "\"large\"", "\"medium\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 3, "$Version" -> 
                    "13.1.3"|>, 
                    "Safety" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {"\"medium\"", "\"low\"", "\"high\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 3, "$Version" -> 
                    "13.1.3"|>|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Acceptability"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Outputs", "Loss"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Acceptability"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Error"], 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate"], 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftProbs"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/4"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/1"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/2"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/3"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/5"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/6"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/7"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Acceptability"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Error"], 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate"], 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftProbs"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/4"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/1"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/2"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/3"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/5"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/6"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/7"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.869029511511765*^9, 3.869029672415371*^9, 
  3.8690298177138166`*^9, 3.869029962054936*^9, 3.8690319985408993`*^9, 
  3.869032146176646*^9, 3.869033046831709*^9, 3.869033081970702*^9, 
  3.869033181770426*^9, 3.869033422798711*^9, 3.869034515971312*^9, 
  3.869041362920126*^9, 3.869041505416326*^9, 3.8690416172305393`*^9, 
  3.869042047972612*^9, 3.869043180241755*^9, 3.869043460594576*^9, 
  3.869043722163773*^9},
 CellLabel->
  "Out[131]=",ExpressionUUID->"2d4b7dac-d002-4ace-b728-e723cae6c8cb"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"BatchSize", "->", "Automatic"}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}, {
   3.8685364797630873`*^9, 3.868536496883217*^9}, {3.868600076169417*^9, 
   3.868600076637474*^9}, {3.868600134889481*^9, 3.868600135284954*^9}, {
   3.868601255470386*^9, 3.8686012558943872`*^9}, {3.868602902814464*^9, 
   3.868602903232891*^9}, {3.868943377521962*^9, 3.868943381357031*^9}, {
   3.8689434141572866`*^9, 3.868943425164989*^9}, {3.868943586951866*^9, 
   3.8689436089616327`*^9}, {3.868944023717293*^9, 3.8689440271979637`*^9}, {
   3.868944083020088*^9, 3.868944086825481*^9}, {3.868947817163151*^9, 
   3.8689478172894077`*^9}, {3.868949946458611*^9, 3.868949960076432*^9}, {
   3.868977243682851*^9, 3.868977248732733*^9}, {3.868977291844462*^9, 
   3.8689773017254*^9}, {3.868977346389843*^9, 3.868977377673813*^9}, {
   3.868977408389917*^9, 3.868977427933148*^9}, {3.868977539952648*^9, 
   3.868977554029306*^9}, {3.868977819969697*^9, 3.8689778435338573`*^9}, {
   3.869023762591353*^9, 3.8690237633179893`*^9}, {3.869023837158021*^9, 
   3.869023876685935*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainedSoftNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<TrainedNet\>\"", "->", 
       RowBox[{"NetDelete", "[", 
        RowBox[{
         RowBox[{"NetFlatten", "[", 
          RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}], ",", 
         "\"\<Loss/Error\>\""}], "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}},
 CellLabel->
  "In[133]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", 
     RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", 
    RowBox[{"HardNet", "[", "trainedSoftNet", "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}, {
   3.868964207787449*^9, 3.868964270803673*^9}, {3.869042816860148*^9, 
   3.869042853385454*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "cb4e621e-b756-4588-826b-e20e0216a57a"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"89.6", "1.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    89.5953757225433520262`3., 1.6437904423993996428`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265187726`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.5916486422153669489`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0592407979302793652`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4731670463548082184`3.", "\", \"", 
                    "0.7101302380759256794`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.4731670463548082184`3., ", ", 0.7101302380759256794`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.5248423300661150259`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0999617837201800252`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.3249187626257549755`3.", "\", \"", 
                    "0.7247658975064750209`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.3249187626257549755`3., ", ", 0.7247658975064750209`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.13`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.45`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPTms+cdiukvLNvXSTx7/3Wt/aTMy7dlfB4
hVP81v9dohln39jbFv5IflDy3F4iWzDCP+4ahrkwOnD6gdxZj97a/2cs8q4/
89p+Uf38KFb/p/Z7BF5uZJr91t7txaaG73tf2T+8PUswsv8RTns3b25Jb4t5
a3+1tXnRzYsv7RvOnFc30Hxgv2iqxKcGpTf2QWK8uvWdT+x/fZk3pevoUfu9
+xqnxCq/s3cKOrrE/OAbe6kvFjL9p5/jNB/m3odVIuvcH96yh4XYV4+rJ1sk
3tpvadn6OnLvC/soIS0Fu6zbBM1BpwHjlaua
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9558232931726908`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9482071713147411`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9520000000000001`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9558232931726908}], 
                    Row[{"Recall = ", 0.9482071713147411}], 
                    Row[{"FScore = ", 0.9520000000000001}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.04417670682730924`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.171875`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.04417670682730924}], 
                    Row[{"Row fraction = ", 0.171875}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.1791044776119403`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.04780876494023904`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.1791044776119403}], 
                    Row[{"Row fraction = ", 0.04780876494023904}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["49", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "49", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7313432835820896`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.765625`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.748091603053435`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{49, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7313432835820896}], 
                    Row[{"Recall = ", 0.765625}], 
                    Row[{"FScore = ", 0.748091603053435}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["5", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.07462686567164178`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.3125`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{5, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.07462686567164178}], 
                    Row[{"Row fraction = ", 0.3125}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.014925373134328358`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.014925373134328358`}], 
                    Row[{"Row fraction = ", 0.06666666666666667}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.06666666666666667}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.2`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.046875`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.2}], 
                    Row[{"Row fraction = ", 0.046875}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["10", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.625`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"FScore = \"", "0.6451612903225806`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{10, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.6666666666666666}], 
                    Row[{"Recall = ", 0.625}], 
                    Row[{"FScore = ", 0.6451612903225806}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.06666666666666667}], 
                    Row[{"Row fraction = ", 0.06666666666666667}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.015625`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.06666666666666667}], 
                    Row[{"Row fraction = ", 0.015625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.0625`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.06666666666666667}], 
                    Row[{"Row fraction = ", 0.0625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8666666666666667}], 
                    Row[{"Recall = ", 0.8666666666666667}], 
                    Row[{"FScore = ", 0.8666666666666667}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9482071713147411`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9482071713147411}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "64", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.765625`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{64, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.765625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.625`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.8666666666666667}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "249", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9558232931726908`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{249, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.9558232931726908}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "67", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7313432835820896`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{67, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.7313432835820896}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.6666666666666666}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8666666666666667}]}], 
                    "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["251", TraditionalForm]}, {2.5, 
                    FormBox["64", TraditionalForm]}, {1.5, 
                    FormBox["16", TraditionalForm]}, {0.5, 
                    FormBox["15", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["249", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["67", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["15", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["15", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "acceptable" -> 0.25, "good" -> 0.25, 
             "very good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"high", "medium", "low", "very high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "low", "very high", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {3, 4, 2, 
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                    "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4, 
                   "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 2, 
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                    "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 3, 
                   "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"small", "large", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "low", "high"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "acceptable", "good", "very good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
Qv5WMLUuBvKBRrwYo6PnjiSYTzPnpImm/Fu4RXmXDJzxFh89pPSYJ85+i4SX
UzR81LIczbrK2cUiD0csTPlgVC5mNVLxdFA0Njgl4Fk/GR0asuH+MBDSpma8
OkrG23/Vob6nFYMvaOk6WTjB21CYCJYObFSJgpFSYlggdgjeH9bfhAalSbiQ
r+AYVR7GeMg5zysD5kNCMaW9cI7Rv/AxRsLNqjhE/0rBiM1xsD+h45FLUuHk
Wo5ooWBSppwXqmuwfpApG/U15bvmGZgq+uX5ujxUDa3H1On1KBasfCrGkJr4
GrgujsXFVnq+NbPg3Xlq7p7ki8ki912HCd7b2ID6YQW4NE7Cj9Ms+WZ8JE75
xOJgpgELJlrRPLwIswWnKrcGwXdnOvpfysamMFu+ET4+f66KXxcZc5edNwYN
EJkyNwCekZkYOjoYnxISMKuzIa9aqNhvXB7uPTRjfqCczwVrRv1hyH0rTOlc
mYcV4vy/1ttxoksBBlb54ug5M9a2VrP9mwA0flaMMucqXJQVQ3K8CA7zLGn3
PQL6ewpueSfOVOz3qwEZ2HrchI3G1yG8jREbZ5mwPt+WrguSUB0qp1VfEz5z
0LBRdAWWfZDz9bcMDJ4k49T0dGxrVAqp8KN3J+Xc874e/5qVYFiulGNWJOHk
nhDYVkdhhnD2HsId75wXfNHRkharKiGJLkHjnTa8nWvDtelaTvtbRr/2pTj/
1ICllmZUFxvQeoohZwjmV87RUGaQjKKZWTAfas736TEoTTJhiW8snL3EnP+R
ibmtjXi7Vs6Wlv7YJZhkycUyxK4U37s9ArYiT5WDrVgTGoS72f5I66CnMrIE
gxJr4LkhEaEfxMwvyoYkS8s+15PwjzgjRaWY7/tBqL3uhUNGCjYqDMZ2O190
WuiLG2Jm7p8NwPCkKJxISIancO3L+23oqv0OG00EVpvKqBqho2q34Kq5egb4
fUPkGj1PLE/B4DtROFRbj1X3ddw/vhx/WQnGPx2KgYEyjrIugk+EjJkhSrZ9
JGVy63BU9BEcdzYHsx9XYfdksfMSAw45K+Pm90EYER6G8rwEuBcWo+8yFU99
NKLLBHPeH1SNQ/v0dH+ZijdG5ZCrdEx6aMMmpiWIX1OIr7kp8J8XjWPiOpPX
iF3XiVleoWTHzUH4ckvOQXOS8HdRKrbt1NF8XChKAyLgOUzCsrc1yIy24p7+
SsablmGr8MosWz2tJ6hYcjIVV38UoNsGQ9YJT5hvVIgX6jzU/ZbwlXMkVgiG
XbUkFY1s1Ow5VMIRduF4K3isssCI+a8N6Lw9Cr09grFGPL/2pgVjLtlyDVRc
XGBIO0UDDi6pwR0GwjTWhhPDvLFrURT29hFd+5eG5curYVuioHPXWqyfJHrp
kpxOJgXQ1xlx4X/xsHMyZcF8Pf1nxSHvt+DZyEq8EPMyM9KGM6JKcXqtiknW
Cr5cnI62H4qh7WLKPJHBja9G4+Q90a1j0vBXaSbWL6pGzhEts3N80c47HYuL
i2D+xoaN20Vj5e86VEoN6CSyNlLsS/AJ4Tn1Ruz/qQzjwoy519GYP3pKGXBO
x7sL5GyUkoDRO8SeBlhz7bNU7IoIxgzjUsgfSvnkiBnHi/t/730Opr6T8LW4
P1s3+eKvUDM+Gm/K0Fk5MFhrzHnDhNetEP722pB+W7UssstAytVKXJio46R4
E379Xo/Ty8zZ+1A22r034Nu7evp0rYaLYRHeNtbScVoictsZ8uIFkQX/KWno
YMDOfcux4XAZ8k/XwmSEnJ2ivGEywYznPurYw1bCVZ/EfnarwnRFDhaJjLFR
1uLsWi0DqiRc27IKK/v4oVal5qNOcq54bcUtX6VUdzPnDtNyRA4oxPVxVTh1
uh7Olw1Z86sEa/aYcttEXxy4WAPvg2Y8kpCEfUeM6Zqei+Sm5QgR+WEzLgZ5
t2Tcur0QA+ek4PiRGoQqU2Cj/oV7P7X8t38cDoteszaoxaYrKkbFqmly1IBF
WiM+b6nm3NlabhOcaqfXiPdjwQq9ilkvtCx3isTQ6zWQbYrFV7URSw/kwyxB
yvW7Lbl0p5TPJlTi3+Zaet4PR4YiHg+fCQYUPhzW2ZIlMiU/7BLz1bYBlnci
8U+qBeVHZFx0QE91B0P+WB4B7y3x0ExIg/yGnr8NGtAlRfjQIj2HXzPhoUu+
SCuJRfhXE6b/joOpsYKf1xhx6YlibNVrefhYDWIZgG+da3BP9Fu/dX6oaW/M
Nj11fPUsBP/7uYFe2QB1qBFbFkXgboiWGcIrYqJDMOFPJbvPr8DLRmF4skzB
N8IJGWHD1/XhaBWXi38eWLBoZDma5qg4xEfMz/0wtLtiw/IPogtSbWiUKnxY
mYgy4Qdn/wiFc2kdqk/L2GCt4YYx1ahwUHONeTxcz1rz29pcTNEnYvIDU7qI
njn0vgDHHgieGWrCniuy4PbRHwWe5rR6moUFfwRBlxyCjr8ikNBMS9URNVds
joBsVCDanTDgJtUXnBAO2T7Jmh8N5TxelAYXpxg4jUhF5QYtZcLpHB5Ho/9a
H/yeJqe7Lhey/dm4bWLGsJPJ2CycqrBNOkKbJuFnCwnfGiq4MjNW9JA9LUrj
YWtoSononkDBzQNcBLu2sWDJZUt2fGFG64XGfJCfCMttGhZ/sqTjcBXPPTbm
tiOmdBsl+Hmx4M5YA47cWYPs8HxYDYnFsn8zsCZDQamFlvvPmHDV6RJEvrLm
gyU6/isYIa2bAfeJM2s4FA3XRxVwOhAEyddgxCdGoviz6Ldm2TgnzvHBIls+
2y08KlnLVdUBeCe35JIn5XC9ILLwpYQnootwXTDWbOMMDE3JQKXOgPO2mHFS
Sh02NDbig9YhSPhdDwdkY2+Zlo2yZfzqqOLY9Qq+GGlCoxwpE3pHwvN9Fr7c
seeHwb/RPzYCMfkanjxoTM2NYnz6aEbnRzn4rrPgl/8U3LXWgHcHWHB8r3L0
G6bipWM5MF8qo/SFisbHLdgorQAJ7c1560MsDu+0pUuhlPrweFzRW3HxzjyM
727CnatL4TcqCQvfWTJSacP+ofm4dskbk1+asttUJfO7ZGGSUzrWfcjCX13s
6RCjpUs/EzZ5Zsg9Z0tw9KsBX3xqxLd6G47xM2GtMgcjv1pz8nA9XcaK/n6Y
gvZ5eVAvCsaRiirUr7ai1c1qBHmZcmuAgqu6KVicKdx7v4yfp5Rj0GgluzUq
QHSYHYOLxRz+7/eKRWf+N0nD9zUK7hPZ6z7LhjPX1qPZDlMW5xowIzsY7ocr
oe8qZfX0n2hyyopBXZJw+FU8uo0vwMN9RWi/Ph+Tm8lpNsqS0/bKOLS7Fz5O
D8HzJsW4orGiZrIxrcZa8MTVHPSML4b9tDzhKjrOf2zPzXcCUB1TiH27LOkb
F4FRnjm4m2nIm/OycOGYETFIysJVKTB7H4j9DeHI6ZuA7HVqjjsciA2vZHwd
V4FbdTr2faGh/1I9Ey8lw/+6ik8FDx//GIuCEhte/BiJc/MNaaqLwpyDedgc
lYBBG4x4x0XF7yILevesx/zZmbg1Uc3e9qa0EzvVuLmOAblJsNhRg8ZhEfiY
ZcD+96tgtdeMxcsM+PFGGoouWDG/rSdmzFAzsb0ZB+8y5sITWraIkDBD+JnH
dD2XLPCD9aoatCitx+Mlcfg4VMX7t4PRdmIOdjf8xKyLsfgi3sMfD4sxtl8Q
Hj82os8UGWeK7/80246zLG0YlC/l4Mkqht5Kx9yexXglt2byjGgEXrNg27vi
mho0dOtUijmCJes0ejqLHD4aa8kpf5rxxiArdr/dmFWyBpgLJ+k3TUbno0Gw
Fi7zabGCs73S0NRMSws/G0b+Z8Km9Sr27Sp8cHYKrjllY4qbJWM2R2OYTMHR
wgVa3wiDS0gNDn3LwrWqdLypNKZBbSzqDOvx5XYsXNyKMWKOGReNasA9+0iY
jqrFFXFmr5bJmbQqCiZuSnYYasDUA1KumWxHqfCoS44m/JxixSPLpay4IeVG
dWPaXhCzJJzlglcSOpoquaNPOCwam/LRiTR8fVuMZVfC0eeuDf/pHYuRnQsx
1cqaG0VvdyxVcdyvYnzckAXpFgseUsi5y8IT9TfKcCOnEpUj0zHwWRSe3Rdz
91UwyUgdP9fF45JJNBaFaOjqkoyFR0wY6JmPSXIpX8d7o8PTcOz2lHK+VSq8
31ty3MlaRCiisbHOgN1Fl71pq2K46AZ9eRQGe8sY9UPLwt5aPt/jB1mCngv7
WXN8qzh4Zljx/oY46Of74rSDnou3SLmlPg8bbuTiSpExjTfL+HC9nlbuChZ+
qYHjjBQ0a65gw75oTPOrR2kHawaHJ+LBlhhsMMhHxaY8GHUpxx2pLWsXpWHp
uDLs/j+OzjKwqazdwkmbpvEmbZrUDdfBi66Fu7u7D+7uzmCDu7s7g0NxKRXq
St3d9e7v/qJQO2fvd6/1PKRJ+/rBRWHB6db2rMyJwV5zAsb2VYizZ8Hjr2U8
fkDBLVeS0DglEaFeVXAoEOeTBbi8MRfR7yOx74aeaW6ROO1tpu0AKY8XJsFN
+EL9KJEPj1RsIPZmfqtUdLteiaWXXGjx2Y6OLyrw2jYY/ZIEb89NxN/qMqS6
FWLklHS0GBaOp57h+PfVT1h3Ehk+UcHRaeV4Kuaz3qsUJAz8jQcHtZzX0x93
xbpnH3Siab4fWmy0YtdtYZjeJgYvgpSMt47EBfto7O2uom1vew4ry8SdpaJT
/wrDr6gcaFYLDq9hy6GDw9DrUxleP3Xg66QgtBzgzLlnHPhjdzpwJhoBLZRM
P+7A1XMzobX4jbH/e77vMTXNtUXPXa1G/noVl+6Tcts8cd9hRnaaWI4Fr8rh
1LEIX1QSptfRsMkBBypGJ2NatR2fDQ1G9MsKTNLHIXvG/56vkYw+tuVw0Us5
PjMCbxrE4usCB9rcLkZhs2yMtyrEYK2RJ8UaSiqy8Hf9SPQQufjqlAO7FuRi
8Es5Nw2yZc99MtY68QepJ7MQsTsVG7uHwnmIli57c3HTxYIflvlh0g0jHSvf
4d+qOLwTvnF7fQ4OPf+BmBQdFwqeqgqyZ13Bf+OcdfyyXs458gzsHODIYYuD
EJQXg4b7tXw+Pxq6L1ZsJNVy2T0FvywVvb7PQPUtG67uYcsnf6TcG2/mzRGF
eHdWdLlw3XMQjrfaQL99lXj60Ib9JWHI6f0L5kt5mPFvNuxdg2E4rmf5jT9Q
rIlGYoUV1wsmOr0uGm88qhFTNwrxNS1YGVaIrcoQ+MwsRK0taUgeJ2VbrQ3r
C5c2nUpF7SEqBrRy4NACDXu3UjGwmZIG4Qutu4Xi9BGd4NtiPL7qzNAzwTii
88csTTCUfinYMfETrPdZcubF32jlbUOHZhIeahSMAxI1RxkKkLiqAhMUwkFr
SDmqrY53TNaM+y8C57pm4mTfZDy+Xo2MLjouHZYBPgzE0DPleL79M/S5Lhyo
FPntWYSWl63YpFMUWm2TcmN0CiJHK6l/KOcSGzNdsh2YnSXjzzkSvglzZI1D
craqL2fL1lFouzsYJ+7qWJajZA+DhD9zbNi1cRVSilLQeus76E2CTfMCEDVA
y+2O/riXK+WTIks+b5mEJzLBz63Kka61YKf5UvaroWeHb4XocNeBl0+quM3C
jpafrXj4cjTq7M+DTMzuisRU+Ly3pe0DKVetUVB5Mgyzu2l54J8YXJgo5WcH
GVcNykNc7yr8d0DLFvMkHHBaw7TYYjxvEYG1zcLRq7lgyEopHY7H45uHP2bX
/Yx6DvZMuyZhFw8bDuxtyWOlATjfXccfA8sw/5qcntOMnHi1ChMv6+l/2ZpZ
4m3vdAd+X5OPh3a58NFl4PKQdDx4nI7XHRz58qk/3JTi/a3T4R9qx+szQ/D8
vIojVvzGCdHBeeukjNYkokQ4ddS7ZMTMjkOTuWaOmqlnzCxf3B4YjgN7BdP8
TMD1s6LPxubj94LPqPXcxMPqdNj6ZmGKTyFGf5OwqDwDeyfYc+GYMBwUzucq
8mSbox+CLBLRJNsfFnUD0aO3kTfEjMe8/B9DJCKVegZ6WfBLHTEnhcE4PiQW
bVxMPC86feewSlSOTsGg3VqOHSbcbr8FB6qL0Gt/Dlo+sOTpd3JOHVKN7BVm
ytN0fPVNxq59E/HXV+GGm+z4IToAh9P/wO9bOtJdtOx4V7jt32ngUj2V/UU3
ZsRj1z5fHEzXcnTbt1jp6UpTUTDu+wqvsA1CWXk2lnnkoobIv6LmBdhvUYBl
N30R0NKO/3V35PJFwsMvmYRnGun9PRZTd6l4olkGdvnHYfbqWARVvoXbcnse
eG9mp2I1pd3E9YizsdzHisfau9A2Sclg4YahYl4nrfuBt3P03HDDim++V0Jm
DkOf/lJK1D9xq10Envwdg1djVXyoeg3HbdkIlZm5xioYz74bufymBX1ml8Jy
uYRde2t5pjAX4Zu+w/30DxTF2bHNMcFR6SaGLhDrfDMdzewNguMS0LGJltn1
7Hl/oZ6mm3moM8jI1OYleOL8E71XS1nh/QYzQhTs6uDCayYx9zMV3LvbF1H9
wrC5TjRGNMzA3UelWL0xDN3nmZgRLOPVC2a2u2TJq+fyEBgfiZdDI6DbXIrm
lRmY7KzgU10JOp+JwQq3fOSFq6npZkGvqVV48yUKtQZZ8G0HK95oasd4YzEk
7f7g9CczsxuK3DTp+KtuIjYK73g3wA9L5Q7MdbTjhZtBuNQrHJNzNbxS7sA1
Ei0PTQ1DsaQM/fqr+WaIL4rE3MSJ7zWqdSoUkiJonTKgD8xAu69K5n5TiOuV
MqFtIm62j0f41jg8n16OQc38cWqE6MkyGRd31fFNZxlL/vqFMc5W7Bhiw4Is
O3ppzQw3lWK2Zzw2W8fix9IE3P5sZOdueq4SX9e2dT4WBJn4/GAlDmyKxeOc
agTvUdG3rz2z9Ta8VWngjCh7BhfJOa67geVv09HZT8Pzr4pxVHD/pxNleFig
4+2DVnRbn43Dy1VcuD8It2cE4cyCQpR/seaT1u9wjFZMOheP+w9seUKXijZv
qsX6mhi0rgqfT8WgvreJxsoc7Bqo5nHfX1iaouX6Z87cHSKnH1Q8OUbC0YUp
yO2n4fXDKt7ZVoz5v0yM+63g5sYqFgxRMmNCBV4MCcSjhnpuOaxmzhctvxcp
uWWf6LCCQDybKNhE+Ol0kSGtdsgpGx+FpdsKQeEXeZOtqPKPhvvAajwfmgK9
hR+0WyX82MoX+0uqMaCjgvHmUki+WjPkyVdMsNTQZqyWGn0wdk7SUlWo4d59
zkwuK8U5cR8jqmx45s8frEr+jC5xDmw52ZJZImujPdPQfryEx98nYt0iDU33
rdi2s45dAw1c9fI3DrgouGbbT0SNNtK6UzkuNbBm8WR/3NqqY1NxH11tqnDT
5IeNcZZc/8iKA4UrT5ss5f34JLg2sWDAayvmekdhdD0158ytxmEfCad8y8HX
LAeeblSNoask/DNVy89OFtwk5vDIQBmndNBRKdxE2jERD/ZLGXooAm8TwtEh
OQWNfpah9XIpR/ROQotkG14Mi8I/t2LQ9mUOjDHxMPQX3mEZjjfXqjFIoeTa
dQrObm3DQx8NrKv6BZXg6Lk/XBh6UsnIDkH4b10obp+25b+PM+EflYmRjWwo
rdKx4F87bvCz4bkbFkz53//Ri95Q+CUhcXgWEuxDoHiloEJcR80an3DRbOKr
pb8BHxMbiHkp+mrFTUtyEbNC+KBJQb9pWrbMScKhtiZ62ltwnsj0znerkDQr
A28ty9ArTMfK6cJF3lpQ8tGev8TbTovDMO/vfKzYZc0vgokOxNuyj08yTtVJ
RZboW3d9MeT7k7FpsWAhWwt2/kfHB+mR0NYvg26ZHUc1Ffy9OAPxCuEZQXpm
/gzFP6ILXW7ac4VKyddeQTjuZcm2qTb8IT720xoZtf398NrmB7b0jMWdng4i
b/3hGKOho/A4qwXFsFsRhmanfkGzIQe2tYTbiGyMWq+gZX09x9Ywso6HlINq
CR+cEo49KyMx6qAfbuz9jYwUBW+vElna25pUqDg1LBJ3xD3SUIKPf6m4dYSC
j4bK2WtCEkaNseWzv5Px1ScTgwOi0L/Xd6xfYUmNuO4OG8rRMd6aOw25iAop
R8NGlpzYPx+SVRr2cTFyxs4cHN9jy09XTfTeHICfV6WMt63CkovhWNLMkffc
S5BmbUXdJRVHCv7YeS4G0yMT0XeqNcvjg1FwPRbbjEFY2deR6T2rsDpSy5Vb
MtBylgMbvzfy+INwSAsDkDbMnveu+OKfyQ4seFCB6kZmRp/9iLYKHW9ss2K/
FgV4KvK2aqkDjdPSseXXL8Rej0CFmP35W/+33jG4+cOCVwvldL6v4tMxctaP
rMbu/SG4+sPMcREKXm4u53vByH+NDIP7DzWPpCmoEx29bUQRvG0jRYfJedPH
mg1FT+5YWIHLX/Mwt4UlbUR3nQoTXigy79btbDx+4Y+Kbzp2E3t9N9uGhhwp
E6/ZUV5owyEh0di5IQm5jcrwwb0ahZulnOdVgZG2Bh6vreOE8GhYq9RsHBOH
ZwYdJ72Px+81cu6xzMAqSTFG77NhwDIT6+/9gI75KdigtmeuyJlrtWzpU+8P
YibaseGUQhTZ2bNzPwOD3st5bG4SltvruUc4QLVGx+JXZeh0OQ+HN8v4XnBD
m7BsJDxX8lWElHce+iPI3YF8qmHXPRqeaallUY0ybBpfAKsZfigYEI2OXuUo
72BD76e2nGd2oHvKH7wxG/nTRskB1XrePZgG2awyqERmdz3yBx6r5dx1z8iS
kUGY+suCLVZqeZIqdm4lZ4cxQVjUNBGxfeNQdfI3OloZOdojC/PSy7G1Og0F
3jIeywuCVVUJtrdKx4UWAVj0dxDaTc1BlcSSNfOVbDQmCeVPcrHtteDWObG4
nxWNmMZqzvu3BOfDfHB9Vzieh2hZ3MrAHeN1NI21Z/uiIjy/78RgO8Hq9QQ7
rJHwfYoDx25MFZwVhxZlUg6epqOqs5hd2xJc7qWjoYuaf05bcM7lXOick/Bg
eQn+NhbA6WIyxvxwYIhWzuYidzrNduLgqFIc+RqFB9YajuqRg99fbHn8SyJW
WSv5u148Js4vRPdH9lRVWfOasgp1okuRvNZEs8gir0V5UNerRA3Rp5+tZfQy
WPHMO0c+61CCFlFfoRMe6pWQjMlhcTDMDIbV1RiM9c6F6ZEd95/Wc+lWC055
FIbhYk9vvlSy3uMwTLzpyM/hRajRvhqdkizZtGcZtq+MQ/Vx0anLkjFijIq6
nYGwNZahyUgZX56Q8UdYNaL3ZkAiU7GoZRrM1yUc/iof84Zn4vKPbAyMltHH
pOEt52jU3vcGdoMlDFhhwe8WZj54Kj6nTxCsO5qoW56KzhuU9Ioz83u9SBy6
F4/zWaJzJ5jpc0RGlCXimTjXL7wc2Nc7BD/6RKPtnUSsFfP7bmYKUiek4skm
R/oL7/naV8+nhiSMGx+AFjoDO6vVbHpNy90vKnH5i4IdDWF40cqSM8y/EDlD
w89ilp9eDcaKf9MQ0ksqnNGCXQVHZNj8wQCxR74fXPnwWCUah2bi7mIv/pXn
jzsj5fzQIQuNZPGwHmnJLb+deSFQw2VtdNzaIQ6lo+352C4JfUQ/3DtSjpc3
SzDrpiuv7cjClWWe/N3VzFW/lew7X8f5ljXoMETBf9eGIPZVDJ728eCCQxmo
fhOJq3WF35w28EtFAdb+LsJrh1j8yTKy1lpnvn4dg4zhJl44EAHNTRvmJ5sY
s0nNJn28OKqRK9fe9Id/7Ric7mbgoz0ZSLFPQOhjE3+/deCcbh+RuaAcS5el
YEurZGxXlKGW6M5vPr/hfM9AacpnnEpS//9rcJyJjUfk3Hikn5NyeHwCquwE
98fYcs50E4um6Hld9KfrNyWf/vyCmWc1PPqzCiM84v//uVKHUw0c/D0ac9Kt
eckxE1OGpKLrEC9+m6bn/O2erDHBljtDo5E6JxqB5Wa2bVOJS+vLcTZHzb2H
jdw0S0p7HwsuXSTn50nWdOjszM2vMlBf7MW+vwrh0FFJ6UJPOl1z5S9NGX50
deLHa/moah0DTR05FzWJQmWqK6+6l6J6mpSzN1ixU8YHOFjJGOMveHmxE+eO
0tJ6YiYiEiRcN8CKRz39cdhYkyPbGPlitS+cTI5M3l6bA9tF46XowTOmfPzt
Zcs6a21ZLBzsSqGBiWE58HVPRZTaglJVEqT/ezzzuz1Hl5fi+Tglh17JgXRy
FbTzpDzpVIqxe2vw3LdqXCvyx9MbybiwSMsUfweuEkwY8lxGx/k1eTzsF3pU
mGghkbLVg1xEPlSxmVM4Fs3/ig9rPekj3HfOSRMbrUzDym5V+Ms2B5aVHtw0
7DuixjrSea2Rbcur8U44bJBdJAKaOrHHMwXPHSqGaqiE38KKMXlbKRyvWPJG
2FuEvlKyaXYiGu9WMW6kPT/dqsQPiTNPNq/F93XteXSRI4fvM7CfPhqtpI5s
bq3n7UFSLkiORe+6Rlp5BqPLVVd+8g6ETUIlXNZ/QKcX5VjyJQnHCzPReXRt
7q/9GdMnFaNM8NGgiAKUbSzG8dtWTFCIbLxgy8YTXBk+XMmjz/5g5D82XKpy
oOlXGF655MO7vpq/F+cgLVfK/odlLN0tnGOJnMPrRCLkqxvnRJThy454VLln
o+yphJNHannnkYqXdCreCFDz7K1i3DugoXWI4KfBGr7pKeGYu8InPUUe3M1B
80HfsN5UjCFl7iy6/BEHR8ZDc9qFW8R5ODdWyWczlXy7ScuY5RruGysjDzlS
P0nFL1v+YOkEJ3a9XIydns40hFly6hYf7Fsp5+waf/Az3IP/uZXh4thkPJ1c
jKF3Vdw54xuu7vNDp8eW7B6hZ0t38eduwZO3nOm505LJLU2MOqqk/1w1T662
4cnNjhyY9BWbPTwJ4RABS80ck2dLQ9Ev6LYq+OOKcDhLf4w1Cu9ZlYbJt9Jg
kyi68I0FZX5peGMfjx+p6Qj8YeDUHUo+HmvHQ2urccLvLdIb1uA9TzvOihae
daAWm2kjcSK1FFf363jGScpdc4zs3tSD38+Lzhks47YtNpTbuXFG+y/44mTg
P6/VfHFIzhUUrOcbBzkV1NdVculZO7YPcGPPVbUZG5yJj8IjRnmrOUDwwi8v
A/cvi0LzO5k4MyUYnVa5sEHtcixYkoLnYdG42EfKTQnWnL8/Hu1Ev81OD8Wa
4Wq2mijn5CtqVlZl4879NEy7beQS3xp8Kc5Zl7+iMOmByK71TrxyQ8MccQbe
+bnxQXEZqv1dmfdKsMP6Snwalw3HZnqeyAzEj57O1LZV069YStU9JU/JAzF5
bj5GBGuZIZg07Iacj84no8AoHHKgNWeds2TsYnd2mxiMVxZSDptjz1TRUUsu
mJizMwNutgFIbJ+KYc98cW6ZBf2HeXKRYw4KZqoZsLAGK8qFm98PQJv3Sg7T
qDl6pJ7eXiYGfzCwQ3UiHnm7sU5CMPrH56GBSzSkIc4cfUfFFN9s1Gobjgd9
TKyxtRxzZwWjRy0bLigRPtS0BJG+4RigjhF7ackPWzKRHyXWz0NO639t6F9P
OHLzcHTMcuaEBkZ+2xmLrGaF2HI0G+uWiuv01DP4p4ymDt9wY5QL47vY8XaX
IJybYWJNfQUK9sUj5IVwF2kJCo8Lf03wxz6zgk09VWywTPRpURxMK9Nxw/Qe
U186s5/X/x5TdOGkAZaMWGvHp3tdWdTDg74TNRw8Qc56T1PQ+JQNjdIoFE5T
crGDLdOGaWkeVwb/URr6fXDmZZFp5aYk3HqWizHSWjz8sBr9qeEQkQn/WOfg
nErPNuJzyq3DoHFNxGjBH+GnU5ErD0dzg5Y3Djqz0joSY3wMTEgz8E47Jz5f
/huHqwuhsHkH8wVrLl6rYPY0GS0/StkgMxT2H2xoXangBGj4criO+96KeRPO
NmOpyMgyOf9KFmdwVi4et9Ew8KmcdrfDsLyZmfsTUnHEPQBn/3JkXqQd1Xur
8N1Hwwz378iUlKDHNw+WpRZguXc0nooOkkyPRv9OCnZKqMKnk4WYHpQIVVcd
jUNDECiRUDLPmfNXVmJrpIx7WngxwSTjkicO/HZQwivD7Lh2t5rBr/Nxqqac
Y2NLoRrrzt1ibdYJl1v5TMYb8kQoJv5ElMiQgWGOrBmkYLfHKk6K1vFQwg/s
snSh3ON/P7eiYfd2Ziasi4WLrAKqxWV42S8O7R/q2e9OOXYeKcCGKekImhWG
mRO0XFKRgneBHqzTKwU1S4Qv+GUiaXUklLE2XNEwHU1ludgwQMLiN/loXyML
5/9yZuufefhRkocP1UXouTYZvfcbqaq257Z7Vvw52Zq9Zlsx5JPw54X5uPdJ
zO5eA/dIdVw2IAMZq63Y514qBhQr6ZzlyMC/v6H1QLFXl5zYTjBrolch0naU
YeJWLTPvRcM9Lhkms57OFVL221WG4HIr2rwswpOFwmNq2nDDesFpgrUmbFMx
pK+WdomlaDRKxY49zAxdVontdcR5983C/Hwpey7MQt2RFcgtseKHAwpuqPqO
vwyFeH4pCgsqwtC9pAQRB504Z3I+8gZb0P3RN7QpVrHlFQN/qxR8ODgLtSyM
vHLKwJP35Vz3oBrTSowcO8rIwjPluD7FSOPnIGjeWXJ3CwWd2kh58Yqeu0fo
2KRWEk5+dqPdj0Ts2aPlirdevFAt4dTncjbe5cnh92KgE+ei34RobLSugpeP
lENPqPj9igsr1IkoDknG5Wx/FJQ4ceqNdAxZbeKC2imQCD+cf7EInzV5yBqV
BZfP4ZheuwZ3DStAK6M9Z56NRNXLArx01vHZDQueH2Cm76kSzAhSMvptFPrO
UXPjxkr8l1+CPY9j0auzhPW361lXa8MLYeIsXlIweGoilHIvOqdVYtgH4Tcd
ZBy82ETLm2p+7+XA0FgXjjmYiujPSj70Tof9plCE17Wj/qo1p65PwzKmo8ts
JWfKq/DqmoEuouNu2Kbh8SnRtdflfDA+EXufWtPJx4pXE01MKrKlRz1nhl81
MnZDLIJuWvH7rmT8LJBRPzAba6+a+M9pFbtXOHJMfhEW1s5E274GLvtgwb0D
pKxaXYnWHxTs3LkA587ZMPyxLR/2VzLsmy1PvXBkz16xmNsuDtfPyXlgiozD
JypZ2tOe3xa8x8WORoaO1HBtgoLj69nxyK48BG+Mw9oGLuw53sDG8wsQ8J+O
Q/q68pBFIZbkmXjxuZQx3lImXHbgXFcl25eVY3KicC6vSMSdFfv9sBLy1nbU
llRjgr+MAxMlPHvGxBN2glUzC3Hvbh467JdwkCIZ09eFwL+Lgck7UjB+XQqM
rSTsMCQR3ZSW9JPYce4qS458/QM+Z6pw9boVhw8w8d1LHfP2KGneZ8Fat6ow
ukLk/h47Npltwd37zFy9UMPFk0Jx/Z2avnOjsVgj3KG9HQf7uvK4tZHZjuK+
9gTjjXDJYwMqsXFpFva9s6O3QwXeBruz9UBnHh8mE34n/u2bmSc+2/J9V2u6
XlZx/Y98bNj0Ba0EmzWqsufek/bMCg3CmE6C27qI/fSshk/gV6RIrDnsWwrG
Cd690VzGL6sK0XZULAqLZNxVKWeAxMyINb8wISEKrepVo9nUn9g5w8CehcKt
WiZB89mZbz2LkGCOgd07I1v2qMLICAVnPndhUh9/rJjpxutL03Cov5Y16vli
VUEFZNZ2jPmYjeoVWZgab6LVMitGV5dB4lWEqy2j8HCHE0dcL8CD7ir2uu3B
G07VuOdty+1zqmG/qgIx4wTX/FWbAZbl6H1ZwevH7DjunZTNn9mx1qYIHLya
gt4lcs6bUQj7TnoGXjTx9UIFSydFYoEsFA3vy5j+rRT9zuo43LUMLb+rOM3e
llETVMx+kopy8b6kBCf2bVyB0k9l0MzXcNoVM3seCIXjRUe+2RmAK/XjYdM5
Gce7OvKTLhPjH+Ziy4JqJKcUYzlKsfGFFbd1rUbnIAkPbvgO2y2FmD8iCvNM
Cr5QyuhXJmONWl782VbCqHAj25VKOG2GG09X2nC7q4prmueh70cdnR7o2XqF
A89Ga5naKRwZC+Xc2VfN69eMrDDZ06l7HHqpi3FAsLdLioSjW9qw8c1v2FOt
YONOJu5xMHGzcPmRLdNwZsNntL1rzz/H5HRvZssXk12pbiTnuYXCgboUYLF7
GRZcENw5OxbTb1nxV6mKLwpEbl90Y6naiv4ZGjbsXgaPq1J+eyLj1SYu1G3/
ijdNbfjfKivOP12A/An5eJ+VCtWZYvytd6CquZIBjdKx4Z0rVy8QDLVddPr9
JJyaq2J/seZOkUp+7Psb13MUbNXflheDdDxyugKx03IRGlqC9h086R1pw2dd
s6DtU4L6GSLjlwVjXWctp7rlwvZzCTxP29PCbOI8cbarKz7h9uAq3DX/AZLE
evrHI9nekvj1HUVdXNl9vY4XSx1o/0XHLg0VvKjPQtsKd5Z+VjCQechLzcIn
MQ9bBsiZO7gAVQ+s2VJWjU89ClA0vwq+P5Xs52LJxo4hOLOkBJk9BasP/oQT
D6RsLPpujH0oLh7wYv5mL7a9m4+ZSXIOEP0bkx2PExGFWB1mQ09VKZyb5+JI
Fxm3aNW8MD4ce6WBCNuWjwcXCzBrQQ6uLdbTp10ONu2sxehYC37X2bBOeDZ8
Mr9Bu99Aj2p3wcca/qiIx3B7M98UenHqXS3/2RCDR1v1ZA1b1pwci+RPv6HT
++H973KUpak4sZcVe/0y8bSPjm4zcjFndk1eWmJDJ1rwdawz646LxfL1try9
Wc2ZwkUT1LFwPath4yU5WKEtgMcEGXVWxXALyELl1lpUtZaw/wQ7Rnyuhoer
hruuZsN7rliLkFCss/yFVvOLELC/FBMdQ5HZpwJ5DpXYcExDRQMtI8Rs7oTo
tIlOrKjIwL09wlNF9zTfpuX2UEf+98WLr/apGJnhxH4pgp9rWVP9PAuN6qRg
ZIrI+6N2vOsTipCkVPT/V8W1q2IxWeTxyN0KXrOz4UrRT6p/NTxzoBSfboTi
wOdUDO1oI+jNirefW7E6xoOfA5MR8o+O/UvteCVczi1tNTy40shBZWXQisyd
U6Vg8R3hs10TMaWPmiNGiQ5UR8H6opx/ZF8QVTcL45LlPGqtZWIXI32ZiZWe
XxHyr4GjJ7tzl+BNWVsTmyU60OeGE+NvF+PuOx3PN/tfthZj0f0g/A7MR+Bi
FZd0K8XyKan4uU0jetiZ0+b4wLdIwwixno9bqzheOEbh5gJ8aWvNI9YGBq0N
g/fXRAw+pGZmPQ/2cbTmuVW5GLgsDkf7mDlUHo0qWynHXfyGOnG2TKlhx4N1
YlBjoZaTT3rxcpCGa2pGI+GUM3tsd+HqsCIo/7PlX03c+J85DA9lgu90llx3
KAmLJktp1daFcbrv6DqsAiPUthxp78Up1SYO2GbFnu3cGHHYiuOn6bi7shpL
ckWfzldw1GfhsMI3V6QIXvYMh3+HWPiuMDPQlIGg29V481pFt4tfcd4oo+2a
MPSbZmKKpZjt/QEY187I1Wdq83ByNbJ0/ghtZc1tFh78M0/G/65XYtBMGdcZ
o2G7JxZ1TmeLXjDQb4GeWRklGPggAPkdnTj9pjXHdM5D4ScJu7yw5P1NRn71
qclmw+05eoiMy+qaufVFGbzC7NjgThZebXTmyjsJWDMyBnv+s6TKFI3wo2EI
jNFyvz4YDx0Fj3WWMWxAFn6NE/5SWYoRK5V8V0fN/aNzkOUYhH9POnDBiBKc
vleF6f9j/55WtO8VgDkPXOi7Tc/V76pQXicXezZasO4/pQh+IGfFTHGOxznx
acNMTFGUYFcdCasWuHNJyzD41YlDzQVKllxy5qTzElrFVeLFek++v+6Du5Ym
5vYoRg7TcHRFBm7+7zXDGmRDlenItkY/NO+ZBsnxCrTeXAQvOy+O0tamJFHH
gqXpWOETiaB/PDj6u5mNvP6g/Xox/8eiYLrvyByNJZeIa6vOU7KXWzm8RWfV
XOTJ6R380HRtBtrnFuLZ7RDMrZkGrWD9fWYtm6myIPuoZYeiLOztkovV6Uo2
v6vjMb3gnbka7qswc++xDARPdmI3wVsfp9vy55o0xOdI+fuROys+VGLf1Rg4
2Vswc4iEAw1paLPUke+GpsL4UMIVqzIRlZCMgE0aPpn6HT1HudNtjYy1H7uy
z0YjN/4QztEqBStH1mTyy1j07lSTUWUGzq6tZVNdFupUGBngr2KrsQ701Tiy
h+iO5EFKGgSvljk4cpDbO5Q2ysX47kYei9DzQl4x3EdYcWybQkxa4sBzxbFY
11/FK1V6bsoKw4c8R/5qV4CWD8oxQ3DtuVNy7lpXhGZnE2C1ohLjVmnodkXL
uifTEHE+Gak91YwTTpacoOe9Jjl4vsiKvSUZOCs+98OUchRtDobNVFs+9bFl
kCICb52txIyK/dur5uaFIeg0zIJnKsTHuopuOibh71NKNp4n4bxJJna5EA/v
3tXYmG/g8/ffsTZLy7OTsxDiJOHrACUj5gu/u1mG0a9TYOdlzdKn4usolKw1
PRUxn2uw9kB/1BUZUK/MknUrqvGyjjP/NJLxUvcqHHAuw7xSC9b4qwCX6rkx
PScfK5tbcsMMFX/ny9ilRjoWZEfhwHY7+s6Ow6gW+ejYwYX2L+WcWS74a3AO
utWSc6KnmuPnx+PYnD+YVUvCZu++IOG9C/+INfZOsqGzMQW/Z8hYnhuKvyZW
Y4dzPhqdcebJQwa+raNh33a1eGyu6GON+P7tbNj/Xy1f/leAHlFmBo2y4e/c
TDRNEDzc2sScvRr2+FmNh4klWLJSxv2yBLSo+g39/Wpcj3HgP8eLQa88bBlV
i327Grjqt5bTJigYui0Bx8XZSH9hoG5lNt5PsePoFGvenWzBpc0UPLBKxwiv
FJx970CvCGt6HbKl4pHw8nmxkLQxsnRJARzjClFX54PSS9k4Jric5wz0dUtA
prsrd8EHw5+p6dgsFi1LbbisfRWa5tlx1Sc3VnTKxSipkm+tNPx5340XKwrR
ZoaWDWbq2S7MxDbXwpDT3Ymj+4kO7W7LJPE15prC8SraitaCva6GfsHSa4Lh
t9rSP6kS/Rd5cNptRw5clYrzb6LQT3Bjbs1stFljzbIjFnT9pOH8lVqeE3k3
vroQBYJ/b/6dgC7rzbwW9APPb0hZ2LkcmeukPNpMy4+lCv46oGfuLwduuqdg
ozYKnlmj5rHtHpx/NxLbp0WgxQBLTuuUigY9LXjYMhJy4WmL9sWizRIn6orU
3NYtE7F1shFq0nHZjZqsuJ2Gf7erqQmuSZuISHRfbse8QfY8+9bARnZqvmog
eqaBDX1FT5zoqGXaZnFm17nxaUwEDj9RM9jiJ5qmlmLA9Uz0ysxC036Ci5PT
cE+h4b1UM2uakvDFS8FBs8pxocCRt9+mYZRZxbljrHk09Qu8wy04KLISK/vI
+WFIMrqnFiHG28A8wSOj5qv4SufAvwR7vzdKGOidj257C7DSpRSe+RGwP5IO
3W4dn+/Vs8lCM7fUt+G1RwHwtrenu1cuXCqNPLVcR+eLuUjb/xXei704PsYX
QzqmQpqs5JFzwah3QsGVrc10LrJi84FVSJ9vYu1JlvRNMnDbSxsGLlPwkUMk
Hn3Us1c3G25OsWLY4UioS8qgkuo57JWJEXYxuHPNkn/09nxYXIY2EVJmm+vQ
3qiix9psTHasRF5+KmzeBGHIoyxcflOKkcctaervydmXDWwf5ca9CwsQ/TwR
u7opOSrPmbpmGnarVYDZDWV8fErGz++NdJXVYTN1BRJClQycIuc9p2j8t1zD
zHnpaPKpHFsqYnGjozWfrkrBiC2ufNXQTEfhEw3HZsLzqjvfBipYnauks7Wc
Fi10vJ4hp6ebF2MtkvBAZOP7kmjs3STmYoU9o3LjYNOuBNqqPwjfbSTHWnOs
cCXPBmG4TmuuyIjAqyZqhrSpwJtFUq5QW7Pm4EhkDjDyfFU6tnVPR5d/c/BY
7sw2e6qRX5AJH1cnps60Y7NjmWiy1Iqd3kUitLOYk74O3N43B8Gt36FEMObA
+wbqz6k5Z6qRDQR3lV03c6Ng7Pczv2FrayP/Ucm5tLOU90Sf/PcqF5P+c+T0
aikP/HLieD8d6zmqmVOWjM0r1UyMNjCttyfXjI7ExSsJOHPMyLWDpVxbNx2y
n+68M0bki3UCNs+xYajwa/vfVnTrYM0v+/RsGFuE2guteLmWDT1uuPBsQy1f
vBb9H61ho0nWIidSkSVmrjJOzkXnAuHtmS140Zaz18hpl6jh1mQXllc4Mdsh
D5HjNVy/Oxc/9tlwZm9b3nCXcpW4vnV3HWn1PASPSj6j0GDiNfts3JWKex3o
wn+/W3NNXS1nRtXmh3gFbxYLTt2XgeMtUxDpqKfNrgh0F27Sr4GBs37Z8txP
R+Z1y4XpoIJfWzhww1AD4/bZ8YVeys3xRVB4OPK75090mGVgjExC2+pYbBLc
+zg7GYbvSVC+C0BVHTm107x4bW06buwXPvFanOlzbmL2irDjQDi+GLOx4aea
R7cUIeicjL4JwtGkn1A4wokvP7pzXTtfNF2Uj3+3Kukr3LmnOAutFK78a4Ad
VaPsmPrZgX0fFONoqDO9jbkIVJmZbtDzztFcFL/Kxs5RKtbcqOYiLy1rnJCx
f1c3znNIw64KNaVx2cjqbs0mE+3Z3JwD08tMjNv9Bd0GSegueOXJDVfu7hKN
qWuScaO9L1qfceWpBl+Qfl7Fw6Ir9g7Lw/mrNjQnudK7qT+0J4oQuUzN6UZL
Du8WBuklRw7N9WBMoyAUznGi71Z/9Pe14ucAmeh/JXsOy8EiBzeGjsiCT8Ns
RFwoR5xYp7o37Xi/jT0LFlhxT3kVUt1KoYzVcHQbEw8mWDGih4pJfYMxw1Fc
p5ifYS7W9C0ws9ZrNVNENtRooOCVujK2aWjBn9MqsLmBlKN8cyE9JNarWxBS
A615fq6EGW/T0fCQH073zsKbfsl4Pl/C63bJOCWNw6Oz1Rjvl4h2EhmrKOUO
txIUzzHwg1qcpXpOTBzyA50M1nzWMA/vywPQ1cLAql9R2Pk+Fs9u2DLQtQjO
jZzZu+5PlIn+XP7dkWe+6ejd34F/B9tz3cAUOL5xp+6zNWOupkPiXZPh3wMR
MceZWw/a8/iVUAweko3zm/LwtjwL3/tp2GG6FeNeVMB5gQ0tVlvznuivU1sd
qG8UCsPXPMReC0TwsTRU1gvC0y1lIvtkdH+ehERXLdtMK8TpzWmwHF0ET0sl
E0e5ceRRcS6b2nO9OgUFPqXYv0NP8zk9jcss+T3WnquvRuDsDSUbbUxF7T75
8Hgo51svdyr2qKkQf+/uUYne9SKw9mQVPNLcePtJNHaUinvYkIqoJ+607mbH
OoLV6xqLcOa1BUd3NnHtWRmNezPQbno6HArLhN8qeL/Qlp+7qPlzrh27jimF
Q4841H+o4ThTDhwuZeHRXyYu/6VlzZAS3DqXAOUtJfvUkXJNrIyXpaWw3CHl
Nt836PhR9Kz5G9akmLlwgj1N723ZN8uCjijCaZuf6HojDwGjtDyqL0OxUzHu
zJHQb2A+HM5p+G1/NrrUVtOrWMGsLxK++q1i2w5/sJSuRPAnjHxgyV3VInsD
regk/CD6hR3j5+eiYWYigsQZ2XpRQ/2bIsjXGrnDz4srXN7jH+E5faXpaNHH
kUc+6xl/OB/vU33xc54nY+2qIK/txrGhyTjxTsU2Nh7sUu7Bdcci8fJXIN4E
OrJ/TSnXeao446QVu55z5tvJVnz0vBoL5Hl4vjYHT45asvKoPQM6lmFYWTGc
M7+gTriW4bvS8c71FyoTnRj6Ws/FR7/jpKeG9hbpsDqoYfyr3zg5Us5Go7x4
1eIjdocmouuPVDRLTEXENgd2jy+ER5QFbQfWorbcyFf9CzF2sQPfNbbk0CmJ
8DKYeVn4Z5JPKF7tL0IdGw1fGyzZ/609d51MwPOhPmgVLNg5Iws/Jii575cV
uz2IR/2FGj566MwAvR2nHZHw46AsZP7vMdvPpTDXcOJ1sfbh9pHYsjcHoX2r
Me+/ABhDFfyhT8InWRp+TLfj8iFKdnroxki5hNsFg2XYF8N+aT7i2nyExtnE
h4raNH0JhL2jlj1uC+40GHjigQPfdjBQNlHLNwfNzB2i55KrKdjb3pqqDFsW
DfyDJVPCMbeRhnPF9brUykKjGD0dmsn56YKBLU3Cuy5oKdsr4X9JdmzfvBzF
SQ5UhYtOvOXBtmv+4EeSmVPuevLJAzWHrZYwQPDPtksFWO+h5CvhoaoCa3Y9
4MJbB35BeUBGzV0l59XOR3OHbBwR3eGgt2VmbgJabbOnb5QVA28Woq9CyrRD
cj71+oScH9FoHC9hDUcjs0U3VQs/X2LU8Mb1NNiYFJxdpuGHwpps/UbBi8Vy
pp80c6JWxqZdlOwnEV1SMwFlwYJP5ldBU6sGvcOC8WGdjv/UysVORQp85lrw
4bVo5AX644a/O/+ZX41F9fWcPk7DjP+97n2TVBR9d2BrpZmraih4lVZ8XC7n
tt7JOFzfyOW2Zl5Z8Ac1DxTi0nt/DLltZttr9tzslon9saGoPqik9zlbjvmt
Z+NQG75e5ouFt/7ghsgiH72ZQz7/73epuHBad2f2SfdHzblmflih54zjb1H4
wZH7u1diyAIL3nrtj6BNwp0dKtBacMC1X59wrq41FT9tGBQQA9lgJ3admA2b
hkqW/V2I0WJuuneW8Y9wsPWLS+C4SLhgui3tQypAi3IMWGJkmW0WLj535uk8
G445W4V8wT69lElQNXHhkGKx551VrDvVhb0eWjKhlpkPttvwcX05JQP8ELdY
ySFrbDjws5pj+rqx43U1d7vI6NBDyprlMQj4+BOzBCM22O0Py7s2bPpTR9PZ
rzB89mSTNZXw6m/LE/11rJthR8WMfOhVJp4/YM2Mv235OCgEtfbIKX8o47o2
lhzd3MxpvhmwbiTl3TdZSOheBvMzDYfvSsXwI+JsLUjCrZ2ePO9jyeK2dvxa
W0HrI7a0MaTh9B3h0VaZ8HuWjRXHNVx5IQTZmRF4fSkXbbo60+adBZuVmHhk
u44rvwp2fOHBTjXtuL88DW/d61LzdyKerzJw/1I7prQrxavH8TgbHgyPHyqa
bujZyN9ASUw+dhULX21ryQOHZdxRT8PHB0owb5oVJzjac8xHNVtkJOLgbVeu
n2HNH3ZFaDRAy0c+5fh43Yl/i8y/NFVCybhE6P9RMs0vGz0lSfj3lIJjZhjo
P9TEcSsUnNFJweZdw3B5jVjLFDcmHbZj2QYlD2RZ8XdfI+cHVUFWlo72D2MR
Ol3H9UlKzm/gzox3RUi1S0XalmgsaVCMvhHVaCPY61hpIpz7CH8SOX5Cr+Xi
Z6nou0vDlx8q0dbHiklBlXDw+IV0lSUd3ks5R3D/5oBINCjJwWa1lI53dRys
SUdmloJDk9S0Pqki9hdiXIaEDQZK2ehoKqa09ORRBx/8FW3Ho/f1rPktG3vE
fB/cYk15fCk2xfnC8V4MuqU5MLJ/GeyjXDn/di4ija4c9l7D1dDy2MJUrEmy
572DUg654iLcqSZ/umo49ZQlz+zQMvGjgSGCtTv8MrP/wzikXlHy68U87BX9
LGtkx3FBcfiNTHx5IqHeEIOo21K2bv8NYT4ybk9U8I1gwKNqCypUGg6TFUCy
vxL63mo6X0nETsGCCwfZcfhIBcPyLbjEw5ZfR4tMURi4zKEIO8Va2wqH7mbn
QlwS7hOvY0jPPMyrW4PvX5ZggOj5x5JcONRwZ9FJLa/ogzAuRnjXZTc2LDBx
coSZe184cMxSW6pOOXHYi1jEplqzpdKeA/fm4fcOJW9tN7C7+Sf8Z+k4s52a
cP6DWjfFOZyVh0fZGrosNnPGaGv+dLGjxQPBJoWWfPbJzF3ulTj32o73hoYg
xN6RFxtF480TLR9P07BxZh6q1kVg5kQ9OysysWebhg+zvbipwobHTlRhxWwr
Kj8nYWqekntyJTwbEI1VoQZaeYdjuc6TLxcWQp9pz5e/ZZSeL0bjU2lY8bgU
IYeM/Blkz+9Zap4Ts6OIs2eqo3D2pADcT7Cgj9aWS7JFdyxUie8n5ykL4c3a
SnSxMvPOEiueWWXPDOE8Z6+8EVnxEZ1WqPnJS/DA3QLsFp3/63gkgnvoqB+j
YZCdln9PdqFxlivlh0qg9HJjgaUbP+xQsIXg9O0NjfRe+w2fJA7sOqsIg3vY
0uqMYJ+vlVhhpeB/oiu2ztSwpriGxnsEQ/XOQdnqMCwXGdogrgQW2020yTZz
Zy1PznF1ZM2qt1htduWZkxKuWmTm19kOdIjU8OikdMGWtblgm8j3rV7saifn
ldpijsptGB4l4epaCbjpr+a49GQMH2vBqrkJmLQoGQXucmpql6GshpwmWtD+
cW3Wfi6j9n0V3gcno02Khgd7xaLvJHeub12B+74/0fiOrfBVFz6zioDl2Fx4
NlZywZ9a3NnQhm28LFhxw8TbdaIw9JaebS2D8ETZkLX/zkTrCSGo91t02eyG
bFL3N54mCfbvY8/aD/7g2F1bfmnmzrLgWPivrkb2eQMN37PR930KvjV15ZQK
4Xi7FXzrloXtzm8wYKWZVS1q8JVzBOQHk7F8SwP6LAuGbb6Bl65X4l5dCz5p
4MRDm6X0blUJZXoGvn2x5OWIUoT3TgFkwkdFfvq5lGDJxXy0a5OEdydL0LOv
PRdu13CgfQ6u9i3C2S9WzP2q55NyJceOKETd0HpcFpYFl4gPmOYtMqy5DYNj
VBwcXoSRx3Vs296D13ZY0WGcnFluEfC4Y0fNXA13mnOx6tBXrPmj4EFtEp7W
y0GfBFvuPS/n2Msabh/syIALFWj3zZHffogcHi9j3XwVm5eloWhwJu6cqsDg
91k4dkbBd8W1GNLUxLlfv+Gqo4y2tw18dcBM3xhXsqEbH80ux7JQFc9W1uRx
cS2rGznxv0zBzVXO3CH4LUp41bOv1qRwjMb77Vky2Ip+6YJvnhVh3+UP2Bus
oPGbJQeYElH9uA6DV1owQ8xq3AkVj3nI2X3le8x4ouOQhvE4le1MU1ML+k20
ZmV/CRVFVahdIWV2t7dobKzL8ztcGZhkwZqtxHmY48F5VWG4WNeDjm7ujEop
xjb/2hzwrxXTPgQh8Xg1Msbb89nf7hwjOFAztwo1B1ZCveA76tQVWa4vwM3n
gvF6ObJktIYnC38gcld9JhrCEL+2Jo/2MbDv1xA8el2L+/c5spuNjKfHZWLj
6RK83C7l9/+sePWX2KtR2Uh7q2JZKzc+W6rluJ6OTNF68OP+BCwzfEXHTzU5
fmAi/jb+72df1Ey+Wwm3oXa84mXkzYk65qvVvHBZSY+wavzvd1OO66fnl8o0
LNJo+PWWE7d/KsThCmfm2Vmwn6waGz1i0emsIxcOD0f9dzWZZdmI8tW2PLRM
Sc/WdViWqaXPNcGT2QYmxFehHyz4928vTg504+xe5dgQkocyP2tG9ZdxyT8e
3LZLxyt2FfC7686hdew41cmVX/cr6PqkCMYXEn6fVICxO/OwcVIi+mqz0fRo
FYo3SNjHw5kLgrXUHvuJKwdlHN0vBnUGqOi6uQh+zaPwrGEB3EU/LB4WDMdw
NQ83rMadTkpe2W5mL596lD8KQfOjHlzzXc+uS7RsNywZ/+4QDBeXiIsb36GG
ScV7LUsx43J9bnj+B+WGnyh9Hoi7LV15ZGWgyPFKfIu34KObQfg0V0UHiYqj
h6p4eI8bM9boWTmgAFWPHHkqXMmpY/XMPvEO9f3sOHl2Hlqnavm/5wnNr6Pi
CLdQjMgXjDnMlr+nWfLXANE3ShX3BstYNMidh718MeJkBFpkOLH+Jxuu3GFP
XUY1NGK/kxpq+HZ+LDIafUfWbi0t67mw+8SPmD/KH41t6tDpdRnmdLDi1Mly
5kX54ndnV1auqcXor0rOPWnBlgGOnCnW5uMCFT8pnHjikIzBpVUInZOCwUt8
4OEu45c1ggPW+kEyxA9ZlTJONKbBcUZd9s+oR8z1hcOy2pwjuLiRdyC8jUre
CY5Cvw6l2O8gWFtkwrqH9iwcUoCJs4vgVhKJ6FNydvIrR+86NnxVYEn1eHfW
Xv0HN9uX4sV7M/8enYjWM90o22rmhT+VKB5vyzYdLdjT5MF7iz341sKTPS/a
8E13CfsNlvHtKmtxfxL+lWvDZJ93WBH7ETtC63LtPQ0tnJ1Z5W9iE7/vCP/H
hV3PerBbxyLMF9k2v6uJjXeK/PmeAenERDw54cIHl/zQ+5eRS5xsmJlmonKB
mKV/vqHGlUgMsvBieZ6cXg307B8tp1WXMDwqrMLAAi1v7C7GpJXRmDXkD7q2
MdN1ngMXKJ246YUXixPSsG2vlhbSbES1bMDnCh1trkjpOeE9ZsvNtF6Si7oW
Jg6RNeYWHw3D19bi3hSxx5cUnGVIwD1bGf3W2DH5cDw2VSk5sZ8HHweGYP1x
PU0mOd0SalI9xJJ3UhUccVvFKz/r8N+7Gk4qqMUFh1z40fsHRv3OQUUfGRUH
UtFncyEOqA18UFaTtUdHIF8w8SJFEnw2hGJvzSzMWZOAZjPrse05OU90kTLw
Yi4s3erS0l/C9WN0TD9Tj9GCE1qfrs/5Jg1TgrJxdIacO5VWvGJbh2++5mGc
6Im0/+vgPKOiOtsuzHSYPgxtgKErKGLs3b3tJfYaNRENGo2JmmjU2GIvsWDv
+lqxd2MvRBSxYAMURBAFaYL03r8n309YLM6c59z33te11qzjUYxO09KxeZQT
O8aXY19pA04pXfhK+Gh9fQ5OLJdz/DI5iy46seVC0TMNj9ClhQt/m6Dg2C8K
JjgW4PgLF+p+seGsUKvIbDmhaMTz/WT0G/UJOXuk3DSsEdNeNmD3/WR0fvIW
8q56TtknmDLMl1llHlQdikarRC2btNVx+O1PSF0nZVa8hb3U9nRy8+SZF64s
vW1gh6TPsB9nYZS3go3WNuX28978MVXDz/3zsHh1U/ZsamKDj4IFK6thzi5D
vyNWPjrWiFG3dBzbQsvYeYL59mh5p1Dc6+/urI0sR/0GORdOKIdLpYp7Z7mz
6JoNLW4S1nRuwM/CG18dLURggJqeIUGcf1Zkm8jaVt+b2HqPhv271sFtgxsP
/yOyuasXhwZWYfhdO94VbOBQJHIqR8WGgAb8cUHOZfIvmLU/DxxXgT3eYm5D
bXk2PIjZbeyY3qMpj9Ur+aybgq+8KlF+RsPq/t5c55iMh4f0/FjXgJ3uL3C5
j4x/rH+CwFnVuDLLwBnfRKHZ0Uxo0+1Y8KIEusVNGCXyOthgy3fxLtwdqWLq
/nD8eM2RF1OlfOJUh7zFWv5w2JsuKYKvo5Lw+zUtzz++g9bDrFwdqedj+WPM
vi3lno5OLOxtZudIf27VVqHL7lqkCJfftKgOrq5P4C+csu35r5h3RcH6sbkw
ba/H9XQju23NQMq8POgeleHXJWZeC3flgaYRqBbPu3dXG45Q1SLpTWORh1XY
6FeHHRsVdO5Zh33vFGxy356bgyyckygyYFUy5OlF8KhWcGpEMSKSrDT7lWNX
uZSjm5fhg4sd65iCStpxW50jZfHefLs+iO7eCRg53JZJKg9GjJfzRaQrA0fk
Y/FeL44Y5kSrVMFWzfWMOXUbvX61pV6i5XrRq5c21mKpqQifGr1FZ4M3HxzV
c/R5Jdf8auHoiCrUDzBy5hYJ807/i4IoT/4TaGX6MR/OdbbwSBcbxt5pxH+b
qagxO1HdoQy5jwIYflnOEbdK8NfDt0j8W+RAT3uGnBWefMiRLyrL4FPkyqNu
Os69oaOqdTI8X5kYe0LF9pYU3In5jGVevlSvycIy8fdX3hg4Yoor32Rm4Jcu
b/Bb//u4fLoSZ/3fo7G3nC0Mzmx9OxPP64ohXe3Hf3Zoee+Qhrv8XWjRlOLG
dGcucrey+VErd9wXGfKPA2/oo7DpZiO23VaHLdII3G6n5O6PHvz/7xXm+nHu
gQpsHCzlD1EabhjpwNgiKYu+ceY0tZqRfXwZZ1Lz8EpbnrC6cUiZhH4PjIwM
tGP9Dlf26q5nZatMrC7OQM4rmZixr9jUsQmnjQtg4XwV+52W89DFCqxalYUC
FzNTi2U84FOEffYViPzTg+F7ivH2FynnNcnDYZ2MwSsdeH57Lra0MtItR8no
a6WYv+AT1rYoh5vgvex3pdgWq+WQaW7sfVBN3x5e3PhnMe7dLUPXVC03ip09
GKhi/vMbONPajTZdZBzeXvRDhDd3LNIxtFjK5lFGagNioF3gwGsdhLMGZuCB
Wc64d758PFrF0/oCHBgrMvB/Tnz8nTj7LEf+1VjKdWKXr/e0cOTVd1jwzsJD
ViV3LU5GcbWcWc6eXDs/BWeL/GmtMXL6IClDlgmX7yzOv7QWp93knDrRnXE7
i2H4XItLSywMdFdx+OHnCPBwZOiKaHQe5MFPzRWs3W+kzalsKBvkfO5Tgnkb
XGkok7K8hx2bCRfc3M7CPi9f4V6iht5DvTjt11x0+M3CkxI5Rx7x4LS5Gqad
rMF8d8Fql/z5dqqJt3PycX5CLDQ3zez1JA+Tchx4yd3Cry3tGdXZk+oeZsZt
fI9JEyvQbbWFDqF+jB+noN8qE4t/MFA27AYG3rZy8Bobnp+kZdkoDa+EPscC
6xeEdArgilsVyP9aivuCw85s+oRlbTX0GefKwi4N0FXUY+FNW2bXedAgvKc8
JhPJZh9u7SFly2MePNhPZJZOwra3czD2cyqCwtPw00dXltzRMqS5ilbxN1GF
doxaJGdoa3+2PfocOyfmYPEVGcc5uHNqcDYeCA+Jt/Fgdnk0ms314f0pSrZo
50T7UxUI/FiGG8Y0NDmn4IwLLjw2xpOGLCde/2RLJ6MbD8oVPPqzjqZ35ej6
VzrCBFPsHanj8XAP/nDFxB0O1bDbr6D9iVIYlrsyKlvHkDZi9oSfpssq8THy
I34WDBHeojE77bDnqblGPtjjzPWTpZyxycSpihTkH7On6Y2Gk8WzDbup466Y
a0i8rOL+hCTUiud83SUH7bclodUXLZOe1aG3bwMemhvRubQKe359h5AdLgw7
4UTtSimvjfmA35orGSn6zXQvH7mLFAyIykTCRC294oSX9lZw4x8GFvZPQ+9q
A7s4GthzZC1uuAmXWu3LIcJ/A5KUrL4mYVigO4ffzIak0p23RDfa/2nHtoLr
eqQX42BX4Z19H2H3QDNnp2dgp9idwPMVGPPQhjvqnyJ4oB8n6vIRKK9D0mN/
6hwScKBPHfY+dOehJmmwCF7r10rsZQvBqK2F9/WQsdSuEp+8shF0X8v6nCKs
EV7SYlMlPryOw7c/1aIm0YfnhyQg12THj9FmOrR+Agc7F36qlHJgl7fwFQ4e
GK3ky+VSFsyW0XuPK8vHmjm4QyKK7/z3rjOD4BfBDncstI8rQbe7RqbsbEDY
eMEv4ndzv60C3yVD31FFj+fufBH8FGtTXBkp/KJeuGHoSRtOTZVwoFce9uZL
OW54KW62kvLLC1su/CMD01ek4GSCgW9u27NHSilCnzpx6hoF+x6twOE99eh2
3Z2bNbZ866Nn2NESBM2pQ/lLNzpTzeSR9ehd+wDap3q2c9VQ9bM7Y65n4OLH
Kkwyl6LUqRzVC0sxaIUnHy1oxPyG1yj+qynfqxpzqfDeYXkixwbYM16VjxV6
CdMFR83Kt6OjYLOYQjOlWhWVYU40f1Hyl5aCRe5GYFp3D44Nr0Sah54PTzbj
kT2xMM5yZd+/ZeySZsNFxUbuaqdh019d2SirCiN97Pj6qo4vTqQjfJRww7/u
Yt4QDa+rq3CiohwL1+bjlbjuVEsx7l4Xn2e2Dd+OrkZYjg3d3mqZUWvH460E
20jyce6tlWW/ebIhVsHyw76ctzcaY3935Iix93CpSsV7ju58Pe8dzhzUcV6G
K39u50hVJxmHHGomekPDTaM8OFuw/+ncelz+7z0NF1Ws6S7hgPsuPFldj6MK
A2fOeo1hG0wcobuNwJk1eKKuw6pmGk4bZs9FJjFvZTmYMU5D7YvGbNs1Emkq
PXf307DHcgWvZWVgWGkWvs7yZb8kN36j1nLXJSOHJSs5PVROY0wGVnzxZerT
bIx/pqLdyBJYEjRcMKcUf2/1ZomtjC5ZMtaOsmP7pArIxXlOsHjwr2g9b75x
4JMZOj6r0XJodAay/qiAoY8jOyx6gBPB/nzgbWK4/AO0IXE4ExHIpcUKho5T
M3e6G0eqVXwTK2GbCTIeEfNzS3RS0DV3dproQ4fyJIR62bB2vox7QuNxNFfL
Nt+V416RL1c4+PDoEBt2CHyB69/5sfO3Eq6wq8PC5r6M/Wzit2zECH0Ar/xb
gQJvN060MdP1exdefuDBeec8OX+mhesG3YZLhR07fdTw4Qozpz/xZrpzIr69
lIElIXJeyyvAkqZOXBfsxeYXJbze24HbTJX4KToVs9IM7N5Vyx1LBJPt1PB9
Dw+xR9mYe0TGDpNtGbP7HX5aV4LtP3uy6bJsVO0uRISDE88IDu+zI4Bpg2Rc
tl+4U7/G1A6px/lzUmbcycTVaCuHLvXj+dFyWnq58fWAfDSckDLxvBunxKlY
pjGy87BsdFsp9sscAWu4iW65gmVWu3L6UCfmJb7HjktqttJ7c9rNSPz0TM6y
TAfe9jLz+EA5j5tqEblHdP/+bExMzsMBMS97O6kZPt2RbfWp6N4oAe3tFZy9
KxHKQ8I9fneg7ZN4BC9Q0dfRzD43FZz2zoP3h9hyunCnHs+NTDTVY7WHms1D
3uLsTSvVq1/h3JzGPDdDzJbYV11MHBDtzciibPz3ndQxGX6MHZ2MJ0Ey7p6l
ZvtxOmpay7hqcSmav9Iw1ezCmKF5aFzkwjS5jsHhnzFytJ4T3pRie5oT53y1
5W+nFVz6xJcdO9iyfpMHuxUIH3yg4LMlgo+/Fzs+MAm3hmt5f5gr+3T059p5
dvzS0Y7z0gqQK+bIsMzMZNHrew67MCtUxfMSGyaL8y35153fCY50+UtNeS9f
Jk2MxXCdDZ/94cncvyoRt+AzameYOPmDlZfXl+Nno7h+pYTav+ORM9Seax9E
weGNDxM8fZkwx447yl6gZp0DkzL1TN8pYx+IHv/XzG7thReKa8y68AxNwvOx
cGEK3q91o/06cX7/E/0+vQ79T4t7GOzM4Sk2vPCsCXPtPuNagIFOzey4+ZkX
z5cqeequN6uDTHxalY+bAxw4sYmZr/d9wOm1JuY8rEW5jRtniOfmr3PiYYuZ
E3+Rc+a0GvQdUolVnRy4J8LMUNGfCZFvMG6CjmFqE7/0LMLVc/UwTtERBkc+
nWth8sFyxIh+jxfeMvkfWx5uIeWZXl48sNnIpO8zMUycR1hvWxa1D+AZDwcu
bBONiWFq9pFaeeifL5gvvD95UxX+TCrAL3uNjH1m4Iblek6lhVc/2xAHKzF6
jRPRW8lO7Z3ZvVs6Tj35BNPsB5B3sOf3aldumnEfWZ0UHBLYhNtOV0PZRMmJ
SwxsX/YUvYKcOWhAIZ7NqcV3l6Vce0BF1/OCnfflYnZPb27c4sCU7TYsdBSM
ElCCDkYd32tN3NlGysgDUqpSqhF/tAHeV135TOPH0/JqVE4y0ltWhM7GCPw4
uRCF+5zousiNSYWebPzWjT9kyPnovpqfO4p+Cn6Pfe3suG6AO3scj8ak6g+w
9Q5khFrOkDwdm2kU1L7WUS3zpPvRYmx5Iudv201sPlPCWKWBq9468dlACZ8f
rMH1JjcxV2vPl4/jsXdbU+ZtM/Cim57b4qXcMLUWwV9dqU525BtTENMvKDlT
3ogFa/z56/QGKLxM7NTNlt2uWnlznYER6QbO7vsVe0XWuJZloMtCHaXyZtyr
tWWorx3/e4fvcJsm7P+0AYPqhYeEyTngYAI8tpi5rJ8zsz8W4NABD94wOdHY
woGOfR3Zq6AIUUcLkLI+Bqm2ei78Xc95EidWzXHkrf6JWLNUdNgETypdFPw2
R8bCmUEs/1XBd8u9RdcredIjDhmPs2FZquPzBBW/87Wy6WAT960Uva604xpP
E6cJF+joX4cWt5Ss/+kztoeJnV0g49N/k/C/rgZWDpdR26wEY0obMAV2rDgS
g/F/aNjQR852IRJ+WlmNu3GObCH8RNY9CVe72fOqJgEfahzYLSwLe7pKeVP8
75QiB2qWO1K714cblvkx7lMRQtaamd23Ea+LvejU1oYNvb04slrCntI6yHr4
iVxVUJn7HEt2VeCh8NOr4qx9lmpEHoi8C8pEeL6eQ3pUYmovuchhXw7HV9gk
VOK9twevjH+GpBVSaiZIaVNjoWu8ka2m5cB+oZbLNW9gd8HKv5amw19fhUU3
q2H4pKFTcAU0hnr0mWNmx6BKtOhux9XXPiI43MDnJ/NxIbwMRaclvBpq4LJa
0afznNjuXwlbNfPjxbpCHG1q4m8VlXg615Gz7mo4akA67s0VGVBrw80rVExN
aMIDHzzYtflnbGzjzlajrJxr/YxJnhoe3i1h5n5bNgvJQlDrdAStE/O8uhwz
xdlduvce0WMFy4XL+OobJZcMljNngoIaaQPGeQtvG+HO+ZtTkOJm4Z8xPiwT
n/viJDNr32biYJWWS1tmYUKGhk9SVUwOfYxdXfR8H3QP/Qrc+eaghQfd5ZQv
eYzffvbhvSWJuN/Unu9OujBpQwEmB/iy5yYvtt2g4qj6AtRfKsYCj6+YMsaJ
04I8eWWTnH/u/IrgaCd+Lg9Hp1IHzpZnI6ZOw6LXSvYNV7PDdiUHjrVyxn/f
3z6bg3BnPZ8afOlvrMDmIWX4eqgMB1o68+FFKdOeWBk+uBbJ/uFo93s9mvWN
wZ48X1Z4KZk6WsKgtQ34KUjJf6dU4NYAEw13dfw5X00vv1K8N6rYX/UGa+9n
ocUwN4abtEzeWoIP931oLJTQziThxHe2vCJc0/aYnvFHiuFjsaf6XiUC3gXS
zSyhV1tf7lSp2WK1lFqY2NHJncu/xuKOyLyCNe5c3E7KLpF5WLcrC23q1TQ9
eAkfke1ax2KMy1Bzd5iBIR1y8ZenDRX7dPScrOG53RZeWaTkgIsNWFMq4+fG
NjxxsAott9iyjb2aIRM1bC3yMHaDntnDC7BnkeCivcIvRIeOaWrLR93M7Lwu
DzNmVuLKvRIcOp6LCBtnWsIsjDmcgAstvXhkvgtnrJGyka3Is+xMVK+X8HVX
MxtfU/D2RgMnLnuG9d1NlGwvQjsbL/551sqtQakINZYibYA/W213ZHtjLRad
EXwxoBhH91Zh6noLx0gSsXytE327fsKztuK8xDPqXWfh9DdV8PmcgvAqHUdO
k7PkQ1Mqxb0WyGrxNFzJv99L+ccvKq4oUnP0DA1XehXisLwUE1u4srfpBe44
OtPt0GdcHeVNk+i4mlsaXtTbcNIXNb/mlmP//kSMPiCh0d2VS5vrGDT8GfiP
4J/or9h/1Y/+6zUcHCDnwrcFuLncxD9ThA/utv//9+c12+/DUdlSkSkGjn3T
gGVd76IuUcd27RLxpK83R++Q8wcvuciGPEDfgLy5BhZoDPxc3JS/iF31WCiy
U92I5jmVKBMz0v+IE3uFlaNotZ6GKD17udRg/qanqJ3kSoOuCnoPP1qLrAwa
VYfEJAVnesu4aZ4NXwW5MLLakyt+VPH3UUrKtEY2xKehyteFyWe/YNN5Lx4+
XAO9zJFfBcNoEkQHBks4vKecDhf0bKtIg2vPLKhX5GLoPgXbKEpgc7IAmjeB
HHdPx0sjG/FfHwVXzk5D0hlHakbIqXf25UOLiltfiXw6k4sNwxOQ90jKsuN1
KGlUhsGzHbm0m477D8bi7N/ubP2jkgty7fhNmpahE58hyr8p66qs7KKuxMO0
j7hx9BMWxzkTO0sxs2sB4lsU4tz8ZGRe8+SSN9m4PLERlz4oxI7Wes48KOW2
Tkbuvm5h83f+PPnVnm8ChKsM0XHBED07jZMyaYSCwV3EHsz25OIIq+h/X9oM
t3LMt7a89KICDkNELyaW4pqtjgkROvZ7XoHXW8rwp+BinwONGLwugOo29ZC9
rUbI7xZWBX9B7gkroxLd2PSOlc0mODBd9N27kWJXL8h44qMjkw+lo/88H3q/
9GVDL7E777KRMDmA8xPrsG2gCw8skXJNlySUTxKeGNiYHx4XIuYHNUsOf0Lh
DSMzm2Wipfj8n3IqMd49E3nPzbwrPK1hnomvllchaXAprI/kVELMZEwJwqdL
WBzpzKvbHFi2oAhjlthTG/wWnV/nYJ3Y7WrBof2zavHPJqvwPD/edG3A8LAc
uJtV7LXMyMeZGTj/XSES2zXg8XeObL7Zgb2FZ5SPD2LaUzmb1TRm6DNvRi+N
wsXv6jDI6sqAq3mYcLEAHS85swfsqdlZhyEltnwpsiZgdQmi/CyCFbWcFdyA
bte1bHJXSauLH50rPLk8ph42m8twIsZIwxE51z3Tc8dNke1me+4a+wFrB3nx
aI967PosY5vLH7F901u0f+nBDPsq3I9SMWNqBIa61SFPWoz75QaaLrnwVHPR
X3IDA4XPD4zNwITf3PngtJ5rIp2YtrABZ//w5ZYXDhy4/AWGh1ZDH27HjN4q
xpWmInCzhD/YVqNweQWGphUjZEADxnZX89jbWBRPt2VUURGiPaMxY3kRFtU5
cH9hDubkmjg6pBwjr5hpfROB6Z2yIdsRhVfpTThkeTlS971HvFTCY/G27HTd
zFF3pfxW0YDRy7UMszRl0Co7Xq82MONrOsZ2sufMEyY2q0/DxmYFWHXAkRs3
yvi/phruO5CA8+UlOF7tzcQf36M0ohLf3nXmBnMhrn5j4I7Gftwa/wIO6/15
TDhFk3/yEFJmw7HOn5F+y4VyWy0Vj5yZUqnnL9lpaKnWcs13eXAd4MthKc4c
LH4Ofh8Np1hn/okSBN+UcGm+iZP00Zg/SrioReRKkYrPp0k43l/C/KGubNvN
i2nzvTjlZ292WR2OITOVrBmfiy4H3bjyzmf0mP8Epw9JeOGLiT1Wp6EoXsGz
S5vRe3Q11syw8LJExV0jKnFMko6wwQ480NpKt69OHGBxYWy/RpQ3/4qDBk/G
2supvWPDfX086bHgrcjGQvwUIWf/j/l4tdfE5e8dmTLlK67v9qZXqT9DBkk5
aZ6C10vqceW3GqRMlPPqWC+69HThupYlaN9WwTDBh+7rlLz6JRfr+xWjscs7
NJvuTE514YLeGlZekdGpn4mRM3xZI+b0n801uCZ4xW5oIdqMK8S0LAWdZ3lz
X2tH7h0RD26RcOY3tvwpx52y0y7stFjHGx2KMLithe6RclrvW9lJq+GEwR/g
I3hi+EATfSqf4uQUI8+1tHD9KDd2jUlCZb9cxI5yYZuBybg0JgN+mba09HLn
kVOlyOtUii9T5Xx9xcoN3xiZW6dn5SlftrBTUn5Bzdt9y3Dy+RPs18qZekPs
tGCRG7uduLW3mef2O3JAqpTzhWc8LIrH6kdOjPKUMLDOyJf7xL29UHOOgw29
38nosseFpcP0LM7ypH6lH7sdzoFhVTF+H2Okw3onTvq+DH9978mQURbuGmpL
/18N7LVVxRqzhc+qqzC5WEHzsVwM8JRy0bwKhJxpwvEfxTmI3ZwoZj2wVs6d
nmKHBuZgbGQV4nvV4vYXW077w5ZXh9vztpizmlfO9Fd8xTS1D+MmCeYxpOGI
Rwouj3OjX5YNe/hYuPi4D2NHGPlcZuXEUj1/fG2gXZSEJ8T1N37Q8bSThOad
znzyypF9lpSj+mU+4stkvDirCiFKWy7OL0fthQSUDWnAQ1sXPjgXwJkFXgwT
XHHyTQ22/1iL0SfKELTYQuVdLZfIhY8+SkN0TTH+Pp2FaW9iceOekfK6VGyZ
YOTr9lV4suYF+t5PRWpsCd7a6ymf3ID9/xiYWBKH26/8OPq2lfZb6rB2WRls
5qcg846ZP/b4iIuZWjr9KqWtdyoy6MNLlx8goqIMC2ytfJn6FNE3sqH8swFH
4hzoFefB708puN3uMeK7OLHFHwGMuxqLL72NXDBYxw01DajZm44fxL7P7yc8
zPcBDqwXPZWRifr0amhPKenpmYNOJ038zsbIb0QGSl5ruHeRyMnEWszOV7By
mYmqn+TsPaIKXl6uvL7fnitEr/2iMnP91ka81ULHTjWuDNzwCgXXSjDnrJav
A1+Ckxrwd4ors3+vRmP/fCxP0PF+Rztu2aXgL0usHPtcxg/+eo700bHn7Fx4
7XVlXG0eTs5WUz7tPXq0LIa5YwPOZ5s4fUo5bCdH4Pe9oud6WdjrXh7OPXOm
eoB4rmNfYstE0Rudtcz7/AVTQ2uwuLQM6VYrD221cu8YFe/LXPh6/0tkRckZ
X1eFbmM9uPaJG+PWvEV0dRE2vQ5g8NE8GJyactRjC+sz9Zx/Tfivqyufe2VA
EWxh7xXF+NSyBhUj87F2uQ13+Nuzanwc7o1VcJPgy3sDNCzLUzLK7yvWPc3G
4w0yxuZ9RBtxHtVVLrx6TclBh23Ye7OOfz8pxpdRDlz6sAyjv1Ew96mK71Y5
cX5kDWLCU7HJ7gvs+hXikeDHxR2kPNhBT1s/HXf42nOYmw2T53pTfsmWx4/n
43ClnPO+iFx6Kma+eym6byzFq74lGHLEwvyL7qyYp+TyLrVwDbVn3Q/12DHc
yHVJTlwZZuTk46Kfusn4fzvAwo8=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {10752}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT]|>|>,
                     "Net/SoftNet/2" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_572ddd96_70fe_4417_8084_83b93f8bf9df", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
kepE+I3/A8SM2ak=
                    "]]|>, "orcInstance" -> 94815920, "orcModuleId" -> 
                    95299456, "targetMachineId" -> 75835344|>, 
                    139782730577728, 139782730577584, 139782730577664, 
                    139782730571776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_b95dc1a5_c744_488c_9658_959ead1e26ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
1igs/Duzqb/z
                    "]]|>, "orcInstance" -> 94179472, "orcModuleId" -> 
                    76310064, "targetMachineId" -> 96070272|>, 
                    139782730564128, 139782730563728, 139782730563808, 
                    139782730563584, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {10752},
                     "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "0d3040909256d940", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT]|>|>,
                     "Net/SoftNet/3" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{512, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{512, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_572ddd96_70fe_4417_8084_83b93f8bf9df", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
kepE+I3/A8SM2ak=
                    "]]|>, "orcInstance" -> 94815920, "orcModuleId" -> 
                    95299456, "targetMachineId" -> 75835344|>, 
                    139782730577728, 139782730577584, 139782730577664, 
                    139782730571776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_b95dc1a5_c744_488c_9658_959ead1e26ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
1igs/Duzqb/z
                    "]]|>, "orcInstance" -> 94179472, "orcModuleId" -> 
                    76310064, "targetMachineId" -> 96070272|>, 
                    139782730564128, 139782730563728, 139782730563808, 
                    139782730563584, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {512}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "0d3040909256d940", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 128}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 128}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 214936, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 9, 15, 22, 26.081143`8.168901602399556}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|
       "Input" -> {{"very high", "low", 4, 2, "medium", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "low", 2, 2, "large", "low"}, {
          "high", "low", 4, 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "very high", 2, 4, "medium", "medium"}, {
          "low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "high", 2, 2, "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 4, 2, "large", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "low", 3, 4, "medium", "medium"}, {
          "medium", "high", 3, 2, "large", "medium"}, {
          "medium", "very high", 4, 2, "small", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "very high", 3, 2, "large", "medium"}, {
          "high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 2, 4, "medium", "low"}, {"very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "low", 4, 4, "large", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "very high", 2, 2, "large", "medium"}, {
          "low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "high", 3, 2, "medium", "low"}, {
          "low", "high", 4, 4, "medium", "high"}, {
          "very high", "low", 4, 2, "small", "medium"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 4, 2, "small", "low"}, {
          "high", "very high", 2, 4, "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "high", 2, 4, "large", "low"}, {
          "medium", "very high", 4, 2, "medium", "medium"}, {
          "very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "medium", 3, 2, "small", "high"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "very high", 3, 4, "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "very high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 2, "small", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "high", 2, 4, "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "high", 4, 2, "small", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "high", 2, 2, "small", "low"}, {
          "low", "medium", 3, 2, "small", "medium"}, {
          "low", "very high", 4, 2, "medium", "medium"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "very high", 2, 4, "large", "high"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 4, 4, "medium", "medium"}, {
          "low", "low", 2, 4, "medium", "medium"}, {
          "very high", "low", 4, 4, "large", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "very high", 4, 4, "small", "medium"}, {
          "very high", "high", 4, 2, "large", "medium"}, {
          "high", "medium", 4, 2, "large", "medium"}, {
          "high", "high", 3, 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "low", 2, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "small", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "high", 4, 4, "small", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "medium", 2, 2, "small", "medium"}, {
          "low", "medium", 4, 4, "large", "high"}, {
          "high", "high", 4, 4, "medium", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "high", 3, 2, "small", "medium"}, {
          "medium", "very high", 4, 2, "medium", "high"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "medium", 3, 2, "medium", "high"}, {
          "medium", "high", 4, 2, "medium", "medium"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 2, 4, "small", "high"}, {
          "very high", "high", 3, 4, "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "medium", 3, 2, "large", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "low", 4, 4, "large", "low"}, {
          "high", "very high", 3, 2, "large", "high"}, {
          "low", "very high", 3, 2, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "medium", "very high", 3, 4, "medium", "high"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 4, 2, "large", "low"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 2, 2, "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 4, 2, "large", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "low", "medium", 2, 4, "small", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "high", 4, 2, "large", "medium"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "low", 2, 4, "small", "high"}, {
          "high", "low", 3, 2, "large", "low"}, {
          "high", "very high", 4, 4, "small", "low"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 3, 4, "medium", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 2, "medium", "high"}, {
          "high", "very high", 2, 2, "medium", "high"}, {
          "low", "high", 4, 2, "medium", "high"}, {
          "very high", "high", 3, 2, "large", "medium"}, {
          "very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "very high", 3, 4, "medium", "high"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "medium", 3, 2, "medium", "medium"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "low", 2, 2, "small", "high"}, {
          "very high", "high", 3, 2, "small", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "very high", 4, 4, "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "low", "high", 3, 4, "large", "low"}, {
          "low", "high", 4, 2, "small", "high"}, {"very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "low", 2, 4, "large", "medium"}, {
          "high", "very high", 4, 2, "medium", "low"}, {
          "high", "very high", 4, 4, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "high", 2, 2, "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 3, 4, "medium", "medium"}, {
          "medium", "medium", 3, 2, "small", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "medium", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "low", 4, 2, "large", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "medium", 3, 4, "small", "high"}, {
          "very high", "low", 4, 2, "large", "medium"}, {
          "very high", "high", 4, 4, "large", "medium"}, {
          "low", "medium", 3, 4, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "low", 4, 2, "small", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "medium", 2, 4, "small", "low"}, {
          "very high", "high", 4, 2, "large", "low"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "high", 3, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 3, 4, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "low", 4, 4, "small", "low"}, {
          "high", "very high", 4, 2, "medium", "medium"}, {
          "very high", "medium", 2, 4, "large", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 2, 4, "small", "low"}, {
          "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 3, 2, "small", "low"}, {
          "very high", "medium", 4, 4, "medium", "low"}, {
          "low", "low", 3, 2, "small", "low"}, {
          "very high", "medium", 4, 2, "large", "high"}, {
          "high", "medium", 3, 2, "medium", "medium"}, {
          "low", "very high", 2, 2, "small", "low"}, {
          "high", "very high", 3, 4, "large", "high"}, {"medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "high", 3, 2, "large", "high"}, {"medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "very high", 2, 4, "medium", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "medium", 2, 2, "small", "medium"}, {
          "high", "high", 4, 4, "small", "high"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "low", 3, 4, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "very high", "very high", 3, 2, "small", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "high", 2, 4, "small", "low"}, {
          "low", "medium", 3, 2, "medium", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "very high", 3, 4, "large", "low"}, {
          "very high", "medium", 4, 2, "large", "low"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "medium", 4, 2, "medium", "medium"}, {
          "medium", "medium", 3, 2, "large", "high"}, {
          "very high", "very high", 2, 4, "medium", "medium"}, {
          "low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "low", 4, 2, "small", "low"}, {
          "medium", "medium", 4, 4, "medium", "high"}, {
          "high", "high", 2, 4, "large", "low"}, {
          "high", "medium", 4, 4, "large", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 3, 2, "medium", "low"}, {
          "medium", "low", 3, 2, "small", "medium"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 3, 4, "small", "low"}, {
          "very high", "very high", 3, 4, "small", "medium"}, {
          "high", "low", 4, 2, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "low", 2, 2, "large", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "very high", "very high", 4, 2, "medium", "medium"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "medium", 4, 2, "large", "medium"}, {
          "medium", "medium", 2, 4, "large", "medium"}, {
          "medium", "high", 4, 4, "small", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "high", 3, 2, "medium", "low"}, {"medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "high", 3, 4, "medium", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "medium", 4, 2, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 4, 4, "large", "low"}, {
          "high", "high", 4, 2, "small", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 4, 2, "small", "high"}, {"high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 3, 2, "large", "low"}, {
          "very high", "very high", 4, 2, "medium", "high"}, {
          "high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "low", 3, 2, "small", "medium"}, {
          "high", "very high", 3, 2, "small", "medium"}, {
          "high", "medium", 2, 4, "medium", "high"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "high", "low", 2, 4, "small", "medium"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "high", 2, 4, "small", "medium"}, {
          "medium", "low", 4, 4, "medium", "high"}, {
          "low", "medium", 4, 4, "medium", "medium"}, {
          "high", "very high", 4, 4, "medium", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "high", 4, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "large", "high"}, {
          "medium", "low", 2, 2, "small", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "medium", "low", 4, 2, "small", "medium"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "high", "high", 2, 2, "large", "medium"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "high", 2, 2, "large", "low"}, {
          "medium", "high", 4, 2, "small", "medium"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 2, 4, "medium", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "low", 4, 4, "large", "low"}, {
          "very high", "high", 2, 2, "large", "high"}, {
          "high", "high", 2, 2, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "high", "low", 4, 4, "medium", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "low", 2, 4, "medium", "high"}, {
          "high", "high", 3, 4, "large", "medium"}, {
          "medium", "medium", 4, 2, "medium", "low"}, {
          "very high", "very high", 2, 4, "small", "medium"}, {
          "high", "high", 3, 4, "small", "high"}, {
          "high", "medium", 4, 2, "medium", "medium"}, {
          "low", "medium", 3, 2, "large", "low"}, {"medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 4, 2, "large", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}}, 
        "Output" -> {
         "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "good", "very good", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "very good", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "very good", "very good", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "very good", "unacceptable", "unacceptable", "unacceptable",
           "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "acceptable", 
          "unacceptable", "acceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", "good", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "very good", "good", "unacceptable", "unacceptable",
           "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "acceptable"}|>, 
      "Predictions" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "good", "very good", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "good", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "very good", "good", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "very good", "unacceptable", 
        "unacceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "very good", "good", 
        "unacceptable", "acceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "very good", "acceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "very good", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable"}, 
      "LogProbabilities" -> CompressedData["
1:eJyFWndYFMnTniWjoAgioCCIiiiIICI5ZxTJIkHvRIyogAlFhRURxHBnwIwY
MZ45n+xOcahnwqyggmC+U34gCBgI+/WEWu+G557PP2xmZ6enurrqfd+q3n4J
yeGTFSiKihVRlBL14994hw8yWaYftFwII1fBUBSoSVHiSMD7DqJqct8XGioa
ZDI6HB5Odn0vk42Fl0NS2lJqDtERHndKl01Sg6oiPccUDXd4Mq+noUOOv/z5
lda0TCYLgXYRpTcQxsGD4vQqi/458vtHvWeT/0eByxB38t5R0KpqQK5D4KnJ
95YnA7TgXVZ01JKkvTRexyWZVW9X8pA//6nEjfzvA33P/y2TuYdD2aUOYm8U
6OYfM327aQN9el/5q03aWuB8TnthkZId3DLyLw7PCgK1i9bmUZQXLBQd2xMp
MoWkW/NdDivoQ9CQo791CZpM4/zKcxyJXd5yu+I8+5MxEqZvON3j3pAw6Z6W
E2R9I2BVqwrx7HDYvIx4WewJQ3Ys3hVnlyG9ST8hn1uDo8Nm8nkodGi0iSjx
WJCx/04UKy5fRObzggE33xL7I2Bd8nVVCsZC0/P7/ReccoK+fXMmX7F6R1dl
+PnVJvSXXz+ufKXLrK+14ia7vmynW2R97mBb5UPW5w+5p5Ze2jvsHY2j/rTe
Ft8T+sH8N+GrpBWend6fuqCMXAfA7TvNxI7QTvuHdqX43217ej8GfspukgVY
fJbMK2ki9+1g1TEpGb2g9/kaMgbLnw+5rUfWHST3G8aB8P24/1fvMH6OgL3M
7Z/6S+ipfcm1O+y5eobsayBorFBj/ThebR4bf9dDuPj76dVihxQNZ7j/oIDE
XxAYh3YJ1OxnA/cNPgbNUBMBPe2XgP05QNue2tnPLlsfPtSR6VaKJRNGryYv
cgJfC+79+mHl5Ea43P6IQlXyuQ8YRZL1ZYbARDsmD6Jga8CXRStMnEHiera5
i6cp7DXcpSXxAnpm99nlFkoiaBXNW0OJA0A2pH24AmUGQ7t564soG1j3um7a
1F8apHVDrPR/XbaYTjukMrlGpScMSWsyuCiyhcGvTcjoApntxKz3YZKicRfI
Hy6gfcCbWBMAhvz6/8x+/HUliVc1rcp7r/0T6Thxitteyg7qd/oah1F+cCLO
9abNKqCfJdpeN/cyBaf5Pv32ET+0vP2wMoysH9e3WbEPRUEohKwMr1OifuTn
s4fqxA4n2OjvdHU9sfPyPs3eF0XDwUr56ETGXnx+26MY8r8vYJzcXe3/WOYe
Lb9ff5fkpcwPCrOGkatweZwL8x/33WH7OHJ/LDyPObltLXmvgvrBROZ9B5IW
alSSvHpRpaZZSb5/tv3O8SgVBxjazyHj0thtdJdq6YWxBlpwSunw72MNftiH
+YvzYxzifeueXNwi/rkNvUb2N+I/4xPXIcQf9KPj+EEU5REJukxa7EySnP/f
G/KHM5xpZ97vBvH8Pgrj2yKe5J3MF8bPbyRxFgBMNsoyNSTWu06TP9xhFe9f
SpHMR0fCwevfZBZ2lZKGTWbkeXuYdZmzM/kIt96qxPCnjYoikG2fPGqoO9AZ
elRshokrXK6ZM9R9nQf8eZ7Dj8c8frjoBhDc8IJfgjwnDBaFwaNlybP7KzbT
g+6/yFur8YhO6FU3O3G3OezUau9jcMgb5sr8rV47TpHKRo4hdllDsOJl1j9q
OpP/5V/kF+SPvAkPP5ksioG3eaNCGLtula5j7az9tIrYNwJub3Ub6q7l3Wl/
cN8wvq4tfR9rTOLuxKOt979ThrDuTez0pdQACO65ty4pNoQWvh+fx/cL138k
Jqo4XMEHvi4rJX4IhgOWNIsvsUvusviifDOX8JsD+C/1MHRQ8ZHbt93IlKz7
R9wgvjWw8dNc7JHKvN8DlPg4ircj+0yHwVf2fnWxc5Yr+dwTwu0uk++Nlsfp
xj/S2H0bmxvB+keckBeXYeIAqW0lxD8BcGQF5XPt3VFp9TMvEniWcGyakSqT
h7vGL1Fl4riRnb9J/v45PL638Txm3qU17+Poi/TF7+bl26wtwfSnaYlT/1CT
j45zrBXqiV/T+/19LLMmmN7/JScrjbIC++hZNUaUB+xf4u+zl8Td5FtDNfII
Dp31TA7JDUikz+3vu9JHZAVKj2JZu+etrWXXccrzY0yGyUg4KE0h9vtBc/L6
bwqUI9zQbW1UJvumcWyAb3SZKo2fz9/4WHZSs4tUb+1sll//zCNmi71A1N7C
5gn6H3krvW0HWae/PI/blDbJPhOezIjP8awnvNmWOd6tPmGg/PMP3RO2i3W0
4GVzntpO8UbaYMb4ArGOIezwjwkBdSugmddETZMU8PmbyO/fTh4HqidNYdeV
lMrlWXb0A7I+Z9i41YDkVwB0+3aKxa8ZPH7ZXKvTvyhyg5th7iqzxT/4Vaiv
kGeF+BDJ8+gUiuysexjo8Lqrtjenw6rubCS850Hs2kviM6gTfmzh8SmezwPX
6bleMQr2MDLloPJkdX04oCtdpn0ziy4ynqo+Wb1np/hEHEed1aD4JHQs2a/z
Fd/Z/ftrksYSkTgQMn/3k1IQCc+u7H5qTvx14NqWhH2UCVSe333dT2QIqfVV
cxfPjKSfncqsZ/BmUN05ySh1c5ihnEelb9lA73uzKm0Lycd999aR99lCvUbV
hIPdPKXdftMldoyEHWFM/NqCf5HBR2b9Nm03S9PJ+jcFBi2u0bcC07Jk1xQN
e8gceZP1u1bwFLNfyD5URy4h/h8BlhO9Ca+5duIHzF+t3voEv6MgxrNDFm16
VeI48wqzS9BX7y0bB9rlHN4f6GDg2EnyqY3D9XaeB77y+3iwOtSfiZdz+7T7
iKghsPMB9BZR5jBPN3+V6e6X0nujh3xj+Pt4jGHaO8LfkeZZ7nvJuqJjLrgz
eSXc/2Z+/pM8X6L9qE/AkNNdHnQA+XRsp/0T6ruMq4P96quC6YHRqz/VkTx/
d/tjlRGxN++Xv6qMxJ35CfXXbp7/ShJ9Sk9amtBVLX9baFGm8PLZnK5KlD9U
JC5WVqBC4cZ3BdMw4tcdpUYsHlirW7I4MXfHeE8GJ4T+i+fj+6FAf+L6UCdg
/L0hDO2+cLNk1q0Q8rkTeCzi1tf3LjfPtKXFqz+RdY1eua58Vo8xdEEXM5+F
xP9rXG6aupDve9YrXkknvNba0udYX8Jzv0zf8NEm1B50XDVb9A95wXLCr4sJ
vzby/HrkMIejK9dwOjA++f00RnfZ5lxndVjExVHGYWIPEK3OI/rLq5P9qA8S
+fzF+7gfqBuCtkQ0yjKjQdNde158br7UDx6qUwR3l9NvFZh9LOiyk4yBoOeu
PYe578vfn9t2WIHBRxyF+IJ+w/gW4kMs6g6B/zFuHGUPyP0IuT68EZ8sfUPy
a3ZFY3XjhsW00QjjCXMUzcAhY9KwS0Q3SjUX2BcRP9d4fyrPJ/5Z4Ngzs/JA
Il107MvMINGATvOjvkKd7REvk93VPy2ZEs/p8/TiAeTbjtDYweGx0P5CPj6/
8viP82P9gfNifSvkz1nFr1UYXlSeP0vxn/Vv7V9MPeklxz+cx3ZCwO/NHXZ0
iZmCTJfUdzimZSR2WBC8w+exbkTdGHOE6AUqqhP+IP/j97SKj1evUjWVGlxI
Y3Hwkm8Zi0NPj5H1Z3qC4iqNJRkmNnDD4FakG+Ghk69q3n4mPDTHrOlrm8cQ
OLE17XEV5UrypikiTdEQLMWvQtMU9eH++d/Li35PkusjjE/UJYgf3c4tKPls
nyEd/TdXv1osImUMeX9IxM8iBtcMT+VPefHoK32yqGCnvV1faNX3qyw+/JLG
z4X+L+D3pwtfvxi94uqewVd7GjB10MYVXP3jdns5GR076ZcI3j/5oVx99nBv
8Q7m+ZDT9yOSshbTZ1zMx6QoWkLGlFQdpk7A9+P7ZAqcbl5vr6jA1N/C+dHv
yL/qokPdLyu5QUtctmst4aNIl7HGC9RNYDW9v8OldgP9XmpT7Ez88Yley+Jn
q673RgZPnz+ddNmZ4AW+H/cV8RnfE3rhf8o9CG6uzSj8Q0+5H70p6LhSD4JP
50x/JaMVFK+qzOtK6rg0HUMzK1I/jsuxNLcicRUq2/VplI49XdZUGmf38hD9
Z591T7IJD9q5LxnxUt8ceu35Pfif+hT1M+pgrNOE9Q3qTtTXyUtOVV++2E96
+lcu/o6a5bN5qOMziOUDnB91F+oXrN/Kfs03Y3ja89YenUUqpdKlLT7BFOHB
HSYpAylqBKS2c/wziOef8hFxL4wIvrU8TyU8NLoTv87g7e/B76cwfzN9HVSZ
OFaBbBVK7NdpfZhnqNevBBdEM7jZskG5qS7nqtREe2o0Y5970HAiNDzgyK8B
fS6KrKFHotu1oyQ+7dvSZzHxNm9tGamD7cBx2HfZ46DXklGVnD6YS3M8YfCZ
q++E+CHsn8kUtp/9Wp8tHTB9PZtfa9f2IfllA/UJzynGP1rHQ5KOKVlDkmhV
w8lzG+ieCXOPnyNxmNZ2qyJW3VQ+P+IS1jdHfQNPqXiMg4jSh4UWyxykC891
p5h9CDjgxtqXozCKYnSEMD6wLsfnhfzfyuMq9l/oJ5yeUWs4c5vRM+UHOZ0z
SFyxhqKcAesmrKOwfvIOCCI6NQB+e3jUSp0aDiUuararx5vSdW6r47RJnO/u
tz1em+TFo17EnFXHJQcucbjfuoTjp2objieisptkof/oP23uw6zPE37u6sTu
s9D+BD5+KDUOj2WzrV94kzoAx9hni13fJAyFgniH7pcqvMBkxRT9EaEjITTE
PceT6IMJeZveK2s+ovcF11lP2/2DvzC/kb+x/hsxWM/4osgePttsT2PiJqUp
2bmaxNGmDBuXFEWrTviEvI/8avCSq0uVWj+wdarb1tMLi5SciX7h+nwWA2UJ
F4KOSX/OPqjJxM1qUaMhkwfzdYO6MfG4bVbJ+wVEV6ul+Ty7/78N9B1v0zv/
I/MFrjv+nsExay9lUzWi26VP3ZUcgrRo8QUbMzXi/211q3ookfnQvroiLp6x
74X9PyF+buf7QAlahEbFY+DR2m+ypEuVEoWtXF7YSjgev5fK7YOG/TPNEmJf
oL/zPKOsjXRN7KDeWaQeO7b5qlEWqcM62Pn/LG6xqGH5DnELx+yrR/+02b6B
Dm66MnQ7WVftkVqDYHUz+FBo7xeR5dsp/4V94sdHWlnd+mqzc9ofRMcmLvLW
VSN5N9vYtqsS0U//pf+1LnP+6J2qNp6J1123n4Srkfi9HaE3gYnbk7EDhqkT
3hX2F6c4cuteb8PZL1wf6iDUF1NlU4eVD9CC1/W5tluS9tJ4rZck3pykbQmy
2O8dXkz88uNAo+V6c045g9qJE10vVQTCvDVdSPyOgAnlW9n43Xq49S8mfosy
vv0rfpH/rQx0yFWQXAf0rujF6mLJ3PpSRiePVu1VaxPqAuUHipv1DwXCJJnV
jnCid+fs5fTckqGcznPQnZjB6LyIwfoKDK5FNhb2+T5wmfSEqFKB6Y9L+48U
Me/7r/VjPgReSf6lRt8SNl1/6ZhFcCTffuudNQRH3k9r9EvRsIESpj6P+FGf
h/3B7W88n9+4PtTb+lOS3snoaHn/Z4CFw6zdVeHS29c02b79k8G/szznqUzw
hdSZr/uvY3lpT3pJNcNTr2+mEF4fCSvXB5LRRT4/6lbEYdQ7wvoL6xd5H7RP
2yCmvzIzfkvM+zfB9JaBnhvSSP4uLTV9a0TiT7wi/XQN8ad4J2itUZ5KP7w4
MjZFZAIVhk694gk/7bLYwvYf3i+NYvsP+V1XxmaY2IPxvMah7utGgdrqrZ6z
FG2hcGN2l3OaPeXjkooiJe0Zq+X6DOsP5O3rBQ2zl7jFwPOyRQ0hIzOk3e9y
+u9hnokCg8PPskWif/IH9n9RXyH+aRzxUWWeGz52iGmMboG0ouFJd4Zvra0z
1Zh8EvI38nbC8ARFCsI75S/y22iL7rIPHeP+k3+LAgtYPSKsT2t1t5P6NAhm
amxTVvD4UX9h/COOC+sz3C+MH8Tn/68/j88fULtK5g2Tz4v6WshPn3mc9eTj
STg/8Pr5QOi/zycQL3D/0D5Vvu9UnMT10Qc7PtOoJPmaHbePjL4wwy35brir
EzS2n0vd/EEkHwtevzKbevgOXZB3hH2+EE4fZJ6/eizUgOEzHIX2pfF+xFGY
n+28/dg/E+Lj13tc/iA+Cvcf8wvxH9ePn2NdIDx/wPo3iGL666Fy/2Rf4Pq/
T/j+76LSHsXhWZ6wJ219cbhCUKf+8MkZQeS+H/Q7YE/uj4HtbP1pKLHl608c
I/j8x/ej3sT34z7h/XF83Y31NeaPMH4PpzgTXvKBhpfrSByPAoXol+nM55S3
UmTOQhP67x4v0rSI/vr6cGNfJeKvQ9eHtjB1qG/X6d4OrXa00h7VVl3Cb+Pc
9rd3oX6cn2L8Y/5inON9zAt7GYPPP/DrvqS+bsCUTNrgVG5preIACG7LWvlU
tScc/nVC7lNVw077+4XPDw/qDjsPzo91kfD881rZ8ElKhF9bqrady10uovH6
6+zB1gpkHYWM/+l/6FOeR2x5HkN8RzxHfEe8F55fvI2/xe4Dnl/s0Sga9D5h
ICy/cnPbHMKvOObmx+XPPeXUKf+wrsf4quyz6MBegktFeo82rSI4/lfJzNG+
InNQvH6jRhKZSAvjG/2KfUhLnxwVRtdVPm/JrX9eKC0MaVFh8LTNxYnFUSG/
CM9pkytci8vIfjwzLT3ybmQm3fuNi6SM7Ms+ywkXvpH9n7D2pyaG39qXpj6q
eRFMz4iaI3Em8yfmKUmdiT+F9mH/CutEXD/mHfKq8Hwf6y4z/nwL9zmisE1m
PLNM4viW0/e3l3A4PnAFFy/4PNaXwv7Yl2aFvxVb/pDu7rIvkKnbbsyP0WH7
PG9S1CmPiE7+QX2DeSg8v/6JrxvWb+Xi8+m8F2NStRykEh+ufvLXHE4xdeia
AzpsvgjjF/MX+wtGa591e+roIB04m3u+bHElu76cBia+fpxfYP5j/gn9h/iF
fsf9nTOqQ1b+5opEmsT5bVAWh8NewbzOrDvSjYnz8UdqL3Uk/SaN0rnO8uxr
elh3Jh8q646w57gbqJdXmPPdQYXc+e7JNdmEHwLALpPrF2XLTrP9orNeXB/p
+fInj6v+Uf8jvwnPbx8s02P1Y2HvRlY/6i5r/mgT6ggF1LVmfXMf8HSdq5S9
2wSSXj3TMlFqpnV3LRwk1npEH3crVcjebQX5vh2yg2pXJcq8/p7Nrw/HmnTu
XPN5Anf+kmsQN9RdyweuvzAh+icIrux5qONF6ptlj1Ye1VnhQdeYJZBrU3iq
aNzLi+CiUH8EP8wn+sMfplQ6KVLiMKgc3iCbXtosafnAxYdF4VXOjtFq7P6r
7V0Z7Suyggj7+2cmRiXSCbUjDzN5XtK4dSyT58L+5GSe/ycL9AX2B7HuFu4/
8hv6Gf0r5N+7vL68yH8Pn8e+D+Yp/j4G72N9h/oE8wzvoz7Evun5WxPjNMXj
OuU3Po/5KbRvGW8H6hh8XtgfR533js3fNnl96cLnsVCfYV9RqH9WfOFwQcU6
3NSd4MRvM7MGMvrQ+8YJM+a8QFh/IM5gHSLsP13k/buJx9n/+v2T1t8LDR1U
guGmxTKDwYZmsKnk+yn9wb/RnvepGftT1CBkXLRVuENPmJa6XyGVPD+rx3v2
eR2qm0OKhh14Tt5OnvfsdL5GNmCpiAoG1SkLpIx/3hwKL1HP9QTpjPtdx5D5
3qmdMS4g899QaPVWGfQbnTp6XN+LIhsoO1Pn+IHk9xLHjnQm3/OiTrkx/YfX
w9ay9k89y9kfdm0ueb8jGJ3MNHTI6dw/wfMfZx7n0P/If9jXwv5AiTfZjqln
JNclHL6fHc/hOo5W/LnJvEDuHEVZN9A4TEz42662b5g4sBN+I38I+Qf1CcYx
1mPC/sRO3v4vfB9LqE+6zeXiuLcSF4dRo8OirQlO7Bj/YOJUCwe65qc+MdZE
f+AoxGfsKwjzQ5i/2EfJH1CuyNj7qJCri/LEXL30+HWdwZmeBdJPYVzdffAu
V4dn/OxP8NMdeu6uIPj54/d16H/Mb+H5AvY9kP9QX1jf2tHfheChgXKkYp2W
Gz1YxZJcm4BX06wefQlf5S7WTttMdG9yI3RL37yBXvfBwGWU+hA4PWt9YZGS
Wyd8c+T1oTs//4TCPvWXn4+nh4i9quvI+tItBxVXiQzlI9qH/VHkZeHvc5Bf
se7D/D6r1yQbvOKzxLQjlGLyWftPDqdzHnE4IzwfpK9wfsBzQpwfdS3qEsQv
oX/l5zL8+ZlY8u/zU1dz9RdGjC74bvrCiOpcnyC/4++sjG533/EkN18a286d
3w16sFyZyRMcHfsm36Eoc2g/3Tp9z+On0oAvd6YxfO7/sdmW2Ueh/lkvdtNh
4inPfiyZLwweXpvkaUk+P9cyeb9+v5H0TUkhuTaB1is5/XoRHPQK5eLLhY+v
b8PvkbjyBL2ygS365j/0Cf6eAvUl9oeE/Gn87g/Cn6Mhyk9M6vcoSNquuiFo
eYMUlBuHMb9/WxkbvYbRka8vqKxlcFSIr4F83g7k80i4/xi/aMfwr++GWxH+
z5QqvmD4v+ydU1yGiTVoH3xA+N+rE74jD07k+5OLC6gLbiTfBi/WihsfF0JL
t9xLYn4/9G7XuafM74kalfbFmpD8sFcNCky2tKbxemnOmF5qZJ//D+b9Efg=

       "], 
      "CountMatrix" -> {{238, 12, 1, 0, 0}, {11, 49, 3, 1, 0}, {0, 5, 10, 1, 
       0}, {0, 1, 1, 13, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwl0ulrDgAAwOHXDpsdxNjaYvbawTam2ZqtzTZhmx3oXeQox4ScQ7mPIola
uXIUcnxASQohkXwQooTmPj44c5VjsSQe+fD0+wd+wabm0IIOgUDgM/8aRjgR
RBJFNDHEEkc8XelGAt3pQSJJJJNCKmkESSeDTLLoRzY55NKfAeQxkHwKKKSI
YkoopYwhlFNBJUOpopoaaqmjngZGMYYQjUxgIpOYzBSmMo0mpjODmcxiNnOY
yzzm08xCFrGYJSxlGctZwUpWsZo1rGUd69nARjaxmRa2sJVtbGcHO9nFbvaw
l33s5wAHOcRhjnCUYxznBCc5xWnOcJZznOcCF7nEZa5wlWtc5wY3ucVt7nCX
e7Rynwc85BGPecJTnvGcF7zkFa95w1ve8Z4PfORT4P+HX/jKN77Txg9+0s4v
fvOHMNOGE0EkHYkimk7EEEsc8XSmCwkkkkQyKfSkF6n0Jo0gfUgng0yy6Es2
OeSSRz6DKKCQIgZTTAmllFFOBZUMYzgjqKKaGkZSSx31NDCaEI2MZRzj+Qvr
R2Ou
         "], {16, 48, 79, 164, 174, 194, 205, 224, 273, 300, 309, 334}, {
         131}, {}, {}}, {{15, 29, 53, 58, 110, 169, 233, 301, 337, 340, 
         343}, {6, 31, 50, 66, 68, 73, 86, 87, 88, 93, 104, 115, 133, 135, 
         141, 148, 153, 154, 163, 165, 176, 177, 181, 185, 187, 190, 196, 202,
          206, 212, 226, 239, 240, 246, 254, 256, 257, 272, 274, 276, 280, 
         283, 296, 314, 321, 322, 336, 345, 346}, {69, 139, 250}, {
         208}, {}}, {{}, {14, 39, 127, 158, 304}, {24, 27, 67, 81, 116, 170, 
         172, 192, 198, 277}, {195}, {}}, {{}, {34}, {85}, {9, 28, 55, 84, 92,
          100, 128, 138, 142, 225, 252, 303, 317}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "acceptable", "good", "very good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.00040810404624277454`, 
      "SingleEvaluationTime" -> 0.004133, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "33fa2290-e89d-4c4d-abd9-05a6e039d69a"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"89.6", "1.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    89.5953757225433520262`3., 1.6437904423993996428`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265187726`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.5916486422153669489`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0592407979302793652`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.4731670463548082184`3.", "\", \"", 
                    "0.7101302380759256794`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.4731670463548082184`3., ", ", 0.7101302380759256794`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.5248423300661150259`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0999617837201800252`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.3249187626257549755`3.", "\", \"", 
                    "0.7247658975064750209`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.3249187626257549755`3., ", ", 0.7247658975064750209`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.27`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.26`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPTms+cdiukvLNvXSTx7/3Wt/aTMy7dlfB4
hVP81v9dohln39jbFv5IflDy3F4iWzDCP+4ahrkwOnD6gdxZj97a/2cs8q4/
89p+Uf38KFb/p/Z7BF5uZJr91t7txaaG73tf2T+8PUswsv8RTns3b25Jb4t5
a3+1tXnRzYsv7RvOnFc30Hxgv2iqxKcGpTf2QWK8uvWdT+x/fZk3pevoUfu9
+xqnxCq/s3cKOrrE/OAbe6kvFjL9p5/jNB/m3odVIuvcH96yh4XYV4+rJ1sk
3tpvadn6OnLvC/soIS0Fu6zbBM1BpwHjlaua
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9558232931726908`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9482071713147411`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9520000000000001`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9558232931726908}], 
                    Row[{"Recall = ", 0.9482071713147411}], 
                    Row[{"FScore = ", 0.9520000000000001}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.04417670682730924`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.171875`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.04417670682730924}], 
                    Row[{"Row fraction = ", 0.171875}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.1791044776119403`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.04780876494023904`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.1791044776119403}], 
                    Row[{"Row fraction = ", 0.04780876494023904}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["49", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "49", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7313432835820896`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.765625`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.748091603053435`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{49, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7313432835820896}], 
                    Row[{"Recall = ", 0.765625}], 
                    Row[{"FScore = ", 0.748091603053435}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["5", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "5", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.07462686567164178`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.3125`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{5, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.07462686567164178}], 
                    Row[{"Row fraction = ", 0.3125}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.014925373134328358`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.014925373134328358`}], 
                    Row[{"Row fraction = ", 0.06666666666666667}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.06666666666666667}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.2`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.046875`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.2}], 
                    Row[{"Row fraction = ", 0.046875}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["10", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.625`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"FScore = \"", "0.6451612903225806`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{10, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.6666666666666666}], 
                    Row[{"Recall = ", 0.625}], 
                    Row[{"FScore = ", 0.6451612903225806}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.06666666666666667}], 
                    Row[{"Row fraction = ", 0.06666666666666667}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.015625`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.06666666666666667}], 
                    Row[{"Row fraction = ", 0.015625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.0625`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.06666666666666667}], 
                    Row[{"Row fraction = ", 0.0625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8666666666666667}], 
                    Row[{"Recall = ", 0.8666666666666667}], 
                    Row[{"FScore = ", 0.8666666666666667}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9482071713147411`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9482071713147411}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "64", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.765625`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{64, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.765625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.625`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.8666666666666667}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "249", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9558232931726908`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{249, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.9558232931726908}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "67", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7313432835820896`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{67, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.7313432835820896}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.6666666666666666}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8666666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8666666666666667}]}], 
                    "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["251", TraditionalForm]}, {2.5, 
                    FormBox["64", TraditionalForm]}, {1.5, 
                    FormBox["16", TraditionalForm]}, {0.5, 
                    FormBox["15", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["249", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["67", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["15", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["15", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "acceptable" -> 0.25, "good" -> 0.25, 
             "very good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"high", "medium", "low", "very high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "low", "very high", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {3, 4, 2, 
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                    "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4, 
                   "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 2, 
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                    "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 3, 
                   "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"small", "large", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "low", "high"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "acceptable", "good", "very good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet/Net/SoftNet/1" -> <|
                 "Type" -> "NetArray", 
                  "Arrays" -> <|"Array" -> CompressedData["
1:eJy1lD3OZUkRRBsMxDZwMWEBiC0MKxgksJCQBgPhzdKZ8VpFxImTr4crdX/3
VeVPRGTk/d1f//nd33/95cuXf/32p/+++/7ff/7hh+//85ff/Pzjb9//449/
+Mevfnr98vuf//vxT1/+5/n57Ovz9Pt9/zqm1Wy/U277u+IbptV31Wq1ifOb
9/5rmIjj0tjcUxzNfmmx+qx5LC7GJ8Rp+TLhbX2Ja8Pc+q2zVCdhobvlcxPX
vLNmaL4xVIdqNxzGjw0neek9Nzud8hIHozfhf/ssPSg3/U33ZrbGewZrw7bw
U9+Ge+ls+KV/xIlwNaxr9xp2o7G5p2/IdR+tz9vOEaZ2T7tGnIwv7WM9SfVp
D+iMvjvt/dMdTH3NLKiO7bn0sbtpcK3dJOz03vp9fX6Jv3w/DB7jjW/RZH0j
2lmrke5X7bWr1DP1pv1qWrQzimnYWl57jG9s7TbPVpN6kfapztKZsNEsbR96
zLfKfnOT9+zuEJdUs3FpfQjLqmn2kHC8tdZ+LU2IV+vXvg1r9gbnZd+X5z/R
+rrLpv6a4YpJ9cjTLT7VXDNa+eme+LXHfps+8fby9+JHZ/RNWvrQY3Zq4Xh7
r3uq3zBecLbc1m/5lGaR7lOc2YX2rfv0u5RyDLdUJ2FcmD/1N/WkbxHxM98N
O9vUo/WzONed8RLVJB1Sr3WWtGga0vNLcDDzSnP9xHcWJ30T2vOJZ23+mhth
uui7vhsvFsOZ+lJ/49nFqdVfOZ/oRDtFNSl/4TLzen+bPaSHPEwYrjFt7+yM
Wq2E2/jOfkPW9+K9v+w79SePvPFmLpfnOmfahYs/SevlH5NvvJRy2r2p8Qn2
F+/69hmtzG6bXTGzJj4NZ8NCfCzPpNVl7vS+4hJfOjPfmes5+XLNrNWzO2jm
n3CZv8Qh1SSub4zxOX1jFiby/PKp7dse+q4YnOne6Hnp9y2+SfmEI9Wk78X6
hpj9+IRL63mtb785KcfsJPU1uK/fuvfOzqjlWY+vb03zfPOkwW04f332vl9q
L02JL/Frtcw+Gd1otsR35RhNaH6EY92tWNqtxsvsU6q9el74tfzV33InbkbD
5ov3rPWgODMD612bT3qTxq0m5bZ7wkOzSZhoPq1mi211bI+rb1v+6nepvXrR
Oc20YUh4mqZrN1POi2t5MPFYMcvTphbpa/PW+6rXMJsebx3Kt1gbV9L1omWb
ZYpp8VTPzIB2Zml7xWFmZ78lhjPl078Wl3paXzcs7d7iaX/TO2maeK26RtdW
L+FKvNc8Te1Pdb/geOs1LsRxaf7p3lK/5e+Ee90lfOl88Vm5pBf9bnqnuzd/
5dFjdjTVMr8/yW9czX5ZbxhMdm4v9tRr7a3B8il+msvS2uziZYZvLp29d+s8
9f6Uq6m/zql2ums9W8xlb9dZm9XqTZjT3VvvrWn3wvBJ9xeP0K4mvMb7CQvh
bD1fzoub1ajtwDpPHBIPmu/a14uma1eMD1Lt1nvxSudv/YSPeBJfwt28QfEt
pulI2NuZqXWd59L2Gn/h0+rYf4ln0y2dNb+m+7XDrX7T8u1B2Jb+7/vLY/Gi
PUy/yR+tj3mWtnRPPa1vmwYLw9d37f6NTe8tr/mnxVB/s0vUk3IvGAzfhtvy
WP0v87T4Uv+GlfaG9nFpbvaz8Vy7YfRYMzH6E+c33ux8ir3oS7VpVq32m0f7
RPGEfeFZ34AUm3LfvkbjlkO8rd9X/fasXWl81p58y45ZL1pehufyRPJO4/di
Nzv33lFN2pvGs+U2HOm3xff2a7k086Vtq2HmYHRd+2PuiI/RxnqycWlxy/+X
HU092n2qZffEYraxC1PLf+/J+yvW6pU0uOwE8bjM+9Oz1IvmlHCmv42vnbHZ
QdKp8Vv1L7WbLwhD49PwNixLV6uH8W3D3zAQt4U59W34Go7U1+Bte5rw0ezt
jKin2QHqu2aZ4u3ONU1aTVuvcVu7SrwbzpRPOInXG5dqND4Nu3lf3Ox94mF6
J97Uv/VomEindE68ErZ0vuaR8DU+q2bC33CSD60v2oxs/atvW6/Gu+2Xnfs6
o9iFM2mbMJKepIvhbnm+z/LyxcdJJ9Jx+cTgTH3X/ny6L4SxYTO6WJyE/aIR
aZd0NBwvGlqPLd+2sxXf3hem985o0nrSbNZcqV7jvby8el1muzQlfIZDw53q
LOzXmITpshcJ6yc+M7vUzq6402Pq07vB/0v7r8Ua/RcPyrtq8p61HNql5eE1
t3W3YghH+t16vLXM/D7Zg0vcmnHTp/02NQzeVqPpanalcSdsb5+FZ71b3A3z
m/fpPC4eS5gJxxvTuH3iT9q9NeOLBuQF8t/Ko/mYXLtLrx4XPBcfr1mRphec
jWebrdHRePcTzCl2xZGnFvfmo/c81Uj4zFmr2ziQN4hr47M8tvoQltV/cW26
NDxUh/is3TL8rrtn6lKPNcO3RuNMWBcuwnn12OqTsLW/xrMpt/F534lTul8a
2BoJF+E0fVqPhJn4tFpLp8Rr7ZPp0finuKZbizW4DZ7U663buNuZNu9c5vni
aXGf4Px/zaxxNXgIf6vf/En9VuwFwzsf0qT1TnlWt2/RL2E2u/BL+OF9yGef
+NRwXlgW9uY7g99iI4+mZ3nSapzuW6+El3IJi61FHmsetnnLa6mW0aLVbrqY
uonfpzuwvLpmS3mWS+NjajT9DI+V//IjbJ/2XTpfuBLmpvMn/dssmg62JuFe
sS2euH7iIfKm7bF+EzfjQ9LD6k+5q9ZVh4ZvaU/43md5rOF4z64833fCY/1m
Z37BdPVVu6dea77rnXobHEvvay2qQ7wbD8vZzsrEWm0NftJu9aGcpWnLXf1b
DM0k9SIuKd9wa1ys/sRrzYHwWI+sOMNp7QHd0Q40/V/dVq/FaWEzNS/xhP+T
mRi/pYd0e+MaXqpjai4dFs4VZ2f+3jdsDWfzwbVm0qbVJI6fYL74y/ZuWrS8
1TvVXhyX1ldNXowJf8NpMDYfEAa7B8v/q6attzAZ7b/mau4W96bj4r+0aHNJ
fS7aGo6mZ7pvNS321sfO7XqWcF/9Sb43/Yl7wpl0vvT6+q/V7fKPeKS+Kb5p
//I39Q2n1s/4gLBefdJ4EV+LcWludLQ93sfgaPXa/dKw6WhqEram2wXvqpm0
NN5u2Kw312wTzgvuF3+rmc6vHJpODePahdSfsKX+NubVwGD7lIPxwYsn/SY8
qc8Vj51twmf803BSD9oXgz9pvLgvPhfOFw8s/IZH43vV3mJc8XSf8ht3wr48
c6nZ7kmfy2yvNZaHDUaj3ZrF1ctLr1Wb7tfcFh47l6SL0d5o1s6oJmlv9LvM
8ar1uqN6VlvjWcP9kxjC1rilnKsOZsatr8XZ8L05jcPScuExHiAM1zqEieZo
sK1co9OqZ3ul86XLqkU7snxC9WxM4k7n1Ofiz6Qh6Wp7G81I74v3TN/FYeXS
Ofko4aX8l3PDa7kvrInjm5+4G94W7/Lomunq13LTe/pLWNoMk37EMcV8y3wJ
39oD0iBxM/Ne3I3f2vm37g1hI80Th7Uj7a7VTDUu81o4W/2GfXFfOqYY4vj2
XDUvc7Z9FsZPZrXwt7pLq+W/V/eln5mR4ZywtbrtLuFO9UiHFpNqLSztnepc
PNviLr0uXiHei2/q13KtDql263Oped2Fi26m349/+i8pf7q6
                    "]|>, 
                  "Parameters" -> <|
                   "Dimensions" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {10752}|>, "Inputs" -> <||>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT]|>|>,
                 "TrainedNet/Net/SoftNet/2" -> <|
                 "Type" -> "Compiled", "Arrays" -> <||>, 
                  "Parameters" -> <|
                   "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_572ddd96_70fe_4417_8084_83b93f8bf9df", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
kepE+I3/A8SM2ak=
                    "]]|>, "orcInstance" -> 94815920, "orcModuleId" -> 
                    95299456, "targetMachineId" -> 75835344|>, 
                    139782730577728, 139782730577584, 139782730577664, 
                    139782730571776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_b95dc1a5_c744_488c_9658_959ead1e26ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
1igs/Duzqb/z
                    "]]|>, "orcInstance" -> 94179472, "orcModuleId" -> 
                    76310064, "targetMachineId" -> 96070272|>, 
                    139782730564128, 139782730563728, 139782730563808, 
                    139782730563584, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {10752},
                     "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "0d3040909256d940", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT]|>|>,
                 "TrainedNet/Net/SoftNet/3" -> <|
                 "Type" -> "Reshape", "Arrays" -> <||>, 
                  "Parameters" -> <|
                   "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{512, 21}]|>, 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{10752}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{512, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                "TrainedNet/Net/FeatureLayer/Catenate" -> <|
                 "Type" -> "Catenate", "Arrays" -> <||>, 
                  "Parameters" -> <|"Level" -> 1|>, 
                  "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                "TrainedNet/Net/SoftNet/4" -> <|
                 "Type" -> "Threading", "Arrays" -> <||>, 
                  "Parameters" -> <|
                   "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                  "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{512, 21}, NeuralNetworks`RealT]|>,
                   "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{512, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                "TrainedNet/Net/SoftNet/5" -> <|
                 "Type" -> "Aggregation", "Arrays" -> <||>, 
                  "Parameters" -> <|
                   "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{512, 21}, NeuralNetworks`RealT]|>,
                   "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                "TrainedNet/Net/SoftNet/6" -> <|
                 "Type" -> "Compiled", "Arrays" -> <||>, 
                  "Parameters" -> <|
                   "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_572ddd96_70fe_4417_8084_83b93f8bf9df", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
kepE+I3/A8SM2ak=
                    "]]|>, "orcInstance" -> 94815920, "orcModuleId" -> 
                    95299456, "targetMachineId" -> 75835344|>, 
                    139782730577728, 139782730577584, 139782730577664, 
                    139782730571776, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_b95dc1a5_c744_488c_9658_959ead1e26ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
1igs/Duzqb/z
                    "]]|>, "orcInstance" -> 94179472, "orcModuleId" -> 
                    76310064, "targetMachineId" -> 96070272|>, 
                    139782730564128, 139782730563728, 139782730563808, 
                    139782730563584, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {512}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "0d3040909256d940", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>|>, 
                "TrainedNet/Net/SoftNet/7" -> <|
                 "Type" -> "Reshape", "Arrays" -> <||>, 
                  "Parameters" -> <|
                   "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 128}]|>, 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4, 128}, 
                    NeuralNetworks`RealT]|>|>, 
                "TrainedNet/Loss/SoftProbs" -> <|
                 "Type" -> "Aggregation", "Arrays" -> <||>, 
                  "Parameters" -> <|
                   "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{4, 128}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                "TrainedNet/Loss/SoftmaxLayer" -> <|
                 "Type" -> "Softmax", "Arrays" -> <||>, 
                  "Parameters" -> <|"Level" -> -1|>, 
                  "Inputs" -> <|
                   "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                  "Input1"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                  "Input2"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                  "Input3"] -> NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                  "Input4"] -> NeuralNetworks`NetPath["Inputs", "Passengers"],
                 NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                  "Input5"] -> NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                  "Input6"] -> NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/2", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/1", "Outputs", "Output"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/3", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/2", "Outputs", "Output"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/4", "Inputs", "Weights"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/3", "Outputs", "Output"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/4", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Outputs", 
                  "Output"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/5", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/4", "Outputs", "Output"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/6", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/5", "Outputs", "Output"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/7", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/6", "Outputs", "Output"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Loss/SoftProbs", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Net/SoftNet/7", "Outputs", "Output"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Loss/SoftProbs", "Outputs", "Output"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet/Loss/SoftmaxLayer", "Outputs", 
                  "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 211064, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 9, 15, 22, 26.316417`8.172801741514307}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|
       "Input" -> {{"very high", "low", 4, 2, "medium", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "low", 2, 2, "large", "low"}, {
          "high", "low", 4, 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "very high", 2, 4, "medium", "medium"}, {
          "low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "high", 2, 2, "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 4, 2, "large", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "low", 3, 4, "medium", "medium"}, {
          "medium", "high", 3, 2, "large", "medium"}, {
          "medium", "very high", 4, 2, "small", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "very high", 3, 2, "large", "medium"}, {
          "high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 2, 4, "medium", "low"}, {"very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "low", 4, 4, "large", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "very high", 2, 2, "large", "medium"}, {
          "low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "high", 3, 2, "medium", "low"}, {
          "low", "high", 4, 4, "medium", "high"}, {
          "very high", "low", 4, 2, "small", "medium"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 4, 2, "small", "low"}, {
          "high", "very high", 2, 4, "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "high", 2, 4, "large", "low"}, {
          "medium", "very high", 4, 2, "medium", "medium"}, {
          "very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "medium", 3, 2, "small", "high"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "very high", 3, 4, "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "very high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 2, "small", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "high", 2, 4, "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "high", 4, 2, "small", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "high", 2, 2, "small", "low"}, {
          "low", "medium", 3, 2, "small", "medium"}, {
          "low", "very high", 4, 2, "medium", "medium"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "very high", 2, 4, "large", "high"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 4, 4, "medium", "medium"}, {
          "low", "low", 2, 4, "medium", "medium"}, {
          "very high", "low", 4, 4, "large", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "very high", 4, 4, "small", "medium"}, {
          "very high", "high", 4, 2, "large", "medium"}, {
          "high", "medium", 4, 2, "large", "medium"}, {
          "high", "high", 3, 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "low", 2, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "small", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "high", 4, 4, "small", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "medium", 2, 2, "small", "medium"}, {
          "low", "medium", 4, 4, "large", "high"}, {
          "high", "high", 4, 4, "medium", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "high", 3, 2, "small", "medium"}, {
          "medium", "very high", 4, 2, "medium", "high"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "medium", 3, 2, "medium", "high"}, {
          "medium", "high", 4, 2, "medium", "medium"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 2, 4, "small", "high"}, {
          "very high", "high", 3, 4, "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "medium", 3, 2, "large", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "low", 4, 4, "large", "low"}, {
          "high", "very high", 3, 2, "large", "high"}, {
          "low", "very high", 3, 2, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "medium", "very high", 3, 4, "medium", "high"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 4, 2, "large", "low"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 2, 2, "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 4, 2, "large", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "low", "medium", 2, 4, "small", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "high", 4, 2, "large", "medium"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "low", 2, 4, "small", "high"}, {
          "high", "low", 3, 2, "large", "low"}, {
          "high", "very high", 4, 4, "small", "low"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 3, 4, "medium", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 2, "medium", "high"}, {
          "high", "very high", 2, 2, "medium", "high"}, {
          "low", "high", 4, 2, "medium", "high"}, {
          "very high", "high", 3, 2, "large", "medium"}, {
          "very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "very high", 3, 4, "medium", "high"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "medium", 3, 2, "medium", "medium"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "low", 2, 2, "small", "high"}, {
          "very high", "high", 3, 2, "small", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "very high", 4, 4, "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "low", "high", 3, 4, "large", "low"}, {
          "low", "high", 4, 2, "small", "high"}, {"very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "low", 2, 4, "large", "medium"}, {
          "high", "very high", 4, 2, "medium", "low"}, {
          "high", "very high", 4, 4, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "high", 2, 2, "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 3, 4, "medium", "medium"}, {
          "medium", "medium", 3, 2, "small", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "medium", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "low", 4, 2, "large", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "medium", 3, 4, "small", "high"}, {
          "very high", "low", 4, 2, "large", "medium"}, {
          "very high", "high", 4, 4, "large", "medium"}, {
          "low", "medium", 3, 4, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "low", 4, 2, "small", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "medium", 2, 4, "small", "low"}, {
          "very high", "high", 4, 2, "large", "low"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "high", 3, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 3, 4, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "low", 4, 4, "small", "low"}, {
          "high", "very high", 4, 2, "medium", "medium"}, {
          "very high", "medium", 2, 4, "large", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 2, 4, "small", "low"}, {
          "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 3, 2, "small", "low"}, {
          "very high", "medium", 4, 4, "medium", "low"}, {
          "low", "low", 3, 2, "small", "low"}, {
          "very high", "medium", 4, 2, "large", "high"}, {
          "high", "medium", 3, 2, "medium", "medium"}, {
          "low", "very high", 2, 2, "small", "low"}, {
          "high", "very high", 3, 4, "large", "high"}, {"medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "high", 3, 2, "large", "high"}, {"medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "very high", 2, 4, "medium", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "medium", 2, 2, "small", "medium"}, {
          "high", "high", 4, 4, "small", "high"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "low", 3, 4, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "very high", "very high", 3, 2, "small", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "high", 2, 4, "small", "low"}, {
          "low", "medium", 3, 2, "medium", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "very high", 3, 4, "large", "low"}, {
          "very high", "medium", 4, 2, "large", "low"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "medium", 4, 2, "medium", "medium"}, {
          "medium", "medium", 3, 2, "large", "high"}, {
          "very high", "very high", 2, 4, "medium", "medium"}, {
          "low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "low", 4, 2, "small", "low"}, {
          "medium", "medium", 4, 4, "medium", "high"}, {
          "high", "high", 2, 4, "large", "low"}, {
          "high", "medium", 4, 4, "large", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 3, 2, "medium", "low"}, {
          "medium", "low", 3, 2, "small", "medium"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 3, 4, "small", "low"}, {
          "very high", "very high", 3, 4, "small", "medium"}, {
          "high", "low", 4, 2, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "low", 2, 2, "large", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "very high", "very high", 4, 2, "medium", "medium"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "medium", 4, 2, "large", "medium"}, {
          "medium", "medium", 2, 4, "large", "medium"}, {
          "medium", "high", 4, 4, "small", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "high", 3, 2, "medium", "low"}, {"medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "high", 3, 4, "medium", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "medium", 4, 2, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 4, 4, "large", "low"}, {
          "high", "high", 4, 2, "small", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 4, 2, "small", "high"}, {"high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 3, 2, "large", "low"}, {
          "very high", "very high", 4, 2, "medium", "high"}, {
          "high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "low", 3, 2, "small", "medium"}, {
          "high", "very high", 3, 2, "small", "medium"}, {
          "high", "medium", 2, 4, "medium", "high"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "high", "low", 2, 4, "small", "medium"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "high", 2, 4, "small", "medium"}, {
          "medium", "low", 4, 4, "medium", "high"}, {
          "low", "medium", 4, 4, "medium", "medium"}, {
          "high", "very high", 4, 4, "medium", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "high", 4, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "large", "high"}, {
          "medium", "low", 2, 2, "small", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "medium", "low", 4, 2, "small", "medium"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "high", "high", 2, 2, "large", "medium"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "high", 2, 2, "large", "low"}, {
          "medium", "high", 4, 2, "small", "medium"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 2, 4, "medium", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "low", 4, 4, "large", "low"}, {
          "very high", "high", 2, 2, "large", "high"}, {
          "high", "high", 2, 2, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "high", "low", 4, 4, "medium", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "low", 2, 4, "medium", "high"}, {
          "high", "high", 3, 4, "large", "medium"}, {
          "medium", "medium", 4, 2, "medium", "low"}, {
          "very high", "very high", 2, 4, "small", "medium"}, {
          "high", "high", 3, 4, "small", "high"}, {
          "high", "medium", 4, 2, "medium", "medium"}, {
          "low", "medium", 3, 2, "large", "low"}, {"medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 4, 2, "large", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}}, 
        "Output" -> {
         "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "good", "very good", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "very good", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "very good", "very good", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "very good", "unacceptable", "unacceptable", "unacceptable",
           "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "acceptable", 
          "unacceptable", "acceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", "good", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "very good", "good", "unacceptable", "unacceptable",
           "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "acceptable"}|>, 
      "Predictions" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "good", "very good", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "good", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "very good", "good", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "very good", "unacceptable", 
        "unacceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "very good", "good", 
        "unacceptable", "acceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "very good", "acceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "very good", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable"}, 
      "LogProbabilities" -> CompressedData["
1:eJyFWndYFMnTniWjoAgioCCIiiiIICI5ZxTJIkHvRIyogAlFhRURxHBnwIwY
MZ45n+xOcahnwqyggmC+U34gCBgI+/WEWu+G557PP2xmZ6enurrqfd+q3n4J
yeGTFSiKihVRlBL14994hw8yWaYftFwII1fBUBSoSVHiSMD7DqJqct8XGioa
ZDI6HB5Odn0vk42Fl0NS2lJqDtERHndKl01Sg6oiPccUDXd4Mq+noUOOv/z5
lda0TCYLgXYRpTcQxsGD4vQqi/458vtHvWeT/0eByxB38t5R0KpqQK5D4KnJ
95YnA7TgXVZ01JKkvTRexyWZVW9X8pA//6nEjfzvA33P/y2TuYdD2aUOYm8U
6OYfM327aQN9el/5q03aWuB8TnthkZId3DLyLw7PCgK1i9bmUZQXLBQd2xMp
MoWkW/NdDivoQ9CQo791CZpM4/zKcxyJXd5yu+I8+5MxEqZvON3j3pAw6Z6W
E2R9I2BVqwrx7HDYvIx4WewJQ3Ys3hVnlyG9ST8hn1uDo8Nm8nkodGi0iSjx
WJCx/04UKy5fRObzggE33xL7I2Bd8nVVCsZC0/P7/ReccoK+fXMmX7F6R1dl
+PnVJvSXXz+ufKXLrK+14ia7vmynW2R97mBb5UPW5w+5p5Ze2jvsHY2j/rTe
Ft8T+sH8N+GrpBWend6fuqCMXAfA7TvNxI7QTvuHdqX43217ej8GfspukgVY
fJbMK2ki9+1g1TEpGb2g9/kaMgbLnw+5rUfWHST3G8aB8P24/1fvMH6OgL3M
7Z/6S+ipfcm1O+y5eobsayBorFBj/ThebR4bf9dDuPj76dVihxQNZ7j/oIDE
XxAYh3YJ1OxnA/cNPgbNUBMBPe2XgP05QNue2tnPLlsfPtSR6VaKJRNGryYv
cgJfC+79+mHl5Ea43P6IQlXyuQ8YRZL1ZYbARDsmD6Jga8CXRStMnEHiera5
i6cp7DXcpSXxAnpm99nlFkoiaBXNW0OJA0A2pH24AmUGQ7t564soG1j3um7a
1F8apHVDrPR/XbaYTjukMrlGpScMSWsyuCiyhcGvTcjoApntxKz3YZKicRfI
Hy6gfcCbWBMAhvz6/8x+/HUliVc1rcp7r/0T6Thxitteyg7qd/oah1F+cCLO
9abNKqCfJdpeN/cyBaf5Pv32ET+0vP2wMoysH9e3WbEPRUEohKwMr1OifuTn
s4fqxA4n2OjvdHU9sfPyPs3eF0XDwUr56ETGXnx+26MY8r8vYJzcXe3/WOYe
Lb9ff5fkpcwPCrOGkatweZwL8x/33WH7OHJ/LDyPObltLXmvgvrBROZ9B5IW
alSSvHpRpaZZSb5/tv3O8SgVBxjazyHj0thtdJdq6YWxBlpwSunw72MNftiH
+YvzYxzifeueXNwi/rkNvUb2N+I/4xPXIcQf9KPj+EEU5REJukxa7EySnP/f
G/KHM5xpZ97vBvH8Pgrj2yKe5J3MF8bPbyRxFgBMNsoyNSTWu06TP9xhFe9f
SpHMR0fCwevfZBZ2lZKGTWbkeXuYdZmzM/kIt96qxPCnjYoikG2fPGqoO9AZ
elRshokrXK6ZM9R9nQf8eZ7Dj8c8frjoBhDc8IJfgjwnDBaFwaNlybP7KzbT
g+6/yFur8YhO6FU3O3G3OezUau9jcMgb5sr8rV47TpHKRo4hdllDsOJl1j9q
OpP/5V/kF+SPvAkPP5ksioG3eaNCGLtula5j7az9tIrYNwJub3Ub6q7l3Wl/
cN8wvq4tfR9rTOLuxKOt979ThrDuTez0pdQACO65ty4pNoQWvh+fx/cL138k
Jqo4XMEHvi4rJX4IhgOWNIsvsUvusviifDOX8JsD+C/1MHRQ8ZHbt93IlKz7
R9wgvjWw8dNc7JHKvN8DlPg4ircj+0yHwVf2fnWxc5Yr+dwTwu0uk++Nlsfp
xj/S2H0bmxvB+keckBeXYeIAqW0lxD8BcGQF5XPt3VFp9TMvEniWcGyakSqT
h7vGL1Fl4riRnb9J/v45PL638Txm3qU17+Poi/TF7+bl26wtwfSnaYlT/1CT
j45zrBXqiV/T+/19LLMmmN7/JScrjbIC++hZNUaUB+xf4u+zl8Td5FtDNfII
Dp31TA7JDUikz+3vu9JHZAVKj2JZu+etrWXXccrzY0yGyUg4KE0h9vtBc/L6
bwqUI9zQbW1UJvumcWyAb3SZKo2fz9/4WHZSs4tUb+1sll//zCNmi71A1N7C
5gn6H3krvW0HWae/PI/blDbJPhOezIjP8awnvNmWOd6tPmGg/PMP3RO2i3W0
4GVzntpO8UbaYMb4ArGOIezwjwkBdSugmddETZMU8PmbyO/fTh4HqidNYdeV
lMrlWXb0A7I+Z9i41YDkVwB0+3aKxa8ZPH7ZXKvTvyhyg5th7iqzxT/4Vaiv
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

       "], 
      "CountMatrix" -> {{238, 12, 1, 0, 0}, {11, 49, 3, 1, 0}, {0, 5, 10, 1, 
       0}, {0, 1, 1, 13, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwl0ulrDgAAwOHXDpsdxNjaYvbawTam2ZqtzTZhmx3oXeQox4ScQ7mPIola
uXIUcnxASQohkXwQooTmPj44c5VjsSQe+fD0+wd+wabm0IIOgUDgM/8aRjgR
RBJFNDHEEkc8XelGAt3pQSJJJJNCKmkESSeDTLLoRzY55NKfAeQxkHwKKKSI
YkoopYwhlFNBJUOpopoaaqmjngZGMYYQjUxgIpOYzBSmMo0mpjODmcxiNnOY
yzzm08xCFrGYJSxlGctZwUpWsZo1rGUd69nARjaxmRa2sJVtbGcHO9nFbvaw
l33s5wAHOcRhjnCUYxznBCc5xWnOcJZznOcCF7nEZa5wlWtc5wY3ucVt7nCX
e7Rynwc85BGPecJTnvGcF7zkFa95w1ve8Z4PfORT4P+HX/jKN77Txg9+0s4v
fvOHMNOGE0EkHYkimk7EEEsc8XSmCwkkkkQyKfSkF6n0Jo0gfUgng0yy6Es2
OeSSRz6DKKCQIgZTTAmllFFOBZUMYzgjqKKaGkZSSx31NDCaEI2MZRzj+Qvr
R2Ou
         "], {16, 48, 79, 164, 174, 194, 205, 224, 273, 300, 309, 334}, {
         131}, {}, {}}, {{15, 29, 53, 58, 110, 169, 233, 301, 337, 340, 
         343}, {6, 31, 50, 66, 68, 73, 86, 87, 88, 93, 104, 115, 133, 135, 
         141, 148, 153, 154, 163, 165, 176, 177, 181, 185, 187, 190, 196, 202,
          206, 212, 226, 239, 240, 246, 254, 256, 257, 272, 274, 276, 280, 
         283, 296, 314, 321, 322, 336, 345, 346}, {69, 139, 250}, {
         208}, {}}, {{}, {14, 39, 127, 158, 304}, {24, 27, 67, 81, 116, 170, 
         172, 192, 198, 277}, {195}, {}}, {{}, {34}, {85}, {9, 28, 55, 84, 92,
          100, 128, 138, 142, 225, 252, 303, 317}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "acceptable", "good", "very good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0004420231213872832, "SingleEvaluationTime" -> 
      0.004274125, "Version" -> {13.1, 0}|>]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9, 
   3.8685204529294043`*^9, 3.8685215146011333`*^9, 3.8685301612497177`*^9, 
   3.868530590591856*^9, 3.86853261496434*^9, 3.8685338436228123`*^9, {
   3.868535643570589*^9, 3.868535653266458*^9}, 3.86853620504729*^9, 
   3.868536647435892*^9, 3.8685368910591183`*^9, 3.868536956624065*^9, 
   3.868537492992119*^9, {3.8685379158969793`*^9, 3.868537942476584*^9}, 
   3.8685921415849247`*^9, 3.868599486276321*^9, 3.86860013955028*^9, 
   3.8686009455378437`*^9, 3.868601165154408*^9, 3.868602872755411*^9, 
   3.868604168888167*^9, 3.8686705600345984`*^9, 3.868672040003127*^9, 
   3.868681397928339*^9, 3.868938938636381*^9, 3.8689425626275787`*^9, 
   3.868943546605094*^9, 3.86894388526086*^9, 3.868944114037065*^9, 
   3.868944544993232*^9, 3.868945583119274*^9, 3.868945795964314*^9, 
   3.868946090455439*^9, 3.868946301277932*^9, 3.868946812077159*^9, 
   3.868947529554852*^9, 3.868948234247651*^9, 3.868949916263268*^9, 
   3.86895035411582*^9, 3.868950591820963*^9, 3.868955715946851*^9, 
   3.8689590912506847`*^9, 3.868961292873067*^9, {3.868964211642971*^9, 
   3.868964271971294*^9}, 3.8689658659417048`*^9, 3.868975187773774*^9, 
   3.868975807387333*^9, 3.869030236615261*^9, 3.869030576485284*^9, 
   3.8690318983554163`*^9, 3.8690322955085077`*^9, 3.8690328949105043`*^9, 
   3.869033235901104*^9, 3.869033495671227*^9, 3.869034576712833*^9, 
   3.869035610130576*^9, 3.8690361433581657`*^9, 3.869036324430427*^9, 
   3.869036425981944*^9, 3.8690403482379503`*^9, 3.869040564944063*^9, 
   3.869041421524418*^9, 3.869041561340787*^9, 3.869041673839971*^9, 
   3.8690421991522627`*^9, 3.869042855424157*^9, 3.86904326803651*^9, 
   3.869043554339016*^9, 3.869043746795423*^9},
 CellLabel->
  "Out[134]=",ExpressionUUID->"7ecaab93-06e5-48af-808d-63939f3a3f40"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedSoftNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}},
 CellLabel->
  "In[215]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "featureLayer", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     "testData", ",", "\"\<Acceptability\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}]}], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}, {
   3.868530047989657*^9, 3.868530063111247*^9}, {3.868530190826717*^9, 
   3.868530196600292*^9}, {3.86853144384466*^9, 3.868531451560924*^9}, {
   3.868532766824644*^9, 3.8685327949413958`*^9}, 3.868532945602283*^9, {
   3.868533874444491*^9, 3.8685338747929583`*^9}, {3.868604441984084*^9, 
   3.8686044511364*^9}, {3.8689602387396393`*^9, 3.8689602481032057`*^9}, {
   3.868960681250607*^9, 3.8689606824317408`*^9}, {3.868963143100669*^9, 
   3.868963145210929*^9}, 3.86896321844506*^9, {3.868976255892177*^9, 
   3.868976256410039*^9}, 3.8689764091880903`*^9, {3.869034393625832*^9, 
   3.86903439400725*^9}, {3.869043275878063*^9, 3.8690432774187603`*^9}},
 CellLabel->
  "In[216]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.8930635838150289`"}], ",", 
   RowBox[{"\<\"Results\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "236"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "50"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "13"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "13"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "10"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "10"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "4"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "3"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "2"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.8690345877152042`*^9, 3.869035626521063*^9, 3.869036152783195*^9, 
   3.8690363341385193`*^9, 3.869036436421172*^9, 3.869040357729239*^9, 
   3.869040576634907*^9, 3.869041433742779*^9, 3.8690415722677*^9, 
   3.8690416867128763`*^9, 3.86904220858243*^9, 3.8690432824600554`*^9, 
   3.869043562445753*^9, 3.869043754721044*^9, {3.869047065454893*^9, 
   3.869047090738934*^9}, 3.8690471518063593`*^9, 3.869047184930591*^9, 
   3.8690472207124777`*^9, 3.8690472595671577`*^9, 3.8690473069192467`*^9, 
   3.869047356173808*^9, 3.869104541974283*^9, 3.8691049803090754`*^9, 
   3.869105042273468*^9, 3.869105162486998*^9},
 CellLabel->
  "Out[217]=",ExpressionUUID->"4dc91850-a90e-49c5-809c-ea0afb663199"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"trainedHardNet", "=", 
       RowBox[{"HardNet", "[", "trainedSoftNet", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Association", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Prediction\>\"", "->", 
           RowBox[{"trainedHardNet", "[", 
            RowBox[{
             RowBox[{"KeyDrop", "[", 
              RowBox[{"{", "\"\<Acceptability\>\"", "}"}], "]"}], "@", "#"}], 
            "]"}]}], ",", 
          RowBox[{"\"\<Target\>\"", "->", 
           RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}]}]}], "}"}], "]"}],
        "&"}], "/@", 
      RowBox[{"Normal", "[", "testData", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}},
 CellLabel->
  "In[218]:=",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.8930635838150289`"}], ",", 
   RowBox[{"\<\"Results\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "236"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "50"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "13"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "13"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "10"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "10"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "4"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "3"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "2"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9},
 CellLabel->
  "Out[219]=",ExpressionUUID->"983f76f7-3bca-4ace-8f77-d9f6d77d6471"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],

Cell[BoxData[
 TemplateBox[{"1.3125`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"c293edf8-f959-4a15-a527-5939f6ed2729"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNetBooleanExpression", "[", 
   RowBox[{"hnf", ",", "inputSize"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
  3.869031937904567*^9, 3.869031943129614*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"85881d34-aa2c-47a4-9cef-\
231d0c092462"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Acceptability\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", "\"\<Memory\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}},
 CellLabel->
  "In[431]:=",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1382", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
           "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
           "Doors" -> <|"Type" -> "Nominal"|>, 
           "Passengers" -> <|"Type" -> "Nominal"|>, 
           "Cargo" -> <|"Type" -> "Nominal"|>, 
           "Safety" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
                  "Cargo", "Safety"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1382, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.18180837299497768`, \
-0.5191050362589946, -0.3841046152539792, -0.5681753733658641, 
                   0.12529108395561656`, 0.45980236054401374`}, {
                   0.19483230814806896`, -0.11552149012629362`, \
-0.48399667557469317`, 
                   0.007741300812005421, -0.8143737955228835, \
-0.2262250394645403}, {
                   0.7017573541803983, -0.271578659323676, \
-0.2844896353147054, 0.0327006634878128, 
                   0.47461172003755725`, -0.3556988569880933}, \
{-0.534781449622502, -0.5935508055542879, -0.03841883279524632, 
                   0.43350591164949265`, 
                   0.09542916373943802, -0.4039754137631351}, \
{-0.24962449527823052`, 0.1995437550139275, 
                   0.05318131991869604, -0.6664425700794839, 
                   0.05982277373001385, -0.6688177516579797}, \
{-0.2970170290759208, 0.5013077991716276, -0.7300494849461234, 
                   0.20970076137332036`, 0.2883672850742781, 
                   0.01920999835638125}}, 
                  "Precisions" -> {11.409050313849102`, 11.728549767205461`, 
                   11.838648803211964`, 12.353703996888086`, 
                   12.493974299485144`, 12.642220694332103`}, 
                  "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712677`, 
                    0.0011546407584220714`, -0.0003624914148932479, 
                    0.0034011567571950794`, 0.006626869711687391, 
                    0.003842044757913067}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                    "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                   "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 6, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   7052420854593502203|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, 
                    "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.227775, "MaxTrainingMemory" -> 1301552, 
                  "DataMemory" -> 445472, "FunctionMemory" -> 62320, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 8, 17, 59, 39.745929`8.351867630926963}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.4650241955255132`, -1.4650241955255132`, \
-1.430755802766193, -1.4042067830875913`, -1.3018866229987, \
-1.2507800118207644`, -1.2364530874740836`, -1.2255722141636205`, \
-1.2228520173189021`, -1.0894952762761034`, -1.0894015666714374`}, 
                   "LeftBoundary" -> -1.430755802766193, "LeftScale" -> 
                   0.01713419637966007, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[7.629856546861745, 0.2480059748492769], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Index" -> {<|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                   DirectedInfinity[1]}] -> 4|>, <|
               2 -> 1, 4 -> 2, Interval[{5, 
                   DirectedInfinity[1]}] -> 3|>, <|
               "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.12314196676015854`, -0.861851692199707, 
                0.10532767325639725`}, {
                0.8298183679580688, -0.28949323296546936`, 
                0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                0.38437455892562866`, -0.8375512361526489, 
                0.1422276645898819}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                0.4795919358730316}, {
                0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                0.2534555494785309, -0.4526385962963104}, {
                0.3543681204319, -0.37547722458839417`, 
                0.5876661539077759}, {-1.1276206970214844`, 
                0.17602579295635223`, -1.0098364353179932`}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.24657385051250458`, -0.8256815671920776, 
                0.8846340179443359}, {0.6182233691215515, 
                0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.34666627645492554`, -0.5679200291633606, 
                0.10750995576381683`}, {
                0.6412044167518616, -0.1759643256664276, 
                0.6604856848716736}, {-0.8092290163040161, 
                0.12987354397773743`, -1.1753407716751099`}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                0.12715618312358856`, 0.1291729062795639}, {
                0.21379514038562775`, -0.6005780100822449, 
                0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
             272386066020895428|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                "very good" -> 4|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "acceptable" -> 0.227994227994228, "good" -> 0.04329004329004329, 
        "unacceptable" -> 0.6926406926406926, "very good" -> 
        0.03607503607503607|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Acceptability", 
          "Order" -> {
           "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", "Cargo",
             "Safety", "Acceptability"}|>], "PreferLabeled" -> True, 
       "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> None, 
    "ImputationStrategy" -> Automatic, "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Memory", "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
cFUh/T9EFu3/
                "], "Biases" -> 
               RawArray["Real32",{-0.14151161909103394`, 
                 0.181189626455307, -0.10466769337654114`, \
-0.2077053189277649, 
                 0.0883769765496254, -0.21449072659015656`, \
-0.20492692291736603`, 0.11879973113536835`, 
                 0.19001705944538116`, -0.1973552703857422, 
                 0.14196911454200745`, 
                 0.06061756610870361, -0.1630895882844925, 
                 0.0015528978547081351`, -0.019544236361980438`, \
-0.19362524151802063`, -0.08886230736970901, -0.3445886969566345, 
                 0.2028679996728897, -0.1229017823934555, \
-0.12420354783535004`, -0.1491868793964386, -0.04626939445734024, 
                 0.10800476372241974`, -0.13900579512119293`, \
-0.16450759768486023`, -0.24966943264007568`, 
                 0.17121048271656036`, -0.14999428391456604`, \
-0.1330750733613968, 0.2752665579319, 
                 0.058282747864723206`, -0.1502441167831421, \
-0.24120116233825684`, -0.22375954687595367`, -0.2754586637020111, \
-0.17372222244739532`, 0.20720116794109344`, 
                 0.1669532060623169, -0.11877211928367615`, 
                 0.1377328783273697, 
                 0.14382711052894592`, -0.16925354301929474`, 
                 0.1921849101781845, 0.15992730855941772`, -0.196363165974617,
                  0.0778680145740509, 0.2140202522277832, 
                 0.16157454252243042`, 0.1905343234539032}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               18, "$InputDimensions" -> {18}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
98dz/HdDMto3mi7TRvw/7v8MHA==
                "], "Biases" -> 
               RawArray["Real32",{0.11058614403009415`, 0.1459028422832489, 
                 0.09743592888116837, -0.13298943638801575`, \
-0.16004578769207, 0.036182701587677, 0.12315712869167328`, 
                 0.05935421213507652, -0.004007590934634209, \
-0.13807764649391174`, -0.15822666883468628`, -0.10480120778083801`, 
                 0.04406538978219032, -0.14523708820343018`, \
-0.19434992969036102`, -0.09664028882980347, 0.16884662210941315`, 
                 0.039723534137010574`, -0.12681405246257782`, \
-0.10558248311281204`, 
                 0.008313377387821674, -0.16909171640872955`, \
-0.14977721869945526`, 
                 0.15547481179237366`, -0.1264285296201706, \
-0.081388458609581, 0.14261552691459656`, 0.06620728224515915, 
                 0.14516647160053253`, 
                 0.05168995261192322, -0.12877553701400757`, \
-0.07333686947822571, 0.1208353340625763, -0.11832599341869354`, 
                 0.10357934981584549`, -0.11235950142145157`, 
                 0.09922627359628677, 
                 0.08616095781326294, -0.13851280510425568`, 
                 0.083940789103508, 0.049086518585681915`, 
                 0.04191446676850319, -0.1144600659608841, \
-0.03270066902041435, -0.17829328775405884`, 0.056076716631650925`, 
                 0.13940095901489258`, 0.0495423823595047, 
                 0.13049697875976562`, 0.16978049278259277`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXtMU2ccQGvl2RZEmSgVV1CIrGosFIjC/X4XNEgdgihzEmYz6KDhOQ2o
MHkYJa6tgAqCAplCYTAeEZybgnC/32WwFeW5YGKXCYwNRKNzaeThfOCGf5yT
nBwPzZEDWqFAIMi0W9KB+KyQjIz4r6Jt3kdifJrSN+39tFrCd4mzrA1sSVPi
zzFa1Lj50df7vboUxliU9zkgpLjgmdkn0D3mjNd9g7BS5khFpkz8lR8i+d21
NCEqFP4VCfHKKzEfelBGT7Q+JX99XUsKaRK8DLGD0LhOUK6Z4PwnpaRtpRN4
FvTRpA3l5MWkPVt2qwSnB3+B5CvLwCHgKbDD1WidaEOVH3aS/u16vOFsoeOP
ctHwXynR2e3DbIUf2XarEoMHbDB3dR/1uVMKXqI6rPYsBp3JD3qlczTqgpz+
pGnEf3ryIEd7F9TkGpnIDocseQnTOyxi7heXQ+WyEfJQJgZLRB3RC/sgorMD
ts0xsEKYzM0kLDIqSonGPAyHX7xmTD7jMO+tQocH55h9bXrOOzAaV0dY8xUe
RV0tWWacs1SQDd+Pgm+gnukM9eQNEYskvTEZA789RM7KbqIKfSA4TMKW5k0z
0pRs1M0cx9qTJvLk9+PQ61gHKbwZg9s5erRgEzbJ44g49wcsOkXp1RoJO+V0
EQTnpaQpsgLfvpkg44pAmHy1Bi4OvaQN+V/ixo9KsGdBwI/9KIf65A94//oT
KLhqxQ8FnAb13jA4/dyMzt8p+WcKM80uV+O7aVs81HsdWtbXYkirK7pJdFBm
/gwabuggTyvGraPtuGdgMyasc2cbMgmGb3ZhxZEi/mC4AUYST4FqVMiLVZdg
12MD0belQr3VTn6iuYub3SpA+z9a4V6eJ1TXfAI1bvNcrKUEeJ9iXC6bxWIP
Ca5KWAGFXhbYrd5ItIrzWO4qhe6/T9L6nTpiHnsOC7uOAbjf46IvV0JOli3r
Pj3AnatKxUXNZVJ2ezn7hbYZJA8u4O4AW/ZPWwOsDGrBqaYOptC/kav4OCYo
pyydiXXZg+2/pWOBMQ7GrCGoaCofLTlGCKuK3uG4ah3bPDIIXvfrSNTAO+j5
/BtiiYwBvwVHMG7vB8Nabxwx2rPzHTdBPM/hpx3OqI7agab+u/g/mbaE8A==

                "], "Biases" -> 
               RawArray["Real32",{-0.007236030418425798, -0.09619268029928207,
                  0.09597259759902954, -0.13553404808044434`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 3.277165, "MeanInputsPerSecond" -> 
        29293.61200916036|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "Mean" -> {0.22846340109655627`, -0.7331524952465475, 
              0.12857418486134847`, -0.1470174637574805, -0.3693960287360927, \
-0.25297157897734485`, -0.1381125864186497, -0.013550857960233805`, \
-0.4477105686514862, 0.10026117855035539`, -0.22988884392409223`, 
              0.29694375132721407`, 
              0.05750394298490419, -0.1986286429254379, -0.13614149543094045`,
               0.08288515091555626, -0.23331746818281004`, 
              0.3872654421790709}, 
             "StandardDeviation" -> {0.4217841444635364, 0.26610671534521446`,
               0.0719824374461276, 0.3714420548858829, 0.17188502945715212`, 
              0.5106448641794368, 0.682620419657301, 0.2497243771479237, 
              0.6360414783504174, 0.49439015269206665`, 0.4649285469405732, 
              0.4304973939924269, 0.6297890981361854, 0.2834486698239679, 
              0.7746989060734015, 0.09846349258259571, 0.2971065188725669, 
              0.21897662978258314`}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 7167940750356708679|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, "Key" -> 
             "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 3600, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 100, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.401929`6.055694336054277, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.09102929754751289, 0.023607494088640154`], "Accuracy" -> 
         Around[0.9761613127009874, 0.012949449812749267`], "EvaluationTime" -> 
         0.0006881501464423077, "TestSize" -> 276, "ModelMemory" -> 58320, 
         "ModelUtility" -> 0.2778097519618762, "TrainingSize" -> 1106, 
         "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 956544, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.09102929754751289, 0.016693019156898786`]}, 
         "AccuracyHistory" -> {
           Around[0.9761613127009874, 0.009156643775229874]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 3600, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> None, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.5722078573533445`, 0.27210027194614067`], "Accuracy" -> 
              Around[0.6211574386771406, 0.01848102720571032], 
              "EvaluationTime" -> 0.00006727785530077912, "TestSize" -> 1372, 
              "ModelMemory" -> 101904, "ModelUtility" -> -3.6582194587192123`,
               "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 480808, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.5722078573533445`, 0.19240394745581973`]}, 
              "AccuracyHistory" -> {
                Around[0.6211574386771406, 0.01306805966045084]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00006727785530077912, "MeanCrossEntropy" -> 
             Around[4.5722078573533445`, 0.27210027194614067`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 480808, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.146953849088694, 0.06512858825223299], "Accuracy" -> 
              Around[0.5636622679613927, 0.04946899254797612], 
              "EvaluationTime" -> 0.00020483898119853466`, "TestSize" -> 200, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.2227347999526073`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 309176, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.146953849088694, 0.04605286640226046]}, 
              "AccuracyHistory" -> {
                Around[0.5636622679613927, 0.034979860089140696`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6860334428196505, 0.060102721049976764`], "Accuracy" -> 
              Around[0.8161029716258141, 0.031470751638048605`], 
              "EvaluationTime" -> 0.0003330981347269232, "TestSize" -> 300, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.7148737042326025`, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 377728, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6860334428196505, 0.04249904162220202]}, 
              "AccuracyHistory" -> {
                Around[0.8161029716258141, 0.022253181892301816`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.8053747043406867`, 0.05642796703407158], "Accuracy" -> 
              Around[0.4158072905455017, 0.020925576627904317`], 
              "EvaluationTime" -> 0.0005779874435747101, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.6713325971918254`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 297016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8053747043406867`, 0.03990059813836297]}, 
              "AccuracyHistory" -> {
                Around[0.4158072905455017, 0.014796617133829869`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35134608706131215`, 0.03978009020685576], "Accuracy" -> 
              Around[0.8678411635281399, 0.028749297744619536`], 
              "EvaluationTime" -> 0.00022915055508466515`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.0507407082010345`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 948456, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.35134608706131215`, 0.028128771541480278`]}, 
              "AccuracyHistory" -> {
                Around[0.8678411635281399, 0.02032882338957159]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00022915055508466515`, "MeanCrossEntropy" -> 
             Around[0.35134608706131215`, 0.03978009020685576], "ModelMemory" -> 
             62416, "TrainingMemory" -> 948456, "TrainingTime" -> 
             0.7847467847731369|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.09102929754751289, 0.023607494088640154`], "Accuracy" -> 
              Around[0.9761613127009874, 0.012949449812749267`], 
              "EvaluationTime" -> 0.0006881501464423077, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 0.2778097519618762, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 956544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.09102929754751289, 0.016693019156898786`]}, 
              "AccuracyHistory" -> {
                Around[0.9761613127009874, 0.009156643775229874]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8964811821115559, 0.05631576825786373], "Accuracy" -> 
              Around[0.7133756368331798, 0.017387908807273374`], 
              "EvaluationTime" -> 0.00034673664508861804`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -1.9714037318786193`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8964811821115559, 0.03982126162286557]}, 
              "AccuracyHistory" -> {
                Around[0.7133756368331798, 0.012295108228276294`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.3429807556245192`, 0.13818489531614622`], "Accuracy" -> 
              Around[0.6158817888808668, 0.01850340875462363], 
              "EvaluationTime" -> 0.00020305462724692585`, "TestSize" -> 1372,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.9313466655000626`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 285712, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.3429807556245192`, 0.09771147653560017]}, 
              "AccuracyHistory" -> {
                Around[0.6158817888808668, 0.013083885805460898`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.28191119077631227`, 0.0268670654279549], "Accuracy" -> 
              Around[0.8990167017961164, 0.012596838847921973`], 
              "EvaluationTime" -> 0.0002202740115369196, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -0.8209142104906325, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 373776, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.28191119077631227`, 0.01899788415468956]}, 
              "AccuracyHistory" -> {
                Around[0.8990167017961164, 0.008907310170879763]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002202740115369196, "MeanCrossEntropy" -> 
             Around[0.28191119077631227`, 0.0268670654279549], "ModelMemory" -> 
             58320, "TrainingMemory" -> 373776, "TrainingTime" -> 
             10.121617336566537`|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.08963151751650107, 0.04221312431395196], "Accuracy" -> 
              Around[0.9791357409747539, 0.012137549581765668`], 
              "EvaluationTime" -> 0.0003240319691030005, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 0.11165932133847212`,
               "TrainingSize" -> 1106, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 1169256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.08963151751650107, 0.029849186457466155`]}, 
              "AccuracyHistory" -> {
                Around[0.9791357409747539, 0.008582543616254447]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2240863679594245`, 0.14357091710562775`], "Accuracy" -> 
              Around[0.7906775734525874, 0.02161228989770136], 
              "EvaluationTime" -> 0.0007772944109511788, "TestSize" -> 700, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.435754149761074, 
              "TrainingSize" -> 50, "TrainingTime" -> 1., "TrainingMemory" -> 
              780096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2240863679594245`, 0.10151996906656106`]}, 
              "AccuracyHistory" -> {
                Around[0.7906775734525874, 0.015282196743634147`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4340717995649587, 0.04616762742632497], "Accuracy" -> 
              Around[0.8493098429585471, 0.01492641153241974], 
              "EvaluationTime" -> 0.0003877717060035205, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.3968757488568753`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 840352, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4340717995649587, 0.03264544242444842]}, 
              "AccuracyHistory" -> {
                Around[0.8493098429585471, 0.010554566813355084`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003877717060035205, "MeanCrossEntropy" -> 
             Around[0.4340717995649587, 0.04616762742632497], "ModelMemory" -> 
             187664, "TrainingMemory" -> 840352, "TrainingTime" -> 
             17.3393835219499|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.37168744234195067`, 0.06138078981133629], "Accuracy" -> 
              Around[0.8929724590325544, 0.017756003513421006`], 
              "EvaluationTime" -> 0.0005729130857749843, "TestSize" -> 600, 
              "ModelMemory" -> 164368, "ModelUtility" -> -1.2331962386303115`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 683920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.37168744234195067`, 0.04340277271018203]}, 
              "AccuracyHistory" -> {
                Around[0.8929724590325544, 0.012555390491112156`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.7690385100499966`, 0.1667625598149496], "Accuracy" -> 
              Around[0.6062976552481879, 0.020601568145856446`], 
              "EvaluationTime" -> 0.0005071606602769552, "TestSize" -> 1100, 
              "ModelMemory" -> 164368, "ModelUtility" -> -3.220876683857752, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 587920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7690385100499966`, 0.1179189368931781]}, 
              "AccuracyHistory" -> {
                Around[0.6062976552481879, 0.014567508539011861`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005071606602769552, "MeanCrossEntropy" -> 
             Around[2.7690385100499966`, 0.1667625598149496], "ModelMemory" -> 
             164368, "TrainingMemory" -> 587920, "TrainingTime" -> 
             10.715092815685152`|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[3.194583785496335, 0.19343446926971108`], "Accuracy" -> 
              Around[0.6168133280093175, 0.018368536511584353`], 
              "EvaluationTime" -> 0.00040456834306917757`, "TestSize" -> 1372,
               "ModelMemory" -> 93800, "ModelUtility" -> -3.2901150116252373`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 384328, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.194583785496335, 0.13677882493583354`]}, 
              "AccuracyHistory" -> {
                Around[0.6168133280093175, 0.012988516727813985`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00040456834306917757`, "MeanCrossEntropy" -> 
             Around[3.194583785496335, 0.19343446926971108`], "ModelMemory" -> 
             93800, "TrainingMemory" -> 384328, "TrainingTime" -> 
             23.488117112273706`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.8197448601870514`, 0.15407278573948416`], "Accuracy" -> 
              Around[0.7681197493442067, 0.016233908383616182`], 
              "EvaluationTime" -> 0.0005168685314425036, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -2.805891685476432, 
              "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 617752, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8197448601870514`, 0.10894591159269124`]}, 
              "AccuracyHistory" -> {
                Around[0.7681197493442067, 0.011479106703216146`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005168685314425036, "MeanCrossEntropy" -> 
             Around[1.8197448601870514`, 0.15407278573948416`], "ModelMemory" -> 
             164368, "TrainingMemory" -> 617752, "TrainingTime" -> 
             74.27594802356177|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.29403327569319443`, 0.03932904399651967], "Accuracy" -> 
              Around[0.9098419509282913, 0.011996499990282437`], 
              "EvaluationTime" -> 0.00008681470201758184, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -0.8705335057683248, 
              "TrainingSize" -> 250, "TrainingTime" -> 10., "TrainingMemory" -> 
              351080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.29403327569319443`, 0.027809833707523133`]}, 
              "AccuracyHistory" -> {
                Around[0.9098419509282913, 0.008482806493633062]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.5876025435917676`, 0.22692353204588206`], "Accuracy" -> 
              Around[0.6246522534683608, 0.018394245585487717`], 
              "EvaluationTime" -> 0.00031189803436950574`, "TestSize" -> 1372,
               "ModelMemory" -> 58320, "ModelUtility" -> -3.3582514493484092`,
               "TrainingSize" -> 10, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 273672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.5876025435917676`, 0.16045916832044602`]}, 
              "AccuracyHistory" -> {
                Around[0.6246522534683608, 0.01300669578830908]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00031189803436950574`, "MeanCrossEntropy" -> 
             Around[3.5876025435917676`, 0.22692353204588206`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 273672, "TrainingTime" -> 
             53.70267726352701|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.10590330154399025`, 0.028414184949045067`], "Accuracy" -> 
              Around[0.9710001978599868, 0.014256985156258202`], 
              "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.11862582820774348`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 986160, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.10590330154399025`, 0.0200918628593585]}, 
              "AccuracyHistory" -> {
                Around[0.9710001978599868, 0.010081210883266124`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.2470665473441196`, 0.13307038058297638`], "Accuracy" -> 
              Around[0.6176776136790039, 0.01842307108792603], 
              "EvaluationTime" -> 0.000405204733288256, "TestSize" -> 1372, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.895732548673068, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 296888, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2470665473441196`, 0.09409496848529728]}, 
              "AccuracyHistory" -> {
                Around[0.6176776136790039, 0.013027078496554321`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000405204733288256, "MeanCrossEntropy" -> 
             Around[2.2470665473441196`, 0.13307038058297638`], "ModelMemory" -> 
             62416, "TrainingMemory" -> 296888, "TrainingTime" -> 
             12.700902206251245`|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.2626592930291636, 0.03549734171705872], "Accuracy" -> 
              Around[0.8904866053987731, 0.026502625634261496`], 
              "EvaluationTime" -> 0.000995521083966344, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.8161649012419092, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 1012984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2626592930291636, 0.025100411042228342`]}, 
              "AccuracyHistory" -> {
                Around[0.8904866053987731, 0.01874018630523473]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.622240942702334, 0.0474324350170228], "Accuracy" -> 
              Around[0.4223703251465125, 0.01863988008159035], 
              "EvaluationTime" -> 0.00022897192394878054`, "TestSize" -> 1372,
               "ModelMemory" -> 101904, "ModelUtility" -> -2.616030556943823, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 447496, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.622240942702334, 0.03353979644872707]}, 
              "AccuracyHistory" -> {
                Around[0.4223703251465125, 0.013180385606196592`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5079075602598763, 0.031736742733066994`], "Accuracy" -> 
              Around[0.8151969662775643, 0.016267526734640162`], 
              "EvaluationTime" -> 0.0002366474107429308, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.461355133207583, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 527464, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5079075602598763, 0.022441265999324552`]}, 
              "AccuracyHistory" -> {
                Around[0.8151969662775643, 0.011502878467197513`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002366474107429308, "MeanCrossEntropy" -> 
             Around[0.5079075602598763, 0.031736742733066994`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 527464, "TrainingTime" -> 
             3.401520371971754|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 1382, 
      "PreprocessorEvaluationTime" -> 4.21875*^-6, "PreprocessorMemory" -> 
      94088, "InputDimension" -> 18, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.8472130263720676, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.868970440615246`16.340170400833458*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 5.861760790364184, 
          "ElapsedTimes" -> 16.465788, "ExperimentCounts" -> 8|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 8.373943986234558, 
          "ElapsedTimes" -> 9.178283, "ExperimentCounts" -> 4|>, <|
         "TrainingSizes" -> 250, "TimeBudgets" -> 11.962777123192216`, 
          "ElapsedTimes" -> 18.246313, "ExperimentCounts" -> 6|>, <|
         "TrainingSizes" -> 1106, "TimeBudgets" -> 17.0896816045603, 
          "ElapsedTimes" -> 16.763523, "ExperimentCounts" -> 5|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
             Interval[{5, 
               DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
           5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 61.169972, 
      "MaxTrainingMemory" -> 2033248, "DataMemory" -> 1781648, 
      "FunctionMemory" -> 352848, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 8, 18, 0, 40.649076`8.361625656281715}, "Instant", 
        "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64", 
      "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9},
 CellLabel->
  "Out[431]=",ExpressionUUID->"6871e97c-7114-4129-908c-f7164b0eb2dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}},
 CellLabel->
  "In[432]:=",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "d093bf74-15a1-43b9-a987-7be67ffd0c89"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"98.0", "0.8"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    97.9768786127167601308`3., 0.7579895578429771685`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265187726`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9311011902438047771`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0168655123198805934`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8973701656040435903`3.", "\", \"", 
                   "0.964832214883565964`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8973701656040435903`3., 
                   ", ", 0.964832214883565964`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0713873177684133248`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0181125213588456818`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.0351622750507219611`3.", "\", \"", 
                   "0.1076123604861046884`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.0351622750507219611`3., 
                   ", ", 0.1076123604861046884`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"5.82`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.47`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKlyT/3KjF/9ZeZZO3Q8mUF/arBTqnJZ+8
ZW9dPrdm5su39loKgnbvn722T9eeEXdy8lN781glR2m3d/b9k3R661ze2q+9
KDWZVfEl3LyHVSLr3B/esoe5kJB6dNrs/o5Z8k1v7TNinE69iX9lf88pf9We
WQ9xqsflTrVpdWcqJN/YV2/Xv/c/8Yn9uXvHym/0HSHofmJpAO2ufDY=
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["68", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9714285714285714`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9784172661870503`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{68, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9714285714285714}], 
                    Row[{"Recall = ", 0.9855072463768116}], 
                    Row[{"FScore = ", 0.9784172661870503}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.02857142857142857`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00796812749003984`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.02857142857142857}], 
                    Row[{"Row fraction = ", 0.00796812749003984}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.1`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.014492753623188406`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.1}], 
                    Row[{"Row fraction = ", 0.014492753623188406`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["8", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "8", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.8`"}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.8`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8000000000000002`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{8, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8}], 
                    Row[{"Recall = ", 0.8}], 
                    Row[{"FScore = ", 0.8000000000000002}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.1`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.1}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["247", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "247", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9840637450199203`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9919678714859439`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{247, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9840637450199203}], 
                    Row[{"FScore = ", 0.9919678714859439}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.10526315789473684`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.2`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.10526315789473684`}], 
                    Row[{"Row fraction = ", 0.2}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.05263157894736842`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.05263157894736842}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["16", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8421052631578947`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9142857142857141`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{16, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8421052631578947}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.9142857142857141}]}], "Tooltip"]& ]}, 
                   
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "69", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{69, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9855072463768116}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.8`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.8}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9840637450199203`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9840637450199203}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "70", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9714285714285714`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{70, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9714285714285714}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.8`"}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.8}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "247", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{247, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "19", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8421052631578947`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{19, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8421052631578947}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["69", TraditionalForm]}, {2.5, 
                    FormBox["10", TraditionalForm]}, {1.5, 
                    FormBox["251", TraditionalForm]}, {0.5, 
                    FormBox["16", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["70", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["10", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["247", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["19", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
              "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
              "Doors" -> <|"Type" -> "Nominal"|>, 
              "Passengers" -> <|"Type" -> "Nominal"|>, 
              "Cargo" -> <|"Type" -> "Nominal"|>, 
              "Safety" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|
                  "FeatureNames" -> {
                    "PurchasePrice", "MaintenanceCost", "Doors", "Passengers",
                     "Cargo", "Safety"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 6|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 1382, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.18180837299497768`, \
-0.5191050362589946, -0.3841046152539792, -0.5681753733658641, 
                    0.12529108395561656`, 0.45980236054401374`}, {
                    0.19483230814806896`, -0.11552149012629362`, \
-0.48399667557469317`, 
                    0.007741300812005421, -0.8143737955228835, \
-0.2262250394645403}, {
                    0.7017573541803983, -0.271578659323676, \
-0.2844896353147054, 0.0327006634878128, 
                    0.47461172003755725`, -0.3556988569880933}, \
{-0.534781449622502, -0.5935508055542879, -0.03841883279524632, 
                    0.43350591164949265`, 
                    0.09542916373943802, -0.4039754137631351}, \
{-0.24962449527823052`, 0.1995437550139275, 
                    0.05318131991869604, -0.6664425700794839, 
                    0.05982277373001385, -0.6688177516579797}, \
{-0.2970170290759208, 0.5013077991716276, -0.7300494849461234, 
                    0.20970076137332036`, 0.2883672850742781, 
                    0.01920999835638125}}, 
                    "Precisions" -> {11.409050313849102`, 11.728549767205461`,
                     11.838648803211964`, 12.353703996888086`, 
                    12.493974299485144`, 12.642220694332103`}, 
                    "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712677`, 
                    0.0011546407584220714`, -0.0003624914148932479, 
                    0.0034011567571950794`, 0.006626869711687391, 
                    0.003842044757913067}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                    "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                    "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 6, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, 
                    "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.227775, "MaxTrainingMemory" -> 
                    1301552, "DataMemory" -> 445472, "FunctionMemory" -> 
                    62320, "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 8, 17, 59, 39.745929`8.351867630926963}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-1.4650241955255132`, \
-1.4650241955255132`, -1.430755802766193, -1.4042067830875913`, \
-1.3018866229987, -1.2507800118207644`, -1.2364530874740836`, \
-1.2255722141636205`, -1.2228520173189021`, -1.0894952762761034`, \
-1.0894015666714374`}, "LeftBoundary" -> -1.430755802766193, "LeftScale" -> 
                    0.01713419637966007, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[7.629856546861745, 0.2480059748492769], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5495059474424677337|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Index" -> {<|
                  "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                  2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                  "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                  "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.12314196676015854`, -0.861851692199707, 
                   0.10532767325639725`}, {
                   0.8298183679580688, -0.28949323296546936`, 
                   0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                   0.38437455892562866`, -0.8375512361526489, 
                   0.1422276645898819}}], 
                  RawArray["Real32",{{0., 0., 
                   0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                   0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                   0.4795919358730316}, {
                   0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                   0.2534555494785309, -0.4526385962963104}, {
                   0.3543681204319, -0.37547722458839417`, 
                   0.5876661539077759}, {-1.1276206970214844`, 
                   0.17602579295635223`, -1.0098364353179932`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.24657385051250458`, -0.8256815671920776, 
                   0.8846340179443359}, {0.6182233691215515, 
                   0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.34666627645492554`, -0.5679200291633606, 
                   0.10750995576381683`}, {
                   0.6412044167518616, -0.1759643256664276, 
                   0.6604856848716736}, {-0.8092290163040161, 
                   0.12987354397773743`, -1.1753407716751099`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                   0.12715618312358856`, 0.1291729062795639}, {
                   0.21379514038562775`, -0.6005780100822449, 
                   0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
                272386066020895428|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                   "very good" -> 4|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {4}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "acceptable" -> 0.227994227994228, "good" -> 0.04329004329004329, 
           "unacceptable" -> 0.6926406926406926, "very good" -> 
           0.03607503607503607|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Acceptability", 
             "Order" -> {
              "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
               "Cargo", "Safety", "Acceptability"}|>], "PreferLabeled" -> 
          True, "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> 
       None, "ImputationStrategy" -> Automatic, "Prior" -> Automatic, 
       "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Memory", "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
cFUh/T9EFu3/
                   "], "Biases" -> 
                  RawArray["Real32",{-0.14151161909103394`, 
                    0.181189626455307, -0.10466769337654114`, \
-0.2077053189277649, 
                    0.0883769765496254, -0.21449072659015656`, \
-0.20492692291736603`, 0.11879973113536835`, 
                    0.19001705944538116`, -0.1973552703857422, 
                    0.14196911454200745`, 
                    0.06061756610870361, -0.1630895882844925, 
                    0.0015528978547081351`, -0.019544236361980438`, \
-0.19362524151802063`, -0.08886230736970901, -0.3445886969566345, 
                    0.2028679996728897, -0.1229017823934555, \
-0.12420354783535004`, -0.1491868793964386, -0.04626939445734024, 
                    0.10800476372241974`, -0.13900579512119293`, \
-0.16450759768486023`, -0.24966943264007568`, 
                    0.17121048271656036`, -0.14999428391456604`, \
-0.1330750733613968, 0.2752665579319, 
                    0.058282747864723206`, -0.1502441167831421, \
-0.24120116233825684`, -0.22375954687595367`, -0.2754586637020111, \
-0.17372222244739532`, 0.20720116794109344`, 
                    0.1669532060623169, -0.11877211928367615`, 
                    0.1377328783273697, 
                    0.14382711052894592`, -0.16925354301929474`, 
                    0.1921849101781845, 
                    0.15992730855941772`, -0.196363165974617, 
                    0.0778680145740509, 0.2140202522277832, 
                    0.16157454252243042`, 0.1905343234539032}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 18, "$InputDimensions" -> {18}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
98dz/HdDMto3mi7TRvw/7v8MHA==
                   "], "Biases" -> 
                  RawArray["Real32",{0.11058614403009415`, 0.1459028422832489,
                     0.09743592888116837, -0.13298943638801575`, \
-0.16004578769207, 0.036182701587677, 0.12315712869167328`, 
                    0.05935421213507652, -0.004007590934634209, \
-0.13807764649391174`, -0.15822666883468628`, -0.10480120778083801`, 
                    0.04406538978219032, -0.14523708820343018`, \
-0.19434992969036102`, -0.09664028882980347, 0.16884662210941315`, 
                    
                    0.039723534137010574`, -0.12681405246257782`, \
-0.10558248311281204`, 
                    0.008313377387821674, -0.16909171640872955`, \
-0.14977721869945526`, 
                    0.15547481179237366`, -0.1264285296201706, \
-0.081388458609581, 0.14261552691459656`, 0.06620728224515915, 
                    0.14516647160053253`, 
                    0.05168995261192322, -0.12877553701400757`, \
-0.07333686947822571, 0.1208353340625763, -0.11832599341869354`, 
                    0.10357934981584549`, -0.11235950142145157`, 
                    0.09922627359628677, 
                    0.08616095781326294, -0.13851280510425568`, 
                    0.083940789103508, 0.049086518585681915`, 
                    0.04191446676850319, -0.1144600659608841, \
-0.03270066902041435, -0.17829328775405884`, 0.056076716631650925`, 
                    0.13940095901489258`, 0.0495423823595047, 
                    0.13049697875976562`, 0.16978049278259277`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXtMU2ccQGvl2RZEmSgVV1CIrGosFIjC/X4XNEgdgihzEmYz6KDhOQ2o
MHkYJa6tgAqCAplCYTAeEZybgnC/32WwFeW5YGKXCYwNRKNzaeThfOCGf5yT
nBwPzZEDWqFAIMi0W9KB+KyQjIz4r6Jt3kdifJrSN+39tFrCd4mzrA1sSVPi
zzFa1Lj50df7vboUxliU9zkgpLjgmdkn0D3mjNd9g7BS5khFpkz8lR8i+d21
NCEqFP4VCfHKKzEfelBGT7Q+JX99XUsKaRK8DLGD0LhOUK6Z4PwnpaRtpRN4
FvTRpA3l5MWkPVt2qwSnB3+B5CvLwCHgKbDD1WidaEOVH3aS/u16vOFsoeOP
ctHwXynR2e3DbIUf2XarEoMHbDB3dR/1uVMKXqI6rPYsBp3JD3qlczTqgpz+
pGnEf3ryIEd7F9TkGpnIDocseQnTOyxi7heXQ+WyEfJQJgZLRB3RC/sgorMD
ts0xsEKYzM0kLDIqSonGPAyHX7xmTD7jMO+tQocH55h9bXrOOzAaV0dY8xUe
RV0tWWacs1SQDd+Pgm+gnukM9eQNEYskvTEZA789RM7KbqIKfSA4TMKW5k0z
0pRs1M0cx9qTJvLk9+PQ61gHKbwZg9s5erRgEzbJ44g49wcsOkXp1RoJO+V0
EQTnpaQpsgLfvpkg44pAmHy1Bi4OvaQN+V/ixo9KsGdBwI/9KIf65A94//oT
KLhqxQ8FnAb13jA4/dyMzt8p+WcKM80uV+O7aVs81HsdWtbXYkirK7pJdFBm
/gwabuggTyvGraPtuGdgMyasc2cbMgmGb3ZhxZEi/mC4AUYST4FqVMiLVZdg
12MD0belQr3VTn6iuYub3SpA+z9a4V6eJ1TXfAI1bvNcrKUEeJ9iXC6bxWIP
Ca5KWAGFXhbYrd5ItIrzWO4qhe6/T9L6nTpiHnsOC7uOAbjf46IvV0JOli3r
Pj3AnatKxUXNZVJ2ezn7hbYZJA8u4O4AW/ZPWwOsDGrBqaYOptC/kav4OCYo
pyydiXXZg+2/pWOBMQ7GrCGoaCofLTlGCKuK3uG4ah3bPDIIXvfrSNTAO+j5
/BtiiYwBvwVHMG7vB8Nabxwx2rPzHTdBPM/hpx3OqI7agab+u/g/mbaE8A==

                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.007236030418425798, -0.09619268029928207, 
                    0.09597259759902954, -0.13553404808044434`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 3.277165, "MeanInputsPerSecond" -> 
           29293.61200916036|>, "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "Mean" -> {0.22846340109655627`, -0.7331524952465475, 
                 0.12857418486134847`, -0.1470174637574805, \
-0.3693960287360927, -0.25297157897734485`, -0.1381125864186497, \
-0.013550857960233805`, -0.4477105686514862, 
                 0.10026117855035539`, -0.22988884392409223`, 
                 0.29694375132721407`, 
                 0.05750394298490419, -0.1986286429254379, \
-0.13614149543094045`, 0.08288515091555626, -0.23331746818281004`, 
                 0.3872654421790709}, 
                "StandardDeviation" -> {0.4217841444635364, 
                 0.26610671534521446`, 0.0719824374461276, 0.3714420548858829,
                  0.17188502945715212`, 0.5106448641794368, 0.682620419657301,
                  0.2497243771479237, 0.6360414783504174, 
                 0.49439015269206665`, 0.4649285469405732, 0.4304973939924269,
                  0.6297890981361854, 0.2834486698239679, 0.7746989060734015, 
                 0.09846349258259571, 0.2971065188725669, 
                 0.21897662978258314`}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 7167940750356708679|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 3600, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 100, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.401929`6.055694336054277, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.09102929754751289, 0.023607494088640154`], "Accuracy" -> 
            Around[0.9761613127009874, 0.012949449812749267`], 
            "EvaluationTime" -> 0.0006881501464423077, "TestSize" -> 276, 
            "ModelMemory" -> 58320, "ModelUtility" -> 0.2778097519618762, 
            "TrainingSize" -> 1106, "TrainingTime" -> 3.1622776601683795`, 
            "TrainingMemory" -> 956544, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.09102929754751289, 0.016693019156898786`]}, 
            "AccuracyHistory" -> {
              Around[0.9761613127009874, 0.009156643775229874]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 2, "NumberOfParameters" -> 3600, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> None, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.5722078573533445`, 0.27210027194614067`], 
                 "Accuracy" -> 
                 Around[0.6211574386771406, 0.01848102720571032], 
                 "EvaluationTime" -> 0.00006727785530077912, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -3.6582194587192123`, "TrainingSize" -> 10,
                  "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 480808, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.5722078573533445`, 0.19240394745581973`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6211574386771406, 0.01306805966045084]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00006727785530077912, "MeanCrossEntropy" -> 
                Around[4.5722078573533445`, 0.27210027194614067`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 480808, 
                "TrainingTime" -> 58.99948267602831|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.146953849088694, 0.06512858825223299], "Accuracy" -> 
                 Around[0.5636622679613927, 0.04946899254797612], 
                 "EvaluationTime" -> 0.00020483898119853466`, "TestSize" -> 
                 200, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.2227347999526073`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
                 309176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.146953849088694, 0.04605286640226046]}, 
                 "AccuracyHistory" -> {
                   Around[0.5636622679613927, 0.034979860089140696`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6860334428196505, 0.060102721049976764`], 
                 "Accuracy" -> 
                 Around[0.8161029716258141, 0.031470751638048605`], 
                 "EvaluationTime" -> 0.0003330981347269232, "TestSize" -> 300,
                  "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.7148737042326025`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.31622776601683794`, 
                 "TrainingMemory" -> 377728, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6860334428196505, 0.04249904162220202]}, 
                 "AccuracyHistory" -> {
                   Around[0.8161029716258141, 0.022253181892301816`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.8053747043406867`, 0.05642796703407158], "Accuracy" -> 
                 Around[0.4158072905455017, 0.020925576627904317`], 
                 "EvaluationTime" -> 0.0005779874435747101, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.6713325971918254`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
                 297016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.8053747043406867`, 0.03990059813836297]}, 
                 "AccuracyHistory" -> {
                   Around[0.4158072905455017, 0.014796617133829869`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35134608706131215`, 0.03978009020685576], 
                 "Accuracy" -> 
                 Around[0.8678411635281399, 0.028749297744619536`], 
                 "EvaluationTime" -> 0.00022915055508466515`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.0507407082010345`, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 948456, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35134608706131215`, 0.028128771541480278`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8678411635281399, 0.02032882338957159]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00022915055508466515`, 
                "MeanCrossEntropy" -> 
                Around[0.35134608706131215`, 0.03978009020685576], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 948456, 
                "TrainingTime" -> 0.7847467847731369|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.09102929754751289, 0.023607494088640154`], 
                 "Accuracy" -> 
                 Around[0.9761613127009874, 0.012949449812749267`], 
                 "EvaluationTime" -> 0.0006881501464423077, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 
                 0.2778097519618762, "TrainingSize" -> 1106, "TrainingTime" -> 
                 3.1622776601683795`, "TrainingMemory" -> 956544, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.09102929754751289, 0.016693019156898786`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9761613127009874, 0.009156643775229874]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8964811821115559, 0.05631576825786373], "Accuracy" -> 
                 Around[0.7133756368331798, 0.017387908807273374`], 
                 "EvaluationTime" -> 0.00034673664508861804`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.9714037318786193`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8964811821115559, 0.03982126162286557]}, 
                 "AccuracyHistory" -> {
                   Around[0.7133756368331798, 0.012295108228276294`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.3429807556245192`, 0.13818489531614622`], 
                 "Accuracy" -> 
                 Around[0.6158817888808668, 0.01850340875462363], 
                 "EvaluationTime" -> 0.00020305462724692585`, "TestSize" -> 
                 1372, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.9313466655000626`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 285712, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.3429807556245192`, 0.09771147653560017]}, 
                 "AccuracyHistory" -> {
                   Around[0.6158817888808668, 0.013083885805460898`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.28191119077631227`, 0.0268670654279549], "Accuracy" -> 
                 Around[0.8990167017961164, 0.012596838847921973`], 
                 "EvaluationTime" -> 0.0002202740115369196, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.8209142104906325, "TrainingSize" -> 250,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 373776, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.28191119077631227`, 0.01899788415468956]}, 
                 "AccuracyHistory" -> {
                   Around[0.8990167017961164, 0.008907310170879763]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002202740115369196, "MeanCrossEntropy" -> 
                Around[0.28191119077631227`, 0.0268670654279549], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 373776, 
                "TrainingTime" -> 10.121617336566537`|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.08963151751650107, 0.04221312431395196], "Accuracy" -> 
                 Around[0.9791357409747539, 0.012137549581765668`], 
                 "EvaluationTime" -> 0.0003240319691030005, "TestSize" -> 276,
                  "ModelMemory" -> 187664, "ModelUtility" -> 
                 0.11165932133847212`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 6.309573444801933, "TrainingMemory" -> 1169256, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.08963151751650107, 0.029849186457466155`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9791357409747539, 0.008582543616254447]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.2240863679594245`, 0.14357091710562775`], 
                 "Accuracy" -> 
                 Around[0.7906775734525874, 0.02161228989770136], 
                 "EvaluationTime" -> 0.0007772944109511788, "TestSize" -> 700,
                  "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.435754149761074, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1., "TrainingMemory" -> 780096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2240863679594245`, 0.10151996906656106`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7906775734525874, 0.015282196743634147`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4340717995649587, 0.04616762742632497], "Accuracy" -> 
                 Around[0.8493098429585471, 0.01492641153241974], 
                 "EvaluationTime" -> 0.0003877717060035205, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3968757488568753`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 840352, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4340717995649587, 0.03264544242444842]}, 
                 "AccuracyHistory" -> {
                   Around[0.8493098429585471, 0.010554566813355084`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003877717060035205, "MeanCrossEntropy" -> 
                Around[0.4340717995649587, 0.04616762742632497], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 840352, 
                "TrainingTime" -> 17.3393835219499|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.37168744234195067`, 0.06138078981133629], 
                 "Accuracy" -> 
                 Around[0.8929724590325544, 0.017756003513421006`], 
                 "EvaluationTime" -> 0.0005729130857749843, "TestSize" -> 600,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -1.2331962386303115`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 683920, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.37168744234195067`, 0.04340277271018203]}, 
                 "AccuracyHistory" -> {
                   Around[0.8929724590325544, 0.012555390491112156`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.7690385100499966`, 0.1667625598149496], "Accuracy" -> 
                 Around[0.6062976552481879, 0.020601568145856446`], 
                 "EvaluationTime" -> 0.0005071606602769552, "TestSize" -> 
                 1100, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -3.220876683857752, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 587920, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.7690385100499966`, 0.1179189368931781]}, 
                 "AccuracyHistory" -> {
                   Around[0.6062976552481879, 0.014567508539011861`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005071606602769552, "MeanCrossEntropy" -> 
                Around[2.7690385100499966`, 0.1667625598149496], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 587920, 
                "TrainingTime" -> 10.715092815685152`|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.194583785496335, 0.19343446926971108`], "Accuracy" -> 
                 Around[0.6168133280093175, 0.018368536511584353`], 
                 "EvaluationTime" -> 0.00040456834306917757`, "TestSize" -> 
                 1372, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -3.2901150116252373`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 384328, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.194583785496335, 0.13677882493583354`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6168133280093175, 0.012988516727813985`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00040456834306917757`, 
                "MeanCrossEntropy" -> 
                Around[3.194583785496335, 0.19343446926971108`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 384328, 
                "TrainingTime" -> 23.488117112273706`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.8197448601870514`, 0.15407278573948416`], 
                 "Accuracy" -> 
                 Around[0.7681197493442067, 0.016233908383616182`], 
                 "EvaluationTime" -> 0.0005168685314425036, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -2.805891685476432, "TrainingSize" -> 50, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 617752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.8197448601870514`, 0.10894591159269124`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7681197493442067, 0.011479106703216146`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005168685314425036, "MeanCrossEntropy" -> 
                Around[1.8197448601870514`, 0.15407278573948416`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 617752, 
                "TrainingTime" -> 74.27594802356177|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.29403327569319443`, 0.03932904399651967], 
                 "Accuracy" -> 
                 Around[0.9098419509282913, 0.011996499990282437`], 
                 "EvaluationTime" -> 0.00008681470201758184, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.8705335057683248, "TrainingSize" -> 250,
                  "TrainingTime" -> 10., "TrainingMemory" -> 351080, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.29403327569319443`, 0.027809833707523133`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9098419509282913, 0.008482806493633062]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.5876025435917676`, 0.22692353204588206`], 
                 "Accuracy" -> 
                 Around[0.6246522534683608, 0.018394245585487717`], 
                 "EvaluationTime" -> 0.00031189803436950574`, "TestSize" -> 
                 1372, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -3.3582514493484092`, "TrainingSize" -> 10,
                  "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 
                 273672, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.5876025435917676`, 0.16045916832044602`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6246522534683608, 0.01300669578830908]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00031189803436950574`, 
                "MeanCrossEntropy" -> 
                Around[3.5876025435917676`, 0.22692353204588206`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 273672, 
                "TrainingTime" -> 53.70267726352701|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.10590330154399025`, 0.028414184949045067`], 
                 "Accuracy" -> 
                 Around[0.9710001978599868, 0.014256985156258202`], 
                 "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.11862582820774348`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 986160, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.10590330154399025`, 0.0200918628593585]}, 
                 "AccuracyHistory" -> {
                   Around[0.9710001978599868, 0.010081210883266124`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.2470665473441196`, 0.13307038058297638`], 
                 "Accuracy" -> 
                 Around[0.6176776136790039, 0.01842307108792603], 
                 "EvaluationTime" -> 0.000405204733288256, "TestSize" -> 1372,
                  "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.895732548673068, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 296888, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.2470665473441196`, 0.09409496848529728]}, 
                 "AccuracyHistory" -> {
                   Around[0.6176776136790039, 0.013027078496554321`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000405204733288256, "MeanCrossEntropy" -> 
                Around[2.2470665473441196`, 0.13307038058297638`], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 296888, 
                "TrainingTime" -> 12.700902206251245`|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.2626592930291636, 0.03549734171705872], "Accuracy" -> 
                 Around[0.8904866053987731, 0.026502625634261496`], 
                 "EvaluationTime" -> 0.000995521083966344, "TestSize" -> 276, 
                 "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.8161649012419092, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 1012984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2626592930291636, 0.025100411042228342`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8904866053987731, 0.01874018630523473]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.622240942702334, 0.0474324350170228], "Accuracy" -> 
                 Around[0.4223703251465125, 0.01863988008159035], 
                 "EvaluationTime" -> 0.00022897192394878054`, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -2.616030556943823, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 447496, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.622240942702334, 0.03353979644872707]}, 
                 "AccuracyHistory" -> {
                   Around[0.4223703251465125, 0.013180385606196592`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5079075602598763, 0.031736742733066994`], 
                 "Accuracy" -> 
                 Around[0.8151969662775643, 0.016267526734640162`], 
                 "EvaluationTime" -> 0.0002366474107429308, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.461355133207583, "TrainingSize" -> 250, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 527464, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5079075602598763, 0.022441265999324552`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8151969662775643, 0.011502878467197513`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002366474107429308, "MeanCrossEntropy" -> 
                Around[0.5079075602598763, 0.031736742733066994`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 527464, 
                "TrainingTime" -> 3.401520371971754|>, "Index" -> 10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 
         1382, "PreprocessorEvaluationTime" -> 4.21875*^-6, 
         "PreprocessorMemory" -> 94088, "InputDimension" -> 18, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.8472130263720676, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.868970440615246`16.340170400833458*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 10, "TimeBudgets" -> 5.861760790364184, 
             "ElapsedTimes" -> 16.465788, "ExperimentCounts" -> 8|>, <|
            "TrainingSizes" -> 50, "TimeBudgets" -> 8.373943986234558, 
             "ElapsedTimes" -> 9.178283, "ExperimentCounts" -> 4|>, <|
            "TrainingSizes" -> 250, "TimeBudgets" -> 11.962777123192216`, 
             "ElapsedTimes" -> 18.246313, "ExperimentCounts" -> 6|>, <|
            "TrainingSizes" -> 1106, "TimeBudgets" -> 17.0896816045603, 
             "ElapsedTimes" -> 16.763523, "ExperimentCounts" -> 5|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              2846111867015398573|>, 
            "f2" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, "ID" -> 
              41728420326286313|>, 
            "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                Interval[{5, 
                  DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
            "f4" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
              536027689597629633|>, 
            "f5" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
              5753609278033805624|>, 
            "f6" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              8080186329754682489|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 61.169972, 
         "MaxTrainingMemory" -> 2033248, "DataMemory" -> 1781648, 
         "FunctionMemory" -> 352848, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 8, 18, 0, 40.649076`8.361625656281715}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|
     "Input" -> {{"medium", "high", 3, 4, "large", "medium"}, {
        "medium", "low", 4, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "large", "high"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 2, "small", "high"}, {
        "very high", "low", 2, 4, "medium", "high"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "very high", 2, 4, "medium", "high"}, {
        "very high", "medium", 2, 2, "medium", "high"}, {
        "low", "medium", 4, 2, "large", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "low", 2, 4, "medium", "medium"}, {
        "medium", "high", 4, 4, "small", "medium"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "low", "very high", 3, 2, "large", "medium"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "low", 3, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "medium", 3, 2, "medium", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "high", 3, 4, "small", "high"}, {
        "very high", "very high", 2, 2, "small", "low"}, {
        "high", "low", 4, 2, "medium", "medium"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 4, "large", "high"}, {
        "high", "very high", 4, 2, "large", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "medium", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 3, 4, "small", "low"}, {
        "high", "low", 2, 4, "large", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "high", 3, 4, "medium", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 2, 2, "medium", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 3, 4, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "high", 3, 4, "medium", "low"}, {
        "very high", "low", 4, 2, "large", "medium"}, {
        "very high", "high", 4, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "medium", "high", 3, 4, "small", "high"}, {
        "high", "medium", 3, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "high", 2, 2, "small", "low"}, {
        "medium", "low", 4, 2, "medium", "medium"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 2, "large", "medium"}, {
        "high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "low", 4, 4, "large", "medium"}, {
        "very high", "high", 3, 4, "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "very high", 3, 2, "large", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "very high", "high", 4, 4, "large", "low"}, {
        "high", "low", 2, 2, "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "high", "high", 2, 2, "large", "medium"}, {
        "medium", "high", 2, 4, "small", "high"}, {
        "medium", "medium", 2, 2, "large", "high"}, {
        "low", "medium", 2, 2, "medium", "low"}, {
        "high", "medium", 3, 2, "large", "medium"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 2, 4, "large", "medium"}, {
        "medium", "medium", 2, 4, "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "low", "low", 3, 4, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {
        "medium", "medium", 3, 2, "large", "high"}, {
        "high", "low", 4, 2, "small", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "high", 3, 2, "medium", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "high", 3, 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "medium", 2, 2, "large", "high"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "high", 4, 2, "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "low", 4, 2, "medium", "low"}, {
        "medium", "medium", 4, 4, "large", "high"}, {
        "medium", "medium", 3, 4, "small", "high"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 4, "medium", "low"}, {
        "very high", "medium", 4, 4, "small", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {
        "very high", "medium", 4, 2, "small", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 2, "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 4, "small", "high"}, {
        "very high", "high", 4, 4, "large", "medium"}, {
        "low", "high", 3, 2, "medium", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "low", 4, 4, "large", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "low", 4, 4, "large", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "very high", 2, 4, "small", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "very high", "low", 2, 4, "large", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 4, "large", "medium"}, {
        "very high", "high", 3, 2, "medium", "low"}, {
        "low", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 3, 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 2, 4, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 4, 2, "large", "low"}, {
        "very high", "medium", 3, 2, "small", "high"}, {
        "very high", "very high", 2, 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 2, "small", "high"}, {
        "medium", "medium", 4, 2, "small", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 4, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "medium", 3, 2, "large", "high"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "low", "low", 2, 2, "small", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 2, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 2, "small", "high"}, {
        "low", "high", 4, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "medium", "medium", 2, 2, "large", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 3, 2, "small", "low"}, {
        "high", "medium", 4, 4, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "medium", 3, 2, "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "low", 3, 4, "large", "high"}, {
        "very high", "low", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "high", "medium", 2, 4, "medium", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "very high", 2, 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 3, 4, "medium", "high"}, {
        "low", "medium", 2, 2, "large", "medium"}, {
        "medium", "low", 3, 4, "large", "high"}, {
        "medium", "high", 3, 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 3, 2, "medium", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "very high", "low", 4, 2, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 4, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "low", 2, 2, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "low", 2, 2, "small", "high"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "high", 3, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "high", "high", 3, 2, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "high", 3, 2, "small", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "medium", "very high", 3, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "low", 2, 4, "small", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "medium", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "low", "high", 2, 2, "small", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 4, "large", "low"}, {
        "medium", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {
        "low", "very high", 4, 4, "medium", "low"}, {"very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 3, 4, "large", "low"}, {
        "high", "low", 4, 4, "medium", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "medium", 3, 4, "medium", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "high", 4, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "low", 2, 4, "small", "low"}, {
        "medium", "low", 2, 4, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 2, 2, "small", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "very high", 3, 2, "large", "high"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "high", 2, 2, "medium", "low"}, {
        "high", "high", 2, 4, "medium", "low"}, {
        "high", "low", 4, 4, "medium", "high"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "low", 3, 2, "large", "medium"}, {
        "very high", "high", 3, 4, "large", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 3, 4, "large", "medium"}, {
        "medium", "low", 2, 2, "medium", "high"}, {
        "high", "medium", 2, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "low", "medium", 4, 2, "large", "high"}, {
        "very high", "high", 2, 4, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "low", "medium", 2, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "low"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "low", "high", 2, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}}, 
      "Output" -> {
       "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "good", "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "very good", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "unacceptable", "good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "very good", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "unacceptable",
         "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable"}|>, 
    "Predictions" -> {
     "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "good", "unacceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", "very good",
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "very good", "unacceptable", "good", 
      "unacceptable", "very good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "very good", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", "very good",
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", "good",
       "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable"}, "LogProbabilities" -> CompressedData["
1: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
Whs8JdQbFiVawP8B5ipgMQ==
     "], "CountMatrix" -> {{68, 1, 0, 0, 0}, {0, 8, 0, 2, 0}, {2, 1, 247, 1, 
     0}, {0, 0, 0, 16, 0}}, 
    "IndicesMatrix" -> {{{1, 7, 8, 15, 23, 29, 36, 42, 43, 44, 47, 49, 54, 60,
        64, 67, 73, 75, 79, 81, 82, 92, 101, 107, 112, 127, 135, 143, 146, 
       151, 152, 155, 163, 164, 170, 189, 190, 198, 202, 207, 213, 221, 222, 
       228, 233, 235, 243, 246, 248, 257, 259, 266, 278, 292, 305, 306, 315, 
       320, 323, 328, 331, 334, 335, 336, 337, 338, 342, 346}, {
       17}, {}, {}, {}}, {{}, {84, 86, 111, 172, 200, 214, 225, 255}, {}, {
       110, 239}, {}}, {{182, 301}, {52}, CompressedData["
1:eJwl0ulrDwAAANCftWFsMzvYbHa2zRyzzGzDtrZ2sDYJaxsJI1eO3OTIWe7I
USThgyO5yVnuJEdEOT9IORKSSHLklQ/vP3ipzdOHTGsRCAR+EEQwIbQklDa0
JYxwIogkimhiiKUDccTTiQQSSSKZFFJJI50MMsmiC9n0IIdcepFHPgUUUkRf
+lFMCaWUUU4FlVRRzQBqqKWOQQxmKPU00EgTwxnBSEYxmjE0M5ZxjGcCE5nE
ZKYwlRnMZBazmcNc5jGfBSxkEYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJW
trGdHexkF7vZw172sZ8DHOQQhznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWu
cZ0b3OQWt7nDXe5xnwc85BGPecJTnvGcF7zkFa95w1ve8Z4PfOQTn/nCV77x
PfD/709+8Zs//CUgdxDBhNCK1oTSljDCiaAdkbQnimhiiKUjccSTQCKdSSKZ
FFJJI50MMskim650ozs59CSXPHqTTx8KKKSI/hRTQilllFNBJVVUM5Aaaqlj
GPU00EgT/wB2QWZ+
       "], {227}, {}}, {{}, {}, {}, {3, 94, 122, 134, 157, 159, 165, 210, 223,
        241, 250, 262, 282, 296, 314, 339}, {}}}, 
    "ExtendedClasses" -> {"acceptable", "good", "unacceptable", "very good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006794450867052022, "SingleEvaluationTime" -> 
    0.005826, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{3.86896617348654*^9, 3.868966311492532*^9, 
  3.8689668453138514`*^9},
 CellLabel->
  "Out[432]=",ExpressionUUID->"525816a6-016d-40b3-a104-dcb961fcbf59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}},
 CellLabel->
  "In[433]:=",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],

Cell[BoxData[
 TemplateBox[{"357.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.868966455151699*^9, 3.868966522419289*^9, {3.868966572943582*^9, 
   3.868966625736467*^9}, 3.868966851157722*^9},
 CellLabel->
  "Out[433]=",ExpressionUUID->"35e9f6e1-cd90-4de0-adc7-055c46b337ed"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 3.868447512030362*^9}, {3.868964810263049*^9, 
  3.868964810772952*^9}},ExpressionUUID->"d293971e-29a8-48c6-9378-\
634a3d38a3fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"softWeights", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.868598558993527*^9, 3.8685985805202436`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"softWeights", ",", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.868598583187772*^9, 3.8685985949050713`*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.567], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.567], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.32, 0}, {0.34, 13.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{30.818646599264696`, 48.13169686048764}, {
           88.19013162887242, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 13]& ,
        TagBoxNote->"13"],
       StyleBox["13", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[13, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.34, 0}, {0.36, 99.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{47.63169686048764, 64.94474712171052}, {
           73.73638701987461, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 99]& ,
        TagBoxNote->"99"],
       StyleBox["99", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[99, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.36, 0}, {0.38, 175.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{64.44474712171052, 81.7577973829334}, {
           60.96331038866725, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 175]& ,
        TagBoxNote->"175"],
       StyleBox["175", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[175, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.38, 0}, {0.4, 343.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{81.2577973829334, 98.57084764415634}, {
           32.72808836178782, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 343]& ,
        TagBoxNote->"343"],
       StyleBox["343", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[343, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.4, 0}, {0.42, 588.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{98.07084764415634, 
           115.38389790537923`}, {-8.448277094078023, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 588]& ,
        TagBoxNote->"588"],
       StyleBox["588", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[588, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.42, 0}, {0.44, 803.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{114.88389790537923`, 
           132.19694816660217`}, {-44.58263861657255, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 803]& ,
        TagBoxNote->"803"],
       StyleBox["803", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[803, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.44, 0}, {0.46, 867.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{131.69694816660217`, 
           149.00999842782505`}, {-55.33891367443138, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 867]& ,
        TagBoxNote->"867"],
       StyleBox["867", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[867, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.46, 0}, {0.48, 1026.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{148.50999842782505`, 
           165.82304868904794`}, {-82.06153452129942, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1026]& ,
        TagBoxNote->"1026"],
       StyleBox["1026", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1026, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.48, 0}, {0.5, 1085.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{165.32304868904794`, 
           182.63609895027088`}, {-91.97747559026303, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1085]& ,
        TagBoxNote->"1085"],
       StyleBox["1085", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1085, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.5, 0}, {0.52, 1138.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{182.13609895027088`, 
           199.44914921149382`}, {-100.88501587255237`, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1138]& ,
        TagBoxNote->"1138"],
       StyleBox["1138", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1138, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.52, 0}, {0.54, 1087.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{198.94914921149382`, 
           216.2621994727167}, {-92.31360918582112, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1087]& ,
        TagBoxNote->"1087"],
       StyleBox["1087", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1087, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.54, 0}, {0.56, 1015.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{215.7621994727167, 
           233.07524973393964`}, {-80.21279974572994, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1015]& ,
        TagBoxNote->"1015"],
       StyleBox["1015", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1015, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.56, 0}, {0.58, 865.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{232.57524973393964`, 
           249.88829999516247`}, {-55.002780078873286`, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 865]& ,
        TagBoxNote->"865"],
       StyleBox["865", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[865, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.58, 0}, {0.6, 683.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{249.38829999516247`, 
           266.7013502563854}, {-24.414622883087233`, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 683]& ,
        TagBoxNote->"683"],
       StyleBox["683", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[683, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.6, 0}, {0.62, 448.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{266.2013502563854, 283.51440051760835`}, {
           15.081074594988166`, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 448]& ,
        TagBoxNote->"448"],
       StyleBox["448", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[448, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.62, 0}, {0.64, 275.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{283.01440051760835`, 300.32745077883123`}, {
           44.156630610762825`, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 275]& ,
        TagBoxNote->"275"],
       StyleBox["275", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[275, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.64, 0}, {0.66, 170.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{299.82745077883123`, 317.1405010400541}, {
           61.80364437756248, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 170]& ,
        TagBoxNote->"170"],
       StyleBox["170", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[170, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.66, 0}, {0.68, 66.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{316.6405010400541, 333.9535513012771}, {
           79.28259134658308, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 66]& ,
        TagBoxNote->"66"],
       StyleBox["66", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[66, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.68, 0}, {0.7, 6.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{333.4535513012771, 350.7666015624999}, {
           89.36659921332573, 90.875}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 6]& ,
        TagBoxNote->"6"],
       StyleBox["6", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[6, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.3124, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0.32, 0.7}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.868598587213368*^9, 3.868598595534347*^9}, 
   3.8685995277293787`*^9, 3.868600221413623*^9, 3.868602949041443*^9, 
   3.868604296907655*^9, 3.8686706335951767`*^9, 3.868672097574623*^9, 
   3.868681481840914*^9, 3.868947735099625*^9, 3.868948276385453*^9, 
   3.868959188370422*^9, 3.868961360146255*^9, 3.868963094406687*^9, 
   3.868965910434655*^9, 3.8690319681917677`*^9, 3.869034213800087*^9, 
   3.8690403778000517`*^9, 3.869042975607337*^9, 3.869043303143322*^9},
 CellLabel->
  "Out[106]=",ExpressionUUID->"ad12f5e8-debe-45d0-8f0c-76e606c46504"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 779, 16, 59, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1601, 48, 203, 3, 29, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1807, 53, 28260, 630, 313, "Output",ExpressionUUID->"7d734899-855d-4a12-bef3-2b463b1bbed9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30104, 688, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[30333, 696, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[30801, 707, 127671, 2373, 652, "Output",ExpressionUUID->"610e0a40-4cdd-411a-9668-518b1108f58f"]
}, Open  ]],
Cell[158487, 3083, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167017, 3290, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[167337, 3297, 2756, 68, 154, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[170096, 3367, 1775, 41, 195, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[171908, 3413, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[172266, 3421, 3217, 55, 189, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[175486, 3478, 1445, 27, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[176934, 3507, 1095, 25, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"],
Cell[CellGroupData[{
Cell[178054, 3536, 271, 5, 29, "Input",ExpressionUUID->"45322628-cc61-4057-9fa0-4c75c908c79b"],
Cell[178328, 3543, 414833, 8237, 68, "Output",ExpressionUUID->"2d4b7dac-d002-4ace-b728-e723cae6c8cb"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[593210, 11786, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[593568, 11794, 2018, 37, 154, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[595623, 11836, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[596082, 11845, 1755, 33, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[597862, 11882, 1066, 20, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[598931, 11904, 439070, 8129, 495, "Output",ExpressionUUID->"7ecaab93-06e5-48af-808d-63939f3a3f40"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1038050, 20039, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[1038560, 20049, 873, 15, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[CellGroupData[{
Cell[1039458, 20068, 1242, 22, 51, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[1040703, 20092, 4964, 109, 133, "Output",ExpressionUUID->"4dc91850-a90e-49c5-809c-ea0afb663199"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1045704, 20206, 1366, 33, 92, "Input",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],
Cell[1047073, 20241, 4768, 106, 133, "Output",ExpressionUUID->"983f76f7-3bca-4ace-8f77-d9f6d77d6471"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1051878, 20352, 570, 14, 32, "Input",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],
Cell[1052451, 20368, 395, 6, 44, "Output",ExpressionUUID->"c293edf8-f959-4a15-a527-5939f6ed2729"]
}, Open  ]],
Cell[1052861, 20377, 329, 7, 29, "Input",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1053227, 20389, 412, 6, 69, "Chapter",ExpressionUUID->"85881d34-aa2c-47a4-9cef-231d0c092462"],
Cell[CellGroupData[{
Cell[1053664, 20399, 584, 11, 29, "Input",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],
Cell[1054251, 20412, 102350, 1826, 68, "Output",ExpressionUUID->"6871e97c-7114-4129-908c-f7164b0eb2dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1156638, 22243, 346, 7, 29, "Input",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],
Cell[1156987, 22252, 198359, 3748, 495, "Output",ExpressionUUID->"525816a6-016d-40b3-a104-dcb961fcbf59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1355383, 26005, 368, 7, 29, "Input",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],
Cell[1355754, 26014, 325, 7, 44, "Output",ExpressionUUID->"35e9f6e1-cd90-4de0-adc7-055c46b337ed"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1356128, 26027, 541, 8, 69, "Chapter",ExpressionUUID->"d293971e-29a8-48c6-9378-634a3d38a3fe"],
Cell[1356672, 26037, 322, 8, 29, "Input",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],
Cell[CellGroupData[{
Cell[1357019, 26049, 281, 6, 29, "Input",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],
Cell[1357303, 26057, 14531, 431, 257, "Output",ExpressionUUID->"ad12f5e8-debe-45d0-8f0c-76e606c46504"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

