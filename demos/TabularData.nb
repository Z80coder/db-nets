(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1145064,      20927]
NotebookOptionsPosition[   1140234,      20837]
NotebookOutlinePosition[   1140672,      20854]
CellTagsIndexPosition[   1140629,      20851]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11076491152335466203566448944905850812422471630836426660552], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11076491152335466203566448944905850812422471630836426660552,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9, 3.8685300999400797`*^9, 3.868533465833148*^9, 
  3.868591722379105*^9, 3.868670373439299*^9, 3.868944316441147*^9, 
  3.869023715466254*^9, 3.869041339373542*^9, 3.869119740136602*^9, 
  3.869212283188902*^9, 3.869281595247718*^9, 3.869292700722034*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"88d0bb22-b0c5-4c76-adec-32124738e303"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "featureValues"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}, {3.868682465592621*^9, 3.868682467103612*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9, {
   3.8686824585003*^9, 3.86868246003918*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"32", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize", ",", 
           RowBox[{
            RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}], ",", 
           RowBox[{
            RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}, {
   3.868520025904859*^9, 3.868520026662962*^9}, {3.868520165374518*^9, 
   3.868520172724663*^9}, {3.868520227657476*^9, 3.8685202280400333`*^9}, {
   3.868520278697311*^9, 3.868520283147401*^9}, {3.8685206145298347`*^9, 
   3.8685206150078983`*^9}, {3.868537004723915*^9, 3.868537005683709*^9}, {
   3.8686716248609867`*^9, 3.86867162498657*^9}, {3.8689423409409943`*^9, 
   3.868942344276237*^9}, {3.868947806296569*^9, 3.868947806625355*^9}, 
   3.868955246204385*^9, {3.868957393208212*^9, 3.8689574013451433`*^9}, {
   3.868957440249872*^9, 3.8689574443738937`*^9}, {3.8689577953130703`*^9, 
   3.868957801168947*^9}, {3.868958026730661*^9, 3.8689580269562798`*^9}, {
   3.868960876079372*^9, 3.8689608783682137`*^9}, {3.868964831153708*^9, 
   3.868964831513155*^9}, {3.868965437993729*^9, 3.868965438129128*^9}, {
   3.868975240520047*^9, 3.868975267560664*^9}, {3.8690319933178453`*^9, 
   3.8690319942928963`*^9}, {3.869034512435259*^9, 3.869034512808312*^9}, {
   3.869034610772094*^9, 3.869034611688615*^9}, {3.86903620618801*^9, 
   3.869036206373323*^9}, {3.8690363476068773`*^9, 3.869036349769408*^9}, {
   3.869036449105991*^9, 3.869036450054133*^9}, {3.8691058271725616`*^9, 
   3.86910585030811*^9}, {3.869106008681794*^9, 3.86910601769174*^9}, {
   3.869106118542383*^9, 3.869106126708026*^9}, {3.869106300198392*^9, 
   3.869106310243504*^9}, {3.869106550008959*^9, 3.8691065502511663`*^9}, {
   3.8691066023696003`*^9, 3.8691066409269953`*^9}, {3.869106728726873*^9, 
   3.869106732707152*^9}, {3.869106781369624*^9, 3.869106781690955*^9}, {
   3.869107221769636*^9, 3.869107224150084*^9}, {3.8691076647349586`*^9, 
   3.8691076791551533`*^9}, 3.869108111159465*^9, {3.869111253542173*^9, 
   3.869111266704829*^9}, 3.8691114531763678`*^9, {3.8691115014501963`*^9, 
   3.8691115024350452`*^9}, {3.8691115775921707`*^9, 
   3.8691115787758913`*^9}, {3.8691116899369087`*^9, 3.869111690538197*^9}, {
   3.8691117691600723`*^9, 3.8691117876982183`*^9}, {3.8691121802378807`*^9, 
   3.8691121836826277`*^9}, 3.869112387993538*^9, {3.8691125616997557`*^9, 
   3.8691125907168922`*^9}, {3.86911270806533*^9, 3.869112723740849*^9}, {
   3.869112956528831*^9, 3.869112966025186*^9}, {3.869113141057391*^9, 
   3.869113142033929*^9}, 3.869115743191606*^9, {3.869117545424532*^9, 
   3.869117552560911*^9}, 3.8691197572896433`*^9, {3.869121698753475*^9, 
   3.8691217122755747`*^9}, 3.86919713699297*^9, {3.869203795640698*^9, 
   3.8692038057553377`*^9}, {3.8692077554756203`*^9, 3.869207760735105*^9}, {
   3.869208079942*^9, 3.869208085087775*^9}, {3.8692088553125353`*^9, 
   3.86920886120012*^9}, {3.869209158678213*^9, 3.869209159292757*^9}, {
   3.8692095136217213`*^9, 3.869209514533951*^9}, {3.869211601191217*^9, 
   3.869211602739736*^9}, {3.8692123062616177`*^9, 3.8692123119646463`*^9}, {
   3.869212438589468*^9, 3.8692124505522203`*^9}, {3.869212552950715*^9, 
   3.8692125532671328`*^9}, {3.8692126127431927`*^9, 3.869212613253107*^9}, {
   3.8692126791033287`*^9, 3.86921268464844*^9}, {3.86921276395127*^9, 
   3.8692127642612867`*^9}, {3.869212861743297*^9, 3.8692128621976557`*^9}, {
   3.869212912650663*^9, 3.8692129131419163`*^9}, {3.869213418442769*^9, 
   3.869213422358157*^9}, {3.86921548420509*^9, 3.869215497105235*^9}, {
   3.869215546879163*^9, 3.8692155519349546`*^9}, {3.8692161044615107`*^9, 
   3.869216107132107*^9}, {3.8692167279588547`*^9, 3.8692167436075907`*^9}, {
   3.869217032457283*^9, 3.8692170459859877`*^9}, {3.869217373494234*^9, 
   3.8692173782740717`*^9}, {3.869217516946954*^9, 3.869217517213879*^9}, {
   3.869217724899954*^9, 3.86921773656007*^9}, {3.86921777789679*^9, 
   3.8692177779781427`*^9}, {3.869217825227951*^9, 3.869217842059514*^9}, {
   3.869218068966909*^9, 3.869218073431982*^9}, {3.8692196032022543`*^9, 
   3.869219604075777*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}, {
   3.8685364797630873`*^9, 3.868536496883217*^9}, {3.868600076169417*^9, 
   3.868600076637474*^9}, {3.868600134889481*^9, 3.868600135284954*^9}, {
   3.868601255470386*^9, 3.8686012558943872`*^9}, {3.868602902814464*^9, 
   3.868602903232891*^9}, {3.868943377521962*^9, 3.868943381357031*^9}, {
   3.8689434141572866`*^9, 3.868943425164989*^9}, {3.868943586951866*^9, 
   3.8689436089616327`*^9}, {3.868944023717293*^9, 3.8689440271979637`*^9}, {
   3.868944083020088*^9, 3.868944086825481*^9}, {3.868947817163151*^9, 
   3.8689478172894077`*^9}, {3.868949946458611*^9, 3.868949960076432*^9}, {
   3.868977243682851*^9, 3.868977248732733*^9}, {3.868977291844462*^9, 
   3.8689773017254*^9}, {3.868977346389843*^9, 3.868977377673813*^9}, {
   3.868977408389917*^9, 3.868977427933148*^9}, {3.868977539952648*^9, 
   3.868977554029306*^9}, {3.868977819969697*^9, 3.8689778435338573`*^9}, {
   3.869023762591353*^9, 3.8690237633179893`*^9}, {3.869023837158021*^9, 
   3.869023876685935*^9}, {3.869110793308095*^9, 3.86911082542246*^9}, {
   3.869110910640922*^9, 3.869110910806432*^9}, {3.86912172241117*^9, 
   3.8691217224768143`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{"\"\<TrainedNet\>\"", "->", 
         RowBox[{"NetDelete", "[", 
          RowBox[{
           RowBox[{"NetFlatten", "[", "#", "]"}], ",", "\"\<Loss/Error\>\""}],
           "]"}]}], "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      RowBox[{"HardenNet", "[", 
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}]}], "}"}]}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}, {3.86912103176339*^9, 3.869121111451393*^9}, 
   3.8691211481142063`*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", 
     RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}, {
   3.868964207787449*^9, 3.868964270803673*^9}, {3.869042816860148*^9, 
   3.869042853385454*^9}, {3.8691211223288383`*^9, 3.869121124951189*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "357ff8c2-44da-416c-9c79-09d0ad0fdb13"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"92.8", "1.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    92.7745664739884432493`3., 1.3939168700000086343`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"69.4", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.3641618497109817554`3., 2.4818350129436712592`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.8296386539133575599`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0153954138574219357`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.7988478261985136886`3.", "\", \"", 
                    "0.8604294816282014313`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.7988478261985136886`3., ", ", 0.8604294816282014313`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.1867650297176437491`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0185557053588212839`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.1496536190000011812`3.", "\", \"", 
                    "0.2238764404352863169`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.1496536190000011812`3., ", ", 0.2238764404352863169`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.92`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.18`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2BNLx/I+9S948tY+u+LLnbzLr+3Zl6w9xJ/4
1L7oE/PXyNa39mqbvGLlc17ZC+wyPVC26yFOcw6wbzz60vWdfUyX1qTDzm/t
nZifWMjLv7RnOOx8vP7ha/uVhYIulrmP7SWur5U+KLQLt3oc5uNyD6nuhNEP
q0TWuT+8ZQ8LMVzuUXzBEPdWDGj+iWrzlG0v7L1DrUvv+d3GaS4A1zyELA==

                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["227", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "227", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9458333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9721627408993576`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{227, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9458333333333333}], 
                    Row[{"FScore = ", 0.9721627408993576}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.125`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.004166666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.125}], 
                    Row[{"Row fraction = ", 0.004166666666666667}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.75`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.5`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6000000000000001`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.75}], 
                    Row[{"Recall = ", 0.5}], 
                    Row[{"FScore = ", 0.6000000000000001}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.125`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.011904761904761904`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.125}], 
                    Row[{"Row fraction = ", 0.011904761904761904`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.11538461538461539`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.05`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.11538461538461539`}], 
                    Row[{"Row fraction = ", 0.05}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.057692307692307696`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.5`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.057692307692307696`}], 
                    Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["82", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7884615384615384`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9761904761904762`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8723404255319148`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{82, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7884615384615384}], 
                    Row[{"Recall = ", 0.9761904761904762}], 
                    Row[{"FScore = ", 0.8723404255319148}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.038461538461538464`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.4`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", "very good", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.038461538461538464`}], 
                    Row[{"Row fraction = ", 0.4}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.011904761904761904`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.011904761904761904`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.6`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.7058823529411764`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8571428571428571}], 
                    Row[{"Recall = ", 0.6}], 
                    Row[{"FScore = ", 0.7058823529411764}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "240", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9458333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{240, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9458333333333333}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.5`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.5}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "84", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9761904761904762`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{84, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9761904761904762}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.6`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.6}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "227", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{227, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "8", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.75`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{8, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.75}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "104", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7884615384615384`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{104, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.7884615384615384}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "7", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{7, " example", "s", " classified as ", "very good"}], 
                    Row[{"Precision = ", 0.8571428571428571}]}], 
                    "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["240", TraditionalForm]}, {2.5, 
                    FormBox["12", TraditionalForm]}, {1.5, 
                    FormBox["84", TraditionalForm]}, {0.5, 
                    FormBox["10", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["227", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["8", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["104", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["7", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "good" -> 0.25, "acceptable" -> 0.25, 
             "very good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "very high", "low", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "very high", "high", "low"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}], 3, 4, 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}], 2, 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "large", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "good", "acceptable", "very good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
Br4qHYcPXo/B3MQNVp4PB+/iNPwfJMhwuw==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {2688}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {2688}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/4" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJwVi2tIk2EYhl8ltaZMHc7FpIOlhgmKGuTInpcObAWFuYS0MLRSlwnZmomV
BypNM1PMzFaIRZQSdmCz8nnCA6yay06ykInin+qHJTUqSfH73taP++K6ftzR
h44bC/0ZYyeX+mDML99iNudX7A38HwX5JakpJX4+rfFtX149+WMifXZFUeCa
AFIotTSmZnx/aS6p33uxGwxUPROKKc671ORZj21SNCWf0lCy14l7Onfgj5ta
ynwYRXVn3FhaL6D8kwctxniq3p5KPZVVvOXlHMQON9A1VQBlF0XTkc4qjNj6
AMOC2jePh1ix3FJGAZFayvggIK5yERISVbTkhYAru3rButCB/WFq0h/IohFb
DBU/N+NXJeMjJgM3Th6GuKlFONjagEOyE7tCmzHD95seUNPKEgF5NhkGdRE0
E2zHd4U6+tksg7fIj/5MObD2l4Ah1xxc3R1Mb1p7sGvgEd7LrsFG63napJfh
8jMBHzsEXFjOeItmG9luBfEKpw4KtIzr62QIWWcmx9ocsswbyDHqwtODjCck
jYNZEtCdHc75KsZNMUY4OilApNVilqmArHYVZX5rQvH3bX/jMsZn9QKk2lhy
tzM0rK7hY5FtONzgwLrvMlx/upGSbgt4XeyGixrGB+7vxMf1x9AOClIMfcE+
5QlMD1eSZSKH+m48QdUGf5LP5VKZ3YbaakaaUQkW3BLM3ulFnt5N8a/mgZ1d
QWPSNNpNEnhUHvw9cYki0krpH/qxD7w=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {128}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJwVh2tIkwEYRveVbHNFK8HJiqKkoag4S5gZGhahE7Lhao1uq8+1DUOQZqtm
ka4tBS+5FbpWTaxcSAZdrHTvsy5kSihiEcSCrZnJMnOOUsIQsfXjHM7ZVFap
1C/jcDhV/JiU7NmdRiNr3sf9Pzq2IntrBRPL2hgCVR1GbyegVhTEZMIEacIa
lFdrMTzoJflDOUrtW9DRZ0VBkghzeWmwsS4MpGTAtDwDhddrUafPhTb+DOxz
9xCNtqJYZocNf6lq3EGOZi894h9FlVYJf9ta1L9eBUYeRHeWi9yCa1A5TejI
5aOgsB579l+F5JQeulcS8FPvoMSRCW2zD9IaISQRG8TTjO+07AblV6/DfCgN
P8YtMH7pRVmTmUSNjaTL7CTTcQ/cu7NgeNGG0OwgDvsipEiJw9BoNoYCPtRz
y1FSFgeXuBsq6RRVfhJAnu8h4kkxdf8A8gZ2ofeKBueFCmq9xdKGNTy0/Lbh
wqIbe72XIJM6sDT2zrt5YzGYGhdGiqZJu1oI8aIR831BPHjaA/W2x/Q+uZNy
3vJ9T9ZzfW8+dBH3a4QSZc/RVNiFImsxtRjU6E/lY8ZvARufDoM0gHBiHRRO
M5ixbDQsFOBjjwWTIx4wln6amVXAGvlDgYkGLHBe0lzSSth4NuQk3yQmfTs+
/zqGbywXO1a0kzh0mb7fTcJFe5hKl9Q4odRCHUyF/9wRKPJr4Ew+hOgzEQ66
h3Gy6yf9A3wqHV4=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {128}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{2688}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{2688}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/12" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/13" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/14" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/15" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{128, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/16" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/17" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/18" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_1cbd98b6_c257_4b32_813e_10cb6f032e9a", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
5s+OBehCIXMstDRrwatBskuocTEJgF9KfNbtFwsvznJdyAWwqQDmYwBgtWOW
/CXopgLYXjKALZT6rKNdA7ASXwA7Y3Uu+FHEeADzHZtC/rwWTULfj6R+aYU+
4YeWqIYckqUU1qKCTJHoqCv7qIh0CDsqXG6IPulnSKc/NaH0cg2pHuHMFUfx
fMgVpX8uLPzyG5PaTvMMZ6657hPBbeBP/sEN5VlF6sutm9W3hMZNogbwH/lw
SI9NmJdYWAN//sTF6IMxGsi9asjvzahb+Y8iuOp0TCys0Oc08PmBVctZXM5B
kir7q+DPD8oM4n+lrX2OnZLJFLDeyYqOALxEarkzmMUaxzW6iG5arsEzUBNN
/vYfVlWRletZKo+mNS7JP/NXF066ITebWiZcxDUNFBIfYlqFZ4iRmDpDLHJJ
p2czxxqo7jf1aW8RbpCU61tCrpvucV8rBn0iiVhC1OLfexJCfr16rNSsXGDr
rUoTJ8y6RIqEBLkQ3U2zMDdqQ7j54TnsJA1ueayDxVYlFC0Vbq/IpuX6Dg18
n4R0OvqgSyJGfNBFaMP80rKKpEV6ynQ1Oehi5uPDreCH/NJNNzQsayBNL9Pa
b5vkQ03NKD7E4X4F+Lrr7mOVkrukMySQ1D+hk0jpBiinnamZt4NVVWzlOlk9
76+usEgSRtOKTFUEn9cNEi4Hgj2AYJZ5pdZVRPA4dPePNVYj3/nUXP4j/nK1
1OSZtGyq4R/oZvtYYGkVvhJwmaWZs5fVC3MGqeesQAsz3w5ai/Av0Lk10eio
kzjMGsLGrtM9Rlle4M0XXW4twI8w7ha3Dxuwb8SsEm6unhse7Y63rIlHZ+r7
Ewweq1KE6o/h1eMB5ly1Y7gd9Ipt6klo9ZqWxYKMb9HldqV4vC5+Oni3X3WB
2K8Yzwp3N/bsUdb06viMPBATr2zt7/YizpzsPa28HuYFM9qFVq+JQwj0hblC
dd7l6vN4NS48DuFzqHoxPvUnMb2SOIpQ0aN4bHJqZEK3qnprFYs4dXx7WB6H
458bugt1P9lqF4u67wnbjVfla/CqImGsirqK/g9+de6jzt22T2shspT+nKGa
IUcHdHD7dOv8NGVs2A6E8KGaY9FoENuwELzaugXHMCdsDcK/ovrLZi/i9MXg
KWVeJ+Rur8ThZi6uxImensGmdY+Xk5Y39t/6iL8qMKmBGO3dfwOWE44TITjH
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
6kT4jf8DMC7Zyg==
                    "]]|>, "orcInstance" -> 87489936, "orcModuleId" -> 
                    87613632, "targetMachineId" -> 65774496|>, 
                    139724095887168, 139724095887024, 139724095887104, 
                    139724095881216, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_993c6a44_e3eb_47cc_83b9_2e7f3ff0501d", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
n6JGYeHfAWhgwC8=
                    "]]|>, "orcInstance" -> 86568976, "orcModuleId" -> 
                    66254976, "targetMachineId" -> 86898832|>, 
                    139724095873568, 139724095873168, 139724095873248, 
                    139724095873024, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7ad2635d985bfb01", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/19" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/20" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_1cbd98b6_c257_4b32_813e_10cb6f032e9a", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
5s+OBehCIXMstDRrwatBskuocTEJgF9KfNbtFwsvznJdyAWwqQDmYwBgtWOW
/CXopgLYXjKALZT6rKNdA7ASXwA7Y3Uu+FHEeADzHZtC/rwWTULfj6R+aYU+
4YeWqIYckqUU1qKCTJHoqCv7qIh0CDsqXG6IPulnSKc/NaH0cg2pHuHMFUfx
fMgVpX8uLPzyG5PaTvMMZ6657hPBbeBP/sEN5VlF6sutm9W3hMZNogbwH/lw
SI9NmJdYWAN//sTF6IMxGsi9asjvzahb+Y8iuOp0TCys0Oc08PmBVctZXM5B
kir7q+DPD8oM4n+lrX2OnZLJFLDeyYqOALxEarkzmMUaxzW6iG5arsEzUBNN
/vYfVlWRletZKo+mNS7JP/NXF066ITebWiZcxDUNFBIfYlqFZ4iRmDpDLHJJ
p2czxxqo7jf1aW8RbpCU61tCrpvucV8rBn0iiVhC1OLfexJCfr16rNSsXGDr
rUoTJ8y6RIqEBLkQ3U2zMDdqQ7j54TnsJA1ueayDxVYlFC0Vbq/IpuX6Dg18
n4R0OvqgSyJGfNBFaMP80rKKpEV6ynQ1Oehi5uPDreCH/NJNNzQsayBNL9Pa
b5vkQ03NKD7E4X4F+Lrr7mOVkrukMySQ1D+hk0jpBiinnamZt4NVVWzlOlk9
76+usEgSRtOKTFUEn9cNEi4Hgj2AYJZ5pdZVRPA4dPePNVYj3/nUXP4j/nK1
1OSZtGyq4R/oZvtYYGkVvhJwmaWZs5fVC3MGqeesQAsz3w5ai/Av0Lk10eio
kzjMGsLGrtM9Rlle4M0XXW4twI8w7ha3Dxuwb8SsEm6unhse7Y63rIlHZ+r7
Ewweq1KE6o/h1eMB5ly1Y7gd9Ipt6klo9ZqWxYKMb9HldqV4vC5+Oni3X3WB
2K8Yzwp3N/bsUdb06viMPBATr2zt7/YizpzsPa28HuYFM9qFVq+JQwj0hblC
dd7l6vN4NS48DuFzqHoxPvUnMb2SOIpQ0aN4bHJqZEK3qnprFYs4dXx7WB6H
458bugt1P9lqF4u67wnbjVfla/CqImGsirqK/g9+de6jzt22T2shspT+nKGa
IUcHdHD7dOv8NGVs2A6E8KGaY9FoENuwELzaugXHMCdsDcK/ovrLZi/i9MXg
KWVeJ+Rur8ThZi6uxImensGmdY+Xk5Y39t/6iL8qMKmBGO3dfwOWE44TITjH
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
6kT4jf8DMC7Zyg==
                    "]]|>, "orcInstance" -> 87489936, "orcModuleId" -> 
                    87613632, "targetMachineId" -> 65774496|>, 
                    139724095887168, 139724095887024, 139724095887104, 
                    139724095881216, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_993c6a44_e3eb_47cc_83b9_2e7f3ff0501d", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
n6JGYeHfAWhgwC8=
                    "]]|>, "orcInstance" -> 86568976, "orcModuleId" -> 
                    66254976, "targetMachineId" -> 86898832|>, 
                    139724095873568, 139724095873168, 139724095873248, 
                    139724095873024, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7ad2635d985bfb01", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/21" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 32}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 241464, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 12, 12, 33, 58.286054`8.51813962766411}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {
          "medium", "medium", 4, 4, "small", "medium"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "medium", 2, 4, "small", "high"}, {
          "medium", "high", 3, 4, "large", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "very high", "medium", 3, 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "high", 4, 4, "large", "high"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 4, 4, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "high", "low", 3, 4, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 2, 2, "large", "low"}, {
          "low", "medium", 4, 2, "small", "medium"}, {
          "high", "low", 2, 4, "medium", "medium"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 4, 2, "small", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 2, 2, "medium", "low"}, {
          "low", "medium", 2, 2, "small", "low"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 4, 2, "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "high", 4, 2, "medium", "high"}, {
          "low", "low", 4, 4, "large", "medium"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "medium", "low", 3, 4, "small", "low"}, {
          "high", "medium", 2, 2, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 4, "large", "medium"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "medium", 2, 4, "medium", "low"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 4, "large", "medium"}, {
          "medium", "medium", 4, 4, "medium", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "high", 3, 2, "small", "low"}, {
          "very high", "medium", 4, 2, "large", "low"}, {
          "high", "low", 4, 4, "large", "medium"}, {
          "high", "high", 2, 4, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "low", 2, 4, "large", "medium"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "high", 3, 2, "small", "low"}, {
          "high", "low", 4, 4, "large", "high"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "medium", "low"}, {
          "high", "low", 3, 4, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "medium", 3, 2, "large", "medium"}, {
          "very high", "very high", 4, 2, "small", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "low", "very high", 4, 2, "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "low", 4, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "medium", "medium"}, {
          "medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "very high", 3, 4, "medium", "low"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "medium", 2, 4, "small", "high"}, {
          "low", "high", 3, 2, "medium", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "low", 3, 4, "small", "high"}, {
          "low", "very high", 4, 2, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "low", 3, 4, "medium", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "low", 2, 2, "small", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "medium", "high", 3, 2, "large", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "medium", 4, 2, "medium", "high"}, {
          "medium", "medium", 2, 4, "medium", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "low", 2, 4, "small", "low"}, {
          "low", "very high", 4, 4, "large", "high"}, {
          "high", "very high", 4, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "low", 4, 4, "medium", "low"}, {
          "very high", "low", 2, 2, "large", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "medium", 2, 4, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "medium", "medium", 4, 4, "large", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "very high", "very high", 2, 2, "small", "low"}, {
          "high", "low", 3, 2, "small", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "very high", 2, 4, "large", "low"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "low", 3, 2, "large", "high"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "medium", "very high", 4, 4, "large", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "very high", 2, 4, "small", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "low", 2, 4, "large", "high"}, {
          "very high", "medium", 4, 4, "large", "high"}, {
          "high", "very high", 2, 4, "large", "high"}, {
          "high", "medium", 2, 4, "small", "high"}, {
          "medium", "medium", 2, 2, "medium", "low"}, {
          "high", "low", 2, 4, "medium", "low"}, {
          "high", "very high", 3, 4, "large", "medium"}, {
          "low", "low", 2, 4, "medium", "medium"}, {
          "low", "medium", 4, 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 4, 4, "medium", "low"}, {
          "low", "medium", 2, 2, "medium", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "medium", "medium", 3, 2, "medium", "high"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "medium", 3, 4, "medium", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "low", 3, 4, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "low"}, {"very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 3, 2, "large", "high"}, {
          "high", "high", 3, 2, "large", "medium"}, {
          "very high", "low", 3, 4, "small", "low"}, {
          "medium", "very high", 2, 2, "medium", "medium"}, {
          "medium", "low", 3, 2, "large", "medium"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 3, 4, "medium", "medium"}, {
          "very high", "very high", 3, 2, "small", "high"}, {
          "high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "high", 4, 4, "large", "low"}, {"medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "very high", 3, 2, "medium", "medium"}, {
          "medium", "low", 4, 4, "small", "medium"}, {
          "very high", "low", 4, 2, "medium", "low"}, {
          "high", "very high", 3, 4, "large", "low"}, {
          "very high", "high", 2, 2, "small", "high"}, {"very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 3, 2, "small", "medium"}, {
          "high", "medium", 3, 2, "large", "high"}, {
          "medium", "low", 4, 4, "small", "low"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "high", 4, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "large", "low"}, {
          "high", "medium", 3, 2, "medium", "high"}, {
          "low", "medium", 4, 2, "large", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "high", 4, 2, "small", "medium"}, {
          "medium", "low", 4, 2, "large", "high"}, {
          "high", "high", 2, 2, "medium", "medium"}, {
          "very high", "very high", 4, 2, "large", "high"}, {
          "high", "medium", 2, 2, "small", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "medium", 2, 4, "small", "low"}, {
          "medium", "high", 3, 2, "large", "medium"}, {
          "very high", "low", 3, 2, "medium", "high"}, {
          "high", "high", 3, 2, "large", "low"}, {
          "high", "high", 2, 2, "medium", "low"}, {"very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "low", 2, 4, "medium", "low"}, {
          "low", "low", 3, 4, "large", "low"}, {"low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "high", 4, 2, "large", "medium"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "low", 2, 4, "small", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 2, 4, "large", "high"}, {
          "high", "high", 2, 2, "small", "low"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "medium", 4, 2, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "high"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "high", 4, 4, "large", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "very high", "very high", 2, 4, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "very high", 2, 2, "large", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "high", 4, 2, "large", "low"}, {
          "medium", "low", 4, 4, "large", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 2, 4, "medium", "low"}, {
          "very high", "high", 2, 2, "medium", "low"}, {
          "medium", "low", 2, 2, "medium", "medium"}, {"high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 3, 2, "large", "medium"}, {
          "high", "low", 4, 2, "medium", "high"}, {
          "medium", "high", 3, 4, "medium", "low"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "medium", 4, 4, "small", "high"}, {
          "medium", "low", 3, 4, "medium", "high"}, {
          "low", "very high", 2, 4, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "low", "medium", 3, 2, "medium", "low"}, {"medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 2, 4, "medium", "high"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "low", 4, 4, "medium", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 3, 4, "large", "medium"}, {
          "low", "medium", 3, 4, "large", "high"}, {
          "very high", "very high", 4, 4, "small", "low"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "low", 2, 4, "large", "medium"}, {
          "low", "high", 4, 2, "large", "medium"}, {
          "low", "high", 3, 4, "small", "medium"}, {
          "very high", "medium", 3, 2, "small", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "very high", "high", 4, 4, "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 3, 4, "medium", "medium"}, {
          "low", "high", 2, 4, "medium", "high"}, {"medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 3, 2, "large", "high"}, {
          "medium", "very high", 3, 2, "medium", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "high", 3, 4, "small", "medium"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "medium", 2, 4, "small", "medium"}, {
          "medium", "very high", 4, 4, "small", "low"}, {
          "low", "very high", 2, 2, "medium", "low"}, {
          "very high", "high", 3, 4, "medium", "medium"}, {
          "low", "medium", 4, 4, "medium", "medium"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "high", 3, 2, "large", "low"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 3, 2, "medium", "low"}, {
          "medium", "very high", 3, 2, "large", "medium"}, {
          "high", "high", 3, 2, "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "low", 2, 4, "small", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 2, 4, "medium", "low"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "low", 3, 2, "large", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "medium", 3, 4, "large", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "high", "low", 2, 2, "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 2, 4, "large", "low"}, {"low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "low", 4, 4, "medium", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "low", 3, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "high"}, {
          "very high", "medium", 3, 4, "small", "low"}, {
          "medium", "very high", 2, 2, "small", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "medium", 3, 4, "large", "medium"}, {
          "low", "low", 2, 2, "medium", "high"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 4, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "small", "medium"}}, 
        "Output" -> {
         "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", "good", 
          "very good", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "good", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "very good", "good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "good", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "acceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "very good", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "very good", "good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable"}|>, 
      "Predictions" -> {
       "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "very good", "good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "very good", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "very good", "good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}, "LogProbabilities" -> CompressedData["
1:eJyFWnk0ld33v9cVl8TFxTVfkqSSDKFCIWMilcrQhESDEgqppCKZhQZJaaAk
Qql0z0ElEoqEyJBIGswK5Xeed73HWr/7ru96/trr89zhnLPPPp/92fs8Sjt8
HDx4KBSKE5VC4UVWeP/6nt5qOsTWuC5t+fLWR0AsK2LIz5MJ52k6fXbrtgOL
Pa+cP0ZRhS8o97SnKHLQOuUowirwIU22bKm9KNz3a/HzpfbS0Mf9rE827R14
9j5Uum/FCDjiBeceCOwGkyG+czRqxCDGmgGRoimes6FuyyV+DcEwsF5wl8Qp
ASaM75khfkqABYsdxiNLeZWhyy4VPeXKEVAru1xO9LMg1L4n3xGh9h6M1YVE
RviKQtao0JyPNZeASoF3a40sE8Y+cG2pkWXAkqZBZFlQbuPPw7tdBeC1jJbA
3a5UeGtYr+xhw3NQea/vSWGOHLTd0tc/+BqCO3ovE3xOs+B9f/35bUJUiPGQ
fkhFr343aJXoMZAvl5nG6+9UpMW4zYZ962pyKFkegC90f5wTVQXGPjZULORh
QUeDvQlOVGU4VHHfIMB2BDg7SkW5rhOFiRGuSk2678BXuyexrusk4MrQNcPX
n82CF/VWHXLolIRWl9xuJor1AGzxevD68Hrx+rD/sL+4/Uj2ebF2tbGwIBW2
2GrI8p9iwcEGB4uudAiU1HyV+E/JwYnKzrKEcDrMEC3L7VJiw9bQz8ObBnNB
AyXXrcKUAc9dnZW3UzcOWI2EuusymHCjZsl2XQYLYsxpMubVt2aACz8iRXkp
i6GmyQxlOoqb4w8Xq9JRPJ3kfzs/uqWDo+JuoEClqMPrRjR5KkUNxsg+iaFQ
NOHx4B5p5d8O4KBwYkUKRRkum/M6fhFVDmKcNB6blWgkDHYtyY7hR/8bFd0e
zY9+j23HXYG0Xq0kENBw85OWBAuqZJ7o1pJgwJYKD/8LgsrQWdh733tnUXjk
fmGBq88IqB6cGAt4+g7g59Xq7gPHg+rBIs5e4UwLCcgqkFiZrjACOr99Esy0
kIbxf/Oupt3nAdkLRbJ50XqyF+7P4UXrwDjIzGNbj4MfiB449JA5gwWxpW06
4BLJowrnnpj6fCp5BKzkVeQ3fSUI7yooPpVyagATq5bC2vtsOH9cf2ytrhD4
MJAtxI/+1+7pJUFinTaJe4SI9e2aCDrV0Pack9835UihaECR3Epk1aHZxmh1
CvI3oy7Ixb07E7AOje3oZqnA+p8t0Rfc6FB3BgdhdRjwbfl4XPEe0Ge0rfIV
ilfvAd+4FBoLzu5iJaTQ5KBR/zcegfJ8TvvRs+LE//2dbaNGjLNCa4cqhbIA
Ltmd2Bi0tZ0zO8SFl9g3P0mbGVT0HNsNlx4pyPOlg8UOm5YJsZkQW9+mlXpC
bAbkuau2bslGbw7f3pVTU1PasLOgjUKME+uMwoGiDRlwqvpXqRdIGlunkUpl
QyX3Eld9ND+Mxdi3TbY0isEMu6y5g6XdAFv8PKUxduk5qSiQony4ZwY/Gy4V
mv16pjBz2pa0/qoTs5OH383brG2Wj4CaTx0rFg7UA4NA+1oxO1Fo9kPb5nE+
Ex6Fdsl+ngIw925wkp8nFVq4vr9sdegF6KBss54vHAJSqaueXaWpwHf+kuGm
/ExYZ8hAmD19XrnPMT6/O11W9VtYHgPLhn3F3vLLQb/I7cy36PcSzRx6L00V
6lw6kSb9jD5tl1c8D9IKKwJrkyWqhHbIwb05jFuK26gw8IVmluI2Aahnu//6
OPUFaC7OeCuSy4K1Wx+UGMiWgEmzbxVNEXLwgppDar4oFWYfE6lsimDCG9dX
tvOa0eAPrSuPBSJGAc/WV12q7GZgc9B5P881edjmq7zh9/dlIH671Qc9FHf0
yNwWPQobYtwqckRYum0rmCpvH/uLzuOSsakff9D5xLa0SirpbgQdtmksK3c0
Y8AKMfvCPIk8UB5kiLAcbDJ4aLruPBNa6v2JvKmJ1mEoMrBLsAzMK3BGzxnw
mUaq/d3iG+CYb93mwPkMiO1S0SznwPlM2PJhNPznhzTOArPTfETcTC5fKkLE
Z5rdKB/BH3baCcuOeH3lhCq/yqSi5z4CXjeJOMW2Ojy7Yv4cxrT9kGo763PS
NfAx6XZXkhgbGsXQjOXlqLDKKzBNOIYJt1g2NNeVlACM8+Hl9LfGF0H/UZF3
xjJy0E7rQ62xDAOyz/LUGcsw4XixfvFqAx6ob19WuNpAEE6G7nzmUfkG4Oc3
l7WPmVt7APG4nTfWo/NXWW5jkoXyx1CjgMNtNP8zmm8zFOZRYZ2diX3sOQbc
+Kekrze+FGQsPGAbe44FX+49XJo6WxVsq7AUnYm+P6NIXFkS7UPjRBayKD/n
DQTzr8nk7BXLmEn44/QFP2nCP9hy+5Pb3+pnNr/qVTMGykdq1hkhPuPzFXUw
QvufP3JwrREa50ZL0aGVPALovLizacj/IS+PGvOhceW9aSv4EA/xwmTl5V10
qP1jr5CCLwNejFgWFhZeDPBzLYkiYZGCcvD3Nc/3FcECcLeNvV/6UwaMTy7v
WxFMhasUtqs9/q0PQtj5A4vR//pUOQ4tRuNbdDcNLkbz/1Bubd0VeB84PCic
U5NIhy0ZD+N7rBgwYUkeskxYoJ2yp63PFngkD907hPgo+8OerT+RfsGYLL8E
Se2Ji/1VwOkz+cMk/NevmfMP//X6MeYR/HfQudJfUL8QvA47oNq+ngGxjYyS
cYRZdKjp0yujeR7lFS3AL7RTHi76fs0RbmsAh89WzmRVCSK9IPQskscAbFQ/
w6uF/s/hvA+fFlrfvi+qyKrAwVe+hix5gWk7riQgG/amBGCMdRHWQ1gfYd3U
/brbafzrDY7zMcmZxPko8R2SIOaPbXatzf7mI2uAeCzfcCDar1ti7T1DyD+W
AeMIq0Kq8v8fj9sazgs56yNSD14HbA8JTleGzZDS+IE2Mo3x/nDvC94vzKuY
ZzGvYp6952xYuTgSgtHPXyPWnmTBpf5mShl0Kmx2136pZoLOC+Wt25zvQ5yD
nZcNqWh9Rgl9wTxo3lv8FUJ40HqYckFtEdJ7QEauZkoJ0mf993+ph6H8YeX2
XTMM5bfbxXJV5zJOAsmP/c/XCsrB8a1TL9YKIt1yqLBsrSALnvbhVRb7Igb/
XBUbjlvRA7AtTvRbqVI7C+bYnDwWf/oDZ5udzD4iPs56l7USfuXTbG2hIH45
WR0VJvZzFgxYViJsXdwDsMXPyeKXjP8XOqqnB6p5gsYpsXBflA8vxCYJfEb8
8XfDiwhfqir8fbTcfqHTXXDXutS5YCkLHr/jyNnlT4fHi5ucCpYyp+MTxyOO
Txyv9d/W1KQWDHIuxLls5CH4okQS2QVwkYbdJsLP7ON2r3uyzgLP/Ligr3zK
8FKf7Gj9LOa0ffwv33PnAcz/tv/ud96/+32MKx7+sPQ1MjtOgN5RD68iXhU4
GV34dj/SrVFj9+r2Ix0rmrk858LhF5zGr6YLCP9frYt2IvSPglioE7EP96uf
mjh7JQFw3jGnQJANQzI+OnohHagalLHBC+nAT4/7S1XNaTBnT06QbdQoiDnz
9aPu4mbg+dvcVTxDGuZEHx4b9T4H9h9aOebNlIPzBm4OezMZEGMyfTN8U35h
AqMeFC2ixJ5MZ0ON1Ft+KrwjQJRPEWE1yPHqjo7+Yw9uzff5Ho745nmDynsR
xD/tq8IRVic9H5qrd/CfCPbkuMWq/6OfjN+//Ec/VXvfQ1h3WhdgPYD1AdYN
Iw6/i+at3gk65u155o7yT0KjQlgFih+Msb7BegbrG6x3GgpjhcNd64HhLSH/
xlUS8Gb4w8LtUiPgo6atwbdrKP/E86VePt8HsF3v4lm6puoPyHXemyt+UBH+
ol1+qfZwFNy9RFlUeVcUjpVSzDJamgGf57Nt55xppPGNzw8+L/j84POE+ZCb
JzE/1tzmHeB9c5UzwKtHJ+Knwu2JGBE3GN9bUfK8eMiec99VD/l1CTRU5EO6
VAtiLOGy/VH0sD0QrNK/SezfQ5dXVsT+WQymvjVFv19caHhu7LsqqLa/+43I
x1V7fvVJIl4ouKf3jcjTrGWGygn7WjkprR7+xL5tfU7rI3jjyN2oPiK/YJ7h
5h/MS2T50zImdk6ojAEoqjiio4XiqVioX4fIL27UCm0iv3DrLW49NvuK3twQ
d09wk59pEYD4U43PPvIb8r+w0EyE2dP1G67XuOu4gMlEvpKDsrDo0yxl3po/
QMDrkSM9rW/arvMXnoqRYkAnw2cTMVIsWKW0ZwY1NgVg7HE+4mvByiFO+gFx
L4J3alr0vAnewXjZ+NznvdF2wDXvtu5RtB7Gm1kHJlH+egV89I+i8WvZuhuW
l/oBmkKz5XkeZdjAvzRKE9Vf2OI8jfM2dz7/MUmtmJ/IgC+lflXOT5SDo6cG
NgV6lILXHxMvb1Sl/qde5q6ncd8B9yG4+w+NsE3GYd04R4P904qG5nv5UIUN
DfmvPuXvahpaZ5/0HSvb+2vBC5tzidGErvtyXVUWxddSh+KEaLResvxIVh+l
eeS5L/SUhu0MvyanakFoXJOYUJg6Ah75XbvZ4NsA8OfF/+IV/36Ov0+mT7j7
D7jvgPsQyS7mvfaHw0BU1cW5xQhrfl46rxh9HhNjxvzIy57mV8yn3DxLxo8L
P4ZzKk6wQbGUz0kGOteF/sJhDOTHyJKVJxjIz2TzT1IeVl0koQcKKZHzNNB+
LJJqUddA58dmy3OmFIp3Mv331yZgjGKxBBhcaohZgMabSFaMXoB+jzEZPxjD
mkjFXCr8KSNxWjFXAOatuWb7i/oKYNy/ivdBkXQWoHPoRdLSyvAWeNu9050O
Dyu1PZSWZkNXozD21RA6nNH2KKrWiAnpGzhd5rvuAYzJ+hNk5wfXzbhexvUz
rqtVFD6fej1TAFwc1lamIX99UUowIeqDzIgXpkR9IPjVLVKAyQfVflAWqtp/
AdhuMtUq4xWUhe7Bs68OPW7lxNt6BBD8wv659AfBi07nOr8TPMmtV7j1DFl9
iTH+Hn6Ov5/4dK1+ziF3oFQSGWyB8k3h/otDMYj/xM89CbSgqqF6Tm+iY2QN
0Lwd9D4YxUdU5LLcMcQ/GJfqTKgYKekBs9blpkT8rP5uakLET9mO98gugBaO
ujty/PNASn6Y792zdFiTn1bQsIoBbe+aFTWsYkFWxlz11hV8SJcOpvnRegG2
530p2q0rhKH7d0PR+0JLwZvCOSwd5Fdx2UBZHfT/Qr9fy+ig8cj068a+R3ni
UkvAnOHNGgvQfM6ly2sS8Ylxju6DbJNZI8DFMSXT3lQaCp5kBgjq1oNPrndu
2ZvKQ5fYI8HmGUJQQjvqc5T5b4Ct0Z+Pb6WjO0Ho9rNHDUuGOdlfFl0g+Hrp
x9sXCP6OWnTtPKHPyfgB8yzmYcy/mI85mZFvM5wNAG9M9UMin82w0C0i8tu7
1g8Iq0EcBzguuOOFO3/hvIXzGO5v4X4Wd5/r8R1FvT3n2CD2emkiA+FT3oHJ
BL9YXXuWQPAL1u1Yr2P9jp/7zDt/Abw9AaqfVrt5ofUe73La6oXWL9rYlFvA
qzrNj5gPuXkyOXgi5vT1DGCp5ClsNRfF7b92+E0A3Woua7qvj/v5uL+Pn5Pl
J6ybsF7i7r/nfRYNL9u7HiS/MffJQPyqF2HabI7y08CHkH0ZaB/I+gOlu6V5
7vuHAiPe2MbHdDk4qzyu6TGdCTEmO59k+++bJC3VX88PDjrajPOg8deadQzO
QN+L0D4zwYN0HNZPWDdhHYX100e2aLiB6hLAV/fchuDrytRTtsT5iPSwRhbV
z8sXaUy62IFMyWb/EITD15/uGUfnX3i7q18IGudGsuVR6xF9sJta9pXoX/xs
e9JH9C+8U0VGWGg+ZPwwf2sXZ+ylEvjmDl6KEnpK8NorURRfGJPpd+76B9c9
uA6Svnb64LBfKkcn6TEf0W8NBXwMQv+2x7nwE+eh9s5syeacFM6sqzoziM/z
z58SIj6P2m09g9CrQUcFcz/z88B4kZfvBmmi8GeypOVC41qAnwtFVVpc5t8F
CvRpQcfRfFRfSQ5QUP1dHRcfeBzpR/15jJZQJhWue53etyKSCW96luyTtywB
tgEjPSsiWdN5D9uH/+Y/nBePpfIZue61A80CMx+EoP0Zv+G0ewL5/4S8VwHh
f7L6hbltm86LJYxpK7L7dbq02x2AMVn/i6y/QdafJfPPjtpzRhdOHAEl11o2
xNGUIbjTd5ON5o8xWX6vmnKbP3c2HxxonYxPFBWHDr6f41OjvgBscf+Su2+J
+5mdAwL9E9vqQfCX1qci5hLwWu/tcSPWCPgM1rTzZ7Dh+KKLtubzR4Buu1zy
G2sJ+GeHd6j03fppTJZ/NeTLHvy0ocGN4o6tYzck4Gb3sLKQrc3ANPrLlraU
URAipNrINzOJY5J99p/4O5wkIUjEX8ZpeYR1SOtvHF84nnB84XgrlaTWa+hk
AQErhcU6SC/5fYwtr0X6CeMHfSIJNp7KINhNfZcYGtdutYG3GNr3LgcThFX/
4w9uf+XobbLkCewGhh9fWLNrxKZxtE2nSpznXMita7nXQzY+vh/C90Hc90Rk
9SVZfdz54c/ni3/ZQG3AYIqBfucqcIRK8I/8mq6jdMQPZP2V4GjtL5csKzk6
vb46xPgb04N3EePWLVnjSfRpyPQz2fkm6y9z97Nxnxvj1dreHd7R+ziD6xOp
RD2f/uQBhajvT++kUon5kt1Pz/ymKZo2vx5U0w62PTKRhikgJ7FHcAQorEwY
crmqDF8dgpEiCwTBYGdRJJHvrgUuO0vkP4wXGIQf61BIArKiMzoVkN/YJdvb
FJDfTr6r3x8rqALr3gWdkA6/DSSZlxYL66J8XnB9h5w3HSbpXtAU1pX7T38T
9zVxn5PsfCnW7zhg5C0B7VOdCn9njgDKzhzBnowG0DGY2XKkXhByHpo8NPdk
wdNvRvpkLg8AbkuWf8n0XfvWn4ax/jPBG9/VrXzo+zNjTFv4UHyUhI+0EH6q
UoiLFf5Gnbavn6z89QVWA5fibHP+UTnS+ojJ0uWPa/wFsN3SlinHzusANh5j
VJUlMhBb7s8xply69KPJsx5cd9ZIDzGXh7lZxkdGpUeAxk6vKyHofP/1C/iW
Za4Ebor2rBJF+1n3u9SSOB/v6GssiPzMreux3sf6HucBnB9wvsB5gup52mqq
gx9sfuM6SeiX+zvfjRL6ZTz5PdIvmvDWu5kRtHI6zL3O+zTUjQXnKCRM7m8v
Avj5ojtffIfKssABoVNfwrVRvAiY1Yt40iHGCRrFJ7X4kF/BCRPpMDkYVb/l
uJobBPLCrulRK9lwq09QF18Zfdpedsy92rKtCIzmmz4q0WST9ke5+wXFXH0F
KamDzeERuZxy0wlh4rxZxdIUCX4wPG7PIPQH1mNYp2FdhvUaWX//Q4Lw+3KD
bvA6oTkk1U1pGusvkx/TL5eBW5+9Cnqs2w3c0rztH75Q+A/G5wKfB3w+8LnJ
3jI77JDozGkbVx2Z/+RsI7C2utz9Q3kUTP2oq52y6gbXwzePG1dIQownFVon
r7jPgULvO13uHNoHjllWBvegfM+0mDVYjeYvKic/Uo3m3+Q52mv9JwmIMRss
/0jIwRtODsgyoOo3DWTJ9QOZvjmrcTX3xaUEsKm54JOtgCp0WhNWekmMActH
+zttBdT+U49y16szrYRrU6g9YFXT118ecNY03nXYZEyrXQYmzHGJvaEvCe+b
zNdJ7vwFIpiehxc87wAYW5VIy7BRPjy55RWPCsqPGN961cuT4DmHtD9Q4dGw
p6rCHaxLjUxdjfb/0cQdgwtI/8a/2XplNarXlwyclvraEc+xSN3J+8/7ECaR
vERcYTs6eV17UiQLnOmcOy4irQLLN98cN0b5P9Tx86QIyv9k/IjHx+Ph8fF8
8P0Lvm/hvochuz8ySy1a8lhSCXxKqpEURedCIXOTNMEvQ0L5EgS/1G3NETh9
fgso65d5Nox44aj/6YheVH9h65k1Vfp+Xx3HCnStJv6f02R6kci72HYpmH/5
vccDrG068dYRxQ/TXjbtLpr/uIB6rSNaD1l9gO9z8P0O9/0+mb4ke7+D7P49
tD7ijvipFeDZ1TpxE7T+JpqipAnKP+2qOxBWnr5/+1/3cGT3Tzi/4XyG8xvO
dzg+cDxwxwm3HscW63YyfUIWf2T3dxINQWBZaTCwFjKzPIzqnT5//oR+Pibs
2ahtcZimCrtuHnu+dg4VHozL2b/eio3ixm+t3IZSMEhTbM9MQHpKOCKkbtZa
sIauuT8C+XNWxdsWBoorm5ojeyOQP55bmLlcOV7FiToZ4Uvw9vwza3yJuCob
iT9IxMmFpv4jew44gsEKnqh89PvxvEJJT/T7MbWxyHzkx8bKE9kTZlQ44/vb
9yHXGPBM7eY3j+2eAYy530/C7yXh95TI7o/I9CXuj/2vexbcZ+Puv+G+HFn+
4O634D4Mxvg9DvyeB36/A7/vYRnZ/2hjkB4Itskd0kD+blIfHiX6A+ZmoaNE
v2BtSM2DLkcPcL1J6MAG5J/0+webbqPze+VEx74NVLXp99qm32fjer/NZEJR
8YxtN/j95PbsvAqFaXwqMEQ5D+Ur8TOGx9tWl4LRSuWJnSgeMvPUxl+rUGHa
yJJgbSvEl5LjM7d2VHKOdc7bTey/i5PobmL/7WTSdAl+yHiVf0pYSAryR97X
8tv2BWB7bdKeIc/i+8/9N/c9XlZeSNVqcwgexxtqS69Uhi3icVXuvFSIMVl9
MXeiY69lwAXwq/2w6hMhZViq5mkVIM2ES746IcsgfX8pxvW989XOTCCbzM7o
ZKlCqZTYiEg3Ovwb1XK1k7UA/h+DTRJr
       "], 
      "CountMatrix" -> {{227, 1, 12, 0, 0}, {0, 6, 6, 0, 0}, {0, 1, 82, 1, 
       0}, {0, 0, 4, 6, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwN0mlrDgAAAODXsbStWM2OmM3rnLYxc8y1rI0d5to7dpBoNpNrOXIvV6GE
L6zlSCQyJEVC+DD3TYqIYkV8cJNzPB+ef/AEK2tDC1oFAoFmWhNGO8KJIJIO
RBFNR2KIJY54OtGZBBJJoitButGdHvSkF8mkkEoa6WQwgMFkMoThZDGSbHLI
ZTR55FNAIWMoYhwTKSZECZMopYxyKpjKNKYzg0pmUkU1s6hhNnOYyzzmU8tC
FrGYJSxlGctZwUpWsZo61rCWdaxnAxvZxGa2sJVtbGcHO6mngV3sZg972cd+
DnCQQxzmCI0c5RjHOcFJTnGaM5zlHOe5wEUu0cRlrnCVa1znBje5xW3ucJd7
3OcBD3nEY57wlGc85wUvecVr3vCWd7znAx/5xGe+8JVvfOcHP/nFb/7wlxb+
0UbitoQRQSTtiSKaGOJIoAuJJBGkN8n0IYVU0uhLP9LpTwYDGUQmQxnGCLLI
JodcRpFHAUWMZTwTKCZECZMppYxyKpjCf34hZoM=
         "], {278}, {4, 6, 29, 97, 163, 235, 236, 280, 281, 282, 293, 
         319}, {}, {}}, {{}, {90, 92, 146, 174, 330, 340}, {39, 41, 126, 257, 
         258, 298}, {}, {}}, {{}, {144}, CompressedData["
1:eJwlzz1LAgEAgOGLoG4Q46QlWlKjsYhSKEIQFBc/4qC1oa3lcvEnNChtDtIS
LUFjNISDg/kXRCEIGipoaW7tiYaHd36zZxdxshAEQcxfFwlJkSYiwxrb7LDL
PgUOOOSIEmUq1GnS4oRTzklo0+GSLj2u6DPgmhtuueOeBx55YsiIMc9MmDJj
zguvvPHOB5988c1P8D+7xDIhKVaIyLDKOhvkyLPJFnsUKVGmSo0Gx/wCgKAi
TQ==
         "], {13}, {}}, {{}, {}, {132, 224, 265, 312}, {42, 145, 179, 269, 
         315, 329}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "good", "acceptable", "very good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0002395086705202312, "SingleEvaluationTime" -> 
      0.004925, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "e514ecf4-b377-4782-b7cc-f65a7b5ea2fc"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"92.8", "1.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    92.7745664739884432493`3., 1.3939168700000086343`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"69.4", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.3641618497109817554`3., 2.4818350129436712592`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.8297112047650443412`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.015395512976454695`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.7989201788121349512`3.", "\", \"", 
                    "0.8605022307179537311`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.7989201788121349512`3., ", ", 0.8605022307179537311`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.1866775848049828102`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0185542024554269935`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.1495691798941288231`3.", "\", \"", 
                    "0.2237859897158367972`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.1495691798941288231`3., ", ", 0.2237859897158367972`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.46`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.83`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2BNLx/I+9S948tY+u+LLnbzLr+3Zl6w9xJ/4
1L7oE/PXyNa39mqbvGLlc17ZC+wyPVC26yFOcw6wbzz60vWdfUyX1qTDzm/t
nZifWMjLv7RnOOx8vP7ha/uVhYIulrmP7SWur5U+KLQLt3oc5uNyD6nuhNEP
q0TWuT+8ZQ8LMVzuUXzBEPdWDGj+iWrzlG0v7L1DrUvv+d3GaS4A1zyELA==

                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["227", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "227", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9458333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9721627408993576`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{227, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9458333333333333}], 
                    Row[{"FScore = ", 0.9721627408993576}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.125`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.004166666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.125}], 
                    Row[{"Row fraction = ", 0.004166666666666667}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.75`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.5`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6000000000000001`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.75}], 
                    Row[{"Recall = ", 0.5}], 
                    Row[{"FScore = ", 0.6000000000000001}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.125`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.011904761904761904`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.125}], 
                    Row[{"Row fraction = ", 0.011904761904761904`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.11538461538461539`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.05`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.11538461538461539`}], 
                    Row[{"Row fraction = ", 0.05}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.057692307692307696`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.5`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.057692307692307696`}], 
                    Row[{"Row fraction = ", 0.5}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["82", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7884615384615384`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9761904761904762`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8723404255319148`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{82, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7884615384615384}], 
                    Row[{"Recall = ", 0.9761904761904762}], 
                    Row[{"FScore = ", 0.8723404255319148}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.038461538461538464`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.4`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", "very good", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.038461538461538464`}], 
                    Row[{"Row fraction = ", 0.4}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.011904761904761904`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.011904761904761904`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.6`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.7058823529411764`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8571428571428571}], 
                    Row[{"Recall = ", 0.6}], 
                    Row[{"FScore = ", 0.7058823529411764}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "240", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9458333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{240, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9458333333333333}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.5`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.5}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "84", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9761904761904762`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{84, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9761904761904762}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.6`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.6}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "227", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{227, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "8", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.75`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{8, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.75}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "104", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7884615384615384`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{104, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.7884615384615384}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "7", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{7, " example", "s", " classified as ", "very good"}], 
                    Row[{"Precision = ", 0.8571428571428571}]}], 
                    "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["240", TraditionalForm]}, {2.5, 
                    FormBox["12", TraditionalForm]}, {1.5, 
                    FormBox["84", TraditionalForm]}, {0.5, 
                    FormBox["10", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["227", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["8", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["104", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["7", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "good" -> 0.25, "acceptable" -> 0.25, 
             "very good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "very high", "low", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "very high", "high", "low"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}], 3, 4, 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}], 2, 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "large", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "good", "acceptable", "very good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJzlWUsKwjAQjS5EvIVX0AOIV6gnqKCrglAX4s6j2y4EkZrvm5kXfYtia/Pm
NTPJTJL18dKc586563K4NO1t3/ft/bAYb05tt910s+HnY+XG685lIbddDrfv
HqEjZA/BiX7f107TN5LcOX7O0Sf5TTmQiMd3npLxYzE2rDhD3Ck2Y8fp+MzC
J6n8MTZZYkUyx7H5ymcjZdxrzYnouQ3BaxnvMUDXPyn2St6RRG05RcOGtU8s
8E/9idSDmlN+uY8sUMPcW6KBQXsMtHJBLf3xQukaSMOuJizqapZ1loUdljgI
rbksdObmjlKtknt1GlxM3L7/a8+5LDpYoDHupPaWU1CL37XmQWvUmvs1wZjf
p8BUX35bz1itGVC8iJqJJV6moLG/jDhTQ9tGt2GBxfmgRltLbhYNUudnKNRS
Q1nUxezxyaAPCabaSJqrhJvN7xq1Ats3f0JG3xMBlHb2
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {2688}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DZwIALNNjjlCIJ
UMscdDNpYS4uu7DRuNTB2ITchy6PTz1t/QoA0xUSMw==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {128}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{128, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/8" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_1cbd98b6_c257_4b32_813e_10cb6f032e9a", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
5s+OBehCIXMstDRrwatBskuocTEJgF9KfNbtFwsvznJdyAWwqQDmYwBgtWOW
/CXopgLYXjKALZT6rKNdA7ASXwA7Y3Uu+FHEeADzHZtC/rwWTULfj6R+aYU+
4YeWqIYckqUU1qKCTJHoqCv7qIh0CDsqXG6IPulnSKc/NaH0cg2pHuHMFUfx
fMgVpX8uLPzyG5PaTvMMZ6657hPBbeBP/sEN5VlF6sutm9W3hMZNogbwH/lw
SI9NmJdYWAN//sTF6IMxGsi9asjvzahb+Y8iuOp0TCys0Oc08PmBVctZXM5B
kir7q+DPD8oM4n+lrX2OnZLJFLDeyYqOALxEarkzmMUaxzW6iG5arsEzUBNN
/vYfVlWRletZKo+mNS7JP/NXF066ITebWiZcxDUNFBIfYlqFZ4iRmDpDLHJJ
p2czxxqo7jf1aW8RbpCU61tCrpvucV8rBn0iiVhC1OLfexJCfr16rNSsXGDr
rUoTJ8y6RIqEBLkQ3U2zMDdqQ7j54TnsJA1ueayDxVYlFC0Vbq/IpuX6Dg18
n4R0OvqgSyJGfNBFaMP80rKKpEV6ynQ1Oehi5uPDreCH/NJNNzQsayBNL9Pa
b5vkQ03NKD7E4X4F+Lrr7mOVkrukMySQ1D+hk0jpBiinnamZt4NVVWzlOlk9
76+usEgSRtOKTFUEn9cNEi4Hgj2AYJZ5pdZVRPA4dPePNVYj3/nUXP4j/nK1
1OSZtGyq4R/oZvtYYGkVvhJwmaWZs5fVC3MGqeesQAsz3w5ai/Av0Lk10eio
kzjMGsLGrtM9Rlle4M0XXW4twI8w7ha3Dxuwb8SsEm6unhse7Y63rIlHZ+r7
Ewweq1KE6o/h1eMB5ly1Y7gd9Ipt6klo9ZqWxYKMb9HldqV4vC5+Oni3X3WB
2K8Yzwp3N/bsUdb06viMPBATr2zt7/YizpzsPa28HuYFM9qFVq+JQwj0hblC
dd7l6vN4NS48DuFzqHoxPvUnMb2SOIpQ0aN4bHJqZEK3qnprFYs4dXx7WB6H
458bugt1P9lqF4u67wnbjVfla/CqImGsirqK/g9+de6jzt22T2shspT+nKGa
IUcHdHD7dOv8NGVs2A6E8KGaY9FoENuwELzaugXHMCdsDcK/ovrLZi/i9MXg
KWVeJ+Rur8ThZi6uxImensGmdY+Xk5Y39t/6iL8qMKmBGO3dfwOWE44TITjH
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
6kT4jf8DMC7Zyg==
                    "]]|>, "orcInstance" -> 87489936, "orcModuleId" -> 
                    87613632, "targetMachineId" -> 65774496|>, 
                    139724095887168, 139724095887024, 139724095887104, 
                    139724095881216, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_993c6a44_e3eb_47cc_83b9_2e7f3ff0501d", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
n6JGYeHfAWhgwC8=
                    "]]|>, "orcInstance" -> 86568976, "orcModuleId" -> 
                    66254976, "targetMachineId" -> 86898832|>, 
                    139724095873568, 139724095873168, 139724095873248, 
                    139724095873024, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7ad2635d985bfb01", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_1cbd98b6_c257_4b32_813e_10cb6f032e9a", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
5s+OBehCIXMstDRrwatBskuocTEJgF9KfNbtFwsvznJdyAWwqQDmYwBgtWOW
/CXopgLYXjKALZT6rKNdA7ASXwA7Y3Uu+FHEeADzHZtC/rwWTULfj6R+aYU+
4YeWqIYckqUU1qKCTJHoqCv7qIh0CDsqXG6IPulnSKc/NaH0cg2pHuHMFUfx
fMgVpX8uLPzyG5PaTvMMZ6657hPBbeBP/sEN5VlF6sutm9W3hMZNogbwH/lw
SI9NmJdYWAN//sTF6IMxGsi9asjvzahb+Y8iuOp0TCys0Oc08PmBVctZXM5B
kir7q+DPD8oM4n+lrX2OnZLJFLDeyYqOALxEarkzmMUaxzW6iG5arsEzUBNN
/vYfVlWRletZKo+mNS7JP/NXF066ITebWiZcxDUNFBIfYlqFZ4iRmDpDLHJJ
p2czxxqo7jf1aW8RbpCU61tCrpvucV8rBn0iiVhC1OLfexJCfr16rNSsXGDr
rUoTJ8y6RIqEBLkQ3U2zMDdqQ7j54TnsJA1ueayDxVYlFC0Vbq/IpuX6Dg18
n4R0OvqgSyJGfNBFaMP80rKKpEV6ynQ1Oehi5uPDreCH/NJNNzQsayBNL9Pa
b5vkQ03NKD7E4X4F+Lrr7mOVkrukMySQ1D+hk0jpBiinnamZt4NVVWzlOlk9
76+usEgSRtOKTFUEn9cNEi4Hgj2AYJZ5pdZVRPA4dPePNVYj3/nUXP4j/nK1
1OSZtGyq4R/oZvtYYGkVvhJwmaWZs5fVC3MGqeesQAsz3w5ai/Av0Lk10eio
kzjMGsLGrtM9Rlle4M0XXW4twI8w7ha3Dxuwb8SsEm6unhse7Y63rIlHZ+r7
Ewweq1KE6o/h1eMB5ly1Y7gd9Ipt6klo9ZqWxYKMb9HldqV4vC5+Oni3X3WB
2K8Yzwp3N/bsUdb06viMPBATr2zt7/YizpzsPa28HuYFM9qFVq+JQwj0hblC
dd7l6vN4NS48DuFzqHoxPvUnMb2SOIpQ0aN4bHJqZEK3qnprFYs4dXx7WB6H
458bugt1P9lqF4u67wnbjVfla/CqImGsirqK/g9+de6jzt22T2shspT+nKGa
IUcHdHD7dOv8NGVs2A6E8KGaY9FoENuwELzaugXHMCdsDcK/ovrLZi/i9MXg
KWVeJ+Rur8ThZi6uxImensGmdY+Xk5Y39t/6iL8qMKmBGO3dfwOWE44TITjH
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
6kT4jf8DMC7Zyg==
                    "]]|>, "orcInstance" -> 87489936, "orcModuleId" -> 
                    87613632, "targetMachineId" -> 65774496|>, 
                    139724095887168, 139724095887024, 139724095887104, 
                    139724095881216, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_993c6a44_e3eb_47cc_83b9_2e7f3ff0501d", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
n6JGYeHfAWhgwC8=
                    "]]|>, "orcInstance" -> 86568976, "orcModuleId" -> 
                    66254976, "targetMachineId" -> 86898832|>, 
                    139724095873568, 139724095873168, 139724095873248, 
                    139724095873024, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "7ad2635d985bfb01", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 32}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 192952, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 12, 12, 33, 58.471261`8.51951743333861}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {
          "medium", "medium", 4, 4, "small", "medium"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "medium", 2, 4, "small", "high"}, {
          "medium", "high", 3, 4, "large", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "very high", "medium", 3, 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "high", 4, 4, "large", "high"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 4, 4, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "high", "low", 3, 4, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 2, 2, "large", "low"}, {
          "low", "medium", 4, 2, "small", "medium"}, {
          "high", "low", 2, 4, "medium", "medium"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 4, 2, "small", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 2, 2, "medium", "low"}, {
          "low", "medium", 2, 2, "small", "low"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 4, 2, "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "high", 4, 2, "medium", "high"}, {
          "low", "low", 4, 4, "large", "medium"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "medium", "low", 3, 4, "small", "low"}, {
          "high", "medium", 2, 2, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 4, "large", "medium"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "medium", 2, 4, "medium", "low"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 4, "large", "medium"}, {
          "medium", "medium", 4, 4, "medium", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "high", 3, 2, "small", "low"}, {
          "very high", "medium", 4, 2, "large", "low"}, {
          "high", "low", 4, 4, "large", "medium"}, {
          "high", "high", 2, 4, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "low", 2, 4, "large", "medium"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "high", 3, 2, "small", "low"}, {
          "high", "low", 4, 4, "large", "high"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "medium", "low"}, {
          "high", "low", 3, 4, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "medium", 3, 2, "large", "medium"}, {
          "very high", "very high", 4, 2, "small", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "low", "very high", 4, 2, "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "low", 4, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "medium", "medium"}, {
          "medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "very high", 3, 4, "medium", "low"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "medium", 2, 4, "small", "high"}, {
          "low", "high", 3, 2, "medium", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "low", 3, 4, "small", "high"}, {
          "low", "very high", 4, 2, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "low", 3, 4, "medium", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "low", 2, 2, "small", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "medium", "high", 3, 2, "large", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "medium", 4, 2, "medium", "high"}, {
          "medium", "medium", 2, 4, "medium", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "low", 2, 4, "small", "low"}, {
          "low", "very high", 4, 4, "large", "high"}, {
          "high", "very high", 4, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "low", 4, 4, "medium", "low"}, {
          "very high", "low", 2, 2, "large", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "medium", 2, 4, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "medium", "medium", 4, 4, "large", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "very high", "very high", 2, 2, "small", "low"}, {
          "high", "low", 3, 2, "small", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "very high", 2, 4, "large", "low"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "low", 3, 2, "large", "high"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "medium", "very high", 4, 4, "large", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "very high", 2, 4, "small", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "low", 2, 4, "large", "high"}, {
          "very high", "medium", 4, 4, "large", "high"}, {
          "high", "very high", 2, 4, "large", "high"}, {
          "high", "medium", 2, 4, "small", "high"}, {
          "medium", "medium", 2, 2, "medium", "low"}, {
          "high", "low", 2, 4, "medium", "low"}, {
          "high", "very high", 3, 4, "large", "medium"}, {
          "low", "low", 2, 4, "medium", "medium"}, {
          "low", "medium", 4, 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 4, 4, "medium", "low"}, {
          "low", "medium", 2, 2, "medium", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "medium", "medium", 3, 2, "medium", "high"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "medium", 3, 4, "medium", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "low", 3, 4, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "low"}, {"very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 3, 2, "large", "high"}, {
          "high", "high", 3, 2, "large", "medium"}, {
          "very high", "low", 3, 4, "small", "low"}, {
          "medium", "very high", 2, 2, "medium", "medium"}, {
          "medium", "low", 3, 2, "large", "medium"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 3, 4, "medium", "medium"}, {
          "very high", "very high", 3, 2, "small", "high"}, {
          "high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "high", 4, 4, "large", "low"}, {"medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "very high", 3, 2, "medium", "medium"}, {
          "medium", "low", 4, 4, "small", "medium"}, {
          "very high", "low", 4, 2, "medium", "low"}, {
          "high", "very high", 3, 4, "large", "low"}, {
          "very high", "high", 2, 2, "small", "high"}, {"very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 3, 2, "small", "medium"}, {
          "high", "medium", 3, 2, "large", "high"}, {
          "medium", "low", 4, 4, "small", "low"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "high", 4, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "large", "low"}, {
          "high", "medium", 3, 2, "medium", "high"}, {
          "low", "medium", 4, 2, "large", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "high", 4, 2, "small", "medium"}, {
          "medium", "low", 4, 2, "large", "high"}, {
          "high", "high", 2, 2, "medium", "medium"}, {
          "very high", "very high", 4, 2, "large", "high"}, {
          "high", "medium", 2, 2, "small", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "medium", 2, 4, "small", "low"}, {
          "medium", "high", 3, 2, "large", "medium"}, {
          "very high", "low", 3, 2, "medium", "high"}, {
          "high", "high", 3, 2, "large", "low"}, {
          "high", "high", 2, 2, "medium", "low"}, {"very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "low", 2, 4, "medium", "low"}, {
          "low", "low", 3, 4, "large", "low"}, {"low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "high", 4, 2, "large", "medium"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "low", 2, 4, "small", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 2, 4, "large", "high"}, {
          "high", "high", 2, 2, "small", "low"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "medium", 4, 2, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "high"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "high", 4, 4, "large", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "very high", "very high", 2, 4, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "very high", 2, 2, "large", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "high", 4, 2, "large", "low"}, {
          "medium", "low", 4, 4, "large", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 2, 4, "medium", "low"}, {
          "very high", "high", 2, 2, "medium", "low"}, {
          "medium", "low", 2, 2, "medium", "medium"}, {"high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 3, 2, "large", "medium"}, {
          "high", "low", 4, 2, "medium", "high"}, {
          "medium", "high", 3, 4, "medium", "low"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "medium", 4, 4, "small", "high"}, {
          "medium", "low", 3, 4, "medium", "high"}, {
          "low", "very high", 2, 4, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "low", "medium", 3, 2, "medium", "low"}, {"medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 2, 4, "medium", "high"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "low", 4, 4, "medium", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 3, 4, "large", "medium"}, {
          "low", "medium", 3, 4, "large", "high"}, {
          "very high", "very high", 4, 4, "small", "low"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "low", 2, 4, "large", "medium"}, {
          "low", "high", 4, 2, "large", "medium"}, {
          "low", "high", 3, 4, "small", "medium"}, {
          "very high", "medium", 3, 2, "small", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "very high", "high", 4, 4, "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 3, 4, "medium", "medium"}, {
          "low", "high", 2, 4, "medium", "high"}, {"medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 3, 2, "large", "high"}, {
          "medium", "very high", 3, 2, "medium", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "high", 3, 4, "small", "medium"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "medium", 2, 4, "small", "medium"}, {
          "medium", "very high", 4, 4, "small", "low"}, {
          "low", "very high", 2, 2, "medium", "low"}, {
          "very high", "high", 3, 4, "medium", "medium"}, {
          "low", "medium", 4, 4, "medium", "medium"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "high", 3, 2, "large", "low"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 3, 2, "medium", "low"}, {
          "medium", "very high", 3, 2, "large", "medium"}, {
          "high", "high", 3, 2, "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "low", 2, 4, "small", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 2, 4, "medium", "low"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "low", 3, 2, "large", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "medium", 3, 4, "large", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "high", "low", 2, 2, "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 2, 4, "large", "low"}, {"low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "low", 4, 4, "medium", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "low", 3, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "high"}, {
          "very high", "medium", 3, 4, "small", "low"}, {
          "medium", "very high", 2, 2, "small", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "medium", 3, 4, "large", "medium"}, {
          "low", "low", 2, 2, "medium", "high"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 4, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "small", "medium"}}, 
        "Output" -> {
         "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", "good", 
          "very good", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "good", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "very good", "good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "good", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "acceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "very good", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "very good", "good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable"}|>, 
      "Predictions" -> {
       "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "very good", "good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "very good", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "very good", "good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}, "LogProbabilities" -> CompressedData["
1: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
LoD/A5b4H8s=
       "], 
      "CountMatrix" -> {{227, 1, 12, 0, 0}, {0, 6, 6, 0, 0}, {0, 1, 82, 1, 
       0}, {0, 0, 4, 6, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwN0mlrDgAAAODXsbStWM2OmM3rnLYxc8y1rI0d5to7dpBoNpNrOXIvV6GE
L6zlSCQyJEVC+DD3TYqIYkV8cJNzPB+ef/AEK2tDC1oFAoFmWhNGO8KJIJIO
RBFNR2KIJY54OtGZBBJJoitButGdHvSkF8mkkEoa6WQwgMFkMoThZDGSbHLI
ZTR55FNAIWMoYhwTKSZECZMopYxyKpjKNKYzg0pmUkU1s6hhNnOYyzzmU8tC
FrGYJSxlGctZwUpWsZo61rCWdaxnAxvZxGa2sJVtbGcHO6mngV3sZg972cd+
DnCQQxzmCI0c5RjHOcFJTnGaM5zlHOe5wEUu0cRlrnCVa1znBje5xW3ucJd7
3OcBD3nEY57wlGc85wUvecVr3vCWd7znAx/5xGe+8JVvfOcHP/nFb/7wlxb+
0UbitoQRQSTtiSKaGOJIoAuJJBGkN8n0IYVU0uhLP9LpTwYDGUQmQxnGCLLI
JodcRpFHAUWMZTwTKCZECZMppYxyKpjCf34hZoM=
         "], {278}, {4, 6, 29, 97, 163, 235, 236, 280, 281, 282, 293, 
         319}, {}, {}}, {{}, {90, 92, 146, 174, 330, 340}, {39, 41, 126, 257, 
         258, 298}, {}, {}}, {{}, {144}, CompressedData["
1:eJwlzz1LAgEAgOGLoG4Q46QlWlKjsYhSKEIQFBc/4qC1oa3lcvEnNChtDtIS
LUFjNISDg/kXRCEIGipoaW7tiYaHd36zZxdxshAEQcxfFwlJkSYiwxrb7LDL
PgUOOOSIEmUq1GnS4oRTzklo0+GSLj2u6DPgmhtuueOeBx55YsiIMc9MmDJj
zguvvPHOB5988c1P8D+7xDIhKVaIyLDKOhvkyLPJFnsUKVGmSo0Gx/wCgKAi
TQ==
         "], {13}, {}}, {{}, {}, {132, 224, 265, 312}, {42, 145, 179, 269, 
         315, 329}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "good", "acceptable", "very good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.00020765895953757222`, 
      "SingleEvaluationTime" -> 0.00446775, "Version" -> {13.1, 0}|>]]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9, 
   3.8685204529294043`*^9, 3.8685215146011333`*^9, 3.8685301612497177`*^9, 
   3.868530590591856*^9, 3.86853261496434*^9, 3.8685338436228123`*^9, {
   3.868535643570589*^9, 3.868535653266458*^9}, 3.86853620504729*^9, 
   3.868536647435892*^9, 3.8685368910591183`*^9, 3.868536956624065*^9, 
   3.868537492992119*^9, {3.8685379158969793`*^9, 3.868537942476584*^9}, 
   3.8685921415849247`*^9, 3.868599486276321*^9, 3.86860013955028*^9, 
   3.8686009455378437`*^9, 3.868601165154408*^9, 3.868602872755411*^9, 
   3.868604168888167*^9, 3.8686705600345984`*^9, 3.868672040003127*^9, 
   3.868681397928339*^9, 3.868938938636381*^9, 3.8689425626275787`*^9, 
   3.868943546605094*^9, 3.86894388526086*^9, 3.868944114037065*^9, 
   3.868944544993232*^9, 3.868945583119274*^9, 3.868945795964314*^9, 
   3.868946090455439*^9, 3.868946301277932*^9, 3.868946812077159*^9, 
   3.868947529554852*^9, 3.868948234247651*^9, 3.868949916263268*^9, 
   3.86895035411582*^9, 3.868950591820963*^9, 3.868955715946851*^9, 
   3.8689590912506847`*^9, 3.868961292873067*^9, {3.868964211642971*^9, 
   3.868964271971294*^9}, 3.8689658659417048`*^9, 3.868975187773774*^9, 
   3.868975807387333*^9, 3.869030236615261*^9, 3.869030576485284*^9, 
   3.8690318983554163`*^9, 3.8690322955085077`*^9, 3.8690328949105043`*^9, 
   3.869033235901104*^9, 3.869033495671227*^9, 3.869034576712833*^9, 
   3.869035610130576*^9, 3.8690361433581657`*^9, 3.869036324430427*^9, 
   3.869036425981944*^9, 3.8690403482379503`*^9, 3.869040564944063*^9, 
   3.869041421524418*^9, 3.869041561340787*^9, 3.869041673839971*^9, 
   3.8690421991522627`*^9, 3.869042855424157*^9, 3.86904326803651*^9, 
   3.869043554339016*^9, 3.869043746795423*^9, 3.869105420473537*^9, 
   3.869105653283306*^9, 3.869105982326734*^9, 3.869107184493881*^9, 
   3.869108234728773*^9, 3.869111749761622*^9, {3.869111919016803*^9, 
   3.8691119399060993`*^9}, 3.869112356812172*^9, 3.869112702187408*^9, {
   3.869112904171596*^9, 3.869112930067875*^9}, {3.8691133852077427`*^9, 
   3.869113414126828*^9}, {3.869121126953014*^9, 3.8691211520853*^9}, {
   3.869121847143949*^9, 3.86912185561662*^9}, 3.869203188780602*^9, {
   3.8692071057867537`*^9, 3.86920713930786*^9}, 3.869207400202592*^9, {
   3.869207739721821*^9, 3.8692077456111937`*^9}, {3.869207952002699*^9, 
   3.869207963437224*^9}, 3.8692080125106792`*^9, {3.869208714713435*^9, 
   3.869208729773431*^9}, 3.869209077756652*^9, 3.8692094954446297`*^9, {
   3.869210938078933*^9, 3.8692109446365433`*^9}, 3.869211902166511*^9, {
   3.869213234631062*^9, 3.8692133334937763`*^9}, {3.869214218655706*^9, 
   3.869214223564402*^9}, 3.869215458371559*^9, {3.869215992069166*^9, 
   3.869216010528124*^9}, 3.869216652211252*^9, 3.8692170070767508`*^9, 
   3.8692173280534887`*^9, {3.869217675130456*^9, 3.869217685513886*^9}, {
   3.8692180388130713`*^9, 3.8692180459383907`*^9}, {3.869219076882539*^9, 
   3.8692191672841787`*^9}, 3.869219428759843*^9, {3.869219704836887*^9, 
   3.869219710189546*^9}, {3.869281650336409*^9, 3.869281656282543*^9}, 
   3.869292838989414*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"e800d8df-d535-47fd-87bd-a56d91fbac6a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedHardNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}, {3.869121279126927*^9, 
   3.869121279479135*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "testData", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"featureLayer", "[", 
       RowBox[{"KeyDrop", "[", 
        RowBox[{"#", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "&"}], ",", 
     RowBox[{
      RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}], "&"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.869292984681349*^9, 3.8692931365040483`*^9}, {
  3.869293202450193*^9, 3.869293235535232*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"3da3f85d-50c5-45aa-934b-1a84fa5781af"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"eval", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}, {
   3.868530047989657*^9, 3.868530063111247*^9}, {3.868530190826717*^9, 
   3.868530196600292*^9}, {3.86853144384466*^9, 3.868531451560924*^9}, {
   3.868532766824644*^9, 3.8685327949413958`*^9}, 3.868532945602283*^9, {
   3.868533874444491*^9, 3.8685338747929583`*^9}, {3.868604441984084*^9, 
   3.8686044511364*^9}, {3.8689602387396393`*^9, 3.8689602481032057`*^9}, {
   3.868960681250607*^9, 3.8689606824317408`*^9}, {3.868963143100669*^9, 
   3.868963145210929*^9}, 3.86896321844506*^9, {3.868976255892177*^9, 
   3.868976256410039*^9}, 3.8689764091880903`*^9, {3.869034393625832*^9, 
   3.86903439400725*^9}, {3.869043275878063*^9, 3.8690432774187603`*^9}, {
   3.86921972941183*^9, 3.869219743506506*^9}, {3.869281678616239*^9, 
   3.8692816957755537`*^9}, {3.869292976318449*^9, 3.869292982925337*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[BoxData["0.9104046242774566`"], "Output",
 CellChangeTimes->{
  3.8690345877152042`*^9, 3.869035626521063*^9, 3.869036152783195*^9, 
   3.8690363341385193`*^9, 3.869036436421172*^9, 3.869040357729239*^9, 
   3.869040576634907*^9, 3.869041433742779*^9, 3.8690415722677*^9, 
   3.8690416867128763`*^9, 3.86904220858243*^9, 3.8690432824600554`*^9, 
   3.869043562445753*^9, 3.869043754721044*^9, {3.869047065454893*^9, 
   3.869047090738934*^9}, 3.8690471518063593`*^9, 3.869047184930591*^9, 
   3.8690472207124777`*^9, 3.8690472595671577`*^9, 3.8690473069192467`*^9, 
   3.869047356173808*^9, 3.869104541974283*^9, 3.8691049803090754`*^9, 
   3.869105042273468*^9, 3.869105162486998*^9, 3.8691054315005198`*^9, 
   3.8691056671929417`*^9, 3.869105994037698*^9, 3.869107195753681*^9, 
   3.8691117585270443`*^9, 3.8691119669156637`*^9, 3.869121285329372*^9, 
   3.869208833562628*^9, 3.869209098161392*^9, 3.8692095035118723`*^9, 
   3.869210954522581*^9, 3.869211920142223*^9, 3.869213356256194*^9, 
   3.869214236948101*^9, 3.869215471853537*^9, 3.869216022517696*^9, 
   3.86921666275205*^9, 3.869217020007245*^9, 3.8692173416096373`*^9, 
   3.869217703374105*^9, 3.869218056194668*^9, 3.8692194468167562`*^9, {
   3.869219736012184*^9, 3.869219746378594*^9}, 3.869281699345985*^9, 
   3.869293239954982*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"6ac9f4c6-d45c-445f-b737-bf94eb314421"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Association", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Prediction\>\"", "->", 
         RowBox[{"trainedHardNet", "[", 
          RowBox[{
           RowBox[{"KeyDrop", "[", 
            RowBox[{"{", "\"\<Acceptability\>\"", "}"}], "]"}], "@", "#"}], 
          "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "->", 
         RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}]}]}], "}"}], "]"}], 
     "&"}], "/@", 
    RowBox[{"Normal", "[", "testData", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eval2", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}, {3.869121310826304*^9, 3.869121313255774*^9}, {
  3.869219749034794*^9, 3.869219752143724*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],

Cell[BoxData["0.9104046242774566`"], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9, 
   3.869105434085964*^9, 3.869105669300963*^9, 3.869105996859831*^9, 
   3.869107199042075*^9, 3.869111759364867*^9, 3.869111970506278*^9, {
   3.869121299804845*^9, 3.869121316611709*^9}, 3.8692088360902042`*^9, 
   3.86920910005622*^9, 3.869209505631686*^9, 3.869210957184381*^9, 
   3.869211922653748*^9, 3.869213358735955*^9, 3.869214238649056*^9, 
   3.8692154737290087`*^9, 3.869216025505147*^9, 3.8692166649342213`*^9, 
   3.8692170219382353`*^9, 3.869217343847763*^9, 3.8692177067848663`*^9, 
   3.869218058215096*^9, 3.869219448602796*^9, 3.869219753147689*^9, 
   3.8692817014660397`*^9, 3.8692932434109373`*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"10c2f8e0-da5e-4cb2-bcb4-a08657853b84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],

Cell[BoxData[
 TemplateBox[{"0.6875`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9, 
   3.869105674742872*^9, 3.8692091039680862`*^9, 3.869210963050486*^9, 
   3.8692119248338833`*^9, 3.869213361375114*^9, 3.869215475324996*^9, 
   3.869219517507464*^9, 3.869219756735735*^9, 3.869281703543564*^9, 
   3.869293245157888*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"ff3d3a06-6629-47b2-a3ff-080da85711ab"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNetBooleanExpression", "[", 
   RowBox[{"hnf", ",", "inputSize"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
   3.869031937904567*^9, 3.869031943129614*^9}, {3.869121341559927*^9, 
   3.869121348104578*^9}, {3.869210965421191*^9, 3.869210971914925*^9}, 
   3.869219529425714*^9, 3.869219571948317*^9},
 CellLabel->
  "In[279]:=",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"85881d34-aa2c-47a4-9cef-\
231d0c092462"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Acceptability\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Memory\>\"", ",", "\"\<Quality\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}, {
  3.8692109926431*^9, 3.869210996642137*^9}},
 CellLabel->
  "In[421]:=",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1382", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
           "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
           "Doors" -> <|"Type" -> "Nominal"|>, 
           "Passengers" -> <|"Type" -> "Nominal"|>, 
           "Cargo" -> <|"Type" -> "Nominal"|>, 
           "Safety" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
                  "Cargo", "Safety"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1382, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                   0.5381047338323698, 0.31349173058168534`}, {
                   0.2878959194482099, 
                   0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                   0.2578066194971254, 
                   0.4093083635172316, -0.7050063333319737, 
                   0.08206678121922453, -0.2152687718915405, 
                   0.46464274419035045`}, {
                   0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                   0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                   0.3669612074237795, -0.03875817355088801, 
                   0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                   0.5767907589006783, 0.1852877321886701, 
                   0.21134659605041434`, 0.33089384854127}}, 
                  "Precisions" -> {11.396708918937332`, 11.702295237769018`, 
                   11.751709980827822`, 12.269447018561033`, 
                   12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                  None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Mean" -> {-0.0027242377292722524`, -0.0004734344948340772,
                     0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                   "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 6, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   7052420854593502203|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 1301520, 
                  "DataMemory" -> 446480, "FunctionMemory" -> 62320, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.5374646114340518`, -1.5374646114340518`, \
-1.4481495799387802`, -1.3901532053842829`, -1.3900959198753926`, \
-1.3059537438182822`, -1.239089852169043, -1.2261733685503937`, \
-1.2132739652746585`, -1.169323039076807, -1.1079994773194297`}, 
                   "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                   0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[7.816606057704673, 0.25703225729782303`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Index" -> {<|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                   DirectedInfinity[1]}] -> 4|>, <|
               2 -> 1, 4 -> 2, Interval[{5, 
                   DirectedInfinity[1]}] -> 3|>, <|
               "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.12314196676015854`, -0.861851692199707, 
                0.10532767325639725`}, {
                0.8298183679580688, -0.28949323296546936`, 
                0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                0.38437455892562866`, -0.8375512361526489, 
                0.1422276645898819}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                0.4795919358730316}, {
                0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                0.2534555494785309, -0.4526385962963104}, {
                0.3543681204319, -0.37547722458839417`, 
                0.5876661539077759}, {-1.1276206970214844`, 
                0.17602579295635223`, -1.0098364353179932`}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.24657385051250458`, -0.8256815671920776, 
                0.8846340179443359}, {0.6182233691215515, 
                0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.34666627645492554`, -0.5679200291633606, 
                0.10750995576381683`}, {
                0.6412044167518616, -0.1759643256664276, 
                0.6604856848716736}, {-0.8092290163040161, 
                0.12987354397773743`, -1.1753407716751099`}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                0.12715618312358856`, 0.1291729062795639}, {
                0.21379514038562775`, -0.6005780100822449, 
                0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
             272386066020895428|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                "very good" -> 4|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113, 
        "unacceptable" -> 0.7012987012987013, "very good" -> 
        0.03896103896103896|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Acceptability", 
          "Order" -> {
           "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", "Cargo",
             "Safety", "Acceptability"}|>], "PreferLabeled" -> True, 
       "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> None, 
    "ImputationStrategy" -> Automatic, "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
    Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                 0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                 0.09347633272409439, 0.20684024691581726`, 
                 0.00729140592738986, -0.3824177384376526, 
                 0.2153223156929016, -0.46700865030288696`, 
                 0.21194063127040863`, 
                 0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                 0.07883942127227783, -0.375686913728714, 
                 0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                 0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                 0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                 0.1690395474433899, -0.28660914301872253`, 
                 0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                 0.17016777396202087`, -0.32100844383239746`, 
                 0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               18, "$InputDimensions" -> {18}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                "], "Biases" -> 
               RawArray["Real32",{-0.23329688608646393`, 0.1376294195652008, 
                 0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                 0.1361909657716751, -0.07115011662244797, 
                 0.0030301439110189676`, 0.04029219597578049, 
                 0.05379099026322365, 
                 0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                 0.0140318488702178, 
                 0.18612468242645264`, -0.17168177664279938`, 
                 0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                 0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                 0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                 0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                 0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                 0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "7" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                "], "Biases" -> 
               RawArray["Real32",{-0.30062639713287354`, 0.12008462101221085`,
                  0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                 0.09417349845170975, -0.10099706798791885`, 
                 0.08236243575811386, -0.2349618673324585, 0.1114811822772026,
                  0.2365228235721588, -0.1581137776374817, 
                 0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                 0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                 0.08413115888834, -0.2386404424905777, 
                 0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                 0.017599068582057953`, -0.16277392208576202`, 
                 0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                 0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                 0.048794329166412354`, -0.2748609185218811, 
                 0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                 0.15255072712898254`, -0.054961107671260834`, 
                 0.12484297901391983`, -0.013735197484493256`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "10" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{-0.18632154166698456`, -0.05518893152475357,
                  0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                 0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                 0.12943300604820251`, 
                 0.21619535982608795`, -0.12615013122558594`, 
                 0.12520363926887512`, 0.1943180412054062, 
                 0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                 0.12467250972986221`, -0.3208949565887451, 
                 0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                 0.16070689260959625`, -0.07001221925020218, 
                 0.07522184401750565, 
                 0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                 0.24120552837848663`, -0.04254811629652977, 
                 0.19626277685165405`, 0.04852093756198883}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "11" -> <|
            "Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "12" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                "], "Biases" -> 
               RawArray["Real32",{0.18740198016166687`, -0.1249600350856781, 
                 0.03215433284640312, -0.2378043681383133}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
        19653.548073458904`|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "Mean" -> {0.23124615267859935`, -0.72822837729203, 
              0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
              0.10517240908924025`, -0.24024309043728495`, 0.3074998656424723,
               0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
              0.3879769949206493}, 
             "StandardDeviation" -> {0.42336656209659007`, 0.2672799034098392,
               0.07124798075524297, 0.36989547912470067`, 
              0.17138659393602926`, 0.5155818183543911, 0.688893371869374, 
              0.24977193740899778`, 0.6403849334448501, 0.4897664046907167, 
              0.46819109868519837`, 0.43423173863577835`, 0.6276718952348702, 
              0.28383206529853633`, 0.7719651260033509, 0.09756213850198994, 
              0.2950767752080472, 0.22147755480753964`}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, "Key" -> 
             "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
         Around[0.9926698116140742, 0.007247173785702781], "EvaluationTime" -> 
         0.0002390132437947042, "TestSize" -> 276, "ModelMemory" -> 101904, 
         "ModelUtility" -> 5.3529526868256205`, "TrainingSize" -> 1106, 
         "TrainingTime" -> 50.11872336272725, "TrainingMemory" -> 1025056, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.021350027675851042`, 0.008527240234488089]}, 
         "AccuracyHistory" -> {
           Around[0.9926698116140742, 0.005124525728307819]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           4, "NumberOfParameters" -> 8600, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
              Around[0.5039356498747214, 0.011280914837970198`], 
              "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 2744, 
              "ModelMemory" -> 101904., "ModelUtility" -> -5.255034068743364, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 474568., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[3.3682246428941447`, 0.11709052181782027`], 
                Around[5.718797544659934, 0.1974406032409913]}, 
              "AccuracyHistory" -> {
                Around[0.4977980114632854, 0.013422541870627485`], 
                Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
              Around[0.7731731038259634, 0.010538572727576656`], 
              "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 2532, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
              461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.0207920682675256`, 0.13567904919872614`], 
                Around[1.989358115693642, 0.12729332292504641`]}, 
              "AccuracyHistory" -> {
                Around[0.7666435334598815, 0.01212548962300386], 
                Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
              Around[0.8754721532521594, 0.013799020363039234`], 
              "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.6640374106578726`,
               "TrainingSize" -> 250, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 580856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7727930479153965, 0.07355983104423623]}, 
              "AccuracyHistory" -> {
                Around[0.8754721532521594, 0.009757380872436296]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.021350027675851042`, 0.012059338789226588`], 
              "Accuracy" -> Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.021350027675851042`, 0.008527240234488089]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
             Around[0.021350027675851042`, 0.012059338789226588`], 
             "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
             "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1638549337103177`, 0.10037145501929841`], "Accuracy" -> 
              Around[0.5492390926678674, 0.023756280779855192`], 
              "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 1300, 
              "ModelMemory" -> 62416., "ModelUtility" -> -2.4356505013181984`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 315949.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0659744269130655`, 0.06346538833801657], 
                Around[1.2617354405075698`, 0.023724306617050557`]}, 
              "AccuracyHistory" -> {
                Around[0.5686355009414037, 0.0494049938117882], 
                Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
              Around[0.34906013350595955`, 0.01773043247078872], 
              "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 2744,
               "ModelMemory" -> 62416., 
              "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
              288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.7284854644248697`, 0.024470278570364008`], 
                Around[1.7449836721317225`, 0.02985267016659267]}, 
              "AccuracyHistory" -> {
                Around[0.333797137166834, 0.012654176408351573`], 
                Around[0.364323129845085, 0.01286858453924453]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7297176649588678, 0.030635251566725513`], "Accuracy" -> 
              Around[0.7731352673792209, 0.01749760840751051], 
              "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.4608603411176038`,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 430312, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7297176649588678, 0.021662394126187413`]}, 
              "AccuracyHistory" -> {
                Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
              Around[0.8462070332421717, 0.03062402709723611], 
              "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> -0.1999951890132391, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 882408, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.38327177587574507`, 0.029923508235575796`]}, 
              "AccuracyHistory" -> {
                Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020558565549557822`, "MeanCrossEntropy" -> 
             Around[0.38327177587574507`, 0.0423182311805343], "ModelMemory" -> 
             62416, "TrainingMemory" -> 882408, "TrainingTime" -> 
             1.2870992522366111`|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.35435313401532587`, 0.026162924108051638`], "Accuracy" -> 
              Around[0.8602959769418544, 0.016276096618821716`], 
              "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900, 
              "ModelMemory" -> 58320, 
              "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 250,
               "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35435313401532587`, 0.018499981052472317`]}, 
              "AccuracyHistory" -> {
                Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
              Around[0.4905470789487266, 0.05942169230008629], 
              "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 2672,
               "ModelMemory" -> 58320., "ModelUtility" -> -4.197660943845806, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 273552., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5949653673903932`, 0.05337852556796832], 
                Around[3.769761211170389, 0.12190065068836999`]}, 
              "AccuracyHistory" -> {
                Around[0.549197732950539, 0.013394029354165352`], 
                Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
              Around[0.7442585992282589, 0.013337895880245353`], 
              "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 2632,
               "ModelMemory" -> 58320., 
              "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              308650.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7090566921048821, 0.029587871638874982`], 
                Around[0.9267562156706394, 0.048804806717094945`]}, 
              "AccuracyHistory" -> {
                Around[0.7339496000489554, 0.012070557593356287`], 
                Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
              Around[0.9791671208169963, 0.012128533944401654`], 
              "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07118410180594256, 0.013542997191503502`]}, 
              "AccuracyHistory" -> {
                Around[0.9791671208169963, 0.008576168597937634]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
             Around[0.07118410180594256, 0.01915269030340499], "ModelMemory" -> 
             58320, "TrainingMemory" -> 945064, "TrainingTime" -> 
             6.2334652825440156`|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
              Around[0.838474265252356, 0.01562338483938151], 
              "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 1100, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 250, 
              "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 845536, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4150311982338223, 0.022874520429674614`]}, 
              "AccuracyHistory" -> {
                Around[0.838474265252356, 0.011047401365013764`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.9363303357963932`, 0.22063573174865092`], "Accuracy" -> 
              Around[0.6016657435215405, 0.009931734042792198], 
              "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 2400, 
              "ModelMemory" -> 187664., "ModelUtility" -> -4.394526005243066, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.8628854898161876, 
              "TrainingMemory" -> 768069.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7328302955198254`, 0.11030764480200886`], 
                Around[3.1398303760729616`, 0.1343428411885501]}, 
              "AccuracyHistory" -> {
                Around[0.6013282055836575, 0.014050468348716146`], 
                Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
              Around[0.7771993076355267, 0.016090257916624478`], 
              "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.4133613417100643`,
               "TrainingSize" -> 50, "TrainingTime" -> 1., "TrainingMemory" -> 
              768752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0883077850611167`, 0.06546404015990553]}, 
              "AccuracyHistory" -> {
                Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
             Around[1.0883077850611167`, 0.09258013344187536], "ModelMemory" -> 
             187664, "TrainingMemory" -> 768752, "TrainingTime" -> 
             16.33188643150958|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.06349687324568681, 0.020314194118190455`], "Accuracy" -> 
              Around[0.9752187821898789, 0.013178658637319573`], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.1990832337140014`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 1031984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06349687324568681, 0.014364304415312347`]}, 
              "AccuracyHistory" -> {
                Around[0.9752187821898789, 0.009318718889391335]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
              Around[0.5614696628952743, 0.02316984504064622], 
              "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 1900, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.375448364812931, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 588357.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2425860137311924`, 0.09670887865815357], 
                Around[3.472752094517207, 0.15761956845763322`]}, 
              "AccuracyHistory" -> {
                Around[0.5412325518696653, 0.01645230430382249], 
                Around[0.5817067739208833, 0.01550253065862414]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
              Around[0.7822399753364762, 0.011053793618809461`], 
              "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 2632, 
              "ModelMemory" -> 164368., "ModelUtility" -> -3.09292339195906, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.9314427449080938, 
              "TrainingMemory" -> 599973.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1299535489778723`, 0.07202244880796001], 
                Around[1.862147339889153, 0.11678580277280175`]}, 
              "AccuracyHistory" -> {
                Around[0.7898676324542127, 0.011253506706433129`], 
                Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.42705750837440937`, 0.035076829136806445`], "Accuracy" -> 
              Around[0.8446730233225903, 0.015135382766381485`], 
              "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 1132, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.5213181632194831, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 668632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.42705750837440937`, 0.024803063745157707`]}, 
              "AccuracyHistory" -> {
                Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
             Around[0.42705750837440937`, 0.035076829136806445`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
             "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.29713763668876286`, 0.029783149124946628`], "Accuracy" -> 
              Around[0.8857231716276136, 0.013316951171936615`], 
              "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.27080207566416914`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 518544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.29713763668876286`, 0.02105986671133995]}, 
              "AccuracyHistory" -> {
                Around[0.8857231716276136, 0.00941650647840652]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
              Around[0.4534728434064575, 0.03657154854139636], 
              "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 2200, 
              "ModelMemory" -> 93800., "ModelUtility" -> -4.7036563931676705`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.5848931924611134`, 
              "TrainingMemory" -> 372712., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.8582879282812748`, 0.09593272842945073], 
                Around[4.168810776492888, 0.14832220789749126`]}, 
              "AccuracyHistory" -> {
                Around[0.4184413958301533, 0.015453697183599058`], 
                Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
              Around[0.769971120234303, 0.0162893024591907], "EvaluationTime" -> 
              0.00006291890573589659, "TestSize" -> 1332, "ModelMemory" -> 
              93800, "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 
              50, "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2977572298050588`, 0.07725242580096887]}, 
              "AccuracyHistory" -> {
                Around[0.769971120234303, 0.01151827622969245]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
             Around[1.2977572298050588`, 0.1092514282939514], "ModelMemory" -> 
             93800, "TrainingMemory" -> 386192, "TrainingTime" -> 
             25.884295625347566`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5879853515835944`, 0.14718023198397873`], "Accuracy" -> 
              Around[0.7939162815913106, 0.015646642549432373`], 
              "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -3.152069743372218, 
              "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 600288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5879853515835944`, 0.10407214009248054`]}, 
              "AccuracyHistory" -> {
                Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
              Around[0.5705716928210636, 0.02387696402198573], 
              "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 2100, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.803632164263322, 
              "TrainingSize" -> 10, "TrainingTime" -> 5.444439372449127, 
              "TrainingMemory" -> 583613.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.6845044721043254`, 0.10447663667270932`], 
                Around[4.364677185562806, 0.2100094842353753]}, 
              "AccuracyHistory" -> {
                Around[0.5492372585429602, 0.014247131834686502`], 
                Around[0.591906127099167, 0.01628060211969826]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38151664752165954`, 0.03977608365046414], "Accuracy" -> 
              Around[0.8740940349402928, 0.013875001085229821`], 
              "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 250, 
              "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
              683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.38151664752165954`, 0.028125938478286556`]}, 
              "AccuracyHistory" -> {
                Around[0.8740940349402928, 0.009811107356336711]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00037881779653037317`, "MeanCrossEntropy" -> 
             Around[0.38151664752165954`, 0.03977608365046414], "ModelMemory" -> 
             164368, "TrainingMemory" -> 683480, "TrainingTime" -> 
             92.6247680155231|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2846789544300572`, 0.10135837559026044`], "Accuracy" -> 
              Around[0.7374636238433064, 0.017014953179959547`], 
              "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.6005267903937916`,
               "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 341168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2846789544300572`, 0.07167119470992618]}, 
              "AccuracyHistory" -> {
                Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
              Around[0.5152833374237896, 0.07249298936486862], 
              "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 2744,
               "ModelMemory" -> 58320., "ModelUtility" -> -5.074385087421649, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 295925.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.5190643035821725`, 0.1028129894230038], 
                Around[5.812425858174743, 0.191466359358563]}, 
              "AccuracyHistory" -> {
                Around[0.5871646538577457, 0.013267469359568705`], 
                Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020244886234998508`, "MeanCrossEntropy" -> 
             Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
             58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
              Around[0.8717062863197803, 0.01777595950885693], 
              "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.10702789819239966`, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 374688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3301382275974658, 0.02068135393911543]}, 
              "AccuracyHistory" -> {
                Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
              Around[0.7363490438369396, 0.017031507261842195`], 
              "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.3231968082428875`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 338064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6791528095168373, 0.027387263849560993`]}, 
              "AccuracyHistory" -> {
                Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
              Around[0.4863596829810406, 0.04278093185210315], 
              "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 2744, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.180492238404206, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5444439372449126, 
              "TrainingMemory" -> 322133.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.508549842629893, 0.04605766705211905], 
                Around[3.771470810362135, 0.12018564135103059`]}, 
              "AccuracyHistory" -> {
                Around[0.5280828090172973, 0.013434097226343747`], 
                Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
             Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
             9.109108405185806|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5038386117534089, 0.041784890614198204`], "Accuracy" -> 
              Around[0.828465928965194, 0.02654031530216917], 
              "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 400, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.7882946404845459, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 528184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5038386117534089, 0.029546379504437673`]}, 
              "AccuracyHistory" -> {
                Around[0.828465928965194, 0.018766836924992914`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
              Around[0.3679296647759494, 0.07392752974250799], 
              "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 2744,
               "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
              449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.148424842980697, 0.03780978285236538], 
                Around[1.4568966776552688`, 0.026077841742531138`]}, 
              "AccuracyHistory" -> {
                Around[0.2945557228909562, 0.012245543527860529`], 
                Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
              Around[0.6180757845356775, 0.05382602805907864], 
              "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 2632, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
              461714.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.155425119141791, 0.02396130422338247], 
                Around[1.0610392976248695`, 0.02621811203957636]}, 
              "AccuracyHistory" -> {
                Around[0.5650696245779578, 0.013556795434539574`], 
                Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23257721592841687`, 0.03163453421313113], "Accuracy" -> 
              Around[0.908886547057971, 0.024356212382520913`], 
              "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 0.7369941836531197, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1045880, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23257721592841687`, 0.022368993661782865`]}, 
              "AccuracyHistory" -> {
                Around[0.908886547057971, 0.017222442939700294`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
             Around[0.23257721592841687`, 0.03163453421313113], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1045880, "TrainingTime" -> 
             1.4937384274690055`|>, "Index" -> 10|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
              Around[0.7457728338345587, 0.018472683364634448`], 
              "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.7509502414499094`, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 309112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8371599125387441, 0.047884777618598134`]}, 
              "AccuracyHistory" -> {
                Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
              Around[0.8882989940963734, 0.013145309817848845`], 
              "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.48100284988718467`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 469432, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2722926005782066, 0.022605846381320353`]}, 
              "AccuracyHistory" -> {
                Around[0.8882989940963734, 0.009295137712999018]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04678344173247784, 0.020786249475512084`], "Accuracy" -> 
              Around[0.9851396376350638, 0.010281268792086398`], 
              "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 3.8798539588000582`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 972672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04678344173247784, 0.014698097959569912`]}, 
              "AccuracyHistory" -> {
                Around[0.9851396376350638, 0.007269954882085916]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
              Around[0.502464111857925, 0.07130486561817233], 
              "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 2200, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.6637320197127625`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299269.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8332223163074313`, 0.08054167103388306], 
                Around[4.86043648706169, 0.16818929238262642`]}, 
              "AccuracyHistory" -> {
                Around[0.572995990979411, 0.015538960918031978`], 
                Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
             Around[3.3468294016845603`, 1.5153492244478233`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 299269.3333333333, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 11|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
              Around[0.762381947001795, 0.01642868812328819], 
              "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -1.7030510878983651`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 600016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7752070403907262, 0.03017334558439825]}, 
              "AccuracyHistory" -> {
                Around[0.762381947001795, 0.011616836777975974`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.39447704061745437`, 0.03234768531334908], "Accuracy" -> 
              Around[0.8594906763316973, 0.01476170763807768], 
              "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 1100, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.3625496870271967, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 675000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.39447704061745437`, 0.02287326764075762]}, 
              "AccuracyHistory" -> {
                Around[0.8594906763316973, 0.01043810357277798]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
              Around[0.9455603955460657, 0.019279136977717354`], 
              "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 1.404009915150804, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1142080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15855325263059325`, 0.025484079405049796`]}, 
              "AccuracyHistory" -> {
                Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
              Around[0.5116939418989973, 0.07010685788967808], 
              "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 2400, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              586421.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.521906370483909, 0.03515613181787799], 
                Around[1.5882755791735657`, 0.05563504596868172]}, 
              "AccuracyHistory" -> {
                Around[0.442311083421225, 0.014256465737770922`], 
                Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
             Around[1.5550909748287374`, 0.04454750436345691], "ModelMemory" -> 
             164368., "TrainingMemory" -> 586421.3333333333, "TrainingTime" -> 
             5.818068863066169|>, "Index" -> 12|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9007091827219887, 0.030008702121127984`], "Accuracy" -> 
              Around[0.6760965348587569, 0.018079481767156038`], 
              "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.8723329888169609`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9007091827219887, 0.02121935676445673]}, 
              "AccuracyHistory" -> {
                Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.43111245312757496`, 0.025345577264303743`], "Accuracy" -> 
              Around[0.8330426045067885, 0.015571490015669136`], 
              "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 1132,
               "ModelMemory" -> 58320, "ModelUtility" -> -0.4088030140985044, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 364536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.43111245312757496`, 0.01792202955667676]}, 
              "AccuracyHistory" -> {
                Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.1842923793671783, 0.025304164192749383`], "Accuracy" -> 
              Around[0.9457395297710746, 0.019169568233064083`], 
              "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 891920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1842923793671783, 0.01789274609295091]}, 
              "AccuracyHistory" -> {
                Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
              Around[0.43385363675367183`, 0.011415114317526467`], 
              "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 2472, 
              "ModelMemory" -> 58320., "ModelUtility" -> -3.5149737403880033`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 273418.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4396046101139186`, 0.029031135765925187`], 
                Around[2.475712680707863, 0.06775654619883521]}, 
              "AccuracyHistory" -> {
                Around[0.439498971976867, 0.014905537896345295`], 
                Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
             Around[1.9576586454108909`, 0.5187408468073508], "ModelMemory" -> 
             58320., "TrainingMemory" -> 273418.6666666666, "TrainingTime" -> 
             4.386881933034051|>, "Index" -> 13|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8419793893936219, 0.040743862542620725`], "Accuracy" -> 
              Around[0.7373831716775224, 0.01693418574125903], 
              "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.8856361050895067`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 782064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8419793893936219, 0.02881026149561968]}, 
              "AccuracyHistory" -> {
                Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
              Around[0.8250320562814308, 0.01594299951984108], 
              "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, "ModelUtility" -> -0.6112985333219293,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 848080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4432056724888078, 0.02238507759095115]}, 
              "AccuracyHistory" -> {
                Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.16858329728652338`, 0.029069351611494675`], "Accuracy" -> 
              Around[0.945560395546066, 0.01927913697771735], 
              "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 1.2824675838731772`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 1207096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.16858329728652338`, 0.020555135649183976`]}, 
              "AccuracyHistory" -> {
                Around[0.945560395546066, 0.013632408492368258`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
             Around[0.16858329728652338`, 0.029069351611494675`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
             "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3249962292171797`, 0.12170206901231112`], "Accuracy" -> 
              Around[0.793195580192614, 0.015828005629622638`], 
              "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300, 
              "ModelMemory" -> 164368, "ModelUtility" -> -2.7896299497840076`,
               "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 589096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3249962292171797`, 0.08605635828303838]}, 
              "AccuracyHistory" -> {
                Around[0.793195580192614, 0.011192090113365015`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 250, 
              "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 686536,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00044256629018744604`, "MeanCrossEntropy" -> 
             Around[0.3701221449474526, 0.03366489354688038], "ModelMemory" -> 
             164368, "TrainingMemory" -> 686536, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 15|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1227673790868702`, 0.10368611279141937`], "Accuracy" -> 
              Around[0.757173277714323, 0.018196954510351714`], 
              "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.342528378471589, 
              "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 309656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1227673790868702`, 0.07331715346968586]}, 
              "AccuracyHistory" -> {
                Around[0.757173277714323, 0.012867189931212827`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33220140414624993`, 0.047853257302163214`], "Accuracy" -> 
              Around[0.8965085805171233, 0.012697194170323252`], 
              "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.07288974716187491, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 510104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33220140414624993`, 0.03383736274022428]}, 
              "AccuracyHistory" -> {
                Around[0.8965085805171233, 0.00897827209987787]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.029497520149122013`, 0.01667491875741592], "Accuracy" -> 
              Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 4.7583398302297795`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 39.810717055349734`, 
              "TrainingMemory" -> 948200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.029497520149122013`, 0.011790948129103553`]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.2949671588281193`, 0.14749235577106196`], "Accuracy" -> 
              Around[0.5835796437000327, 0.02088503617561304], 
              "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -3.761313256061099, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 297120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2949671588281193`, 0.10429284493889672`]}, 
              "AccuracyHistory" -> {
                Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
             Around[2.2949671588281193`, 0.14749235577106196`], "ModelMemory" -> 
             62416, "TrainingMemory" -> 297120, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 16|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
              Around[0.7677501064780398, 0.00816276162917491], 
              "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 2664,
               "ModelMemory" -> 93800., 
              "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 386088.,
               "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.5973296386447973`, 0.09710009617968923], 
                Around[1.6944960008299512`, 0.10490120341267964`]}, 
              "AccuracyHistory" -> {
                Around[0.7682281016221508, 0.011537187632355594`], 
                Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33249143642424983`, 0.02780494761566639], "Accuracy" -> 
              Around[0.8613277396783116, 0.014507674452371017`], 
              "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 1132,
               "ModelMemory" -> 93800, "ModelUtility" -> 0.05248807658590138, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 502672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33249143642424983`, 0.01966106700957443]}, 
              "AccuracyHistory" -> {
                Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04443140001711353, 0.021314953380441544`], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.92776201569796, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 970336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04443140001711353, 0.01507194807598534]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00046938966244621503`, "MeanCrossEntropy" -> 
             Around[0.04443140001711353, 0.021314953380441544`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
             "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
              Around[0.7384665234825579, 0.010719276135332273`], 
              "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 2432, 
              "ModelMemory" -> 93800., "ModelUtility" -> -1.9350890275488193`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.37788092188698263`, 
              "TrainingMemory" -> 378786.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7726332524190396, 0.028941631998749596`], 
                Around[1.0060756456836646`, 0.05024424270156515]}, 
              "AccuracyHistory" -> {
                Around[0.7324400373766513, 0.0120571885743892], 
                Around[0.7444930095884645, 0.01307837056160318]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.34782344779765667`, 0.025712507033831242`], "Accuracy" -> 
              Around[0.8557374599745653, 0.014686070676875251`], 
              "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, 
              "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 250,
               "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.34782344779765667`, 0.018181488084928872`]}, 
              "AccuracyHistory" -> {
                Around[0.8557374599745653, 0.0103846201646034]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15276622770087278`, 0.028666652684449675`], "Accuracy" -> 
              Around[0.9498135082589592, 0.018508440411731872`], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 1.5673860415737628`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 907872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15276622770087278`, 0.02027038450709391]}, 
              "AccuracyHistory" -> {
                Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.15276622770087278`, 0.028666652684449675`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
             "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7753042739299817, 0.039969593621796584`], "Accuracy" -> 
              Around[0.7375401740439216, 0.01714466436223822], 
              "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 1300, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.637907986699601, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 461800, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7753042739299817, 0.02826277069124294]}, 
              "AccuracyHistory" -> {
                Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35554695739060116`, 0.027033696117590978`], "Accuracy" -> 
              Around[0.8470897173852533, 0.01508748965454944], 
              "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.08838018962147687,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 567400, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.35554695739060116`, 0.01911570984528502]}, 
              "AccuracyHistory" -> {
                Around[0.8470897173852533, 0.01066846624581379]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15410934185340477`, 0.03040532289461026], "Accuracy" -> 
              Around[0.9596068784743268, 0.016667152171683092`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 1.5363925902488362`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1024944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15410934185340477`, 0.0214998100029455]}, 
              "AccuracyHistory" -> {
                Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.15410934185340477`, 0.03040532289461026], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1024944, "TrainingTime" -> 
             2.891283046943182|>, "Index" -> 19|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.9025240498596048`, 0.17368396265702707`], "Accuracy" -> 
              Around[0.7888324315844696, 0.015739599038312638`], 
              "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -3.5329225623661613`,
               "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 780096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9025240498596048`, 0.12281310777813492`]}, 
              "AccuracyHistory" -> {
                Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
              Around[0.8854786750958584, 0.013351117434256547`], 
              "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, 
              "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 250, 
              "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
              837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6454807954277998, 0.062000766216747265`]}, 
              "AccuracyHistory" -> {
                Around[0.8854786750958584, 0.009440665674180743]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00022514047861176898`, "MeanCrossEntropy" -> 
             Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
             187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
             115.3099731077524|>, "Index" -> 20|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
              Around[0.5296860458536663, 0.019284927181766578`], 
              "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -2.44789502640578, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2036312536280331`, 0.01921988365429954]}, 
              "AccuracyHistory" -> {
                Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8399174549925484, 0.024903779896598206`], "Accuracy" -> 
              Around[0.7369045920343117, 0.018395727422659554`], 
              "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.7311181711686499`, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 351208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8399174549925484, 0.017609631642061807`]}, 
              "AccuracyHistory" -> {
                Around[0.7369045920343117, 0.0130077436054219]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
             Around[0.8399174549925484, 0.024903779896598206`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 351208, "TrainingTime" -> 
             2.4002626703166206`|>, "Index" -> 21|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
              Around[0.7313061583954904, 0.017144680944532857`], 
              "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.028995426006972, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 313112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9663976578750052, 0.05017890964418109]}, 
              "AccuracyHistory" -> {
                Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35008419981942934`, 0.024708646909891732`], "Accuracy" -> 
              Around[0.8568009346457361, 0.014673031432912107`], 
              "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> 
              0.0029327369312612817`, "TrainingSize" -> 250, "TrainingTime" -> 
              3.981071705534973, "TrainingMemory" -> 398384, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35008419981942934`, 0.017471651783928475`]}, 
              "AccuracyHistory" -> {
                Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.042170347467092334`, 0.016000630897312476`], 
              "Accuracy" -> Around[0.9907604816520923, 0.008121627376877738], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 825792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.042170347467092334`, 0.011314154610752645`]}, 
              "AccuracyHistory" -> {
                Around[0.9907604816520923, 0.00574285779246056]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
              Around[0.5804592460589959, 0.018783072828788897`], 
              "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
              "ModelMemory" -> 58320, "ModelUtility" -> -3.4638943660534287`, 
              "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.987919142262011, 0.07603787179768637]}, 
              "AccuracyHistory" -> {
                Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
             Around[1.987919142262011, 0.10753378955027475`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 299984, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 22|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9403941167153582, 0.030071559648660914`], "Accuracy" -> 
              Around[0.6590202792143492, 0.018327916017389055`], 
              "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.9641702588327155`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 318200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9403941167153582, 0.021263803748423883`]}, 
              "AccuracyHistory" -> {
                Around[0.6590202792143492, 0.01295979370091334]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.45576172147997035`, 0.02603166210338864], "Accuracy" -> 
              Around[0.8256280537105091, 0.015920374420882354`], 
              "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -0.525479429825631, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 420072, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45576172147997035`, 0.01840716479886297]}, 
              "AccuracyHistory" -> {
                Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
              Around[0.9385178062088241, 0.020368186136795634`], 
              "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 1.0349935743091963`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 933232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.20578142008052, 0.019371630008387233`]}, 
              "AccuracyHistory" -> {
                Around[0.9385178062088241, 0.01440248253779802]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041974250697322877`, "MeanCrossEntropy" -> 
             Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
             62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
             2.29662775876662|>, "Index" -> 23|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5041540185761222`, 0.12792697018320168`], "Accuracy" -> 
              Around[0.7491330451581357, 0.01676873732368961], 
              "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 1332,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5041540185761222`, 0.09045802811319117]}, 
              "AccuracyHistory" -> {
                Around[0.7491330451581357, 0.01185728787351688]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3551338319540449, 0.027278187743878263`], "Accuracy" -> 
              Around[0.8473263359267194, 0.015089820198610777`], 
              "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 1132,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 250, 
              "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 527408,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3551338319540449, 0.01928859153217609]}, 
              "AccuracyHistory" -> {
                Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
              Around[0.9895518014074794, 0.008620653342748424], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 4.258968427388813, 
              "TrainingSize" -> 1106, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 932288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.03734914821299343, 0.013125775259394882`]}, 
              "AccuracyHistory" -> {
                Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
              Around[0.46102332820255726`, 0.018987327336901637`], 
              "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 1372,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10, 
              "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.678346364097339, 0.08174114510413875]}, 
              "AccuracyHistory" -> {
                Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00029572208708069134`, "MeanCrossEntropy" -> 
             Around[2.678346364097339, 0.11559943601018015`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 449640, "TrainingTime" -> 
             18.983242383456506`|>, "Index" -> 24|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
              Around[0.7762423210420635, 0.014329340894644918`], 
              "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 2432, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              605098.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8208265202024376, 0.05283642239438791], 
                Around[1.4514603795294685`, 0.08835215155478726]}, 
              "AccuracyHistory" -> {
                Around[0.7878452988653784, 0.012263467049955281`], 
                Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, "ModelUtility" -> -0.2386147056327178,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 680424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.06082621292123911, 0.019650473295384628`], "Accuracy" -> 
              Around[0.9770146234585061, 0.012716008303818851`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.2838445796528624`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1099664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06082621292123911, 0.013894982920691632`]}, 
              "AccuracyHistory" -> {
                Around[0.9770146234585061, 0.008991575701254757]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.06082621292123911, 0.019650473295384628`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
             "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
              Around[0.7627369072147341, 0.011750893611347561`], 
              "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 2664, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              468021.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0095607638414457`, 0.05525446612282441], 
                Around[1.1842784010456864`, 0.07075909436910463]}, 
              "AccuracyHistory" -> {
                Around[0.7543389604118015, 0.011774622135660197`], 
                Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35804951443350097`, 0.026655439166062223`], "Accuracy" -> 
              Around[0.8488505284229317, 0.014960827173881168`], 
              "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
              527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35804951443350097`, 0.018848241789828087`]}, 
              "AccuracyHistory" -> {
                Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 3.3814381242084908`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 959184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.05985945373078884, 0.01350088664315196]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.05985945373078884, 0.01909313699480727], "ModelMemory" -> 
             101904, "TrainingMemory" -> 959184, "TrainingTime" -> 
             6.89353199975045|>, "Index" -> 26|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3358149900117273`, 0.12222648201044096`], "Accuracy" -> 
              Around[0.7862467400481814, 0.01602150238466662], 
              "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 1300, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.825724619026342, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 781952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3358149900117273`, 0.08642717427015836]}, 
              "AccuracyHistory" -> {
                Around[0.7862467400481814, 0.01132891298099421]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
              Around[0.8858609662855659, 0.013283721779471411`], 
              "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.3445805711537584`,
               "TrainingSize" -> 250, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 845640, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6317653258849528, 0.05961837551263815]}, 
              "AccuracyHistory" -> {
                Around[0.8858609662855659, 0.009393009749659667]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
             Around[0.6317653258849528, 0.08431311521662489], "ModelMemory" -> 
             187664, "TrainingMemory" -> 845640, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 27|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1154980744941485`, 0.034353683515180075`], "Accuracy" -> 
              Around[0.5814498430933545, 0.019088672339769665`], 
              "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 1332, 
              "ModelMemory" -> 93800, "ModelUtility" -> -2.347503593111097, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 386152, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1154980744941485`, 0.02429172257232034]}, 
              "AccuracyHistory" -> {
                Around[0.5814498430933545, 0.01349772965529921]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5546183182382579, 0.026395794652472045`], "Accuracy" -> 
              Around[0.8135685469111952, 0.016337844310188795`], 
              "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> -0.9566176476083332, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 451760, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5546183182382579, 0.01866464539357059]}, 
              "AccuracyHistory" -> {
                Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
              Around[0.9299868058195125, 0.021652291921408842`], 
              "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.7601699845170374, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 918608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23091679939394155`, 0.02259715579830503]}, 
              "AccuracyHistory" -> {
                Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041019731090850185`, "MeanCrossEntropy" -> 
             Around[0.23091679939394155`, 0.0319572042010208], "ModelMemory" -> 
             93800, "TrainingMemory" -> 918608, "TrainingTime" -> 
             1.3087789598585713`|>, "Index" -> 28|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
              Around[0.7681507374150377, 0.016318407378901893`], 
              "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 1332,
               "ModelMemory" -> 93800, "ModelUtility" -> -2.137795388853302, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 386256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9948450772059008, 0.05585599851339633]}, 
              "AccuracyHistory" -> {
                Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
              Around[0.8617176768356566, 0.014429545856984168`], 
              "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.052922354317971765`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 497976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3326799470819294, 0.018734832919486785`]}, 
              "AccuracyHistory" -> {
                Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07021180454193646, 0.026976812427827776`], "Accuracy" -> 
              Around[0.9710277520559213, 0.014250347362805026`], 
              "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.0477874334351047`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 966920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07021180454193646, 0.01907548700251455]}, 
              "AccuracyHistory" -> {
                Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
             Around[0.07021180454193646, 0.026976812427827776`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
             "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
              Around[0.7911413261337976, 0.015627505897240296`], 
              "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 2332,
               "ModelMemory" -> 187664., 
              "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
              774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.7558990910227044, 0.037970217663081576`], 
                Around[0.9594474328704059, 0.07043483754789011]}, 
              "AccuracyHistory" -> {
                Around[0.7779594452749371, 0.011355683387275856`], 
                Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
              Around[0.8389781853611775, 0.015335274506302916`], 
              "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4042669758821077, 0.022272205006115358`]}, 
              "AccuracyHistory" -> {
                Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.10406413363415194`, 0.020899367441681686`], "Accuracy" -> 
              Around[0.9736914348517792, 0.013553043838557063`], 
              "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 2.2363622110324752`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 1218600, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.10406413363415194`, 0.014778084440522468`]}, 
              "AccuracyHistory" -> {
                Around[0.9736914348517792, 0.009583449203962254]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
             Around[0.10406413363415194`, 0.020899367441681686`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
             "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 1382, 
      "PreprocessorEvaluationTime" -> 3.9375*^-6, "PreprocessorMemory" -> 
      94088, "InputDimension" -> 18, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.869215141896656`16.340197867844974*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
          "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
          "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 40|>, <|
         "TrainingSizes" -> 250, "TimeBudgets" -> 138.0795097872658, 
          "ElapsedTimes" -> 151.156252, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
          "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 21|>}, 
        
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
             Interval[{5, 
               DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
           5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
           8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
      "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
      "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, "Instant",
         "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9, 3.869210988494907*^9, 3.869211542035791*^9},
 CellLabel->
  "Out[421]=",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}},
 CellLabel->
  "In[422]:=",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "19034f41-be4d-4eaa-9650-6c15422c87b6"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"99.1", "0.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.1329479768786114846`3., 0.4991396165558288911`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"69.1", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.0751445086705189169`3., 2.4883140570071944353`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9564305105930941409`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0303164048540168762`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8957977008850603884`3.", "\", \"", 
                   "1.0170633203011278933`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8957977008850603884`3., 
                   ", ", 1.0170633203011278933`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0445471424083839287`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0316921409220950537`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "0.0188371394358061786`3."}], "\", \"", 
                   "0.107931424252574043`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -0.0188371394358061786`3.,
                    ", ", 0.107931424252574043`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"7.04`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.43`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKL96k7RRV8dY+KOjpDQbrV/Z9e/5HbLZ6
aH9Nxp6Fze2dvdmLST56Lm/tC4SvXDFReEnQvIdVIuvcH96yZ0ABxLvnafFu
1ROib+2tl7O8S9z4wr5rUTe/tvVtkv11gumH1M2Pr+13x6+w3LHlsb2OQUn3
hPJ9JJtT+e0aU/7Lt/Zlp+/u8Xv22v7VOq5H6pOe2gMAbTJnmQ==
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.9815950920245398`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9876543209876543}], 
                    Row[{"Recall = ", 0.975609756097561}], 
                    Row[{"FScore = ", 0.9815950920245398}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.012345679012345678`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0041841004184100415`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.012345679012345678`}], 
                    Row[{"Row fraction = ", 0.0041841004184100415`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9979035639412998`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.99581589958159}], 
                    Row[{"FScore = ", 0.9979035639412998}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.024390243902439025`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.024390243902439025`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.923076923076923`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8571428571428571}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.923076923076923}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{82, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.975609756097561}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{239, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.99581589958159}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9876543209876543}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{14, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8571428571428571}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["82", TraditionalForm]}, {2.5, 
                    FormBox["13", TraditionalForm]}, {1.5, 
                    FormBox["239", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["81", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["13", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["238", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["14", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
              "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
              "Doors" -> <|"Type" -> "Nominal"|>, 
              "Passengers" -> <|"Type" -> "Nominal"|>, 
              "Cargo" -> <|"Type" -> "Nominal"|>, 
              "Safety" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|
                  "FeatureNames" -> {
                    "PurchasePrice", "MaintenanceCost", "Doors", "Passengers",
                     "Cargo", "Safety"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 6|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 1382, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                    0.5381047338323698, 0.31349173058168534`}, {
                    0.2878959194482099, 
                    0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                    0.2578066194971254, 
                    0.4093083635172316, -0.7050063333319737, 
                    0.08206678121922453, -0.2152687718915405, 
                    0.46464274419035045`}, {
                    0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                    0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                    0.3669612074237795, -0.03875817355088801, 
                    0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                    0.5767907589006783, 0.1852877321886701, 
                    0.21134659605041434`, 0.33089384854127}}, 
                    "Precisions" -> {11.396708918937332`, 11.702295237769018`,
                     11.751709980827822`, 12.269447018561033`, 
                    12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                    None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 6, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 
                    1301520, "DataMemory" -> 446480, "FunctionMemory" -> 
                    62320, "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-1.5374646114340518`, \
-1.5374646114340518`, -1.4481495799387802`, -1.3901532053842829`, \
-1.3900959198753926`, -1.3059537438182822`, -1.239089852169043, \
-1.2261733685503937`, -1.2132739652746585`, -1.169323039076807, \
-1.1079994773194297`}, "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                    0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[7.816606057704673, 0.25703225729782303`], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5495059474424677337|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Index" -> {<|
                  "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                  2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                  "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                  "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.12314196676015854`, -0.861851692199707, 
                   0.10532767325639725`}, {
                   0.8298183679580688, -0.28949323296546936`, 
                   0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                   0.38437455892562866`, -0.8375512361526489, 
                   0.1422276645898819}}], 
                  RawArray["Real32",{{0., 0., 
                   0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                   0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                   0.4795919358730316}, {
                   0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                   0.2534555494785309, -0.4526385962963104}, {
                   0.3543681204319, -0.37547722458839417`, 
                   0.5876661539077759}, {-1.1276206970214844`, 
                   0.17602579295635223`, -1.0098364353179932`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.24657385051250458`, -0.8256815671920776, 
                   0.8846340179443359}, {0.6182233691215515, 
                   0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.34666627645492554`, -0.5679200291633606, 
                   0.10750995576381683`}, {
                   0.6412044167518616, -0.1759643256664276, 
                   0.6604856848716736}, {-0.8092290163040161, 
                   0.12987354397773743`, -1.1753407716751099`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                   0.12715618312358856`, 0.1291729062795639}, {
                   0.21379514038562775`, -0.6005780100822449, 
                   0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
                272386066020895428|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                   "very good" -> 4|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {4}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113,
            "unacceptable" -> 0.7012987012987013, "very good" -> 
           0.03896103896103896|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Acceptability", 
             "Order" -> {
              "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
               "Cargo", "Safety", "Acceptability"}|>], "PreferLabeled" -> 
          True, "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> 
       None, "ImputationStrategy" -> Automatic, "Prior" -> Automatic, 
       "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
       "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
       Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                    0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                    0.09347633272409439, 0.20684024691581726`, 
                    0.00729140592738986, -0.3824177384376526, 
                    0.2153223156929016, -0.46700865030288696`, 
                    0.21194063127040863`, 
                    0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                    0.07883942127227783, -0.375686913728714, 
                    0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                    0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                    0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                    0.1690395474433899, -0.28660914301872253`, 
                    0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                    0.17016777396202087`, -0.32100844383239746`, 
                    0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 18, "$InputDimensions" -> {18}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                   "], "Biases" -> 
                  RawArray["Real32",{-0.23329688608646393`, 
                    0.1376294195652008, 
                    0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                    0.1361909657716751, -0.07115011662244797, 
                    0.0030301439110189676`, 0.04029219597578049, 
                    0.05379099026322365, 
                    
                    0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                    0.0140318488702178, 
                    0.18612468242645264`, -0.17168177664279938`, 
                    0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                    0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                    0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                    0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                    0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                    0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "7" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                   "], "Biases" -> 
                  RawArray["Real32",{-0.30062639713287354`, 
                    0.12008462101221085`, 
                    0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                    0.09417349845170975, -0.10099706798791885`, 
                    0.08236243575811386, -0.2349618673324585, 
                    0.1114811822772026, 
                    0.2365228235721588, -0.1581137776374817, 
                    0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                    0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                    0.08413115888834, -0.2386404424905777, 
                    0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                    0.017599068582057953`, -0.16277392208576202`, 
                    0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                    0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                    0.048794329166412354`, -0.2748609185218811, 
                    0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                    0.15255072712898254`, -0.054961107671260834`, 
                    0.12484297901391983`, -0.013735197484493256`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "10" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1: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
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.18632154166698456`, -0.05518893152475357, 
                    0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                    0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                    0.12943300604820251`, 
                    0.21619535982608795`, -0.12615013122558594`, 
                    0.12520363926887512`, 0.1943180412054062, 
                    0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                    0.12467250972986221`, -0.3208949565887451, 
                    0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                    0.16070689260959625`, -0.07001221925020218, 
                    0.07522184401750565, 
                    0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                    0.24120552837848663`, -0.04254811629652977, 
                    0.19626277685165405`, 0.04852093756198883}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "11" -> <|
               "Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "12" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.18740198016166687`, -0.1249600350856781, 
                    0.03215433284640312, -0.2378043681383133}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
           19653.548073458904`|>, "InputType" -> "NumericalVector", 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "Mean" -> {0.23124615267859935`, -0.72822837729203, 
                 0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
                 0.10517240908924025`, -0.24024309043728495`, 
                 0.3074998656424723, 
                 0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
                 0.3879769949206493}, 
                "StandardDeviation" -> {0.42336656209659007`, 
                 0.2672799034098392, 0.07124798075524297, 
                 0.36989547912470067`, 0.17138659393602926`, 
                 0.5155818183543911, 0.688893371869374, 0.24977193740899778`, 
                 0.6403849334448501, 0.4897664046907167, 0.46819109868519837`,
                  0.43423173863577835`, 0.6276718952348702, 
                 0.28383206529853633`, 0.7719651260033509, 
                 0.09756213850198994, 0.2950767752080472, 
                 0.22147755480753964`}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
            Around[0.9926698116140742, 0.007247173785702781], 
            "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
            "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
            "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
            "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.021350027675851042`, 0.008527240234488089]}, 
            "AccuracyHistory" -> {
              Around[0.9926698116140742, 0.005124525728307819]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 4, "NumberOfParameters" -> 8600, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
                 Around[0.5039356498747214, 0.011280914837970198`], 
                 "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -5.255034068743364, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 474568., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[3.3682246428941447`, 0.11709052181782027`], 
                   Around[5.718797544659934, 0.1974406032409913]}, 
                 "AccuracyHistory" -> {
                   Around[0.4977980114632854, 0.013422541870627485`], 
                   Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
                 Around[0.7731731038259634, 0.010538572727576656`], 
                 "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 
                 2532, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
                 461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.0207920682675256`, 0.13567904919872614`], 
                   Around[1.989358115693642, 0.12729332292504641`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7666435334598815, 0.01212548962300386], 
                   Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
                 Around[0.8754721532521594, 0.013799020363039234`], 
                 "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.6640374106578726`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 580856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7727930479153965, 0.07355983104423623]}, 
                 "AccuracyHistory" -> {
                   Around[0.8754721532521594, 0.009757380872436296]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.021350027675851042`, 0.012059338789226588`], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 5.3529526868256205`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 1025056, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.021350027675851042`, 0.008527240234488089]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
                Around[0.021350027675851042`, 0.012059338789226588`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
                "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1638549337103177`, 0.10037145501929841`], 
                 "Accuracy" -> 
                 Around[0.5492390926678674, 0.023756280779855192`], 
                 "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 
                 1300, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -2.4356505013181984`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 315949.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0659744269130655`, 0.06346538833801657], 
                   Around[1.2617354405075698`, 0.023724306617050557`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5686355009414037, 0.0494049938117882], 
                   Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
                 Around[0.34906013350595955`, 0.01773043247078872], 
                 "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
                 288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.7284854644248697`, 0.024470278570364008`], 
                   Around[1.7449836721317225`, 0.02985267016659267]}, 
                 "AccuracyHistory" -> {
                   Around[0.333797137166834, 0.012654176408351573`], 
                   Around[0.364323129845085, 0.01286858453924453]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7297176649588678, 0.030635251566725513`], 
                 "Accuracy" -> 
                 Around[0.7731352673792209, 0.01749760840751051], 
                 "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.4608603411176038`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 430312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7297176649588678, 0.021662394126187413`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
                 Around[0.8462070332421717, 0.03062402709723611], 
                 "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.1999951890132391, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 882408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38327177587574507`, 0.029923508235575796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020558565549557822`, 
                "MeanCrossEntropy" -> 
                Around[0.38327177587574507`, 0.0423182311805343], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 882408, 
                "TrainingTime" -> 1.2870992522366111`|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.35435313401532587`, 0.026162924108051638`], 
                 "Accuracy" -> 
                 Around[0.8602959769418544, 0.016276096618821716`], 
                 "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35435313401532587`, 0.018499981052472317`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
                 Around[0.4905470789487266, 0.05942169230008629], 
                 "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 
                 2672, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -4.197660943845806, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 273552., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5949653673903932`, 0.05337852556796832], 
                   Around[3.769761211170389, 0.12190065068836999`]}, 
                 "AccuracyHistory" -> {
                   Around[0.549197732950539, 0.013394029354165352`], 
                   Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
                 Around[0.7442585992282589, 0.013337895880245353`], 
                 "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 
                 2632, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 308650.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7090566921048821, 0.029587871638874982`], 
                   Around[0.9267562156706394, 0.048804806717094945`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7339496000489554, 0.012070557593356287`], 
                   Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
                 Around[0.9791671208169963, 0.012128533944401654`], 
                 "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
                 "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
                 "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
                 "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.07118410180594256, 0.013542997191503502`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9791671208169963, 0.008576168597937634]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
                Around[0.07118410180594256, 0.01915269030340499], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 945064, 
                "TrainingTime" -> 6.2334652825440156`|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
                 Around[0.838474265252356, 0.01562338483938151], 
                 "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 
                 1100, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 
                 250, "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 845536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4150311982338223, 0.022874520429674614`]}, 
                 "AccuracyHistory" -> {
                   Around[0.838474265252356, 0.011047401365013764`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.9363303357963932`, 0.22063573174865092`], 
                 "Accuracy" -> 
                 Around[0.6016657435215405, 0.009931734042792198], 
                 "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 
                 2400, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -4.394526005243066, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.8628854898161876, "TrainingMemory" -> 
                 768069.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.7328302955198254`, 0.11030764480200886`], 
                   Around[3.1398303760729616`, 0.1343428411885501]}, 
                 "AccuracyHistory" -> {
                   Around[0.6013282055836575, 0.014050468348716146`], 
                   Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
                 Around[0.7771993076355267, 0.016090257916624478`], 
                 "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.4133613417100643`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1., "TrainingMemory" -> 768752, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0883077850611167`, 0.06546404015990553]}, 
                 "AccuracyHistory" -> {
                   Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
                Around[1.0883077850611167`, 0.09258013344187536], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 768752, 
                "TrainingTime" -> 16.33188643150958|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.06349687324568681, 0.020314194118190455`], 
                 "Accuracy" -> 
                 Around[0.9752187821898789, 0.013178658637319573`], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.1990832337140014`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 6.309573444801933, "TrainingMemory" -> 1031984, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06349687324568681, 0.014364304415312347`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9752187821898789, 0.009318718889391335]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
                 Around[0.5614696628952743, 0.02316984504064622], 
                 "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 
                 1900, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.375448364812931, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 588357.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.2425860137311924`, 0.09670887865815357], 
                   Around[3.472752094517207, 0.15761956845763322`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5412325518696653, 0.01645230430382249], 
                   Around[0.5817067739208833, 0.01550253065862414]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
                 Around[0.7822399753364762, 0.011053793618809461`], 
                 "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 
                 2632, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.09292339195906, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.9314427449080938, "TrainingMemory" -> 
                 599973.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.1299535489778723`, 0.07202244880796001], 
                   Around[1.862147339889153, 0.11678580277280175`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7898676324542127, 0.011253506706433129`], 
                   Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.42705750837440937`, 0.035076829136806445`], 
                 "Accuracy" -> 
                 Around[0.8446730233225903, 0.015135382766381485`], 
                 "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.5213181632194831, "TrainingSize" -> 250,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 668632, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.42705750837440937`, 0.024803063745157707`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
                Around[0.42705750837440937`, 0.035076829136806445`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
                "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.29713763668876286`, 0.029783149124946628`], 
                 "Accuracy" -> 
                 Around[0.8857231716276136, 0.013316951171936615`], 
                 "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.27080207566416914`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 518544, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.29713763668876286`, 0.02105986671133995]}, 
                 "AccuracyHistory" -> {
                   Around[0.8857231716276136, 0.00941650647840652]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
                 Around[0.4534728434064575, 0.03657154854139636], 
                 "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 
                 2200, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -4.7036563931676705`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.5848931924611134`, "TrainingMemory" -> 
                 372712., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.8582879282812748`, 0.09593272842945073], 
                   Around[4.168810776492888, 0.14832220789749126`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4184413958301533, 0.015453697183599058`], 
                   Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
                 Around[0.769971120234303, 0.0162893024591907], 
                 "EvaluationTime" -> 0.00006291890573589659, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2977572298050588`, 0.07725242580096887]}, 
                 "AccuracyHistory" -> {
                   Around[0.769971120234303, 0.01151827622969245]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
                Around[1.2977572298050588`, 0.1092514282939514], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 386192, 
                "TrainingTime" -> 25.884295625347566`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5879853515835944`, 0.14718023198397873`], 
                 "Accuracy" -> 
                 Around[0.7939162815913106, 0.015646642549432373`], 
                 "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -3.152069743372218, "TrainingSize" -> 50, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 600288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5879853515835944`, 0.10407214009248054`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
                 Around[0.5705716928210636, 0.02387696402198573], 
                 "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 
                 2100, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.803632164263322, "TrainingSize" -> 10, 
                 "TrainingTime" -> 5.444439372449127, "TrainingMemory" -> 
                 583613.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.6845044721043254`, 0.10447663667270932`], 
                   Around[4.364677185562806, 0.2100094842353753]}, 
                 "AccuracyHistory" -> {
                   Around[0.5492372585429602, 0.014247131834686502`], 
                   Around[0.591906127099167, 0.01628060211969826]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38151664752165954`, 0.03977608365046414], 
                 "Accuracy" -> 
                 Around[0.8740940349402928, 0.013875001085229821`], 
                 "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38151664752165954`, 0.028125938478286556`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8740940349402928, 0.009811107356336711]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00037881779653037317`, 
                "MeanCrossEntropy" -> 
                Around[0.38151664752165954`, 0.03977608365046414], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 683480, 
                "TrainingTime" -> 92.6247680155231|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2846789544300572`, 0.10135837559026044`], 
                 "Accuracy" -> 
                 Around[0.7374636238433064, 0.017014953179959547`], 
                 "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.6005267903937916`, "TrainingSize" -> 50,
                  "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 341168, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2846789544300572`, 0.07167119470992618]}, 
                 "AccuracyHistory" -> {
                   Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
                 Around[0.5152833374237896, 0.07249298936486862], 
                 "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 
                 2744, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -5.074385087421649, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 295925.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.5190643035821725`, 0.1028129894230038], 
                   Around[5.812425858174743, 0.191466359358563]}, 
                 "AccuracyHistory" -> {
                   Around[0.5871646538577457, 0.013267469359568705`], 
                   Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020244886234998508`, 
                "MeanCrossEntropy" -> 
                Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
                58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
                58.99948267602831|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
                 Around[0.8717062863197803, 0.01777595950885693], 
                 "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.10702789819239966`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 374688, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3301382275974658, 0.02068135393911543]}, 
                 "AccuracyHistory" -> {
                   Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
                 Around[0.7363490438369396, 0.017031507261842195`], 
                 "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.3231968082428875`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 338064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6791528095168373, 0.027387263849560993`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
                 Around[0.4863596829810406, 0.04278093185210315], 
                 "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.180492238404206, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5444439372449126, "TrainingMemory" -> 
                 322133.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.508549842629893, 0.04605766705211905], 
                   Around[3.771470810362135, 0.12018564135103059`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5280828090172973, 0.013434097226343747`], 
                   Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
                Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
                62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
                9.109108405185806|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5038386117534089, 0.041784890614198204`], 
                 "Accuracy" -> Around[0.828465928965194, 0.02654031530216917],
                  "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 
                 400, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.7882946404845459, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 528184, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5038386117534089, 0.029546379504437673`]}, 
                 "AccuracyHistory" -> {
                   Around[0.828465928965194, 0.018766836924992914`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
                 Around[0.3679296647759494, 0.07392752974250799], 
                 "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
                 449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.148424842980697, 0.03780978285236538], 
                   Around[1.4568966776552688`, 0.026077841742531138`]}, 
                 "AccuracyHistory" -> {
                   Around[0.2945557228909562, 0.012245543527860529`], 
                   Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
                 Around[0.6180757845356775, 0.05382602805907864], 
                 "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 
                 2632, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
                 461714.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.155425119141791, 0.02396130422338247], 
                   Around[1.0610392976248695`, 0.02621811203957636]}, 
                 "AccuracyHistory" -> {
                   Around[0.5650696245779578, 0.013556795434539574`], 
                   Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23257721592841687`, 0.03163453421313113], 
                 "Accuracy" -> 
                 Around[0.908886547057971, 0.024356212382520913`], 
                 "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 0.7369941836531197, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1045880, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23257721592841687`, 0.022368993661782865`]}, 
                 "AccuracyHistory" -> {
                   Around[0.908886547057971, 0.017222442939700294`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
                Around[0.23257721592841687`, 0.03163453421313113], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1045880, 
                "TrainingTime" -> 1.4937384274690055`|>, "Index" -> 10|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
                 Around[0.7457728338345587, 0.018472683364634448`], 
                 "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.7509502414499094`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 309112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8371599125387441, 0.047884777618598134`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
                 Around[0.8882989940963734, 0.013145309817848845`], 
                 "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.48100284988718467`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 469432, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2722926005782066, 0.022605846381320353`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8882989940963734, 0.009295137712999018]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04678344173247784, 0.020786249475512084`], 
                 "Accuracy" -> 
                 Around[0.9851396376350638, 0.010281268792086398`], 
                 "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 3.8798539588000582`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 972672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04678344173247784, 0.014698097959569912`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9851396376350638, 0.007269954882085916]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
                 Around[0.502464111857925, 0.07130486561817233], 
                 "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 
                 2200, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.6637320197127625`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299269.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.8332223163074313`, 0.08054167103388306], 
                   Around[4.86043648706169, 0.16818929238262642`]}, 
                 "AccuracyHistory" -> {
                   Around[0.572995990979411, 0.015538960918031978`], 
                   Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
                Around[3.3468294016845603`, 1.5153492244478233`], 
                "ModelMemory" -> 62416., "TrainingMemory" -> 
                299269.3333333333, "TrainingTime" -> 18.65727460278956|>, 
              "Index" -> 11|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
                 Around[0.762381947001795, 0.01642868812328819], 
                 "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -1.7030510878983651`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 600016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7752070403907262, 0.03017334558439825]}, 
                 "AccuracyHistory" -> {
                   Around[0.762381947001795, 0.011616836777975974`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.39447704061745437`, 0.03234768531334908], 
                 "Accuracy" -> 
                 Around[0.8594906763316973, 0.01476170763807768], 
                 "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 
                 1100, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.3625496870271967, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 675000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.39447704061745437`, 0.02287326764075762]}, 
                 "AccuracyHistory" -> {
                   Around[0.8594906763316973, 0.01043810357277798]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
                 Around[0.9455603955460657, 0.019279136977717354`], 
                 "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 1.404009915150804, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1142080, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15855325263059325`, 0.025484079405049796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
                 Around[0.5116939418989973, 0.07010685788967808], 
                 "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 
                 2400, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 586421.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.521906370483909, 0.03515613181787799], 
                   Around[1.5882755791735657`, 0.05563504596868172]}, 
                 "AccuracyHistory" -> {
                   Around[0.442311083421225, 0.014256465737770922`], 
                   Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
                Around[1.5550909748287374`, 0.04454750436345691], 
                "ModelMemory" -> 164368., "TrainingMemory" -> 
                586421.3333333333, "TrainingTime" -> 5.818068863066169|>, 
              "Index" -> 12|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9007091827219887, 0.030008702121127984`], 
                 "Accuracy" -> 
                 Around[0.6760965348587569, 0.018079481767156038`], 
                 "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.8723329888169609`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9007091827219887, 0.02121935676445673]}, 
                 "AccuracyHistory" -> {
                   Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.43111245312757496`, 0.025345577264303743`], 
                 "Accuracy" -> 
                 Around[0.8330426045067885, 0.015571490015669136`], 
                 "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.4088030140985044, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 364536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.43111245312757496`, 0.01792202955667676]}, 
                 "AccuracyHistory" -> {
                   Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.1842923793671783, 0.025304164192749383`], 
                 "Accuracy" -> 
                 Around[0.9457395297710746, 0.019169568233064083`], 
                 "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 891920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.1842923793671783, 0.01789274609295091]}, 
                 "AccuracyHistory" -> {
                   Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
                 Around[0.43385363675367183`, 0.011415114317526467`], 
                 "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 
                 2472, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -3.5149737403880033`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 273418.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.4396046101139186`, 0.029031135765925187`], 
                   Around[2.475712680707863, 0.06775654619883521]}, 
                 "AccuracyHistory" -> {
                   Around[0.439498971976867, 0.014905537896345295`], 
                   Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
                Around[1.9576586454108909`, 0.5187408468073508], 
                "ModelMemory" -> 58320., "TrainingMemory" -> 
                273418.6666666666, "TrainingTime" -> 4.386881933034051|>, 
              "Index" -> 13|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8419793893936219, 0.040743862542620725`], 
                 "Accuracy" -> 
                 Around[0.7373831716775224, 0.01693418574125903], 
                 "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.8856361050895067`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 782064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8419793893936219, 0.02881026149561968]}, 
                 "AccuracyHistory" -> {
                   Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
                 Around[0.8250320562814308, 0.01594299951984108], 
                 "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.6112985333219293, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 848080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4432056724888078, 0.02238507759095115]}, 
                 "AccuracyHistory" -> {
                   Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.16858329728652338`, 0.029069351611494675`], 
                 "Accuracy" -> Around[0.945560395546066, 0.01927913697771735],
                  "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 
                 276, "ModelMemory" -> 187664, "ModelUtility" -> 
                 1.2824675838731772`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.2589254117941673`, "TrainingMemory" -> 1207096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.16858329728652338`, 0.020555135649183976`]}, 
                 "AccuracyHistory" -> {
                   Around[0.945560395546066, 0.013632408492368258`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
                Around[0.16858329728652338`, 0.029069351611494675`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
                "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3249962292171797`, 0.12170206901231112`], 
                 "Accuracy" -> 
                 Around[0.793195580192614, 0.015828005629622638`], 
                 "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -2.7896299497840076`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 589096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3249962292171797`, 0.08605635828303838]}, 
                 "AccuracyHistory" -> {
                   Around[0.793195580192614, 0.011192090113365015`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 686536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00044256629018744604`, 
                "MeanCrossEntropy" -> 
                Around[0.3701221449474526, 0.03366489354688038], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 686536, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 15|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1227673790868702`, 0.10368611279141937`], 
                 "Accuracy" -> 
                 Around[0.757173277714323, 0.018196954510351714`], 
                 "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.342528378471589, "TrainingSize" -> 50, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 309656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1227673790868702`, 0.07331715346968586]}, 
                 "AccuracyHistory" -> {
                   Around[0.757173277714323, 0.012867189931212827`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33220140414624993`, 0.047853257302163214`], 
                 "Accuracy" -> 
                 Around[0.8965085805171233, 0.012697194170323252`], 
                 "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.07288974716187491, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 510104, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33220140414624993`, 0.03383736274022428]}, 
                 "AccuracyHistory" -> {
                   Around[0.8965085805171233, 0.00897827209987787]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.029497520149122013`, 0.01667491875741592], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 4.7583398302297795`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 39.810717055349734`, "TrainingMemory" -> 948200, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.029497520149122013`, 0.011790948129103553`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.2949671588281193`, 0.14749235577106196`], 
                 "Accuracy" -> 
                 Around[0.5835796437000327, 0.02088503617561304], 
                 "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -3.761313256061099, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 297120, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.2949671588281193`, 0.10429284493889672`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
                Around[2.2949671588281193`, 0.14749235577106196`], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 297120, 
                "TrainingTime" -> 58.99948267602831|>, "Index" -> 16|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
                 Around[0.7677501064780398, 0.00816276162917491], 
                 "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 
                 2664, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 
                 386088., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5973296386447973`, 0.09710009617968923], 
                   Around[1.6944960008299512`, 0.10490120341267964`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7682281016221508, 0.011537187632355594`], 
                   Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33249143642424983`, 0.02780494761566639], 
                 "Accuracy" -> 
                 Around[0.8613277396783116, 0.014507674452371017`], 
                 "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.05248807658590138, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 502672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33249143642424983`, 0.01966106700957443]}, 
                 "AccuracyHistory" -> {
                   Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04443140001711353, 0.021314953380441544`], 
                 "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.92776201569796, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 970336, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04443140001711353, 0.01507194807598534]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00046938966244621503`, 
                "MeanCrossEntropy" -> 
                Around[0.04443140001711353, 0.021314953380441544`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
                "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
                 Around[0.7384665234825579, 0.010719276135332273`], 
                 "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 
                 2432, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -1.9350890275488193`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.37788092188698263`, "TrainingMemory" -> 
                 378786.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7726332524190396, 0.028941631998749596`], 
                   Around[1.0060756456836646`, 0.05024424270156515]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324400373766513, 0.0120571885743892], 
                   Around[0.7444930095884645, 0.01307837056160318]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.34782344779765667`, 0.025712507033831242`], 
                 "Accuracy" -> 
                 Around[0.8557374599745653, 0.014686070676875251`], 
                 "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.34782344779765667`, 0.018181488084928872`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8557374599745653, 0.0103846201646034]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15276622770087278`, 0.028666652684449675`], 
                 "Accuracy" -> 
                 Around[0.9498135082589592, 0.018508440411731872`], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 93800, "ModelUtility" -> 
                 1.5673860415737628`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 907872, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15276622770087278`, 0.02027038450709391]}, 
                 "AccuracyHistory" -> {
                   Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.15276622770087278`, 0.028666652684449675`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
                "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7753042739299817, 0.039969593621796584`], 
                 "Accuracy" -> 
                 Around[0.7375401740439216, 0.01714466436223822], 
                 "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 
                 1300, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.637907986699601, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 461800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7753042739299817, 0.02826277069124294]}, 
                 "AccuracyHistory" -> {
                   Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35554695739060116`, 0.027033696117590978`], 
                 "Accuracy" -> 
                 Around[0.8470897173852533, 0.01508748965454944], 
                 "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08838018962147687, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 567400, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35554695739060116`, 0.01911570984528502]}, 
                 "AccuracyHistory" -> {
                   Around[0.8470897173852533, 0.01066846624581379]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15410934185340477`, 0.03040532289461026], 
                 "Accuracy" -> 
                 Around[0.9596068784743268, 0.016667152171683092`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 1.5363925902488362`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1024944, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15410934185340477`, 0.0214998100029455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.15410934185340477`, 0.03040532289461026], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1024944, 
                "TrainingTime" -> 2.891283046943182|>, "Index" -> 19|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.9025240498596048`, 0.17368396265702707`], 
                 "Accuracy" -> 
                 Around[0.7888324315844696, 0.015739599038312638`], 
                 "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -3.5329225623661613`, "TrainingSize" -> 50,
                  "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 780096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.9025240498596048`, 0.12281310777813492`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
                 Around[0.8854786750958584, 0.013351117434256547`], 
                 "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 
                 250, "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
                 837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6454807954277998, 0.062000766216747265`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8854786750958584, 0.009440665674180743]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00022514047861176898`, 
                "MeanCrossEntropy" -> 
                Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
                187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
                115.3099731077524|>, "Index" -> 20|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
                 Around[0.5296860458536663, 0.019284927181766578`], 
                 "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.44789502640578, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2036312536280331`, 0.01921988365429954]}, 
                 "AccuracyHistory" -> {
                   Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8399174549925484, 0.024903779896598206`], 
                 "Accuracy" -> 
                 Around[0.7369045920343117, 0.018395727422659554`], 
                 "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.7311181711686499`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 351208, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8399174549925484, 0.017609631642061807`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7369045920343117, 0.0130077436054219]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
                Around[0.8399174549925484, 0.024903779896598206`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 351208, 
                "TrainingTime" -> 2.4002626703166206`|>, "Index" -> 21|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
                 Around[0.7313061583954904, 0.017144680944532857`], 
                 "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.028995426006972, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 313112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9663976578750052, 0.05017890964418109]}, 
                 "AccuracyHistory" -> {
                   Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35008419981942934`, 0.024708646909891732`], 
                 "Accuracy" -> 
                 Around[0.8568009346457361, 0.014673031432912107`], 
                 "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, "ModelUtility" -> 
                 0.0029327369312612817`, "TrainingSize" -> 250, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 398384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35008419981942934`, 0.017471651783928475`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.042170347467092334`, 0.016000630897312476`], 
                 "Accuracy" -> 
                 Around[0.9907604816520923, 0.008121627376877738], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 825792, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.042170347467092334`, 0.011314154610752645`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9907604816520923, 0.00574285779246056]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
                 Around[0.5804592460589959, 0.018783072828788897`], 
                 "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
                 "ModelMemory" -> 58320, 
                 "ModelUtility" -> -3.4638943660534287`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.987919142262011, 0.07603787179768637]}, 
                 "AccuracyHistory" -> {
                   Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
                Around[1.987919142262011, 0.10753378955027475`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 299984, 
                "TrainingTime" -> 18.65727460278956|>, "Index" -> 22|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9403941167153582, 0.030071559648660914`], 
                 "Accuracy" -> 
                 Around[0.6590202792143492, 0.018327916017389055`], 
                 "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.9641702588327155`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 318200, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9403941167153582, 0.021263803748423883`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6590202792143492, 0.01295979370091334]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.45576172147997035`, 0.02603166210338864], 
                 "Accuracy" -> 
                 Around[0.8256280537105091, 0.015920374420882354`], 
                 "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.525479429825631, "TrainingSize" -> 250, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 420072, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.45576172147997035`, 0.01840716479886297]}, 
                 "AccuracyHistory" -> {
                   Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
                 Around[0.9385178062088241, 0.020368186136795634`], 
                 "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, "ModelUtility" -> 
                 1.0349935743091963`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 933232, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.20578142008052, 0.019371630008387233`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9385178062088241, 0.01440248253779802]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041974250697322877`, 
                "MeanCrossEntropy" -> 
                Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
                62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
                2.29662775876662|>, "Index" -> 23|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5041540185761222`, 0.12792697018320168`], 
                 "Accuracy" -> 
                 Around[0.7491330451581357, 0.01676873732368961], 
                 "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 
                 1332, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5041540185761222`, 0.09045802811319117]}, 
                 "AccuracyHistory" -> {
                   Around[0.7491330451581357, 0.01185728787351688]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3551338319540449, 0.027278187743878263`], 
                 "Accuracy" -> 
                 Around[0.8473263359267194, 0.015089820198610777`], 
                 "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 
                 250, "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3551338319540449, 0.01928859153217609]}, 
                 "AccuracyHistory" -> {
                   Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
                 Around[0.9895518014074794, 0.008620653342748424], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 101904, "ModelUtility" -> 
                 4.258968427388813, "TrainingSize" -> 1106, "TrainingTime" -> 
                 15.848931924611142`, "TrainingMemory" -> 932288, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.03734914821299343, 0.013125775259394882`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
                 Around[0.46102332820255726`, 0.018987327336901637`], 
                 "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.678346364097339, 0.08174114510413875]}, 
                 "AccuracyHistory" -> {
                   Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00029572208708069134`, 
                "MeanCrossEntropy" -> 
                Around[2.678346364097339, 0.11559943601018015`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 449640, 
                "TrainingTime" -> 18.983242383456506`|>, "Index" -> 24|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
                 Around[0.7762423210420635, 0.014329340894644918`], 
                 "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 
                 2432, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 605098.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8208265202024376, 0.05283642239438791], 
                   Around[1.4514603795294685`, 0.08835215155478726]}, 
                 "AccuracyHistory" -> {
                   Around[0.7878452988653784, 0.012263467049955281`], 
                   Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.2386147056327178, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 680424, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.06082621292123911, 0.019650473295384628`], 
                 "Accuracy" -> 
                 Around[0.9770146234585061, 0.012716008303818851`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.2838445796528624`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1099664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06082621292123911, 0.013894982920691632`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9770146234585061, 0.008991575701254757]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.06082621292123911, 0.019650473295384628`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
                "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
                 Around[0.7627369072147341, 0.011750893611347561`], 
                 "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 
                 2664, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 468021.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0095607638414457`, 0.05525446612282441], 
                   Around[1.1842784010456864`, 0.07075909436910463]}, 
                 "AccuracyHistory" -> {
                   Around[0.7543389604118015, 0.011774622135660197`], 
                   Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35804951443350097`, 0.026655439166062223`], 
                 "Accuracy" -> 
                 Around[0.8488505284229317, 0.014960827173881168`], 
                 "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35804951443350097`, 0.018848241789828087`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 3.3814381242084908`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 959184, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.05985945373078884, 0.01350088664315196]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.05985945373078884, 0.01909313699480727], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 959184, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 26|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3358149900117273`, 0.12222648201044096`], 
                 "Accuracy" -> 
                 Around[0.7862467400481814, 0.01602150238466662], 
                 "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 
                 1300, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.825724619026342, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 781952, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3358149900117273`, 0.08642717427015836]}, 
                 "AccuracyHistory" -> {
                   Around[0.7862467400481814, 0.01132891298099421]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
                 Around[0.8858609662855659, 0.013283721779471411`], 
                 "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3445805711537584`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 845640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6317653258849528, 0.05961837551263815]}, 
                 "AccuracyHistory" -> {
                   Around[0.8858609662855659, 0.009393009749659667]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
                Around[0.6317653258849528, 0.08431311521662489], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 845640, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 27|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1154980744941485`, 0.034353683515180075`], 
                 "Accuracy" -> 
                 Around[0.5814498430933545, 0.019088672339769665`], 
                 "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.347503593111097, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 386152, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1154980744941485`, 0.02429172257232034]}, 
                 "AccuracyHistory" -> {
                   Around[0.5814498430933545, 0.01349772965529921]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5546183182382579, 0.026395794652472045`], 
                 "Accuracy" -> 
                 Around[0.8135685469111952, 0.016337844310188795`], 
                 "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.9566176476083332, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 451760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5546183182382579, 0.01866464539357059]}, 
                 "AccuracyHistory" -> {
                   Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
                 Around[0.9299868058195125, 0.021652291921408842`], 
                 "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.7601699845170374, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 918608, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23091679939394155`, 0.02259715579830503]}, 
                 "AccuracyHistory" -> {
                   Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041019731090850185`, 
                "MeanCrossEntropy" -> 
                Around[0.23091679939394155`, 0.0319572042010208], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 918608, 
                "TrainingTime" -> 1.3087789598585713`|>, "Index" -> 28|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
                 Around[0.7681507374150377, 0.016318407378901893`], 
                 "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.137795388853302, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 386256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9948450772059008, 0.05585599851339633]}, 
                 "AccuracyHistory" -> {
                   Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
                 Around[0.8617176768356566, 0.014429545856984168`], 
                 "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.052922354317971765`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 497976, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3326799470819294, 0.018734832919486785`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07021180454193646, 0.026976812427827776`], 
                 "Accuracy" -> 
                 Around[0.9710277520559213, 0.014250347362805026`], 
                 "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
                 "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.0477874334351047`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 966920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.07021180454193646, 0.01907548700251455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
                Around[0.07021180454193646, 0.026976812427827776`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
                 Around[0.7911413261337976, 0.015627505897240296`], 
                 "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 
                 2332, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
                 774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.7558990910227044, 0.037970217663081576`], 
                   Around[0.9594474328704059, 0.07043483754789011]}, 
                 "AccuracyHistory" -> {
                   Around[0.7779594452749371, 0.011355683387275856`], 
                   Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
                 Around[0.8389781853611775, 0.015335274506302916`], 
                 "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4042669758821077, 0.022272205006115358`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.10406413363415194`, 0.020899367441681686`], 
                 "Accuracy" -> 
                 Around[0.9736914348517792, 0.013553043838557063`], 
                 "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276,
                  "ModelMemory" -> 187664, "ModelUtility" -> 
                 2.2363622110324752`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 2.51188643150958, "TrainingMemory" -> 1218600, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.10406413363415194`, 0.014778084440522468`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9736914348517792, 0.009583449203962254]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
                Around[0.10406413363415194`, 0.020899367441681686`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
                "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 
         1382, "PreprocessorEvaluationTime" -> 3.9375*^-6, 
         "PreprocessorMemory" -> 94088, "InputDimension" -> 18, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.869215141896656`16.340197867844974*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
             "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
             "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 
             40|>, <|"TrainingSizes" -> 250, "TimeBudgets" -> 
             138.0795097872658, "ElapsedTimes" -> 151.156252, 
             "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
             "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 
             21|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, 
       "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              2846111867015398573|>, 
            "f2" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, 
              "ID" -> 41728420326286313|>, 
            "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                Interval[{5, 
                  DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
            "f4" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
              536027689597629633|>, 
            "f5" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
              5753609278033805624|>, 
            "f6" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
              8080186329754682489|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
         "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
         "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|"Input" -> {{"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "high", 4, 4, "medium", "low"}, {
        "medium", "medium", 2, 2, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "high", "very high", 2, 4, "large", "low"}, {
        "high", "high", 4, 2, "small", "medium"}, {
        "low", "high", 3, 4, "large", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 4, "small", "medium"}, {
        "medium", "high", 4, 2, "medium", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "high", 3, 4, "small", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "high", 2, 2, "large", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "low", 4, 4, "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "medium"}, {
        "very high", "very high", 3, 4, "small", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "low", 4, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "medium", "very high", 3, 2, "small", "medium"}, {
        "high", "very high", 2, 2, "medium", "high"}, {
        "high", "medium", 4, 2, "large", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 4, "medium", "high"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "medium", "high", 4, 4, "medium", "medium"}, {
        "low", "high", 3, 2, "medium", "high"}, {
        "medium", "high", 2, 4, "large", "low"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "medium", 2, 2, "small", "medium"}, {
        "low", "very high", 2, 2, "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "low", 4, 2, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "medium", 4, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "high", 2, 4, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "very high", "low", 3, 4, "small", "high"}, {
        "low", "high", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "medium", "very high", 2, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "medium", 3, 2, "medium", "low"}, {
        "high", "high", 2, 4, "large", "high"}, {
        "high", "medium", 2, 4, "medium", "high"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "medium", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "high", 4, 4, "large", "medium"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "very high", 4, 4, "large", "low"}, {
        "low", "very high", 2, 2, "medium", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "medium", 2, 4, "small", "high"}, {"low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "medium", 3, 4, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "very high", "medium", 4, 4, "large", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {
        "low", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 4, "large", "high"}, {
        "high", "low", 3, 4, "medium", "high"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 2, 4, "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "low", "medium", 4, 4, "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 3, 4, "small", "medium"}, {
        "high", "medium", 2, 2, "large", "medium"}, {
        "medium", "high", 4, 2, "medium", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 2, 2, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "medium", 3, 4, "small", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "medium", "medium", 3, 4, "medium", "medium"}, {
        "high", "low", 2, 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "low", "medium", 3, 4, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 4, 2, "small", "high"}, {
        "very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "very high", 2, 2, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "low", 2, 4, "large", "medium"}, {
        "low", "medium", 4, 4, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {
        "high", "very high", 3, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "high", 4, 2, "medium", "low"}, {
        "high", "medium", 4, 4, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "medium", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "low", 4, 2, "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 3, 4, "large", "medium"}, {
        "very high", "medium", 4, 2, "large", "high"}, {
        "high", "high", 4, 2, "large", "medium"}, {
        "high", "medium", 2, 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "high", 4, 4, "small", "low"}, {
        "low", "low", 2, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "medium", 2, 4, "medium", "medium"}, {
        "medium", "medium", 3, 2, "large", "low"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "very high", 3, 2, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 4, "small", "high"}, {
        "low", "medium", 4, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "low", 4, 2, "small", "medium"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "very high", 3, 4, "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "large", "low"}, {
        "very high", "low", 4, 4, "large", "high"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 4, "medium", "high"}, {
        "medium", "very high", 4, 4, "small", "high"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "low", 3, 2, "large", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "very high", 4, 4, "large", "medium"}, {
        "high", "high", 3, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 2, 2, "large", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "medium", 4, 4, "large", "medium"}, {
        "medium", "very high", 2, 4, "medium", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 2, 2, "small", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 2, 2, "medium", "medium"}, {
        "medium", "low", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 2, "large", "high"}, {
        "very high", "very high", 4, 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 4, "small", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "medium", "medium", 2, 2, "medium", "high"}, {
        "very high", "very high", 4, 4, "medium", "high"}, {
        "medium", "very high", 4, 2, "large", "high"}, {
        "medium", "very high", 4, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "large", "medium"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 2, "large", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {
        "low", "high", 2, 4, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 4, "small", "medium"}, {
        "high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "high", "low", 2, 4, "large", "low"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 4, "medium", "medium"}, {
        "high", "high", 2, 4, "small", "medium"}, {
        "very high", "medium", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "medium", "low"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "medium", "low"}, {
        "low", "low", 4, 4, "small", "low"}, {
        "very high", "low", 3, 4, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 3, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 2, 2, "medium", "high"}, {
        "very high", "very high", 3, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "high", 4, 2, "medium", "high"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 4, 2, "medium", "low"}, {
        "medium", "very high", 4, 2, "small", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 4, 2, "small", "low"}, {
        "medium", "high", 3, 2, "medium", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "high", 3, 2, "large", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "very high", 2, 2, "medium", "medium"}, {
        "very high", "low", 2, 2, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "very high", "low", 2, 4, "small", "low"}, {
        "low", "low", 2, 2, "medium", "high"}, {
        "medium", "medium", 4, 4, "small", "low"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "high", 3, 2, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "very high", "very high", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 2, "medium", "low"}, {
        "medium", "high", 2, 2, "small", "medium"}, {
        "medium", "medium", 2, 4, "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "low", "very high", 3, 4, "medium", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "very high", "very high", 3, 4, "large", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "high", "low", 3, 2, "medium", "high"}, {
        "low", "high", 2, 4, "large", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "low", 2, 4, "small", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 3, 2, "large", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 4, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "low"}, {
        "high", "medium", 4, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "medium"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "low", 3, 2, "large", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "high"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}}, 
      "Output" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}|>, 
    "Predictions" -> {
     "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
      "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", "very good",
       "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", "very good", 
      "very good", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "very good", "good", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", "good", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable"}, 
    "LogProbabilities" -> CompressedData["
1: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
9XRNEKE4i9l9otgfv2sXmh9tWi3aJ2iuwyjz1xX9GQr7/Y8edMqmSY9Xb74y
Qe4LifGmRe9TrIDgYwevMsn2jZP+Q/KV79WkyLdrV4lq/6iarrqf+dxG2X+w
rwvQvjA9aCaan8LjBmX/bC8eTeyfn95/Sii1h9v9lwQ2JSzYk7ls64/lZ3GC
ywp2I/nwX55D+4eQfmc+Zfylrmh/hMLlKG+VrxycQ5Ff6RWUl9eNWaGKY2uW
UOJX178abAg/srQ/e/1k2Lbwn31rroaDb22EVStTghM84N0KZDe0bSbo/Mi9
d49yPhKm8NJhx+Ix7R3fXEnETgn8QefC1dPbF3vjd2oNFK1fgqHvR7X5Cz07
yPc/HhttFA7HTRR5/sebcIIb7roeCpn6hdmm+SG484C1LLbNFUgcbHED0/xR
dTabkV8rpt9HcUDuFknZ//sORiG5gkkIqmdNMqHEf/EKrUhYRNjprko/8CT4
2tRwmN1P2PeDFAnBBexGdP8mZ2HIPoTfmin6eR62NxQYPVr9k+g38a6dAobB
BkcgEHviOxm+R7HMuM984MXAXumze1Z49js9zpS3bkAgI221N4kyzi3V/UmW
yj/prnkU/5exytD85ZdxFF/5qwLU9QvSEnwGvH82qPxaKpOMm4CxLmWHAzMY
M3601YtEr29PfeAeuSGUBUmMCPszmBkGVhh2fohNAIm/luEBwDX9eGtF9VPc
+UjI+otfbMCs9cAbZaAHicebP/mAR1VHTNCaSbCn5Vus2UwmiUazA91BcLna
bvySf3G6s7whU28SEBg+bZcdCE0VY2PnuEOyr0auRqASf629RjjXZiq+bW8i
M/gWEUf3JooOTfUgkX9RjPJ/2qETyG7kzRaU/I7uvxHZLytyEpK/YkIUxb+x
NtdY8HOHiSbdDPjDnCdeVxAOZ8f8WluknYET5e0p3T4w85/K3NcXVuBmaVG5
wGMAgcmuo70RytYj/82pK0FxgtHwmaJf2dgJaNy6hyr9CJ7Pptz/iHz4CXBm
FNalxJnQrodxb5qHAztAqRxxpkZCcFpys+r++nUDiiv0BO8U9efvvfBG66lc
4o5QXH9cPT4JTCreciCK91W5kvafRGepBuOS1BsI7JJN8yMxy+SRB9meM1Ib
+a186GFKfBO1rUfxJYNvi/yUwVgXrb7/idrdUfwWrKlX7Q8nqfdPhzcZRkPD
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
     "], "CountMatrix" -> {{80, 0, 0, 2, 0}, {0, 13, 0, 0, 0}, {1, 0, 238, 0, 
     0}, {0, 0, 0, 12, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwt0KFOAgEAgOETvHndYnAyt2MGNpkkZYZjYzNoACYEIDhnMEExa3Qjsjkf
gAew6IZuBhPB4pwmghQ3SRJsBv0C4at/+NePu7XOQhAEFUKWiFhljZgsG+TY
pMA2O+ySUKLMPgfzXpU6TVq0OeKEU84454JLevS54poBN9xyx5B7HnjkiRHP
vPDKG++M+WDCJ19M+WbGD7/8kTIgzSIhEcuskCEmS54tChRJ2OOQBv+qkSTf

       "], {}, {}, {142, 188}, {}}, {{}, {19, 21, 27, 49, 62, 66, 70, 99, 109,
        207, 235, 250, 266}, {}, {}, {}}, {{107}, {}, CompressedData["
1:eJwl0ulrDgAAwOF3aBq7rNlsjL1b7bKx2oWZxRqzmc07bFOUFUXaHLkpdxQh
Uu4jc5Oj+IZcIZSUK5QjvqCQUMizfHj6/QO/YEtbqDUsEAh8pqOd6EwXwomg
G5FEEU0MsfQgjngSSKQXSSSTQj9SCZJGOhlkkU0OueQxkHwKKKSIYkoYQill
lFNBJaOooppaxlJHiAbGM5FGmmhmMlOYSgvTmM4MZjKLVtqYzRzmMo/5LGAh
i1jMEpayjOWsYCWrWM0a1rKO9WxgI5vYzBa2so3t7GAnu9jNHvayj/0c4CCH
OEw7RzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7zgIc8
4jFPeMoznvOCl7ziNW94yzve84GPfAr8f+8LX/nGd37wk1/85g9/6Zg0jHC6
EkF3IokimhhiiSOeniSQSBLJ9KYPKfQllSBppJNBJllkk0N/csljAPkUUEgR
xZQwiMGUMpQyhlHOcEZQQSUjqWI01dQwhlrqqGccIRqYQCNNNDOJf4h0Y6U=

       "], {}, {}}, {{}, {}, {}, {11, 73, 95, 103, 139, 152, 187, 234, 246, 
       273, 324, 334}, {}}}, 
    "ExtendedClasses" -> {"acceptable", "good", "unacceptable", "very good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006979190751445086, "SingleEvaluationTime" -> 
    0.00704475, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{3.86896617348654*^9, 3.868966311492532*^9, 
  3.8689668453138514`*^9, 3.869211547634626*^9},
 CellLabel->
  "Out[422]=",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],

Cell[BoxData[
 TemplateBox[{"753.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.868966455151699*^9, 3.868966522419289*^9, {3.868966572943582*^9, 
   3.868966625736467*^9}, 3.868966851157722*^9, 3.8692115560464487`*^9, 
   3.8692119399774446`*^9},
 CellLabel->
  "Out[438]=",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 3.868447512030362*^9}, {3.868964810263049*^9, 
  3.868964810772952*^9}},ExpressionUUID->"d293971e-29a8-48c6-9378-\
634a3d38a3fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"softWeights", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.868598558993527*^9, 3.8685985805202436`*^9}},
 CellLabel->
  "In[280]:=",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"softWeights", ",", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.868598583187772*^9, 3.8685985949050713`*^9}},
 CellLabel->
  "In[281]:=",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[
    Opacity[0.]], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[
     Opacity[0.]], RectangleBox[{-0.04, 0}, {-0.03, 64.},
      RoundingRadius->0], RectangleBox[{-0.03, 0}, {-0.02, 3256.},
      RoundingRadius->0], RectangleBox[{-0.02, 0}, {-0.01, 8446.},
      RoundingRadius->0], RectangleBox[{-0.01, 0}, {0., 22934.},
      RoundingRadius->0], RectangleBox[{0., 0}, {0.01, 565.},
      RoundingRadius->0], RectangleBox[{0.01, 0}, {0.02, 634.},
      RoundingRadius->0], RectangleBox[{0.02, 0}, {0.03, 568.},
      RoundingRadius->0], RectangleBox[{0.03, 0}, {0.04, 582.},
      RoundingRadius->0], RectangleBox[{0.04, 0}, {0.05, 521.},
      RoundingRadius->0], RectangleBox[{0.05, 0}, {0.06, 474.},
      RoundingRadius->0], RectangleBox[{0.06, 0}, {0.07, 410.},
      RoundingRadius->0], RectangleBox[{0.07, 0}, {0.08, 333.},
      RoundingRadius->0], RectangleBox[{0.08, 0}, {0.09, 314.},
      RoundingRadius->0], RectangleBox[{0.09, 0}, {0.1, 202.},
      RoundingRadius->0], RectangleBox[{0.1, 0}, {0.11, 134.},
      RoundingRadius->0], RectangleBox[{0.11, 0}, {0.12, 108.},
      RoundingRadius->0], RectangleBox[{0.12, 0}, {0.13, 140.},
      RoundingRadius->0], RectangleBox[{0.13, 0}, {0.14, 114.},
      RoundingRadius->0], RectangleBox[{0.14, 0}, {0.15, 107.},
      RoundingRadius->0], RectangleBox[{0.15, 0}, {0.16, 129.},
      RoundingRadius->0], RectangleBox[{0.16, 0}, {0.17, 140.},
      RoundingRadius->0], RectangleBox[{0.17, 0}, {0.18, 142.},
      RoundingRadius->0], RectangleBox[{0.18, 0}, {0.19, 123.},
      RoundingRadius->0], RectangleBox[{0.19, 0}, {0.2, 114.},
      RoundingRadius->0], RectangleBox[{0.2, 0}, {0.21, 131.},
      RoundingRadius->0], RectangleBox[{0.21, 0}, {0.22, 117.},
      RoundingRadius->0], RectangleBox[{0.22, 0}, {0.23, 128.},
      RoundingRadius->0], RectangleBox[{0.23, 0}, {0.24, 101.},
      RoundingRadius->0], RectangleBox[{0.24, 0}, {0.25, 116.},
      RoundingRadius->0], RectangleBox[{0.25, 0}, {0.26, 106.},
      RoundingRadius->0], RectangleBox[{0.26, 0}, {0.27, 125.},
      RoundingRadius->0], RectangleBox[{0.27, 0}, {0.28, 107.},
      RoundingRadius->0], RectangleBox[{0.28, 0}, {0.29, 114.},
      RoundingRadius->0], RectangleBox[{0.29, 0}, {0.3, 94.},
      RoundingRadius->0], RectangleBox[{0.3, 0}, {0.31, 138.},
      RoundingRadius->0], RectangleBox[{0.31, 0}, {0.32, 100.},
      RoundingRadius->0], RectangleBox[{0.32, 0}, {0.33, 94.},
      RoundingRadius->0], RectangleBox[{0.33, 0}, {0.34, 102.},
      RoundingRadius->0], RectangleBox[{0.34, 0}, {0.35, 87.},
      RoundingRadius->0], RectangleBox[{0.35, 0}, {0.36, 74.},
      RoundingRadius->0], RectangleBox[{0.36, 0}, {0.37, 66.},
      RoundingRadius->0], RectangleBox[{0.37, 0}, {0.38, 90.},
      RoundingRadius->0], RectangleBox[{0.38, 0}, {0.39, 73.},
      RoundingRadius->0], RectangleBox[{0.39, 0}, {0.4, 53.},
      RoundingRadius->0], RectangleBox[{0.4, 0}, {0.41, 56.},
      RoundingRadius->0], RectangleBox[{0.41, 0}, {0.42, 37.},
      RoundingRadius->0], RectangleBox[{0.42, 0}, {0.43, 54.},
      RoundingRadius->0], RectangleBox[{0.43, 0}, {0.44, 55.},
      RoundingRadius->0], RectangleBox[{0.44, 0}, {0.45, 31.},
      RoundingRadius->0], RectangleBox[{0.45, 0}, {0.46, 27.},
      RoundingRadius->0], RectangleBox[{0.46, 0}, {0.47, 24.},
      RoundingRadius->0], RectangleBox[{0.47, 0}, {0.48, 45.},
      RoundingRadius->0], RectangleBox[{0.48, 0}, {0.49, 57.},
      RoundingRadius->0], RectangleBox[{0.49, 0}, {0.5, 308.},
      RoundingRadius->0], RectangleBox[{0.5, 0}, {0.51, 258.},
      RoundingRadius->0], RectangleBox[{0.51, 0}, {0.52, 27.},
      RoundingRadius->0], RectangleBox[{0.52, 0}, {0.53, 29.},
      RoundingRadius->0], RectangleBox[{0.53, 0}, {0.54, 12.},
      RoundingRadius->0], RectangleBox[{0.54, 0}, {0.55, 20.},
      RoundingRadius->0], RectangleBox[{0.55, 0}, {0.56, 14.},
      RoundingRadius->0], RectangleBox[{0.56, 0}, {0.57, 13.},
      RoundingRadius->0], RectangleBox[{0.57, 0}, {0.58, 15.},
      RoundingRadius->0], RectangleBox[{0.58, 0}, {0.59, 13.},
      RoundingRadius->0], RectangleBox[{0.59, 0}, {0.6, 17.},
      RoundingRadius->0], RectangleBox[{0.6, 0}, {0.61, 16.},
      RoundingRadius->0], RectangleBox[{0.61, 0}, {0.62, 11.},
      RoundingRadius->0], RectangleBox[{0.62, 0}, {0.63, 25.},
      RoundingRadius->0], RectangleBox[{0.63, 0}, {0.64, 27.},
      RoundingRadius->0], RectangleBox[{0.64, 0}, {0.65, 29.},
      RoundingRadius->0], RectangleBox[{0.65, 0}, {0.66, 27.},
      RoundingRadius->0], RectangleBox[{0.66, 0}, {0.67, 23.},
      RoundingRadius->0], RectangleBox[{0.67, 0}, {0.68, 22.},
      RoundingRadius->0], RectangleBox[{0.68, 0}, {0.69, 23.},
      RoundingRadius->0], RectangleBox[{0.69, 0}, {0.7, 19.},
      RoundingRadius->0], RectangleBox[{0.7, 0}, {0.71, 19.},
      RoundingRadius->0], RectangleBox[{0.71, 0}, {0.72, 15.},
      RoundingRadius->0], RectangleBox[{0.72, 0}, {0.73, 15.},
      RoundingRadius->0], RectangleBox[{0.73, 0}, {0.74, 19.},
      RoundingRadius->0], RectangleBox[{0.74, 0}, {0.75, 12.},
      RoundingRadius->0], RectangleBox[{0.75, 0}, {0.76, 17.},
      RoundingRadius->0], RectangleBox[{0.76, 0}, {0.77, 22.},
      RoundingRadius->0], RectangleBox[{0.77, 0}, {0.78, 20.},
      RoundingRadius->0], RectangleBox[{0.78, 0}, {0.79, 28.},
      RoundingRadius->0], RectangleBox[{0.79, 0}, {0.8, 21.},
      RoundingRadius->0], RectangleBox[{0.8, 0}, {0.81, 14.},
      RoundingRadius->0], RectangleBox[{0.81, 0}, {0.82, 18.},
      RoundingRadius->0], RectangleBox[{0.82, 0}, {0.83, 7.},
      RoundingRadius->0], RectangleBox[{0.83, 0}, {0.84, 9.},
      RoundingRadius->0], RectangleBox[{0.84, 0}, {0.85, 9.},
      RoundingRadius->0], RectangleBox[{0.85, 0}, {0.86, 8.},
      RoundingRadius->0], RectangleBox[{0.86, 0}, {0.87, 8.},
      RoundingRadius->0], RectangleBox[{0.87, 0}, {0.88, 12.},
      RoundingRadius->0], RectangleBox[{0.88, 0}, {0.89, 12.},
      RoundingRadius->0], RectangleBox[{0.89, 0}, {0.9, 13.},
      RoundingRadius->0], RectangleBox[{0.9, 0}, {0.91, 9.},
      RoundingRadius->0], RectangleBox[{0.91, 0}, {0.92, 12.},
      RoundingRadius->0], RectangleBox[{0.92, 0}, {0.93, 14.},
      RoundingRadius->0], RectangleBox[{0.93, 0}, {0.94, 10.},
      RoundingRadius->0], RectangleBox[{0.94, 0}, {0.95, 10.},
      RoundingRadius->0], RectangleBox[{0.95, 0}, {0.96, 11.},
      RoundingRadius->0], RectangleBox[{0.96, 0}, {0.97, 4.},
      RoundingRadius->0], RectangleBox[{0.97, 0}, {0.98, 8.},
      RoundingRadius->0], RectangleBox[{0.98, 0}, {0.99, 7.},
      RoundingRadius->0], RectangleBox[{0.99, 0}, {1., 8.},
      RoundingRadius->0], RectangleBox[{1., 0}, {1.01, 757.},
      RoundingRadius->0], RectangleBox[{1.01, 0}, {1.02, 4.},
      RoundingRadius->
       0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.061200000000000004`, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-0.04, 1.02}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.868598587213368*^9, 3.868598595534347*^9}, 
   3.8685995277293787`*^9, 3.868600221413623*^9, 3.868602949041443*^9, 
   3.868604296907655*^9, 3.8686706335951767`*^9, 3.868672097574623*^9, 
   3.868681481840914*^9, 3.868947735099625*^9, 3.868948276385453*^9, 
   3.868959188370422*^9, 3.868961360146255*^9, 3.868963094406687*^9, 
   3.868965910434655*^9, 3.8690319681917677`*^9, 3.869034213800087*^9, 
   3.8690403778000517`*^9, 3.869042975607337*^9, 3.869043303143322*^9, 
   3.8691056830996943`*^9, 3.869107210252901*^9, 3.8692115670096397`*^9, 
   3.869219578998919*^9},
 CellLabel->
  "Out[281]=",ExpressionUUID->"14136e67-aec9-4e6f-98c4-59f2e2c8c8f2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 774, 15, 29, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1596, 47, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[1825, 55, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[2293, 66, 127762, 2374, 652, "Output",ExpressionUUID->"88d0bb22-b0c5-4c76-adec-32124738e303"]
}, Open  ]],
Cell[130070, 2443, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138600, 2650, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[138920, 2657, 2756, 68, 154, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[141679, 2727, 1775, 41, 195, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143491, 2773, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[143849, 2781, 6040, 94, 133, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[149892, 2877, 1441, 26, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[151336, 2905, 1091, 24, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152464, 2934, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[152822, 2942, 2084, 37, 133, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[154943, 2984, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[155402, 2993, 2095, 41, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[157522, 3038, 1074, 18, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[158599, 3058, 431139, 8028, 495, "Output",ExpressionUUID->"e800d8df-d535-47fd-87bd-a56d91fbac6a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[589787, 11092, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[590297, 11102, 919, 15, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[591219, 11119, 701, 16, 29, "Input",ExpressionUUID->"3da3f85d-50c5-45aa-934b-1a84fa5781af"],
Cell[CellGroupData[{
Cell[591945, 11139, 1162, 18, 51, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[593110, 11159, 1392, 20, 33, "Output",ExpressionUUID->"6ac9f4c6-d45c-445f-b737-bf94eb314421"]
}, Open  ]],
Cell[CellGroupData[{
Cell[594539, 11184, 1293, 30, 71, "Input",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],
Cell[595835, 11216, 1196, 17, 33, "Output",ExpressionUUID->"10c2f8e0-da5e-4cb2-bcb4-a08657853b84"]
}, Open  ]],
Cell[CellGroupData[{
Cell[597068, 11238, 570, 14, 32, "Input",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],
Cell[597641, 11254, 635, 10, 44, "Output",ExpressionUUID->"ff3d3a06-6629-47b2-a3ff-080da85711ab"]
}, Open  ]],
Cell[598291, 11267, 474, 9, 29, "Input",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[598802, 11281, 412, 6, 69, "Chapter",ExpressionUUID->"85881d34-aa2c-47a4-9cef-231d0c092462"],
Cell[CellGroupData[{
Cell[599239, 11291, 702, 15, 29, "Input",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],
Cell[599944, 11308, 215647, 3688, 68, "Output",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[815628, 15001, 346, 7, 29, "Input",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],
Cell[815977, 15010, 313627, 5620, 495, "Output",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1129641, 20635, 368, 7, 29, "Input",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],
Cell[1130012, 20644, 377, 8, 44, "Output",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1130438, 20658, 541, 8, 69, "Chapter",ExpressionUUID->"d293971e-29a8-48c6-9378-634a3d38a3fe"],
Cell[1130982, 20668, 322, 8, 29, "Input",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],
Cell[CellGroupData[{
Cell[1131329, 20680, 281, 6, 29, "Input",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],
Cell[1131613, 20688, 8581, 144, 254, "Output",ExpressionUUID->"14136e67-aec9-4e6f-98c4-59f2e2c8c8f2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

