(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1410042,      27261]
NotebookOptionsPosition[   1403929,      27150]
NotebookOutlinePosition[   1404367,      27167]
CellTagsIndexPosition[   1404324,      27164]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}},
 CellLabel->
  "In[362]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["DifferentiableHardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "DifferentiableHardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardeningLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardeningLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "NeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "DifferentiableHardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetTransformWeights", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetTransformWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralReshapeLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralReshapeLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["RandomBalancedNormalSoftBits", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "RandomBalancedNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "DifferentiableHardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomNormalSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "RandomNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["ExtractWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "ExtractWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanExpression", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetBooleanExpression", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralChain", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralChain", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomUniformSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "RandomUniformSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetNetArrays", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "GetNetArrays", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetBooleanFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralCount", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralCount", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Require", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "Require", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "GetWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralExactlyK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralExactlyK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBalanced", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "InitializeBalanced", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "SoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassify", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassify", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralLTEK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralLTEK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToOne", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "InitializeNearToOne", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Soften", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "Soften", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClassificationLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardClassificationLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassifyEvaluation", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassifyEvaluation", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToZero", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "InitializeNearToZero", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["HardClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassPrediction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassPrediction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeToConstant", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "InitializeToConstant", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["HardDropoutLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardDropoutLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassProbabilities", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassProbabilities", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LogisticClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "LogisticClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassScores", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassScores", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "NeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{
  3.86479111604138*^9, 3.8647911657240562`*^9, 3.864791620800887*^9, 
   3.86479194597997*^9, 3.86479198092934*^9, 3.864792204697258*^9, 
   3.864792687703233*^9, 3.864793105592959*^9, 3.864793526801218*^9, 
   3.864793732850697*^9, 3.864794507927494*^9, 3.864796071752219*^9, 
   3.864825438485825*^9, 3.864825531891514*^9, 3.8648260962141314`*^9, 
   3.864830162877289*^9, 3.8648755408909893`*^9, 3.865049480919162*^9, 
   3.865050046751976*^9, 3.865051042066378*^9, 3.8650523426134*^9, 
   3.8650543558693867`*^9, 3.865058337414798*^9, 3.8650584086343327`*^9, 
   3.86505947338*^9, 3.86506885830449*^9, 3.865397062515942*^9, 
   3.86539822002991*^9, 3.865414037240362*^9, 3.865415448442546*^9, 
   3.865415610582356*^9, 3.8654172214829617`*^9, 3.865417469191354*^9, 
   3.865419590403018*^9, 3.865420075554387*^9, 3.865428054175325*^9, 
   3.8654793173710623`*^9, 3.8655665906709213`*^9, 3.865591995941038*^9, 
   3.865658579968223*^9, 3.865772215681147*^9, 3.865779562552833*^9, 
   3.8658370145359364`*^9, 3.86584060155225*^9, 3.8659992094486027`*^9, 
   3.866003652107215*^9, 3.8660161651613417`*^9, 3.8661754677644978`*^9, 
   3.866258657623454*^9, 3.866285693609187*^9, 3.86635057486532*^9, 
   3.866512485808078*^9, 3.866512816932197*^9, 3.866553529720395*^9, 
   3.8666025113336687`*^9, 3.866606144536639*^9, 3.866608546326232*^9, 
   3.866609704076623*^9, 3.8666137219288273`*^9, 3.86671285229326*^9, 
   3.866788776837541*^9, 3.866788812552528*^9, 3.866794689702251*^9, 
   3.8667979035574636`*^9, 3.8667996941084146`*^9, 3.866800686995532*^9, 
   3.866801936715271*^9, 3.866865563143631*^9, 3.8671595128431797`*^9, 
   3.867322056244096*^9, 3.8674794507502613`*^9, 3.8675828633257*^9, 
   3.867669743397482*^9, 3.867732450434094*^9, 3.867751859422694*^9, 
   3.867752571591299*^9, 3.867811509870346*^9, 3.8678117360040903`*^9, 
   3.8678203831872883`*^9, 3.867843695133718*^9, 3.867850373374954*^9, 
   3.86800725388065*^9, 3.868015027015581*^9, 3.868070609148181*^9, 
   3.8680707782820997`*^9, 3.868071504515008*^9, 3.868078566976554*^9, 
   3.868079276409031*^9, 3.8680936161674767`*^9, 3.868332595482695*^9, 
   3.868343297990016*^9, {3.868434780605877*^9, 3.86843479524651*^9}, 
   3.868445566107071*^9, 3.868519876174618*^9, 3.86853009787873*^9, 
   3.868533409155756*^9, 3.868591470469123*^9, 3.868591573510869*^9, 
   3.8686703712738132`*^9, 3.868674802626226*^9, 3.868944309055069*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"8e0777b3-a7ff-408d-93a4-c379a9067373"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11075714196407037080580183225774366732531148768773845082424], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11075714196407037080580183225774366732531148768773845082424,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9, 3.8685300999400797`*^9, 3.868533465833148*^9, 
  3.868591722379105*^9, 3.868670373439299*^9, 3.868944316441147*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"97e716f5-e291-4891-968e-b1b7f7b73be3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "featureValues"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}, {3.868682465592621*^9, 3.868682467103612*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9, {
   3.8686824585003*^9, 3.86868246003918*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"140", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}, {
   3.868520025904859*^9, 3.868520026662962*^9}, {3.868520165374518*^9, 
   3.868520172724663*^9}, {3.868520227657476*^9, 3.8685202280400333`*^9}, {
   3.868520278697311*^9, 3.868520283147401*^9}, {3.8685206145298347`*^9, 
   3.8685206150078983`*^9}, {3.868537004723915*^9, 3.868537005683709*^9}, {
   3.8686716248609867`*^9, 3.86867162498657*^9}, {3.8689423409409943`*^9, 
   3.868942344276237*^9}, {3.868947806296569*^9, 3.868947806625355*^9}, 
   3.868955246204385*^9, {3.868957393208212*^9, 3.8689574013451433`*^9}, {
   3.868957440249872*^9, 3.8689574443738937`*^9}, {3.8689577953130703`*^9, 
   3.868957801168947*^9}, {3.868958026730661*^9, 3.8689580269562798`*^9}, {
   3.868960876079372*^9, 3.8689608783682137`*^9}, {3.868964831153708*^9, 
   3.868964831513155*^9}, {3.868965437993729*^9, 3.868965438129128*^9}},
 CellLabel->
  "In[391]:=",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->
  "In[392]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->
  "In[393]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"BatchSize", "->", "Automatic"}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}, {
   3.8685364797630873`*^9, 3.868536496883217*^9}, {3.868600076169417*^9, 
   3.868600076637474*^9}, {3.868600134889481*^9, 3.868600135284954*^9}, {
   3.868601255470386*^9, 3.8686012558943872`*^9}, {3.868602902814464*^9, 
   3.868602903232891*^9}, {3.868943377521962*^9, 3.868943381357031*^9}, {
   3.8689434141572866`*^9, 3.868943425164989*^9}, {3.868943586951866*^9, 
   3.8689436089616327`*^9}, {3.868944023717293*^9, 3.8689440271979637`*^9}, {
   3.868944083020088*^9, 3.868944086825481*^9}, {3.868947817163151*^9, 
   3.8689478172894077`*^9}, {3.868949946458611*^9, 3.868949960076432*^9}},
 CellLabel->
  "In[394]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainedSoftNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<TrainedNet\>\"", "->", 
       RowBox[{"NetDelete", "[", 
        RowBox[{
         RowBox[{"NetFlatten", "[", 
          RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}], ",", 
         "\"\<Loss/Error\>\""}], "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}},
 CellLabel->
  "In[395]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"trainedSoftNet", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}, {
   3.868964207787449*^9, 3.868964270803673*^9}},
 CellLabel->
  "In[396]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "Net",ExpressionUUID->"19d0793a-b864-44d5-8908-86d176fbf7db"],
                
                TextCell["Net"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"98.6", "0.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    98.5549132947976858077`3., 0.6425050497397866156`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265187726`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9488552429987394676`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0088046406310714476`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.9312459617365965725`3.", "\", \"", 
                   "0.9664645242608823628`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.9312459617365965725`3., 
                   ", ", 0.9664645242608823628`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0524990283624473877`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0092790911453186561`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.0339408460718100755`3.", "\", \"", 
                   "0.071057210653084707`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.0339408460718100755`3., 
                   ", ", 0.071057210653084707`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"4.85`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.14`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2BNLPzt4v0XW7Z29+tw70u0ub+09NrhelVZ8
aR9//3kMU8Nbe8+KF5Pfh7+yr8vPfPKl9SHR5sJoha8/XhhKvbGvqv6QqJn6
xP7Z3P0BO5YfwWkvIfMeVomsc394yx7m01kOEizzXr61jzItjGZ4/tp+/ou3
j75OforT/AU+Jg5h/G/tZ1st22k09YX9yTNy+wPO3CLZX7hoABHqesc=
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["16", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{16, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["248", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "248", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9880478087649402`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9939879759519037`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{248, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9880478087649402}], 
                    Row[{"FScore = ", 0.9939879759519037}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.028169014084507043`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00796812749003984`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.028169014084507043`}], 
                    Row[{"Row fraction = ", 0.00796812749003984}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["68", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9577464788732394`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9714285714285713`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{68, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9577464788732394}], 
                    Row[{"Recall = ", 0.9855072463768116}], 
                    Row[{"FScore = ", 0.9714285714285713}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.014084507042253521`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.1`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.014084507042253521`}], 
                    Row[{"Row fraction = ", 0.1}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.09090909090909091`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.09090909090909091}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.09090909090909091`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.014492753623188406`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.09090909090909091}], 
                    Row[{"Row fraction = ", 0.014492753623188406`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["9", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "9", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8181818181818182`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.9`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8571428571428572`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{9, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8181818181818182}], 
                    Row[{"Recall = ", 0.9}], 
                    Row[{"FScore = ", 0.8571428571428572}]}], "Tooltip"]& ]}, 
                   
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9880478087649402`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9880478087649402}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "69", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{69, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9855072463768116}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.9`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.9}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{16, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "248", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{248, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "71", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9577464788732394`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{71, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9577464788732394}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8181818181818182`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{11, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.8181818181818182}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["16", TraditionalForm]}, {2.5, 
                    FormBox["251", TraditionalForm]}, {1.5, 
                    FormBox["69", TraditionalForm]}, {0.5, 
                    FormBox["10", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["16", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["248", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["71", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["11", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Expression"|>, 
              "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
              "Doors" -> <|"Type" -> "Expression"|>, 
              "Passengers" -> <|"Type" -> "Expression"|>, 
              "Cargo" -> <|"Type" -> "Expression"|>, 
              "Safety" -> <|"Type" -> "Expression"|>|>, 
            "Output" -> <|
             "PurchasePrice" -> <|"Type" -> "Expression"|>, 
              "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
              "Doors" -> <|"Type" -> "Expression"|>, 
              "Passengers" -> <|"Type" -> "Expression"|>, 
              "Cargo" -> <|"Type" -> "Expression"|>, 
              "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
            MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> False,
             "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> <|
          "very good" -> 0.25, "unacceptable" -> 0.25, "acceptable" -> 0.25, 
           "good" -> 0.25|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> 
       MachineLearning`PackageScope`$BatchProcessing, 
       "Model" -> <|
        "Method" -> "Net", "Net" -> 
         NetGraph[<|
           "Type" -> "Graph", 
            "Inputs" -> <|
             "PurchasePrice" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"medium", "low", "very high", "high"}, 
                 "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                 "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                 "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"low", "very high", "high", "medium"}, 
                 "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                 "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                 "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
              NetEncoder["Class", <|"Labels" -> {4, 2, 3, 
                   Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                  "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4, 
                 "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
              NetEncoder["Class", <|"Labels" -> {4, 
                   Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"large", "medium", "small"}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"high", "low", "medium"}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
            "Outputs" -> <|
             "Output" -> 
              NetDecoder[
               "Class", <|
                "Labels" -> {
                  "very good", "unacceptable", "acceptable", "good"}, 
                 "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 4, 
                 "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
            "Nodes" -> <|
             "TrainedNet" -> <|
               "Type" -> "Graph", 
                "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                  NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                  NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                "Nodes" -> <|
                 "Net/SoftNet/1" -> <|
                   "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
QAZ3ppOpT3l0w4sysrt/b2b3h0rSrnhaxMsvcjSns9+OxYl9+PQi/3ISfDqN
oJk4do1vpAZmTiWaZk+JSfr3PAEzCL1WrYFtz1XRomsEzihbBFuWK2GjqTIO
NZNA/eZeuP12BwHCozvbvhOJAV0kudsPPDt2IBaUthPTuD5wdflUHPnSHhWr
lLHvpT/GXP6SKf8o3ty96QvFxVxfxIYzXMxlfLD1DzGX7zMptodvSwbTIy+K
4adr0qyGsxy7/HQX6t36jG3J3zBq7Tvs/NmMYV1ZKCNTiWMP9GePZ7/Gd+rP
MWIQn1We2YIOY/uy705dxrbRg3BOI0LpoWBsemGPd1b5MB1q0Tj70GLctDOQ
3L09AXe6VpHDIzWxNHi7qA/JfKWRY9QiPq1lYoZjvgNOO+yHyYEzUdgdv5W2
VsP2dB59KNSZtH2TY7h7s+9LH2ZuQz6jPd4erounC987g8nPOEMIs94CaycU
A0qkQlZkE1M8bResKLIG52s6xM87D17oZDI6Yiephl7i+OL8QyI02o6mjT54
htkAbYNDsNhuNw5evxtdE8zpPbJO2EPUqH34dZMYtcst4ldZSb4ivewln753
eS2qrclGWx19fEOywbD5DPbK9kaTlXnMz/wM5Kv5484dR0k064SnXSXRbfRM
zFsXiEtv8+nGqlXo7uGM360l6eQLq5Hj3PfjuCVkC4Z1+7lGZeH/dl3+bZpP
v16s9stne7nJ6y+f3UV4//b/9GvKz4r25ct3wLyTfPrNmnFoPkcbwyZq/eJ9
iB7dk9bkWYjSld22wi97CSrNt8WjuTIYntMb35wuJ6tn8unxV0xRY6k3mu67
Bbkez2DT9Cuk75Jx5JMFn/aqViWazhZEfNp1qv7oSDLOP4qZmW5OnT04C5ZM
DAPBoBhqs+pTJtrZCNwUZoPl2tMkQsYbYsZWMfI/hlAxL6XxWMR8jE85jnM2
H8YMl43okBiNG9LicNnyEtJEAn57D2e3cqwTryQ2Jj4YNTYY31fOwYLu/pS/
vx1V2rvjiKFhGJhbiNqhw1iOgKOO9GczRbZDRhvftg1na4yHsyemDWVT1Aax
U0Ol2Mi6PmzdLDG22KkRrWLF2R+Zw9nVxXz2okE/tvmpBHs2uRdbkDyMrVKr
RMsrLXB6gAIpKOXRcf7vwGhRLCxI5dG+h+thqNZW6NguSYvHvoAeOpb1+pUX
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
GAt5uA1f72oXHd11EPyDAtICG+BugBGyCuvduOLnsqfMl6AqdhvUeQm8L+gE
VJnlsPn8MWh8owuWT3hwi/0knHusFXaIs/j02O8/0jJdtxWN0aWQUsxgOMyI
m1dXQOGdQzDbZhJ1+evA0BMFj8o9wN4chIGWBGzYc4Dttu6G2GYJamIKYG12
KLykd4gvJpXCjLgC043rQ+b54T2wkK7DwWije32mT+0SHd+0i1dfexVaRnxg
5lPhzMAqmE7rZAlHBU71Hnz7VlHsKy5nqswFpuQtq0HmfQKe7jSB/GKKO9c8
nyn7S97/oH8Z/526Xj/66eQc6h82U5PlMyrXaaGSmSiuopGO+BdSwkg1Pbex
ge6VR9IS6w7qtC3gl/Rl9GfAJuNpDoHHbDhIJfvb6P/QBISMXLp8dwZV5LVQ
/FEDJaX24K34c5QzSpSmeoue9dTT5PLQZtvzMpLKjmBpVhiV1xbQHe1ZUmmq
3ayZuYrnvuLJT0fUkAQu/6eeLFl4jf3bu5sa9aJ/vKMjyVLmwve0nE/7c5d5
QqKw3t1W12xkL3zry95ZH8AkefNYvlPCIn3C2MQVH3b1c19mHZKxJmcge/vn
e9HpypVs7weR7nmsz4y67Se1nQ9cl7FxlRd38D80YfuZX+B3NzFEjA==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{11760}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {11760}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{11760}, NeuralNetworks`RealT]|>|>,
                   "Net/SoftNet/2" -> <|
                   "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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

                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {560}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>|>, 
                  "Net/SoftNet/3" -> <|
                   "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
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

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {11760},
                     "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{11760}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{11760}, NeuralNetworks`RealT]|>|>,
                   "Net/SoftNet/4" -> <|
                   "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
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

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {560}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>|>, 
                  "Net/SoftNet/5" -> <|
                   "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{560, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{11760}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{560, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                  "Net/FeatureLayer/Catenate" -> <|
                   "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                  "Net/SoftNet/6" -> <|
                   "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{560, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{560, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                  "Net/SoftNet/7" -> <|
                   "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{560, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>|>, 
                  "Net/SoftNet/8" -> <|
                   "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>|>, 
                  "Net/SoftNet/9" -> <|
                   "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 140}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 140}, 
                    NeuralNetworks`RealT]|>|>, 
                  "Loss/SoftProbs" -> <|
                   "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 140}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                  "Loss/SoftmaxLayer" -> <|
                   "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                "Edges" -> {
                 NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                  NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                  NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                  NeuralNetworks`NetPath["Inputs", "Doors"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                  NeuralNetworks`NetPath["Inputs", "Passengers"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                  NeuralNetworks`NetPath["Inputs", "Cargo"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                  NeuralNetworks`NetPath["Inputs", "Safety"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/8", "Inputs", "Weights"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/6", "Inputs", "Weights"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Outputs", "Output"],
                   NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Outputs", "Output"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
              NeuralNetworks`NetPath["Inputs", "Cargo"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
              NeuralNetworks`NetPath["Inputs", "Doors"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
              NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
              NeuralNetworks`NetPath["Inputs", "Passengers"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
              NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
              NeuralNetworks`NetPath["Inputs", "Safety"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
         MachineLearning`MLProcessor["Identity"]|>, 
       "Log" -> <|
        "FunctionMemory" -> 226328, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 8, 17, 44, 25.347338`8.156507338412236}, 
           "Instant", "Gregorian", 1.]|>|>], 
    "TestSet" -> <|
     "Input" -> {{"medium", "high", 3, 4, "large", "medium"}, {
        "medium", "low", 4, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "large", "high"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 2, "small", "high"}, {
        "very high", "low", 2, 4, "medium", "high"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "very high", 2, 4, "medium", "high"}, {
        "very high", "medium", 2, 2, "medium", "high"}, {
        "low", "medium", 4, 2, "large", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "low", 2, 4, "medium", "medium"}, {
        "medium", "high", 4, 4, "small", "medium"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "low", "very high", 3, 2, "large", "medium"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "low", 3, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "medium", 3, 2, "medium", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "high", 3, 4, "small", "high"}, {
        "very high", "very high", 2, 2, "small", "low"}, {
        "high", "low", 4, 2, "medium", "medium"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 4, "large", "high"}, {
        "high", "very high", 4, 2, "large", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "medium", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 3, 4, "small", "low"}, {
        "high", "low", 2, 4, "large", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "high", 3, 4, "medium", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 2, 2, "medium", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 3, 4, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "high", 3, 4, "medium", "low"}, {
        "very high", "low", 4, 2, "large", "medium"}, {
        "very high", "high", 4, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "medium", "high", 3, 4, "small", "high"}, {
        "high", "medium", 3, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "high", 2, 2, "small", "low"}, {
        "medium", "low", 4, 2, "medium", "medium"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 2, "large", "medium"}, {
        "high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "low", 4, 4, "large", "medium"}, {
        "very high", "high", 3, 4, "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "very high", 3, 2, "large", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "very high", "high", 4, 4, "large", "low"}, {
        "high", "low", 2, 2, "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "high", "high", 2, 2, "large", "medium"}, {
        "medium", "high", 2, 4, "small", "high"}, {
        "medium", "medium", 2, 2, "large", "high"}, {
        "low", "medium", 2, 2, "medium", "low"}, {
        "high", "medium", 3, 2, "large", "medium"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 2, 4, "large", "medium"}, {
        "medium", "medium", 2, 4, "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "low", "low", 3, 4, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {
        "medium", "medium", 3, 2, "large", "high"}, {
        "high", "low", 4, 2, "small", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "high", 3, 2, "medium", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "high", 3, 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "medium", 2, 2, "large", "high"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "high", 4, 2, "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "low", 4, 2, "medium", "low"}, {
        "medium", "medium", 4, 4, "large", "high"}, {
        "medium", "medium", 3, 4, "small", "high"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 4, "medium", "low"}, {
        "very high", "medium", 4, 4, "small", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {
        "very high", "medium", 4, 2, "small", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 2, "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 4, "small", "high"}, {
        "very high", "high", 4, 4, "large", "medium"}, {
        "low", "high", 3, 2, "medium", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "low", 4, 4, "large", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "low", 4, 4, "large", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "very high", 2, 4, "small", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "very high", "low", 2, 4, "large", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 4, "large", "medium"}, {
        "very high", "high", 3, 2, "medium", "low"}, {
        "low", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 3, 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 2, 4, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 4, 2, "large", "low"}, {
        "very high", "medium", 3, 2, "small", "high"}, {
        "very high", "very high", 2, 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 2, "small", "high"}, {
        "medium", "medium", 4, 2, "small", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 4, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "medium", 3, 2, "large", "high"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "low", "low", 2, 2, "small", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 2, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 2, "small", "high"}, {
        "low", "high", 4, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "medium", "medium", 2, 2, "large", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 3, 2, "small", "low"}, {
        "high", "medium", 4, 4, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "medium", 3, 2, "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "low", 3, 4, "large", "high"}, {
        "very high", "low", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "high", "medium", 2, 4, "medium", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "very high", 2, 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 3, 4, "medium", "high"}, {
        "low", "medium", 2, 2, "large", "medium"}, {
        "medium", "low", 3, 4, "large", "high"}, {
        "medium", "high", 3, 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 3, 2, "medium", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "very high", "low", 4, 2, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 4, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "low", 2, 2, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "low", 2, 2, "small", "high"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "high", 3, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "high", "high", 3, 2, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "high", 3, 2, "small", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "medium", "very high", 3, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "low", 2, 4, "small", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "medium", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "low", "high", 2, 2, "small", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 4, "large", "low"}, {
        "medium", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {
        "low", "very high", 4, 4, "medium", "low"}, {"very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 3, 4, "large", "low"}, {
        "high", "low", 4, 4, "medium", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "medium", 3, 4, "medium", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "high", 4, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "low", 2, 4, "small", "low"}, {
        "medium", "low", 2, 4, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 2, 2, "small", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "very high", 3, 2, "large", "high"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "high", 2, 2, "medium", "low"}, {
        "high", "high", 2, 4, "medium", "low"}, {
        "high", "low", 4, 4, "medium", "high"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "low", 3, 2, "large", "medium"}, {
        "very high", "high", 3, 4, "large", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 3, 4, "large", "medium"}, {
        "medium", "low", 2, 2, "medium", "high"}, {
        "high", "medium", 2, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "low", "medium", 4, 2, "large", "high"}, {
        "very high", "high", 2, 4, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "low", "medium", 2, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "low"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "low", "high", 2, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}}, 
      "Output" -> {
       "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "good", "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "very good", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "unacceptable", "good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "very good", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "unacceptable",
         "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable"}|>, 
    "Predictions" -> {
     "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "good", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", "very good",
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "very good", "unacceptable", "good", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "good", "unacceptable", "very good", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", "good", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable"}, "LogProbabilities" -> CompressedData["
1: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
ZxM6
     "], "CountMatrix" -> {{16, 0, 0, 0, 0}, {0, 248, 2, 1, 0}, {0, 0, 68, 1, 
     0}, {0, 0, 1, 9, 0}}, 
    "IndicesMatrix" -> {{{3, 94, 122, 134, 157, 159, 165, 210, 223, 241, 250, 
       262, 282, 296, 314, 339}, {}, {}, {}, {}}, {{}, CompressedData["
1:eJwN0mlrCAAAANBZG2aH2cFms7Ntho3MbMO2tnawNglrRsLIlSM3OXKWO3IU
SfjgSO77KHeSI6KcH0SOhCRCjrwP7x+81KapA6c0CwgI+EkgQQTTnBBaEUoY
4UQQSRTRxBBLW+KIpz0JJJJEMimkkkY6GWSSRUeyySGXbnQnj3wKKKSIXvSm
mBJKKaOcCiqpopq+1FBLHf0ZwCDqaWAIjQxlGMMZwUhG0cRoxjCWcYxnAhOZ
xGSmMZ0ZzGQWs5nDXOYxnwUsZBGLWcJSlrGcFaxkFatZw1rWsZ4NbGQTm9nC
VraxnR3sZBe72cNe9rGfAxzkEIc5wlGOcZwTnOQUpznDWc5xngtc5BKXucJV
rnGdG9zkFre5w13ucZ8HPOQRj3nCU57xnBe85BWvecNb3vGeD3zkE5/5wle+
8Z0f/OI3f/jLPwIkDySIYFrQkhBCCSOcCFoTSRuiiCaGWNoRRzwJJNKBJJJJ
IZU00skgkyyy6URnupBDLl3Jowf59KSAQoroQzEllFJGORVUUkU1/aihljoG
U08DjfwHRNNnvA==
       "], {304, 344}, {52}, {}}, {{}, {}, {1, 7, 8, 15, 17, 23, 29, 36, 42, 
       43, 44, 47, 49, 54, 60, 67, 73, 75, 79, 81, 82, 92, 101, 107, 112, 127,
        135, 143, 146, 151, 152, 155, 163, 164, 170, 189, 190, 198, 202, 207, 
       213, 221, 222, 228, 233, 235, 243, 246, 248, 257, 259, 266, 278, 292, 
       305, 306, 315, 320, 323, 328, 331, 334, 335, 336, 337, 338, 342, 
       346}, {64}, {}}, {{}, {}, {86}, {84, 110, 111, 172, 200, 214, 225, 239,
        255}, {}}}, 
    "ExtendedClasses" -> {"very good", "unacceptable", "acceptable", "good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0008730317919075143, "SingleEvaluationTime" -> 
    0.00485025, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9, 
   3.8685204529294043`*^9, 3.8685215146011333`*^9, 3.8685301612497177`*^9, 
   3.868530590591856*^9, 3.86853261496434*^9, 3.8685338436228123`*^9, {
   3.868535643570589*^9, 3.868535653266458*^9}, 3.86853620504729*^9, 
   3.868536647435892*^9, 3.8685368910591183`*^9, 3.868536956624065*^9, 
   3.868537492992119*^9, {3.8685379158969793`*^9, 3.868537942476584*^9}, 
   3.8685921415849247`*^9, 3.868599486276321*^9, 3.86860013955028*^9, 
   3.8686009455378437`*^9, 3.868601165154408*^9, 3.868602872755411*^9, 
   3.868604168888167*^9, 3.8686705600345984`*^9, 3.868672040003127*^9, 
   3.868681397928339*^9, 3.868938938636381*^9, 3.8689425626275787`*^9, 
   3.868943546605094*^9, 3.86894388526086*^9, 3.868944114037065*^9, 
   3.868944544993232*^9, 3.868945583119274*^9, 3.868945795964314*^9, 
   3.868946090455439*^9, 3.868946301277932*^9, 3.868946812077159*^9, 
   3.868947529554852*^9, 3.868948234247651*^9, 3.868949916263268*^9, 
   3.86895035411582*^9, 3.868950591820963*^9, 3.868955715946851*^9, 
   3.8689590912506847`*^9, 3.868961292873067*^9, {3.868964211642971*^9, 
   3.868964271971294*^9}, 3.8689658659417048`*^9},
 CellLabel->
  "Out[396]=",ExpressionUUID->"61396991-0977-4292-903b-6c2bfc4adf23"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedSoftNet2", "=", 
  RowBox[{"HardNetTransformWeights", "[", 
   RowBox[{"trainedSoftNet", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"#", ">", "0.5"}], ",", "1", ",", "0"}], "]"}], "&"}], 
       ")"}], "/@", "#"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689387761034718`*^9, 3.8689388321917343`*^9}, {
  3.868942269083345*^9, 3.868942286923271*^9}, {3.868942617229506*^9, 
  3.86894262873884*^9}, {3.868942816172244*^9, 3.8689428718902693`*^9}, {
  3.868947592890992*^9, 3.868947595857012*^9}},
 CellLabel->
  "In[397]:=",ExpressionUUID->"260659aa-9626-49a2-b96d-2673b75262e7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Cargo\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-7.999999999999997, 
                    2.1435917623294274`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", 
                    "\"TrainedNet/Net/FeatureLayer/Catenate\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/FeatureLayer/Catenate", 
                    "Tooltip"]& ], TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-6.999999919615306, 
                    3.0000001875642783`}], 
                    
                    Offset[{0, -13.5}, {-6.999999919615306, 
                    3.0000001875642783`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Doors\"", TraditionalForm], 
                    Offset[{0, -7}, {-7.9999999732051, 1.000000214359176}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Maintenan..\"", "\"MaintenanceCost\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MaintenanceCost", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-7.999999946410203, 
                    2.0000002143591757`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Passengers\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-7.999999919615306, 
                    3.0000002143591753`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"PurchaseP..\"", "\"PurchasePrice\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "PurchasePrice", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-7.9999998928204095`, 
                    4.000000214359175}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Safety\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-7.9999998660255125`, 
                    5.000000214359175}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Loss/SoftmaxLayer\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Loss/SoftmaxLayer", 
                    "Tooltip"]& ], TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999998392306175, 
                    6.000000026794895}], 
                    
                    Offset[{0, -13.5}, {-0.9999998392306175, 
                    6.000000026794895}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {1.6076938217470707`*^-7, 
                    5.999999999999998}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Loss/SoftProbs\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Loss/SoftProbs", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.999999839230617, 
                    6.000000053589792}], 
                    
                    Offset[{0, -13.5}, {-1.999999839230617, 
                    6.000000053589792}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/6\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/6", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999839230616, 
                    6.00000016076938}], 
                    
                    Offset[{0, -13.5}, {-5.999999839230616, 
                    6.00000016076938}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/1\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/1", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-8.999999839230615, 
                    6.000000241154072}], 
                    
                    Offset[{0, -13.5}, {-8.999999839230615, 
                    6.000000241154072}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/3\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/3", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-7.9999998392306155`, 
                    6.000000214359175}], 
                    
                    Offset[{0, -13.5}, {-7.9999998392306155`, 
                    6.000000214359175}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/2\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/2", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999866025513, 
                    5.00000016076938}], 
                    
                    Offset[{0, -13.5}, {-5.999999866025513, 
                    5.00000016076938}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/4\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/4", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999866025513, 
                    5.000000133974483}], 
                    
                    Offset[{0, -13.5}, {-4.999999866025513, 
                    5.000000133974483}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/5\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/5", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-6.9999998392306155`, 
                    6.000000187564277}], 
                    
                    Offset[{0, -13.5}, {-6.9999998392306155`, 
                    6.000000187564277}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/8\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/8", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999998392306164`, 
                    6.000000107179586}], 
                    
                    Offset[{0, -13.5}, {-3.9999998392306164`, 
                    6.000000107179586}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/7\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/7", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999839230616, 
                    6.000000133974483}], 
                    
                    Offset[{0, -13.5}, {-4.999999839230616, 
                    6.000000133974483}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/9\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/9", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999839230617, 
                    6.000000080384689}], 
                    
                    Offset[{0, -13.5}, {-2.999999839230617, 
                    6.000000080384689}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{-5.217758092674727, 
                    1.7392528529019002`}, {-7.479056899628359, 
                    1.562829375887932}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.31622779143670915`, 0.9486832895772231}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{-4.919349484592803, 
                    2.459674907063233}, {-7.455901643484479, 
                    2.0881968009051284`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.4472136194660424,
                     0.8944271790168733}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337044`}, {-7.449999931673011, 
                    2.5500001996219823`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334008,
                     0.7071067622396938}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-7.449999919615307, 
                    3.000000199621982}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{3.889087400733703, 
                    3.8890871923183177`}, {-7.449999907557602, 
                    3.450000199621982}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396942, -0.7071068001334005}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{4.919349616406267, 
                    2.4596746434363035`}, {-7.455901594621123, 
                    3.9118035986551067`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.44721357153387337`, -0.8944272029829576}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337029`*^-7, 
                    5.499999999999998}, {-0.44999983923061765`, 
                    6.000000012057702}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-1.4499998392306173`, 
                    6.000000038852599}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox["\"21\"", TraditionalForm], 
                    
                    Offset[{-5.2177580926747265`, 
                    1.739252852901899}, {-6.47905681924367, 
                    4.562829349093034}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.31622779143670887`, 0.948683289577223}], 
                    InsetBox[
                    FormBox["\"11760\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-8.449999839230616, 
                    6.000000226416878}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox["\"560\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.449999866025513, 
                    5.000000146032186}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"11760\"", TraditionalForm], 
                    
                    Offset[{1.4737193820835151`*^-7, 
                    5.499999999999997}, {-7.449999839230616, 
                    6.000000199621981}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897856063913`*^-8}], 
                    InsetBox[
                    FormBox["\"560\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.889087400733703}, {-4.44999985128832, 
                    5.55000011923729}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334005,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"560\"", "\"21\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-6.449999839230616, 
                    6.000000172827084}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"560\"", "\"21\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.449999839230616, 
                    6.000000146032187}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"560\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-4.449999839230617, 
                    6.00000011923729}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"560\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-3.4499998392306166`, 
                    6.000000092442392}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"140\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.449999839230617, 
                    6.000000065647496}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.999999999999997, 
                    2.1435917623294274`*^-7}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Cargo\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Cargo", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999999732051, 
                    1.000000214359176}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Doors\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Doors", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.999999946410203, 
                    2.0000002143591757`}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"MaintenanceCost\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"MaintenanceCost", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.999999919615306, 
                    3.0000002143591753`}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Passengers\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Passengers", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999998928204095`, 
                    4.000000214359175}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"PurchasePrice\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"PurchasePrice", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999998660255125`, 
                    5.000000214359175}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Safety\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Safety", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999998392306175, 6.000000026794895}, {
                    1.6076938217470707`*^-7, 5.999999999999998}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.999999839230617, 
                    6.000000053589792}, {-0.9999998392306175, 
                    6.000000026794895}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.999999919615306, 
                    3.0000001875642783`}, {-5.999999839230616, 
                    6.00000016076938}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 21\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.999999839230615, 
                    6.000000241154072}, {-7.9999998392306155`, 
                    6.000000214359175}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 11760\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 11760\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999866025513, 
                    5.00000016076938}, {-4.999999866025513, 
                    5.000000133974483}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 560\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 560\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999998392306155`, 
                    6.000000214359175}, {-6.9999998392306155`, 
                    6.000000187564277}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 11760\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 11760\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999866025513, 
                    5.000000133974483}, {-3.9999998392306164`, 
                    6.000000107179586}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 560\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 560\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.9999998392306155`, 
                    6.000000187564277}, {-5.999999839230616, 
                    6.00000016076938}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
560\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 560\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999839230616, 
                    6.00000016076938}, {-4.999999839230616, 
                    6.000000133974483}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
560\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 560\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.6794897029117842`*^-8}]
                    }, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999839230616, 
                    6.000000133974483}, {-3.9999998392306164`, 
                    6.000000107179586}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 560\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 560\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998392306164`, 
                    6.000000107179586}, {-2.999999839230617, 
                    6.000000080384689}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 560\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 560\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999839230617, 
                    6.000000080384689}, {-1.999999839230617, 
                    6.000000053589792}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
4\[Times]140\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]140\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.479056899628359, 
                    1.562829375887932}, {-0.25, 0}, 
                    Offset[8], {1.000000080384691, 2.999999973205102}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Cargo\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Cargo", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.455901643484479, 
                    2.0881968009051284`}, {-0.25, 0}, 
                    Offset[8], {1.000000053589794, 1.9999999732051024`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Doors\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Doors", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.449999931673011, 
                    2.5500001996219823`}, {-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"MaintenanceCost\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"MaintenanceCost", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.449999919615307, 
                    3.000000199621982}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Passengers\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Passengers", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.449999907557602, 
                    3.450000199621982}, {-0.25, 0}, 
                    Offset[8], {0.999999973205103, -1.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"PurchasePrice\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"PurchasePrice", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.455901594621123, 
                    3.9118035986551067`}, {-0.25, 0}, 
                    Offset[8], {0.9999999464102061, -2.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Safety\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Safety", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999983923061765`, 
                    6.000000012057702}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499998392306173`, 
                    6.000000038852599}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.47905681924367, 
                    4.562829349093034}, {-0.25, 0}, 
                    Offset[8], {1.00000008038469, 2.9999999732051017`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 21\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.449999839230616, 
                    6.000000226416878}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 11760\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 11760\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.449999866025513, 
                    5.000000146032186}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 560\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 560\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.449999839230616, 
                    6.000000199621981}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794897856063926`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 11760\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 11760\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.44999985128832, 
                    5.55000011923729}, {-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.999999973205103}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 560\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 560\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.449999839230616, 
                    6.000000172827084}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
560\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 560\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.449999839230616, 
                    6.000000146032187}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
560\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 560\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999839230617, 
                    6.00000011923729}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 560\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 560\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499998392306166`, 
                    6.000000092442392}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 560\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 560\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.449999839230617, 
                    6.000000065647496}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
4\[Times]140\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]140\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.999999999999997, 2.1435917623294274`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Cargo\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Cargo", Bold]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-6.999999919615306, 3.0000001875642783`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 16], {-6.999999919615306, 
                    3.0000001875642783`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/FeatureLayer/Catenate\"", Bold, 
                    StripOnInput -> False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/FeatureLayer/Catenate", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.9999999732051, 1.000000214359176}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Doors\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Doors", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.999999946410203, 2.0000002143591757`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MaintenanceCost\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["MaintenanceCost", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.999999919615306, 3.0000002143591753`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Passengers\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Passengers", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.9999998928204095`, 4.000000214359175}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PurchasePrice\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["PurchasePrice", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.9999998660255125`, 5.000000214359175}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Safety\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Safety", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999998392306175, 6.000000026794895}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztWFtIk2EYdnO6zaFuc9N5SHSbp6lT2cmpqNOpOwiRUhkUoXkgCoVpSBdF
dROdLqqbLqKuuomC6EARFEGR0F1FEdVVFEQXRecDnZ5HNhiytWn/1oG98Prr
9/7/93zv+73f+72P5SNTA+PitLS0aRl+DAzPugKB4a2DSvyxcnJ648Tk2Kh3
cmZsYizQPJKOQQe0FCpJS0lKUpKS/1syMjJUpaWl4yaTaX9FRcU2rVbbl2hM
vV4/7fF4Xvv9/m/d3d1P8PzS39//w263nxeJROJEYNbU1OwjBrC+wt9Rjkkk
kmyLxXKS42VlZZuExszLy3NxbqvVetrtdj/Nzs42hWxSqbSANpvNdlZoXKfT
ec3n833Kzc21er3eD3g25eTkNFL5O3C/OxyOi0Jiwh8d58UeXtDpdCvoWyQ1
m81HhcRFjDs5L/Z3T3V19e6GhoZjGo3GvVCzsrL0QuLCxwHiVlVV7UK8r+bn
5/tCNuZVc3PzFaxpr5CYFKVSaSNua2vrTZ6hzMzMvJCtrq7uMG3FxcVrhcaF
iFpaWq5zfuKiTniKiopWMX85xvqRAMx5kclkJcA5F55HnZ2d9+HnmkRhhkt6
eroCZ7eO60gGXkr+TUHN1UEbk604Dzui1dtEKu7SIeiZZOuf3ueUJFcKCtgq
xc5Hg8EwIyQu7nQ/52UvhbvvRjTFPTgkJC7vm7a2tlvBvnSzkHPHEvQTWpfL
9Yi9eWFh4WAysdmj9fT0PGe81Wp1ezzfKBSKCvIJ9B8H+ESPa14KNvpiC/qa
t319fa9410d7D3sjR495nDyCvTX6+mfsexkvo9G4dSnY6KV6yYHIEeRy+bKF
drFYLGWeEZM5AZ+NHGe8Ojo67hF7KX4zz7DXDzlnSUnJuoX2ysrKnbTV1tYe
7O3tfRFuQ86vpg0xDywSVgTOdYrf1tfXH4m0JsT1XXt7+232sfQ7xF2o4G4b
gmd9djGg8GU7v+N84JgZC+0hfzDvFvobrcYsprcGR1jO3OC+ku9FWdf83Y1a
40VPP1deXj4Vib+Qp8eDSY6JPH6DM/SRXCHae+AKh4jLPh7xfk/OErKpVCon
+UuknIgkXFtXV9fjYB6t/9W7jC/fA/+8hNy9ExrnuWLNw7o/I68N8eCG7oVY
9bmpqekE44+z/TLIneYQ027+HwBruMuzRz4XD2Y4biwFR3nA91HLWokTZiP/
voz9sceL+TuCmq5hfcA+qZOBl5KU/E3yE7YM2js=
                    "], {{0, 29.333333333333332`}, {16., 0}}, {0, 255}, 
                    ColorFunction -> RGBColor, ImageResolution -> 135.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {16., 29.333333333333332`}, 
                    PlotRange -> {{0, 16.}, {0, 29.333333333333332`}}, 
                    ImageSize -> 16], TraditionalForm]], {-0.9999998392306175,
                     6.000000026794895}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Loss/SoftmaxLayer\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "SoftmaxLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Loss/SoftmaxLayer", Bold], 
                    Style[
                    SoftmaxLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{1.6076938217470707`*^-7, 5.999999999999998}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.999999839230617, 6.000000053589792}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Sum]\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-1.999999839230617, 
                    6.000000053589792}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Loss/SoftProbs\"", Bold, StripOnInput -> 
                    False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Total", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Loss/SoftProbs", Bold], 
                    HoldForm[
                    AggregationLayer[Total]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-5.999999839230616, 6.00000016076938}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-5.999999839230616, 
                    6.00000016076938}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/6\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/6", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-8.999999839230615, 
                    6.000000241154072}], 
                    
                    Offset[{-10.5, -10.5}, {-8.999999839230615, 
                    6.000000241154072}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-8.999999839230615, 
                    6.000000241154072}], 
                    
                    Offset[{10.5, 10.5}, {-8.999999839230615, 
                    6.000000241154072}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-8.999999839230615, 
                    6.000000241154072}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/1\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/1", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-7.9999998392306155`, 6.000000214359175}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-7.9999998392306155`, 
                    6.000000214359175}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/3\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/3", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-5.999999866025513, 
                    5.00000016076938}], 
                    
                    Offset[{-10.5, -10.5}, {-5.999999866025513, 
                    5.00000016076938}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-5.999999866025513, 5.00000016076938}], 
                    
                    Offset[{10.5, 10.5}, {-5.999999866025513, 
                    5.00000016076938}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-5.999999866025513, 
                    5.00000016076938}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/2\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/2", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-4.999999866025513, 5.000000133974483}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999866025513, 
                    5.000000133974483}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/4\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/4", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-6.9999998392306155`, 6.000000187564277}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-6.9999998392306155`, 
                    6.000000187564277}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/5\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/5", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-3.9999998392306164`, 6.000000107179586}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-3.9999998392306164`, 
                    6.000000107179586}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/8\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/8", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-4.999999839230616, 6.000000133974483}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Min\"", 
                    GrayLevel[0.33], Bold, 10, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999839230616, 
                    6.000000133974483}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/7\"", Bold, StripOnInput -> 
                    False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Min", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/7", Bold], 
                    HoldForm[
                    AggregationLayer[Min]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999839230617, 6.000000080384689}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-2.999999839230617, 
                    6.000000080384689}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/9\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/9", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxTTMoPSmViYGAQBmIQ/fc/CMgfSEqScgw+2mOXyDD71///0geur9CRZGDg
cDi5yvgfSL5xWZclA8MH+6mh6X9AfIfgozJA7Q4Q9fIH7MF8Dgfd1ed+gPjz
VybxMTAIOPwMZfqO4Is4WLFtWPn///v9RqFnGBkYJBxOnbxc8G9yq90/sDvE
HaSZb1wBMvanrZrBDJI/xmD2FSh+wOz/SS4QPwlsn+KBy//0BED8o2B5mPkS
Dr/A9sHUi0D5wgeYVv3lAPEh6qUPZIVM4wGp72HMefX/P/+BcyGG7Aj7YOol
HHrB8uwHZv1PYQXxAYjzj6k=
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 8, 8, 8, 8, 8, 21, 8, 21, 21, 21, 21, 21, 21,
                     21, 21, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {549.4999999999998, 370.00000147371924`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{27.999999999999957`, 26.5}, {25., 15.}},
                     ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"PurchasePrice\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"PurchasePrice\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"PurchasePrice"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"PurchasePrice\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"PurchasePrice"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"MaintenanceCost\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"MaintenanceCost\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"MaintenanceCost"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"MaintenanceCost\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"MaintenanceCost"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Doors\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Doors\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Doors"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Doors\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Doors"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Passengers\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Passengers\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Passengers"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Passengers\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Passengers"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Cargo\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Cargo\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Cargo"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Cargo\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Cargo"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Safety\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Safety\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Safety"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Safety\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Safety"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "TrainedNet/Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{11760}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{11760}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {11760}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{11760}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{560}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {560}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{560}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/3" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
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

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {11760},
                     "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{11760}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{11760}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/4" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
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

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {560}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{560}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{560}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/5" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{560, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{11760}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{560, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "TrainedNet/Net/SoftNet/6" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{560, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{560, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/7" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{560, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{560}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/8" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{560}, 
                    NeuralNetworks`RealT], "Weights" -> 
                    NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{560}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/9" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 140}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{560}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 140}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 140}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "PurchasePrice" -> <|"Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {
                    "\"medium\"", "\"low\"", "\"very high\"", "\"high\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                    "13.1.3"|>, 
                    "MaintenanceCost" -> <|
                    "Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {
                    "\"low\"", "\"very high\"", "\"high\"", "\"medium\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                    "13.1.3"|>, 
                    "Doors" -> <|"Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {4, 2, 3, 
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                     "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4,
                     "$Version" -> "13.1.3"|>, 
                    "Passengers" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                    "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                    False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                    "Cargo" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {"\"large\"", "\"medium\"", "\"small\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 3, "$Version" -> 
                    "13.1.3"|>, 
                    "Safety" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {"\"high\"", "\"low\"", "\"medium\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 3, "$Version" -> 
                    "13.1.3"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {
                    "\"very good\"", "\"unacceptable\"", "\"acceptable\"", 
                    "\"good\""}, "InputDepth" -> 1, "Multilabel" -> False, 
                    "Dimensions" -> 4, "$Rank" -> 0, "$Version" -> 
                    "13.1.3"|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input3"] -> NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input5"] -> NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input6"] -> NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/3", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/8", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/4", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/6", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/5", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/6", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/7", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/8", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/9", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftmaxLayer", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftProbs", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftmaxLayer", "Outputs", 
                    "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate"], 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftProbs"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/6"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/3"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/4"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/5"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/8"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/7"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/9"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate"], 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftProbs"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/6"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/3"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/4"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/5"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/8"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/7"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/9"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.868938834906114*^9, 3.868942290900338*^9, 3.868942630782495*^9, {
   3.868942845605949*^9, 3.8689428742107487`*^9}, 3.8689435525843678`*^9, 
   3.868943890786571*^9, 3.8689441215536537`*^9, 3.868944549704063*^9, 
   3.868945588071299*^9, 3.868945804268083*^9, 3.86894609599631*^9, 
   3.8689463034671392`*^9, 3.868946820777964*^9, 3.868947540776207*^9, 
   3.868947597268972*^9, 3.868948237569412*^9, 3.868950358586295*^9, 
   3.868955718961672*^9, 3.8689590939411716`*^9, 3.868961294933449*^9, 
   3.868965869257703*^9},
 CellLabel->
  "Out[397]=",ExpressionUUID->"6982025c-6678-469e-a1f3-8d8f972b52f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"trainedSoftNet2", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.8689422990507183`*^9},
 CellLabel->
  "In[398]:=",ExpressionUUID->"5078f7c8-7b76-4fb4-adfc-89539893ca31"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "Net",ExpressionUUID->"87f5f52d-7c6a-499f-8fb8-78a9ff511ee5"],
                
                TextCell["Net"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"98.6", "0.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    98.5549132947976858077`3., 0.6425050497397866156`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265187726`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9488552429987394676`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0088046406310714476`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.9312459617365965725`3.", "\", \"", 
                   "0.9664645242608823628`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.9312459617365965725`3., 
                   ", ", 0.9664645242608823628`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0524990283624473877`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0092790911453186561`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.0339408460718100755`3.", "\", \"", 
                   "0.071057210653084707`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.0339408460718100755`3., 
                   ", ", 0.071057210653084707`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"4.66`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.34`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2BNLPzt4v0XW7Z29+tw70u0ub+09NrhelVZ8
aR9//3kMU8Nbe8+KF5Pfh7+yr8vPfPKl9SHR5sJoha8/XhhKvbGvqv6QqJn6
xP7Z3P0BO5YfwWkvIfMeVomsc394yx7m01kOEizzXr61jzItjGZ4/tp+/ou3
j75OforT/AU+Jg5h/G/tZ1st22k09YX9yTNy+wPO3CLZX7hoABHqesc=
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["16", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{16, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["248", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "248", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9880478087649402`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9939879759519037`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{248, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9880478087649402}], 
                    Row[{"FScore = ", 0.9939879759519037}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.028169014084507043`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00796812749003984`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.028169014084507043`}], 
                    Row[{"Row fraction = ", 0.00796812749003984}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["68", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9577464788732394`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9714285714285713`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{68, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9577464788732394}], 
                    Row[{"Recall = ", 0.9855072463768116}], 
                    Row[{"FScore = ", 0.9714285714285713}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.014084507042253521`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.1`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.014084507042253521`}], 
                    Row[{"Row fraction = ", 0.1}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.09090909090909091`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.09090909090909091}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.09090909090909091`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.014492753623188406`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.09090909090909091}], 
                    Row[{"Row fraction = ", 0.014492753623188406`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["9", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "9", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8181818181818182`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.9`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8571428571428572`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{9, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8181818181818182}], 
                    Row[{"Recall = ", 0.9}], 
                    Row[{"FScore = ", 0.8571428571428572}]}], "Tooltip"]& ]}, 
                   
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9880478087649402`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9880478087649402}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "69", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{69, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9855072463768116}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.9`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.9}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{16, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "248", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{248, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "71", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9577464788732394`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{71, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9577464788732394}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8181818181818182`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{11, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.8181818181818182}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["16", TraditionalForm]}, {2.5, 
                    FormBox["251", TraditionalForm]}, {1.5, 
                    FormBox["69", TraditionalForm]}, {0.5, 
                    FormBox["10", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["16", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["248", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["71", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["11", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Expression"|>, 
              "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
              "Doors" -> <|"Type" -> "Expression"|>, 
              "Passengers" -> <|"Type" -> "Expression"|>, 
              "Cargo" -> <|"Type" -> "Expression"|>, 
              "Safety" -> <|"Type" -> "Expression"|>|>, 
            "Output" -> <|
             "PurchasePrice" -> <|"Type" -> "Expression"|>, 
              "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
              "Doors" -> <|"Type" -> "Expression"|>, 
              "Passengers" -> <|"Type" -> "Expression"|>, 
              "Cargo" -> <|"Type" -> "Expression"|>, 
              "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
            MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> False,
             "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> <|
          "very good" -> 0.25, "unacceptable" -> 0.25, "acceptable" -> 0.25, 
           "good" -> 0.25|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> 
       MachineLearning`PackageScope`$BatchProcessing, 
       "Model" -> <|
        "Method" -> "Net", "Net" -> 
         NetGraph[<|
           "Type" -> "Graph", 
            "Inputs" -> <|
             "PurchasePrice" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"medium", "low", "very high", "high"}, 
                 "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                 "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                 "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"low", "very high", "high", "medium"}, 
                 "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                 "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                 "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
              NetEncoder["Class", <|"Labels" -> {4, 2, 3, 
                   Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                  "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4, 
                 "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
              NetEncoder["Class", <|"Labels" -> {4, 
                   Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"large", "medium", "small"}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"high", "low", "medium"}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
            "Outputs" -> <|
             "Output" -> 
              NetDecoder[
               "Class", <|
                "Labels" -> {
                  "very good", "unacceptable", "acceptable", "good"}, 
                 "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 4, 
                 "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
            "Nodes" -> <|
             "TrainedNet/Net/SoftNet/1" -> <|
               "Type" -> "NetArray", "Arrays" -> <|"Array" -> CompressedData["

1:eJzdWFGKnjcM3PYh9Bo9QF+SA5ReIT3BBtqnQCB9KH3rkXOEpJSFH+fz5xnN
jOxEsMvuZ1uSbWk08s/vPrz988enp6e/fvry6+3z3799/Pj8z++v/vvnj+f3
b16//+HLn59+eRrk31///0EEncesV3U+6hh1rXQ7bKO+KLrYMWbejjNCbXTY
ZuUuxhh/Z+vQs2DPhs09x/zVGmbOjvXVux11zO6umsPMend8soLE0d1+nBjg
xGZWj3KeJ+Cgoxaxc9H1TA3r4jqsVDnMTFeipu6Kw6v7S/AWZ14++pnmgtX1
j76htSSJnbt4oFLbGT0dcZCol7vEbb+CI6ze2Zgzd1BZ1T13rLj46KjrKs92
x+Yoal1FOXE3n3f2iLM5bH+TvHsnP9rNQZC5XXzYxdFXMXEVOzP8cPU0aXG/
oTB3rvTqHWfoPpu0sLVrFsdqvqA2VVF9Y2sDqtctrrqRqO9KTWHeJdTataNP
RjjG+Pcu/pGuwWmdzN4qvVrX/jp497imm+sz2HyXE647Q+8hgUtuceEz2ktf
fXPiZCVGx/nVM3fct7quaiORm4x+RmdXn5jWjeZJN4d0xXFqjVLnE7ylS2cV
21Af3HrdvEnBkERPVJ3r8o2NB9f9prHAEYsML7lbz65D9I3f2JhHe/QT+nfV
l6QNdc7OfEJ1VfeY2LcDpxJjyNw0Bsy+qX6j44k7deRgglul5rs5VIrnod8V
vuk6C8f9IXtW61OCmyf5eKfOx7NJ1kwmtl02Z2OpXqQqVd/dtip20bhx1RKF
R1bqoRK3rr726nvyvQH1QdXp4nKqTiSGkXy4upsdeDL6M/7N6kDPxs0pGAxy
yWy/u+ozu+YUXpeU2f0otbLj3K78W+VX59lWYsvRm67urVLnmb3sqKHVdc54
cb5voHaQGDol5h1+ufhO6kzctS7RYztzyM0hFNxh9bNzlVxmYr8LJ6q6KuNO
W6u5CkYotTPBcyt7ccbtzKeO+0b8dvMBVod6FlVeouhGx6tzHZLik4/n6qgd
jjtKvweotebKvuKLi59WdXVwv+58mcluLqHGLiOV94Ju6eAPSX6f7mUcbxdV
UXtLZ33o2KeDU1V4irOPQud3cB03L2ZtM/+rdtJ9TVru9nHlG5P7O+tj+iw7
6/mVXdf6q/9V/GftzsaQ3K3McYw7espO/Gd1JN4Zknt0n4eTA6rzKjiMymzP
7rqpYEYXllfmsufkwA1EOjhYJ3d52Y8jDt24V40J5PzSvSgqaNw6fEMwyZl3
DD67+i5XLazu29UnJXiCqsMhCue7uvPOvTj4+Q4fThS0P07ZRewovbuKK1Wc
cNVyxE5VFzKeynGFh3wvuTfK7L537Vexm/CZPQuF085spvbF6E5wUPbnTm+1
l0FxnllfsdmxtkNfSn/HmaF9EevPSq+KL5V+ZGVbyXe1L6xi345a7ezR0bXd
9VnBVIUrInpc55yIHSYmTuvLkTF1/um5/Wi7491hd21PYb5DXPj6PfVxDD4y
+Nl97473BRTD0piPyGy/lXqn3l/Vj9U6xY/ZWgcH6OQZM1sJbli9A5aPM+tm
uiq+sveC9D6IXWT8dHHmpWp7/Kb6gsZmpVas5p/Wp50sKA9J9Hkdcue3g6u6
YykZmyieOnDp9Li4Evc+k28W7PydtWaUFe9HdXTu6dSaoeJY6gzd/MHFdau8
erW22isyPbULaxz3rpx9qvd5+a706KgovHU1p+Inkh8IVqBzUpKIQ8c7wi7s
P7HmMILEdsceHf1Lt5+n+XaCfQbfx2+Ofk+Z45BVrWG49e6YufLB4ZOrfjLr
k4L25QwHTQtTTytn79rjHSdN5YyjN2Jx8Go961MVX1FbKBdgeiaHOPOJweRq
n7hbHFwL1e18+6jYX413vIOsxjpjwp0r7J6645+5j525mYj1k3Qp+MjErIrD
J8WnMreikz17R7/m5sJOXovy+Yofq3Usb+vmUjvfhDrt3uVEdx+Hcm9HvzWz
x+YMYmel+8qnCn53xRPiQ6p3vdOJYrnaJyrC9JfJM1TziPWlWmtcfGinOM4a
scH8/fj/KVxx5oPjTeZq7+P+X76x+FbtbSr5nexjkvw0WbORtV31aKV3vPfK
fpy4nexVUF0rHHLYq8bN3bcULo3fXb4o86u6Vr6fVHsU7p/ClwT2VevV6rsr
j0/gHaNUfXJzLBUL3Fi7snP3LYlhKDa7eElaqrwwWVMd+pM9t5NLd9SpXbiX
4n0zG8wYMu6UhK272Ln7QXXtrJffEr+7kkTsq3ek9BV3tjs4qnOuosPNNRi9
KTy70p2u725B/O+oRzNB7o6Jvy6+PbM/flM5c4dUeHmVyyf5Jytf7+EzeuEA
yA==
                   "]|>, 
                "Parameters" -> <|
                 "Dimensions" -> 
                  NeuralNetworks`TensorT[{11760}, NeuralNetworks`RealT], 
                  "$ArrayDimensions" -> {11760}|>, "Inputs" -> <||>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{11760}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/2" -> <|
               "Type" -> "NetArray", "Arrays" -> <|"Array" -> CompressedData["

1:eJyVU0sKwkAMHV2I1/AGogcQr1BPMEJdFYS6EHce3RYRS3ifTKDtTPryJnmT
7K737rYupTy206urz/M41tdlM2/6OhwPw2pa7mdEeZ++z9LQ/udD68jh9uwM
9FVYhUf+iEd5RizjirXH2GgM72pjvEwDVZeqHZ3JcCwO5Zzhcvox7qyP9RbT
Ba0jl+JxPpRnthfV/yWu5SyFi37Wv0pLZk4/NWNullQ8+5ftTdUvav5QbFZH
db+tGJcni83gnKG7YhiXC6ub5cl60s2vm5UWrTP9oniYTqrmWIfjycxlxtxs
qrxVPX/MB+6x1V8=
                   "]|>, 
                "Parameters" -> <|
                 "Dimensions" -> 
                  NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT], 
                  "$ArrayDimensions" -> {560}|>, "Inputs" -> <||>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/3" -> <|
               "Type" -> "Compiled", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
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

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                  "Real", "$OutputType" -> "Real", "$InputShape" -> {11760}, 
                  "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                  "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                  "$Scalar" -> {False, False}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{11760}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{11760}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/4" -> <|
               "Type" -> "Compiled", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
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

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                  "Real", "$OutputType" -> "Real", "$InputShape" -> {560}, 
                  "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                  "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                  "$Scalar" -> {False, False}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/5" -> <|
               "Type" -> "Reshape", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Dimensions" -> 
                  NeuralNetworks`ValidatedParameter[{560, 21}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{11760}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{560, 21}, NeuralNetworks`RealT]|>|>,
               "TrainedNet/Net/FeatureLayer/Catenate" -> <|
               "Type" -> "Catenate", "Arrays" -> <||>, 
                "Parameters" -> <|"Level" -> 1|>, 
                "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                  NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                  NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
              "TrainedNet/Net/SoftNet/6" -> <|
               "Type" -> "Threading", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                  NeuralNetworks`ValidatedParameter[1]|>, 
                "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                  NeuralNetworks`TensorT[{560, 21}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{560, 21}, NeuralNetworks`RealT]|>|>,
               "TrainedNet/Net/SoftNet/7" -> <|
               "Type" -> "Aggregation", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> Min, "Levels" -> 
                  NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{560, 21}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/8" -> <|
               "Type" -> "Threading", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                  NeuralNetworks`ValidatedParameter[1]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT], 
                  "Weights" -> 
                  NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/9" -> <|
               "Type" -> "Reshape", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Dimensions" -> 
                  NeuralNetworks`ValidatedParameter[{4, 140}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{560}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4, 140}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Loss/SoftProbs" -> <|
               "Type" -> "Aggregation", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> Total, "Levels" -> 
                  NeuralNetworks`ValidatedParameter[2]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{4, 140}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Loss/SoftmaxLayer" -> <|
               "Type" -> "Softmax", "Arrays" -> <||>, 
                "Parameters" -> <|"Level" -> -1|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input1"] -> 
              NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input2"] -> 
              NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input3"] -> NeuralNetworks`NetPath["Inputs", "Doors"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input4"] -> NeuralNetworks`NetPath["Inputs", "Passengers"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input5"] -> NeuralNetworks`NetPath["Inputs", "Cargo"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input6"] -> NeuralNetworks`NetPath["Inputs", "Safety"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/1", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/2", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/3", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/8", "Inputs", "Weights"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/4", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/6", "Inputs", "Weights"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/5", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Outputs", 
                "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/6", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/7", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/8", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Loss/SoftProbs", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/9", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Loss/SoftmaxLayer", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Loss/SoftProbs", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Loss/SoftmaxLayer", "Outputs", 
                "Output"]}|>, <|"Version" -> "13.1.3", "Unstable" -> False|>],
          "Processor" -> MachineLearning`MLProcessor["Identity"]|>, 
       "Log" -> <|
        "FunctionMemory" -> 222456, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 8, 17, 44, 30.407371`8.23555385394789}, 
           "Instant", "Gregorian", 1.]|>|>], 
    "TestSet" -> <|
     "Input" -> {{"medium", "high", 3, 4, "large", "medium"}, {
        "medium", "low", 4, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "large", "high"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 2, "small", "high"}, {
        "very high", "low", 2, 4, "medium", "high"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "very high", 2, 4, "medium", "high"}, {
        "very high", "medium", 2, 2, "medium", "high"}, {
        "low", "medium", 4, 2, "large", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "low", 2, 4, "medium", "medium"}, {
        "medium", "high", 4, 4, "small", "medium"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "low", "very high", 3, 2, "large", "medium"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "low", 3, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "medium", 3, 2, "medium", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "high", 3, 4, "small", "high"}, {
        "very high", "very high", 2, 2, "small", "low"}, {
        "high", "low", 4, 2, "medium", "medium"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 4, "large", "high"}, {
        "high", "very high", 4, 2, "large", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "medium", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 3, 4, "small", "low"}, {
        "high", "low", 2, 4, "large", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "high", 3, 4, "medium", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 2, 2, "medium", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 3, 4, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "high", 3, 4, "medium", "low"}, {
        "very high", "low", 4, 2, "large", "medium"}, {
        "very high", "high", 4, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "medium", "high", 3, 4, "small", "high"}, {
        "high", "medium", 3, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "high", 2, 2, "small", "low"}, {
        "medium", "low", 4, 2, "medium", "medium"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 2, "large", "medium"}, {
        "high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "low", 4, 4, "large", "medium"}, {
        "very high", "high", 3, 4, "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "very high", 3, 2, "large", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "very high", "high", 4, 4, "large", "low"}, {
        "high", "low", 2, 2, "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "high", "high", 2, 2, "large", "medium"}, {
        "medium", "high", 2, 4, "small", "high"}, {
        "medium", "medium", 2, 2, "large", "high"}, {
        "low", "medium", 2, 2, "medium", "low"}, {
        "high", "medium", 3, 2, "large", "medium"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 2, 4, "large", "medium"}, {
        "medium", "medium", 2, 4, "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "low", "low", 3, 4, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {
        "medium", "medium", 3, 2, "large", "high"}, {
        "high", "low", 4, 2, "small", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "high", 3, 2, "medium", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "high", 3, 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "medium", 2, 2, "large", "high"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "high", 4, 2, "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "low", 4, 2, "medium", "low"}, {
        "medium", "medium", 4, 4, "large", "high"}, {
        "medium", "medium", 3, 4, "small", "high"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 4, "medium", "low"}, {
        "very high", "medium", 4, 4, "small", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {
        "very high", "medium", 4, 2, "small", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 2, "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 4, "small", "high"}, {
        "very high", "high", 4, 4, "large", "medium"}, {
        "low", "high", 3, 2, "medium", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "low", 4, 4, "large", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "low", 4, 4, "large", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "very high", 2, 4, "small", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "very high", "low", 2, 4, "large", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 4, "large", "medium"}, {
        "very high", "high", 3, 2, "medium", "low"}, {
        "low", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 3, 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 2, 4, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 4, 2, "large", "low"}, {
        "very high", "medium", 3, 2, "small", "high"}, {
        "very high", "very high", 2, 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 2, "small", "high"}, {
        "medium", "medium", 4, 2, "small", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 4, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "medium", 3, 2, "large", "high"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "low", "low", 2, 2, "small", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 2, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 2, "small", "high"}, {
        "low", "high", 4, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "medium", "medium", 2, 2, "large", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 3, 2, "small", "low"}, {
        "high", "medium", 4, 4, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "medium", 3, 2, "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "low", 3, 4, "large", "high"}, {
        "very high", "low", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "high", "medium", 2, 4, "medium", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "very high", 2, 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 3, 4, "medium", "high"}, {
        "low", "medium", 2, 2, "large", "medium"}, {
        "medium", "low", 3, 4, "large", "high"}, {
        "medium", "high", 3, 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 3, 2, "medium", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "very high", "low", 4, 2, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 4, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "low", 2, 2, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "low", 2, 2, "small", "high"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "high", 3, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "high", "high", 3, 2, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "high", 3, 2, "small", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "medium", "very high", 3, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "low", 2, 4, "small", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "medium", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "low", "high", 2, 2, "small", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 4, "large", "low"}, {
        "medium", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {
        "low", "very high", 4, 4, "medium", "low"}, {"very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 3, 4, "large", "low"}, {
        "high", "low", 4, 4, "medium", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "medium", 3, 4, "medium", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "high", 4, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "low", 2, 4, "small", "low"}, {
        "medium", "low", 2, 4, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 2, 2, "small", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "very high", 3, 2, "large", "high"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "high", 2, 2, "medium", "low"}, {
        "high", "high", 2, 4, "medium", "low"}, {
        "high", "low", 4, 4, "medium", "high"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "low", 3, 2, "large", "medium"}, {
        "very high", "high", 3, 4, "large", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 3, 4, "large", "medium"}, {
        "medium", "low", 2, 2, "medium", "high"}, {
        "high", "medium", 2, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "low", "medium", 4, 2, "large", "high"}, {
        "very high", "high", 2, 4, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "low", "medium", 2, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "low"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "low", "high", 2, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}}, 
      "Output" -> {
       "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "good", "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "very good", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "unacceptable", "good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "very good", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "unacceptable",
         "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable"}|>, 
    "Predictions" -> {
     "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "good", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", "very good",
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "very good", "unacceptable", "good", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "good", "unacceptable", "very good", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", "good", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable"}, "LogProbabilities" -> CompressedData["
1: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
ZxM6
     "], "CountMatrix" -> {{16, 0, 0, 0, 0}, {0, 248, 2, 1, 0}, {0, 0, 68, 1, 
     0}, {0, 0, 1, 9, 0}}, 
    "IndicesMatrix" -> {{{3, 94, 122, 134, 157, 159, 165, 210, 223, 241, 250, 
       262, 282, 296, 314, 339}, {}, {}, {}, {}}, {{}, CompressedData["
1:eJwN0mlrCAAAANBZG2aH2cFms7Ntho3MbMO2tnawNglrRsLIlSM3OXKWO3IU
SfjgSO77KHeSI6KcH0SOhCRCjrwP7x+81KapA6c0CwgI+EkgQQTTnBBaEUoY
4UQQSRTRxBBLW+KIpz0JJJJEMimkkkY6GWSSRUeyySGXbnQnj3wKKKSIXvSm
mBJKKaOcCiqpopq+1FBLHf0ZwCDqaWAIjQxlGMMZwUhG0cRoxjCWcYxnAhOZ
xGSmMZ0ZzGQWs5nDXOYxnwUsZBGLWcJSlrGcFaxkFatZw1rWsZ4NbGQTm9nC
VraxnR3sZBe72cNe9rGfAxzkEIc5wlGOcZwTnOQUpznDWc5xngtc5BKXucJV
rnGdG9zkFre5w13ucZ8HPOQRj3nCU57xnBe85BWvecNb3vGeD3zkE5/5wle+
8Z0f/OI3f/jLPwIkDySIYFrQkhBCCSOcCFoTSRuiiCaGWNoRRzwJJNKBJJJJ
IZU00skgkyyy6URnupBDLl3Jowf59KSAQoroQzEllFJGORVUUkU1/aihljoG
U08DjfwHRNNnvA==
       "], {304, 344}, {52}, {}}, {{}, {}, {1, 7, 8, 15, 17, 23, 29, 36, 42, 
       43, 44, 47, 49, 54, 60, 67, 73, 75, 79, 81, 82, 92, 101, 107, 112, 127,
        135, 143, 146, 151, 152, 155, 163, 164, 170, 189, 190, 198, 202, 207, 
       213, 221, 222, 228, 233, 235, 243, 246, 248, 257, 259, 266, 278, 292, 
       305, 306, 315, 320, 323, 328, 331, 334, 335, 336, 337, 338, 342, 
       346}, {64}, {}}, {{}, {}, {86}, {84, 110, 111, 172, 200, 214, 225, 239,
        255}, {}}}, 
    "ExtendedClasses" -> {"very good", "unacceptable", "acceptable", "good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0007421994219653179, "SingleEvaluationTime" -> 
    0.004662, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{
  3.8689423000413103`*^9, 3.8689426328835506`*^9, {3.868942847495308*^9, 
   3.8689428757521133`*^9}, 3.868943553817169*^9, 3.868943892124319*^9, 
   3.868944122795635*^9, 3.868944551968522*^9, 3.8689455916725407`*^9, 
   3.8689458070001574`*^9, 3.868946097740024*^9, 3.868946307350904*^9, 
   3.868946822983776*^9, 3.868947543055826*^9, 3.868947599156425*^9, 
   3.868948239278075*^9, 3.868950360111157*^9, 3.868955720509842*^9, 
   3.8689590961041927`*^9, 3.868961296500168*^9, 3.8689658709186993`*^9},
 CellLabel->
  "Out[398]=",ExpressionUUID->"51b181d5-d313-4a5b-89bc-ca0744e67c59"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedSoftNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}},
 CellLabel->
  "In[399]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "featureLayer", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     "testData", ",", "\"\<Acceptability\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}, {
   3.868530047989657*^9, 3.868530063111247*^9}, {3.868530190826717*^9, 
   3.868530196600292*^9}, {3.86853144384466*^9, 3.868531451560924*^9}, {
   3.868532766824644*^9, 3.8685327949413958`*^9}, 3.868532945602283*^9, {
   3.868533874444491*^9, 3.8685338747929583`*^9}, {3.868604441984084*^9, 
   3.8686044511364*^9}, {3.8689602387396393`*^9, 3.8689602481032057`*^9}, {
   3.868960681250607*^9, 3.8689606824317408`*^9}, {3.868963143100669*^9, 
   3.868963145210929*^9}, 3.86896321844506*^9},
 CellLabel->
  "In[400]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"eval", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}]], "Input",
 CellChangeTimes->{{3.86896479752269*^9, 3.8689648064007463`*^9}},
 CellLabel->
  "In[401]:=",ExpressionUUID->"9e1bb078-3630-47c0-b20f-fbdb3a14e559"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.9826589595375722`"}], ",", 
   RowBox[{"\<\"Results\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "248"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "68"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "15"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "9"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "2"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.868965881249866*^9},
 CellLabel->
  "Out[401]=",ExpressionUUID->"085feb68-0957-4ed7-b327-69f98e5600a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->
  "In[434]:=",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],

Cell[BoxData[
 TemplateBox[{"1.50390625`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9},
 CellLabel->
  "Out[434]=",ExpressionUUID->"db46bd07-8503-4038-ac22-7f515a8b1258"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNetBooleanExpression", "[", 
   RowBox[{"hnf", ",", "inputSize"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"85881d34-aa2c-47a4-9cef-\
231d0c092462"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Acceptability\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", "\"\<Memory\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}},
 CellLabel->
  "In[431]:=",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1382", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
           "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
           "Doors" -> <|"Type" -> "Nominal"|>, 
           "Passengers" -> <|"Type" -> "Nominal"|>, 
           "Cargo" -> <|"Type" -> "Nominal"|>, 
           "Safety" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
                  "Cargo", "Safety"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1382, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.18180837299497768`, \
-0.5191050362589946, -0.3841046152539792, -0.5681753733658641, 
                   0.12529108395561656`, 0.45980236054401374`}, {
                   0.19483230814806896`, -0.11552149012629362`, \
-0.48399667557469317`, 
                   0.007741300812005421, -0.8143737955228835, \
-0.2262250394645403}, {
                   0.7017573541803983, -0.271578659323676, \
-0.2844896353147054, 0.0327006634878128, 
                   0.47461172003755725`, -0.3556988569880933}, \
{-0.534781449622502, -0.5935508055542879, -0.03841883279524632, 
                   0.43350591164949265`, 
                   0.09542916373943802, -0.4039754137631351}, \
{-0.24962449527823052`, 0.1995437550139275, 
                   0.05318131991869604, -0.6664425700794839, 
                   0.05982277373001385, -0.6688177516579797}, \
{-0.2970170290759208, 0.5013077991716276, -0.7300494849461234, 
                   0.20970076137332036`, 0.2883672850742781, 
                   0.01920999835638125}}, 
                  "Precisions" -> {11.409050313849102`, 11.728549767205461`, 
                   11.838648803211964`, 12.353703996888086`, 
                   12.493974299485144`, 12.642220694332103`}, 
                  "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712677`, 
                    0.0011546407584220714`, -0.0003624914148932479, 
                    0.0034011567571950794`, 0.006626869711687391, 
                    0.003842044757913067}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                    "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                   "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 6, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   7052420854593502203|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, 
                    "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.227775, "MaxTrainingMemory" -> 1301552, 
                  "DataMemory" -> 445472, "FunctionMemory" -> 62320, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 8, 17, 59, 39.745929`8.351867630926963}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.4650241955255132`, -1.4650241955255132`, \
-1.430755802766193, -1.4042067830875913`, -1.3018866229987, \
-1.2507800118207644`, -1.2364530874740836`, -1.2255722141636205`, \
-1.2228520173189021`, -1.0894952762761034`, -1.0894015666714374`}, 
                   "LeftBoundary" -> -1.430755802766193, "LeftScale" -> 
                   0.01713419637966007, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[7.629856546861745, 0.2480059748492769], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Index" -> {<|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                   DirectedInfinity[1]}] -> 4|>, <|
               2 -> 1, 4 -> 2, Interval[{5, 
                   DirectedInfinity[1]}] -> 3|>, <|
               "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.12314196676015854`, -0.861851692199707, 
                0.10532767325639725`}, {
                0.8298183679580688, -0.28949323296546936`, 
                0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                0.38437455892562866`, -0.8375512361526489, 
                0.1422276645898819}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                0.4795919358730316}, {
                0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                0.2534555494785309, -0.4526385962963104}, {
                0.3543681204319, -0.37547722458839417`, 
                0.5876661539077759}, {-1.1276206970214844`, 
                0.17602579295635223`, -1.0098364353179932`}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.24657385051250458`, -0.8256815671920776, 
                0.8846340179443359}, {0.6182233691215515, 
                0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.34666627645492554`, -0.5679200291633606, 
                0.10750995576381683`}, {
                0.6412044167518616, -0.1759643256664276, 
                0.6604856848716736}, {-0.8092290163040161, 
                0.12987354397773743`, -1.1753407716751099`}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                0.12715618312358856`, 0.1291729062795639}, {
                0.21379514038562775`, -0.6005780100822449, 
                0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
             272386066020895428|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                "very good" -> 4|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "acceptable" -> 0.227994227994228, "good" -> 0.04329004329004329, 
        "unacceptable" -> 0.6926406926406926, "very good" -> 
        0.03607503607503607|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Acceptability", 
          "Order" -> {
           "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", "Cargo",
             "Safety", "Acceptability"}|>], "PreferLabeled" -> True, 
       "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> None, 
    "ImputationStrategy" -> Automatic, "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Memory", "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
cFUh/T9EFu3/
                "], "Biases" -> 
               RawArray["Real32",{-0.14151161909103394`, 
                 0.181189626455307, -0.10466769337654114`, \
-0.2077053189277649, 
                 0.0883769765496254, -0.21449072659015656`, \
-0.20492692291736603`, 0.11879973113536835`, 
                 0.19001705944538116`, -0.1973552703857422, 
                 0.14196911454200745`, 
                 0.06061756610870361, -0.1630895882844925, 
                 0.0015528978547081351`, -0.019544236361980438`, \
-0.19362524151802063`, -0.08886230736970901, -0.3445886969566345, 
                 0.2028679996728897, -0.1229017823934555, \
-0.12420354783535004`, -0.1491868793964386, -0.04626939445734024, 
                 0.10800476372241974`, -0.13900579512119293`, \
-0.16450759768486023`, -0.24966943264007568`, 
                 0.17121048271656036`, -0.14999428391456604`, \
-0.1330750733613968, 0.2752665579319, 
                 0.058282747864723206`, -0.1502441167831421, \
-0.24120116233825684`, -0.22375954687595367`, -0.2754586637020111, \
-0.17372222244739532`, 0.20720116794109344`, 
                 0.1669532060623169, -0.11877211928367615`, 
                 0.1377328783273697, 
                 0.14382711052894592`, -0.16925354301929474`, 
                 0.1921849101781845, 0.15992730855941772`, -0.196363165974617,
                  0.0778680145740509, 0.2140202522277832, 
                 0.16157454252243042`, 0.1905343234539032}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               18, "$InputDimensions" -> {18}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
98dz/HdDMto3mi7TRvw/7v8MHA==
                "], "Biases" -> 
               RawArray["Real32",{0.11058614403009415`, 0.1459028422832489, 
                 0.09743592888116837, -0.13298943638801575`, \
-0.16004578769207, 0.036182701587677, 0.12315712869167328`, 
                 0.05935421213507652, -0.004007590934634209, \
-0.13807764649391174`, -0.15822666883468628`, -0.10480120778083801`, 
                 0.04406538978219032, -0.14523708820343018`, \
-0.19434992969036102`, -0.09664028882980347, 0.16884662210941315`, 
                 0.039723534137010574`, -0.12681405246257782`, \
-0.10558248311281204`, 
                 0.008313377387821674, -0.16909171640872955`, \
-0.14977721869945526`, 
                 0.15547481179237366`, -0.1264285296201706, \
-0.081388458609581, 0.14261552691459656`, 0.06620728224515915, 
                 0.14516647160053253`, 
                 0.05168995261192322, -0.12877553701400757`, \
-0.07333686947822571, 0.1208353340625763, -0.11832599341869354`, 
                 0.10357934981584549`, -0.11235950142145157`, 
                 0.09922627359628677, 
                 0.08616095781326294, -0.13851280510425568`, 
                 0.083940789103508, 0.049086518585681915`, 
                 0.04191446676850319, -0.1144600659608841, \
-0.03270066902041435, -0.17829328775405884`, 0.056076716631650925`, 
                 0.13940095901489258`, 0.0495423823595047, 
                 0.13049697875976562`, 0.16978049278259277`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXtMU2ccQGvl2RZEmSgVV1CIrGosFIjC/X4XNEgdgihzEmYz6KDhOQ2o
MHkYJa6tgAqCAplCYTAeEZybgnC/32WwFeW5YGKXCYwNRKNzaeThfOCGf5yT
nBwPzZEDWqFAIMi0W9KB+KyQjIz4r6Jt3kdifJrSN+39tFrCd4mzrA1sSVPi
zzFa1Lj50df7vboUxliU9zkgpLjgmdkn0D3mjNd9g7BS5khFpkz8lR8i+d21
NCEqFP4VCfHKKzEfelBGT7Q+JX99XUsKaRK8DLGD0LhOUK6Z4PwnpaRtpRN4
FvTRpA3l5MWkPVt2qwSnB3+B5CvLwCHgKbDD1WidaEOVH3aS/u16vOFsoeOP
ctHwXynR2e3DbIUf2XarEoMHbDB3dR/1uVMKXqI6rPYsBp3JD3qlczTqgpz+
pGnEf3ryIEd7F9TkGpnIDocseQnTOyxi7heXQ+WyEfJQJgZLRB3RC/sgorMD
ts0xsEKYzM0kLDIqSonGPAyHX7xmTD7jMO+tQocH55h9bXrOOzAaV0dY8xUe
RV0tWWacs1SQDd+Pgm+gnukM9eQNEYskvTEZA789RM7KbqIKfSA4TMKW5k0z
0pRs1M0cx9qTJvLk9+PQ61gHKbwZg9s5erRgEzbJ44g49wcsOkXp1RoJO+V0
EQTnpaQpsgLfvpkg44pAmHy1Bi4OvaQN+V/ixo9KsGdBwI/9KIf65A94//oT
KLhqxQ8FnAb13jA4/dyMzt8p+WcKM80uV+O7aVs81HsdWtbXYkirK7pJdFBm
/gwabuggTyvGraPtuGdgMyasc2cbMgmGb3ZhxZEi/mC4AUYST4FqVMiLVZdg
12MD0belQr3VTn6iuYub3SpA+z9a4V6eJ1TXfAI1bvNcrKUEeJ9iXC6bxWIP
Ca5KWAGFXhbYrd5ItIrzWO4qhe6/T9L6nTpiHnsOC7uOAbjf46IvV0JOli3r
Pj3AnatKxUXNZVJ2ezn7hbYZJA8u4O4AW/ZPWwOsDGrBqaYOptC/kav4OCYo
pyydiXXZg+2/pWOBMQ7GrCGoaCofLTlGCKuK3uG4ah3bPDIIXvfrSNTAO+j5
/BtiiYwBvwVHMG7vB8Nabxwx2rPzHTdBPM/hpx3OqI7agab+u/g/mbaE8A==

                "], "Biases" -> 
               RawArray["Real32",{-0.007236030418425798, -0.09619268029928207,
                  0.09597259759902954, -0.13553404808044434`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 3.277165, "MeanInputsPerSecond" -> 
        29293.61200916036|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "Mean" -> {0.22846340109655627`, -0.7331524952465475, 
              0.12857418486134847`, -0.1470174637574805, -0.3693960287360927, \
-0.25297157897734485`, -0.1381125864186497, -0.013550857960233805`, \
-0.4477105686514862, 0.10026117855035539`, -0.22988884392409223`, 
              0.29694375132721407`, 
              0.05750394298490419, -0.1986286429254379, -0.13614149543094045`,
               0.08288515091555626, -0.23331746818281004`, 
              0.3872654421790709}, 
             "StandardDeviation" -> {0.4217841444635364, 0.26610671534521446`,
               0.0719824374461276, 0.3714420548858829, 0.17188502945715212`, 
              0.5106448641794368, 0.682620419657301, 0.2497243771479237, 
              0.6360414783504174, 0.49439015269206665`, 0.4649285469405732, 
              0.4304973939924269, 0.6297890981361854, 0.2834486698239679, 
              0.7746989060734015, 0.09846349258259571, 0.2971065188725669, 
              0.21897662978258314`}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 7167940750356708679|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, "Key" -> 
             "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 3600, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 100, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.401929`6.055694336054277, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.09102929754751289, 0.023607494088640154`], "Accuracy" -> 
         Around[0.9761613127009874, 0.012949449812749267`], "EvaluationTime" -> 
         0.0006881501464423077, "TestSize" -> 276, "ModelMemory" -> 58320, 
         "ModelUtility" -> 0.2778097519618762, "TrainingSize" -> 1106, 
         "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 956544, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.09102929754751289, 0.016693019156898786`]}, 
         "AccuracyHistory" -> {
           Around[0.9761613127009874, 0.009156643775229874]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           2, "NumberOfParameters" -> 3600, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> None, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.5722078573533445`, 0.27210027194614067`], "Accuracy" -> 
              Around[0.6211574386771406, 0.01848102720571032], 
              "EvaluationTime" -> 0.00006727785530077912, "TestSize" -> 1372, 
              "ModelMemory" -> 101904, "ModelUtility" -> -3.6582194587192123`,
               "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 480808, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[4.5722078573533445`, 0.19240394745581973`]}, 
              "AccuracyHistory" -> {
                Around[0.6211574386771406, 0.01306805966045084]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00006727785530077912, "MeanCrossEntropy" -> 
             Around[4.5722078573533445`, 0.27210027194614067`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 480808, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.146953849088694, 0.06512858825223299], "Accuracy" -> 
              Around[0.5636622679613927, 0.04946899254797612], 
              "EvaluationTime" -> 0.00020483898119853466`, "TestSize" -> 200, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.2227347999526073`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.15848931924611134`, 
              "TrainingMemory" -> 309176, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.146953849088694, 0.04605286640226046]}, 
              "AccuracyHistory" -> {
                Around[0.5636622679613927, 0.034979860089140696`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6860334428196505, 0.060102721049976764`], "Accuracy" -> 
              Around[0.8161029716258141, 0.031470751638048605`], 
              "EvaluationTime" -> 0.0003330981347269232, "TestSize" -> 300, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.7148737042326025`, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 377728, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6860334428196505, 0.04249904162220202]}, 
              "AccuracyHistory" -> {
                Around[0.8161029716258141, 0.022253181892301816`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.8053747043406867`, 0.05642796703407158], "Accuracy" -> 
              Around[0.4158072905455017, 0.020925576627904317`], 
              "EvaluationTime" -> 0.0005779874435747101, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.6713325971918254`, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.25118864315095796`, 
              "TrainingMemory" -> 297016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8053747043406867`, 0.03990059813836297]}, 
              "AccuracyHistory" -> {
                Around[0.4158072905455017, 0.014796617133829869`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35134608706131215`, 0.03978009020685576], "Accuracy" -> 
              Around[0.8678411635281399, 0.028749297744619536`], 
              "EvaluationTime" -> 0.00022915055508466515`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.0507407082010345`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 948456, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.35134608706131215`, 0.028128771541480278`]}, 
              "AccuracyHistory" -> {
                Around[0.8678411635281399, 0.02032882338957159]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00022915055508466515`, "MeanCrossEntropy" -> 
             Around[0.35134608706131215`, 0.03978009020685576], "ModelMemory" -> 
             62416, "TrainingMemory" -> 948456, "TrainingTime" -> 
             0.7847467847731369|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.09102929754751289, 0.023607494088640154`], "Accuracy" -> 
              Around[0.9761613127009874, 0.012949449812749267`], 
              "EvaluationTime" -> 0.0006881501464423077, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 0.2778097519618762, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 956544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.09102929754751289, 0.016693019156898786`]}, 
              "AccuracyHistory" -> {
                Around[0.9761613127009874, 0.009156643775229874]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8964811821115559, 0.05631576825786373], "Accuracy" -> 
              Around[0.7133756368331798, 0.017387908807273374`], 
              "EvaluationTime" -> 0.00034673664508861804`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -1.9714037318786193`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8964811821115559, 0.03982126162286557]}, 
              "AccuracyHistory" -> {
                Around[0.7133756368331798, 0.012295108228276294`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.3429807556245192`, 0.13818489531614622`], "Accuracy" -> 
              Around[0.6158817888808668, 0.01850340875462363], 
              "EvaluationTime" -> 0.00020305462724692585`, "TestSize" -> 1372,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.9313466655000626`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 285712, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.3429807556245192`, 0.09771147653560017]}, 
              "AccuracyHistory" -> {
                Around[0.6158817888808668, 0.013083885805460898`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.28191119077631227`, 0.0268670654279549], "Accuracy" -> 
              Around[0.8990167017961164, 0.012596838847921973`], 
              "EvaluationTime" -> 0.0002202740115369196, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -0.8209142104906325, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 373776, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.28191119077631227`, 0.01899788415468956]}, 
              "AccuracyHistory" -> {
                Around[0.8990167017961164, 0.008907310170879763]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002202740115369196, "MeanCrossEntropy" -> 
             Around[0.28191119077631227`, 0.0268670654279549], "ModelMemory" -> 
             58320, "TrainingMemory" -> 373776, "TrainingTime" -> 
             10.121617336566537`|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.08963151751650107, 0.04221312431395196], "Accuracy" -> 
              Around[0.9791357409747539, 0.012137549581765668`], 
              "EvaluationTime" -> 0.0003240319691030005, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 0.11165932133847212`,
               "TrainingSize" -> 1106, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 1169256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.08963151751650107, 0.029849186457466155`]}, 
              "AccuracyHistory" -> {
                Around[0.9791357409747539, 0.008582543616254447]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2240863679594245`, 0.14357091710562775`], "Accuracy" -> 
              Around[0.7906775734525874, 0.02161228989770136], 
              "EvaluationTime" -> 0.0007772944109511788, "TestSize" -> 700, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.435754149761074, 
              "TrainingSize" -> 50, "TrainingTime" -> 1., "TrainingMemory" -> 
              780096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2240863679594245`, 0.10151996906656106`]}, 
              "AccuracyHistory" -> {
                Around[0.7906775734525874, 0.015282196743634147`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4340717995649587, 0.04616762742632497], "Accuracy" -> 
              Around[0.8493098429585471, 0.01492641153241974], 
              "EvaluationTime" -> 0.0003877717060035205, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.3968757488568753`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 840352, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4340717995649587, 0.03264544242444842]}, 
              "AccuracyHistory" -> {
                Around[0.8493098429585471, 0.010554566813355084`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003877717060035205, "MeanCrossEntropy" -> 
             Around[0.4340717995649587, 0.04616762742632497], "ModelMemory" -> 
             187664, "TrainingMemory" -> 840352, "TrainingTime" -> 
             17.3393835219499|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.37168744234195067`, 0.06138078981133629], "Accuracy" -> 
              Around[0.8929724590325544, 0.017756003513421006`], 
              "EvaluationTime" -> 0.0005729130857749843, "TestSize" -> 600, 
              "ModelMemory" -> 164368, "ModelUtility" -> -1.2331962386303115`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 683920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.37168744234195067`, 0.04340277271018203]}, 
              "AccuracyHistory" -> {
                Around[0.8929724590325544, 0.012555390491112156`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.7690385100499966`, 0.1667625598149496], "Accuracy" -> 
              Around[0.6062976552481879, 0.020601568145856446`], 
              "EvaluationTime" -> 0.0005071606602769552, "TestSize" -> 1100, 
              "ModelMemory" -> 164368, "ModelUtility" -> -3.220876683857752, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 587920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7690385100499966`, 0.1179189368931781]}, 
              "AccuracyHistory" -> {
                Around[0.6062976552481879, 0.014567508539011861`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005071606602769552, "MeanCrossEntropy" -> 
             Around[2.7690385100499966`, 0.1667625598149496], "ModelMemory" -> 
             164368, "TrainingMemory" -> 587920, "TrainingTime" -> 
             10.715092815685152`|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[3.194583785496335, 0.19343446926971108`], "Accuracy" -> 
              Around[0.6168133280093175, 0.018368536511584353`], 
              "EvaluationTime" -> 0.00040456834306917757`, "TestSize" -> 1372,
               "ModelMemory" -> 93800, "ModelUtility" -> -3.2901150116252373`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 384328, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.194583785496335, 0.13677882493583354`]}, 
              "AccuracyHistory" -> {
                Around[0.6168133280093175, 0.012988516727813985`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00040456834306917757`, "MeanCrossEntropy" -> 
             Around[3.194583785496335, 0.19343446926971108`], "ModelMemory" -> 
             93800, "TrainingMemory" -> 384328, "TrainingTime" -> 
             23.488117112273706`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.8197448601870514`, 0.15407278573948416`], "Accuracy" -> 
              Around[0.7681197493442067, 0.016233908383616182`], 
              "EvaluationTime" -> 0.0005168685314425036, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -2.805891685476432, 
              "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 617752, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8197448601870514`, 0.10894591159269124`]}, 
              "AccuracyHistory" -> {
                Around[0.7681197493442067, 0.011479106703216146`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005168685314425036, "MeanCrossEntropy" -> 
             Around[1.8197448601870514`, 0.15407278573948416`], "ModelMemory" -> 
             164368, "TrainingMemory" -> 617752, "TrainingTime" -> 
             74.27594802356177|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.29403327569319443`, 0.03932904399651967], "Accuracy" -> 
              Around[0.9098419509282913, 0.011996499990282437`], 
              "EvaluationTime" -> 0.00008681470201758184, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -0.8705335057683248, 
              "TrainingSize" -> 250, "TrainingTime" -> 10., "TrainingMemory" -> 
              351080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.29403327569319443`, 0.027809833707523133`]}, 
              "AccuracyHistory" -> {
                Around[0.9098419509282913, 0.008482806493633062]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.5876025435917676`, 0.22692353204588206`], "Accuracy" -> 
              Around[0.6246522534683608, 0.018394245585487717`], 
              "EvaluationTime" -> 0.00031189803436950574`, "TestSize" -> 1372,
               "ModelMemory" -> 58320, "ModelUtility" -> -3.3582514493484092`,
               "TrainingSize" -> 10, "TrainingTime" -> 3.1622776601683795`, 
              "TrainingMemory" -> 273672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[3.5876025435917676`, 0.16045916832044602`]}, 
              "AccuracyHistory" -> {
                Around[0.6246522534683608, 0.01300669578830908]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00031189803436950574`, "MeanCrossEntropy" -> 
             Around[3.5876025435917676`, 0.22692353204588206`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 273672, "TrainingTime" -> 
             53.70267726352701|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.10590330154399025`, 0.028414184949045067`], "Accuracy" -> 
              Around[0.9710001978599868, 0.014256985156258202`], 
              "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.11862582820774348`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 986160, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.10590330154399025`, 0.0200918628593585]}, 
              "AccuracyHistory" -> {
                Around[0.9710001978599868, 0.010081210883266124`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.2470665473441196`, 0.13307038058297638`], "Accuracy" -> 
              Around[0.6176776136790039, 0.01842307108792603], 
              "EvaluationTime" -> 0.000405204733288256, "TestSize" -> 1372, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.895732548673068, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 296888, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2470665473441196`, 0.09409496848529728]}, 
              "AccuracyHistory" -> {
                Around[0.6176776136790039, 0.013027078496554321`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000405204733288256, "MeanCrossEntropy" -> 
             Around[2.2470665473441196`, 0.13307038058297638`], "ModelMemory" -> 
             62416, "TrainingMemory" -> 296888, "TrainingTime" -> 
             12.700902206251245`|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.2626592930291636, 0.03549734171705872], "Accuracy" -> 
              Around[0.8904866053987731, 0.026502625634261496`], 
              "EvaluationTime" -> 0.000995521083966344, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.8161649012419092, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 1012984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2626592930291636, 0.025100411042228342`]}, 
              "AccuracyHistory" -> {
                Around[0.8904866053987731, 0.01874018630523473]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.622240942702334, 0.0474324350170228], "Accuracy" -> 
              Around[0.4223703251465125, 0.01863988008159035], 
              "EvaluationTime" -> 0.00022897192394878054`, "TestSize" -> 1372,
               "ModelMemory" -> 101904, "ModelUtility" -> -2.616030556943823, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 447496, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.622240942702334, 0.03353979644872707]}, 
              "AccuracyHistory" -> {
                Around[0.4223703251465125, 0.013180385606196592`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5079075602598763, 0.031736742733066994`], "Accuracy" -> 
              Around[0.8151969662775643, 0.016267526734640162`], 
              "EvaluationTime" -> 0.0002366474107429308, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.461355133207583, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 527464, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5079075602598763, 0.022441265999324552`]}, 
              "AccuracyHistory" -> {
                Around[0.8151969662775643, 0.011502878467197513`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002366474107429308, "MeanCrossEntropy" -> 
             Around[0.5079075602598763, 0.031736742733066994`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 527464, "TrainingTime" -> 
             3.401520371971754|>, "Index" -> 10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 1382, 
      "PreprocessorEvaluationTime" -> 4.21875*^-6, "PreprocessorMemory" -> 
      94088, "InputDimension" -> 18, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.8472130263720676, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.868970440615246`16.340170400833458*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 5.861760790364184, 
          "ElapsedTimes" -> 16.465788, "ExperimentCounts" -> 8|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 8.373943986234558, 
          "ElapsedTimes" -> 9.178283, "ExperimentCounts" -> 4|>, <|
         "TrainingSizes" -> 250, "TimeBudgets" -> 11.962777123192216`, 
          "ElapsedTimes" -> 18.246313, "ExperimentCounts" -> 6|>, <|
         "TrainingSizes" -> 1106, "TimeBudgets" -> 17.0896816045603, 
          "ElapsedTimes" -> 16.763523, "ExperimentCounts" -> 5|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
             Interval[{5, 
               DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
           5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 61.169972, 
      "MaxTrainingMemory" -> 2033248, "DataMemory" -> 1781648, 
      "FunctionMemory" -> 352848, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 8, 18, 0, 40.649076`8.361625656281715}, "Instant", 
        "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64", 
      "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9},
 CellLabel->
  "Out[431]=",ExpressionUUID->"6871e97c-7114-4129-908c-f7164b0eb2dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}},
 CellLabel->
  "In[432]:=",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "d093bf74-15a1-43b9-a987-7be67ffd0c89"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"98.0", "0.8"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    97.9768786127167601308`3., 0.7579895578429771685`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265187726`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9311011902438047771`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0168655123198805934`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8973701656040435903`3.", "\", \"", 
                   "0.964832214883565964`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8973701656040435903`3., 
                   ", ", 0.964832214883565964`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0713873177684133248`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0181125213588456818`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.0351622750507219611`3.", "\", \"", 
                   "0.1076123604861046884`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.0351622750507219611`3., 
                   ", ", 0.1076123604861046884`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"5.82`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.47`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKlyT/3KjF/9ZeZZO3Q8mUF/arBTqnJZ+8
ZW9dPrdm5su39loKgnbvn722T9eeEXdy8lN781glR2m3d/b9k3R661ze2q+9
KDWZVfEl3LyHVSLr3B/esoe5kJB6dNrs/o5Z8k1v7TNinE69iX9lf88pf9We
WQ9xqsflTrVpdWcqJN/YV2/Xv/c/8Yn9uXvHym/0HSHofmJpAO2ufDY=
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["68", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9714285714285714`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9784172661870503`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{68, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9714285714285714}], 
                    Row[{"Recall = ", 0.9855072463768116}], 
                    Row[{"FScore = ", 0.9784172661870503}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.02857142857142857`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00796812749003984`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.02857142857142857}], 
                    Row[{"Row fraction = ", 0.00796812749003984}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.1`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.014492753623188406`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.1}], 
                    Row[{"Row fraction = ", 0.014492753623188406`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["8", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "8", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.8`"}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.8`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8000000000000002`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{8, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8}], 
                    Row[{"Recall = ", 0.8}], 
                    Row[{"FScore = ", 0.8000000000000002}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.1`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.1}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["247", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "247", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9840637450199203`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9919678714859439`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{247, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9840637450199203}], 
                    Row[{"FScore = ", 0.9919678714859439}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.10526315789473684`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.2`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.10526315789473684`}], 
                    Row[{"Row fraction = ", 0.2}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.05263157894736842`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.05263157894736842}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["16", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8421052631578947`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9142857142857141`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{16, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8421052631578947}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.9142857142857141}]}], "Tooltip"]& ]}, 
                   
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "69", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{69, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9855072463768116}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.8`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.8}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9840637450199203`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9840637450199203}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "70", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9714285714285714`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{70, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9714285714285714}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.8`"}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.8}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "247", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{247, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "19", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8421052631578947`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{19, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8421052631578947}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["69", TraditionalForm]}, {2.5, 
                    FormBox["10", TraditionalForm]}, {1.5, 
                    FormBox["251", TraditionalForm]}, {0.5, 
                    FormBox["16", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["70", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["10", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["247", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["19", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
              "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
              "Doors" -> <|"Type" -> "Nominal"|>, 
              "Passengers" -> <|"Type" -> "Nominal"|>, 
              "Cargo" -> <|"Type" -> "Nominal"|>, 
              "Safety" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|
                  "FeatureNames" -> {
                    "PurchasePrice", "MaintenanceCost", "Doors", "Passengers",
                     "Cargo", "Safety"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 6|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 1382, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.18180837299497768`, \
-0.5191050362589946, -0.3841046152539792, -0.5681753733658641, 
                    0.12529108395561656`, 0.45980236054401374`}, {
                    0.19483230814806896`, -0.11552149012629362`, \
-0.48399667557469317`, 
                    0.007741300812005421, -0.8143737955228835, \
-0.2262250394645403}, {
                    0.7017573541803983, -0.271578659323676, \
-0.2844896353147054, 0.0327006634878128, 
                    0.47461172003755725`, -0.3556988569880933}, \
{-0.534781449622502, -0.5935508055542879, -0.03841883279524632, 
                    0.43350591164949265`, 
                    0.09542916373943802, -0.4039754137631351}, \
{-0.24962449527823052`, 0.1995437550139275, 
                    0.05318131991869604, -0.6664425700794839, 
                    0.05982277373001385, -0.6688177516579797}, \
{-0.2970170290759208, 0.5013077991716276, -0.7300494849461234, 
                    0.20970076137332036`, 0.2883672850742781, 
                    0.01920999835638125}}, 
                    "Precisions" -> {11.409050313849102`, 11.728549767205461`,
                     11.838648803211964`, 12.353703996888086`, 
                    12.493974299485144`, 12.642220694332103`}, 
                    "NoisePrecision" -> None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712677`, 
                    0.0011546407584220714`, -0.0003624914148932479, 
                    0.0034011567571950794`, 0.006626869711687391, 
                    0.003842044757913067}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                    "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.00019167622420712688`, 
                    0.0011546407584220608`, -0.00036249141489325126`, 
                    0.0034011567571950794`, 0.006626869711687402, 
                    0.0038420447579130953`}, 
                    "StandardDeviation" -> {0.28713471191451057`, 
                    0.28528422466560827`, 0.29053889066604566`, 
                    0.28996498664931164`, 0.28410768089150235`, 
                    0.29055755494461777`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 6, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, 
                    "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.227775, "MaxTrainingMemory" -> 
                    1301552, "DataMemory" -> 445472, "FunctionMemory" -> 
                    62320, "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 8, 17, 59, 39.745929`8.351867630926963}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-1.4650241955255132`, \
-1.4650241955255132`, -1.430755802766193, -1.4042067830875913`, \
-1.3018866229987, -1.2507800118207644`, -1.2364530874740836`, \
-1.2255722141636205`, -1.2228520173189021`, -1.0894952762761034`, \
-1.0894015666714374`}, "LeftBoundary" -> -1.430755802766193, "LeftScale" -> 
                    0.01713419637966007, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[7.629856546861745, 0.2480059748492769], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5495059474424677337|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Index" -> {<|
                  "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                  2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                  "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                  "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.12314196676015854`, -0.861851692199707, 
                   0.10532767325639725`}, {
                   0.8298183679580688, -0.28949323296546936`, 
                   0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                   0.38437455892562866`, -0.8375512361526489, 
                   0.1422276645898819}}], 
                  RawArray["Real32",{{0., 0., 
                   0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                   0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                   0.4795919358730316}, {
                   0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                   0.2534555494785309, -0.4526385962963104}, {
                   0.3543681204319, -0.37547722458839417`, 
                   0.5876661539077759}, {-1.1276206970214844`, 
                   0.17602579295635223`, -1.0098364353179932`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.24657385051250458`, -0.8256815671920776, 
                   0.8846340179443359}, {0.6182233691215515, 
                   0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.34666627645492554`, -0.5679200291633606, 
                   0.10750995576381683`}, {
                   0.6412044167518616, -0.1759643256664276, 
                   0.6604856848716736}, {-0.8092290163040161, 
                   0.12987354397773743`, -1.1753407716751099`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                   0.12715618312358856`, 0.1291729062795639}, {
                   0.21379514038562775`, -0.6005780100822449, 
                   0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
                272386066020895428|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                   "very good" -> 4|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {4}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "acceptable" -> 0.227994227994228, "good" -> 0.04329004329004329, 
           "unacceptable" -> 0.6926406926406926, "very good" -> 
           0.03607503607503607|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Acceptability", 
             "Order" -> {
              "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
               "Cargo", "Safety", "Acceptability"}|>], "PreferLabeled" -> 
          True, "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> 
       None, "ImputationStrategy" -> Automatic, "Prior" -> Automatic, 
       "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Memory", "BatchProcessing" -> Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
cFUh/T9EFu3/
                   "], "Biases" -> 
                  RawArray["Real32",{-0.14151161909103394`, 
                    0.181189626455307, -0.10466769337654114`, \
-0.2077053189277649, 
                    0.0883769765496254, -0.21449072659015656`, \
-0.20492692291736603`, 0.11879973113536835`, 
                    0.19001705944538116`, -0.1973552703857422, 
                    0.14196911454200745`, 
                    0.06061756610870361, -0.1630895882844925, 
                    0.0015528978547081351`, -0.019544236361980438`, \
-0.19362524151802063`, -0.08886230736970901, -0.3445886969566345, 
                    0.2028679996728897, -0.1229017823934555, \
-0.12420354783535004`, -0.1491868793964386, -0.04626939445734024, 
                    0.10800476372241974`, -0.13900579512119293`, \
-0.16450759768486023`, -0.24966943264007568`, 
                    0.17121048271656036`, -0.14999428391456604`, \
-0.1330750733613968, 0.2752665579319, 
                    0.058282747864723206`, -0.1502441167831421, \
-0.24120116233825684`, -0.22375954687595367`, -0.2754586637020111, \
-0.17372222244739532`, 0.20720116794109344`, 
                    0.1669532060623169, -0.11877211928367615`, 
                    0.1377328783273697, 
                    0.14382711052894592`, -0.16925354301929474`, 
                    0.1921849101781845, 
                    0.15992730855941772`, -0.196363165974617, 
                    0.0778680145740509, 0.2140202522277832, 
                    0.16157454252243042`, 0.1905343234539032}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 18, "$InputDimensions" -> {18}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
98dz/HdDMto3mi7TRvw/7v8MHA==
                   "], "Biases" -> 
                  RawArray["Real32",{0.11058614403009415`, 0.1459028422832489,
                     0.09743592888116837, -0.13298943638801575`, \
-0.16004578769207, 0.036182701587677, 0.12315712869167328`, 
                    0.05935421213507652, -0.004007590934634209, \
-0.13807764649391174`, -0.15822666883468628`, -0.10480120778083801`, 
                    0.04406538978219032, -0.14523708820343018`, \
-0.19434992969036102`, -0.09664028882980347, 0.16884662210941315`, 
                    
                    0.039723534137010574`, -0.12681405246257782`, \
-0.10558248311281204`, 
                    0.008313377387821674, -0.16909171640872955`, \
-0.14977721869945526`, 
                    0.15547481179237366`, -0.1264285296201706, \
-0.081388458609581, 0.14261552691459656`, 0.06620728224515915, 
                    0.14516647160053253`, 
                    0.05168995261192322, -0.12877553701400757`, \
-0.07333686947822571, 0.1208353340625763, -0.11832599341869354`, 
                    0.10357934981584549`, -0.11235950142145157`, 
                    0.09922627359628677, 
                    0.08616095781326294, -0.13851280510425568`, 
                    0.083940789103508, 0.049086518585681915`, 
                    0.04191446676850319, -0.1144600659608841, \
-0.03270066902041435, -0.17829328775405884`, 0.056076716631650925`, 
                    0.13940095901489258`, 0.0495423823595047, 
                    0.13049697875976562`, 0.16978049278259277`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXtMU2ccQGvl2RZEmSgVV1CIrGosFIjC/X4XNEgdgihzEmYz6KDhOQ2o
MHkYJa6tgAqCAplCYTAeEZybgnC/32WwFeW5YGKXCYwNRKNzaeThfOCGf5yT
nBwPzZEDWqFAIMi0W9KB+KyQjIz4r6Jt3kdifJrSN+39tFrCd4mzrA1sSVPi
zzFa1Lj50df7vboUxliU9zkgpLjgmdkn0D3mjNd9g7BS5khFpkz8lR8i+d21
NCEqFP4VCfHKKzEfelBGT7Q+JX99XUsKaRK8DLGD0LhOUK6Z4PwnpaRtpRN4
FvTRpA3l5MWkPVt2qwSnB3+B5CvLwCHgKbDD1WidaEOVH3aS/u16vOFsoeOP
ctHwXynR2e3DbIUf2XarEoMHbDB3dR/1uVMKXqI6rPYsBp3JD3qlczTqgpz+
pGnEf3ryIEd7F9TkGpnIDocseQnTOyxi7heXQ+WyEfJQJgZLRB3RC/sgorMD
ts0xsEKYzM0kLDIqSonGPAyHX7xmTD7jMO+tQocH55h9bXrOOzAaV0dY8xUe
RV0tWWacs1SQDd+Pgm+gnukM9eQNEYskvTEZA789RM7KbqIKfSA4TMKW5k0z
0pRs1M0cx9qTJvLk9+PQ61gHKbwZg9s5erRgEzbJ44g49wcsOkXp1RoJO+V0
EQTnpaQpsgLfvpkg44pAmHy1Bi4OvaQN+V/ixo9KsGdBwI/9KIf65A94//oT
KLhqxQ8FnAb13jA4/dyMzt8p+WcKM80uV+O7aVs81HsdWtbXYkirK7pJdFBm
/gwabuggTyvGraPtuGdgMyasc2cbMgmGb3ZhxZEi/mC4AUYST4FqVMiLVZdg
12MD0belQr3VTn6iuYub3SpA+z9a4V6eJ1TXfAI1bvNcrKUEeJ9iXC6bxWIP
Ca5KWAGFXhbYrd5ItIrzWO4qhe6/T9L6nTpiHnsOC7uOAbjf46IvV0JOli3r
Pj3AnatKxUXNZVJ2ezn7hbYZJA8u4O4AW/ZPWwOsDGrBqaYOptC/kav4OCYo
pyydiXXZg+2/pWOBMQ7GrCGoaCofLTlGCKuK3uG4ah3bPDIIXvfrSNTAO+j5
/BtiiYwBvwVHMG7vB8Nabxwx2rPzHTdBPM/hpx3OqI7agab+u/g/mbaE8A==

                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.007236030418425798, -0.09619268029928207, 
                    0.09597259759902954, -0.13553404808044434`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 3.277165, "MeanInputsPerSecond" -> 
           29293.61200916036|>, "InputType" -> "NumericalVector", "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "Mean" -> {0.22846340109655627`, -0.7331524952465475, 
                 0.12857418486134847`, -0.1470174637574805, \
-0.3693960287360927, -0.25297157897734485`, -0.1381125864186497, \
-0.013550857960233805`, -0.4477105686514862, 
                 0.10026117855035539`, -0.22988884392409223`, 
                 0.29694375132721407`, 
                 0.05750394298490419, -0.1986286429254379, \
-0.13614149543094045`, 0.08288515091555626, -0.23331746818281004`, 
                 0.3872654421790709}, 
                "StandardDeviation" -> {0.4217841444635364, 
                 0.26610671534521446`, 0.0719824374461276, 0.3714420548858829,
                  0.17188502945715212`, 0.5106448641794368, 0.682620419657301,
                  0.2497243771479237, 0.6360414783504174, 
                 0.49439015269206665`, 0.4649285469405732, 0.4304973939924269,
                  0.6297890981361854, 0.2834486698239679, 0.7746989060734015, 
                 0.09846349258259571, 0.2971065188725669, 
                 0.21897662978258314`}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 7167940750356708679|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 2, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 3600, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> None, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 100, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.401929`6.055694336054277, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.09102929754751289, 0.023607494088640154`], "Accuracy" -> 
            Around[0.9761613127009874, 0.012949449812749267`], 
            "EvaluationTime" -> 0.0006881501464423077, "TestSize" -> 276, 
            "ModelMemory" -> 58320, "ModelUtility" -> 0.2778097519618762, 
            "TrainingSize" -> 1106, "TrainingTime" -> 3.1622776601683795`, 
            "TrainingMemory" -> 956544, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.09102929754751289, 0.016693019156898786`]}, 
            "AccuracyHistory" -> {
              Around[0.9761613127009874, 0.009156643775229874]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 2, "NumberOfParameters" -> 3600, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> None, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 100, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.5722078573533445`, 0.27210027194614067`], 
                 "Accuracy" -> 
                 Around[0.6211574386771406, 0.01848102720571032], 
                 "EvaluationTime" -> 0.00006727785530077912, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -3.6582194587192123`, "TrainingSize" -> 10,
                  "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 480808, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[4.5722078573533445`, 0.19240394745581973`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6211574386771406, 0.01306805966045084]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00006727785530077912, "MeanCrossEntropy" -> 
                Around[4.5722078573533445`, 0.27210027194614067`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 480808, 
                "TrainingTime" -> 58.99948267602831|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.146953849088694, 0.06512858825223299], "Accuracy" -> 
                 Around[0.5636622679613927, 0.04946899254797612], 
                 "EvaluationTime" -> 0.00020483898119853466`, "TestSize" -> 
                 200, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.2227347999526073`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.15848931924611134`, "TrainingMemory" -> 
                 309176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.146953849088694, 0.04605286640226046]}, 
                 "AccuracyHistory" -> {
                   Around[0.5636622679613927, 0.034979860089140696`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6860334428196505, 0.060102721049976764`], 
                 "Accuracy" -> 
                 Around[0.8161029716258141, 0.031470751638048605`], 
                 "EvaluationTime" -> 0.0003330981347269232, "TestSize" -> 300,
                  "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.7148737042326025`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.31622776601683794`, 
                 "TrainingMemory" -> 377728, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.6860334428196505, 0.04249904162220202]}, 
                 "AccuracyHistory" -> {
                   Around[0.8161029716258141, 0.022253181892301816`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.8053747043406867`, 0.05642796703407158], "Accuracy" -> 
                 Around[0.4158072905455017, 0.020925576627904317`], 
                 "EvaluationTime" -> 0.0005779874435747101, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.6713325971918254`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.25118864315095796`, "TrainingMemory" -> 
                 297016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.8053747043406867`, 0.03990059813836297]}, 
                 "AccuracyHistory" -> {
                   Around[0.4158072905455017, 0.014796617133829869`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35134608706131215`, 0.03978009020685576], 
                 "Accuracy" -> 
                 Around[0.8678411635281399, 0.028749297744619536`], 
                 "EvaluationTime" -> 0.00022915055508466515`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.0507407082010345`, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 948456, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35134608706131215`, 0.028128771541480278`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8678411635281399, 0.02032882338957159]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00022915055508466515`, 
                "MeanCrossEntropy" -> 
                Around[0.35134608706131215`, 0.03978009020685576], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 948456, 
                "TrainingTime" -> 0.7847467847731369|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.09102929754751289, 0.023607494088640154`], 
                 "Accuracy" -> 
                 Around[0.9761613127009874, 0.012949449812749267`], 
                 "EvaluationTime" -> 0.0006881501464423077, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 
                 0.2778097519618762, "TrainingSize" -> 1106, "TrainingTime" -> 
                 3.1622776601683795`, "TrainingMemory" -> 956544, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.09102929754751289, 0.016693019156898786`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9761613127009874, 0.009156643775229874]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8964811821115559, 0.05631576825786373], "Accuracy" -> 
                 Around[0.7133756368331798, 0.017387908807273374`], 
                 "EvaluationTime" -> 0.00034673664508861804`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.9714037318786193`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8964811821115559, 0.03982126162286557]}, 
                 "AccuracyHistory" -> {
                   Around[0.7133756368331798, 0.012295108228276294`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.3429807556245192`, 0.13818489531614622`], 
                 "Accuracy" -> 
                 Around[0.6158817888808668, 0.01850340875462363], 
                 "EvaluationTime" -> 0.00020305462724692585`, "TestSize" -> 
                 1372, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.9313466655000626`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 285712, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.3429807556245192`, 0.09771147653560017]}, 
                 "AccuracyHistory" -> {
                   Around[0.6158817888808668, 0.013083885805460898`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.28191119077631227`, 0.0268670654279549], "Accuracy" -> 
                 Around[0.8990167017961164, 0.012596838847921973`], 
                 "EvaluationTime" -> 0.0002202740115369196, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.8209142104906325, "TrainingSize" -> 250,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 373776, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.28191119077631227`, 0.01899788415468956]}, 
                 "AccuracyHistory" -> {
                   Around[0.8990167017961164, 0.008907310170879763]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002202740115369196, "MeanCrossEntropy" -> 
                Around[0.28191119077631227`, 0.0268670654279549], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 373776, 
                "TrainingTime" -> 10.121617336566537`|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.08963151751650107, 0.04221312431395196], "Accuracy" -> 
                 Around[0.9791357409747539, 0.012137549581765668`], 
                 "EvaluationTime" -> 0.0003240319691030005, "TestSize" -> 276,
                  "ModelMemory" -> 187664, "ModelUtility" -> 
                 0.11165932133847212`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 6.309573444801933, "TrainingMemory" -> 1169256, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.08963151751650107, 0.029849186457466155`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9791357409747539, 0.008582543616254447]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.2240863679594245`, 0.14357091710562775`], 
                 "Accuracy" -> 
                 Around[0.7906775734525874, 0.02161228989770136], 
                 "EvaluationTime" -> 0.0007772944109511788, "TestSize" -> 700,
                  "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.435754149761074, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1., "TrainingMemory" -> 780096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2240863679594245`, 0.10151996906656106`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7906775734525874, 0.015282196743634147`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4340717995649587, 0.04616762742632497], "Accuracy" -> 
                 Around[0.8493098429585471, 0.01492641153241974], 
                 "EvaluationTime" -> 0.0003877717060035205, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3968757488568753`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 840352, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4340717995649587, 0.03264544242444842]}, 
                 "AccuracyHistory" -> {
                   Around[0.8493098429585471, 0.010554566813355084`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003877717060035205, "MeanCrossEntropy" -> 
                Around[0.4340717995649587, 0.04616762742632497], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 840352, 
                "TrainingTime" -> 17.3393835219499|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.37168744234195067`, 0.06138078981133629], 
                 "Accuracy" -> 
                 Around[0.8929724590325544, 0.017756003513421006`], 
                 "EvaluationTime" -> 0.0005729130857749843, "TestSize" -> 600,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -1.2331962386303115`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 683920, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.37168744234195067`, 0.04340277271018203]}, 
                 "AccuracyHistory" -> {
                   Around[0.8929724590325544, 0.012555390491112156`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.7690385100499966`, 0.1667625598149496], "Accuracy" -> 
                 Around[0.6062976552481879, 0.020601568145856446`], 
                 "EvaluationTime" -> 0.0005071606602769552, "TestSize" -> 
                 1100, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -3.220876683857752, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 587920, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.7690385100499966`, 0.1179189368931781]}, 
                 "AccuracyHistory" -> {
                   Around[0.6062976552481879, 0.014567508539011861`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005071606602769552, "MeanCrossEntropy" -> 
                Around[2.7690385100499966`, 0.1667625598149496], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 587920, 
                "TrainingTime" -> 10.715092815685152`|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[3.194583785496335, 0.19343446926971108`], "Accuracy" -> 
                 Around[0.6168133280093175, 0.018368536511584353`], 
                 "EvaluationTime" -> 0.00040456834306917757`, "TestSize" -> 
                 1372, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -3.2901150116252373`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 384328, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.194583785496335, 0.13677882493583354`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6168133280093175, 0.012988516727813985`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00040456834306917757`, 
                "MeanCrossEntropy" -> 
                Around[3.194583785496335, 0.19343446926971108`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 384328, 
                "TrainingTime" -> 23.488117112273706`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.8197448601870514`, 0.15407278573948416`], 
                 "Accuracy" -> 
                 Around[0.7681197493442067, 0.016233908383616182`], 
                 "EvaluationTime" -> 0.0005168685314425036, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -2.805891685476432, "TrainingSize" -> 50, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 617752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.8197448601870514`, 0.10894591159269124`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7681197493442067, 0.011479106703216146`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005168685314425036, "MeanCrossEntropy" -> 
                Around[1.8197448601870514`, 0.15407278573948416`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 617752, 
                "TrainingTime" -> 74.27594802356177|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.29403327569319443`, 0.03932904399651967], 
                 "Accuracy" -> 
                 Around[0.9098419509282913, 0.011996499990282437`], 
                 "EvaluationTime" -> 0.00008681470201758184, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.8705335057683248, "TrainingSize" -> 250,
                  "TrainingTime" -> 10., "TrainingMemory" -> 351080, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.29403327569319443`, 0.027809833707523133`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9098419509282913, 0.008482806493633062]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.5876025435917676`, 0.22692353204588206`], 
                 "Accuracy" -> 
                 Around[0.6246522534683608, 0.018394245585487717`], 
                 "EvaluationTime" -> 0.00031189803436950574`, "TestSize" -> 
                 1372, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -3.3582514493484092`, "TrainingSize" -> 10,
                  "TrainingTime" -> 3.1622776601683795`, "TrainingMemory" -> 
                 273672, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[3.5876025435917676`, 0.16045916832044602`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6246522534683608, 0.01300669578830908]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00031189803436950574`, 
                "MeanCrossEntropy" -> 
                Around[3.5876025435917676`, 0.22692353204588206`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 273672, 
                "TrainingTime" -> 53.70267726352701|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.10590330154399025`, 0.028414184949045067`], 
                 "Accuracy" -> 
                 Around[0.9710001978599868, 0.014256985156258202`], 
                 "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.11862582820774348`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 986160, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.10590330154399025`, 0.0200918628593585]}, 
                 "AccuracyHistory" -> {
                   Around[0.9710001978599868, 0.010081210883266124`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.2470665473441196`, 0.13307038058297638`], 
                 "Accuracy" -> 
                 Around[0.6176776136790039, 0.01842307108792603], 
                 "EvaluationTime" -> 0.000405204733288256, "TestSize" -> 1372,
                  "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.895732548673068, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 296888, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.2470665473441196`, 0.09409496848529728]}, 
                 "AccuracyHistory" -> {
                   Around[0.6176776136790039, 0.013027078496554321`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000405204733288256, "MeanCrossEntropy" -> 
                Around[2.2470665473441196`, 0.13307038058297638`], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 296888, 
                "TrainingTime" -> 12.700902206251245`|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.2626592930291636, 0.03549734171705872], "Accuracy" -> 
                 Around[0.8904866053987731, 0.026502625634261496`], 
                 "EvaluationTime" -> 0.000995521083966344, "TestSize" -> 276, 
                 "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.8161649012419092, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 1012984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2626592930291636, 0.025100411042228342`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8904866053987731, 0.01874018630523473]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.622240942702334, 0.0474324350170228], "Accuracy" -> 
                 Around[0.4223703251465125, 0.01863988008159035], 
                 "EvaluationTime" -> 0.00022897192394878054`, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -2.616030556943823, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 447496, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.622240942702334, 0.03353979644872707]}, 
                 "AccuracyHistory" -> {
                   Around[0.4223703251465125, 0.013180385606196592`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5079075602598763, 0.031736742733066994`], 
                 "Accuracy" -> 
                 Around[0.8151969662775643, 0.016267526734640162`], 
                 "EvaluationTime" -> 0.0002366474107429308, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.461355133207583, "TrainingSize" -> 250, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 527464, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5079075602598763, 0.022441265999324552`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8151969662775643, 0.011502878467197513`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002366474107429308, "MeanCrossEntropy" -> 
                Around[0.5079075602598763, 0.031736742733066994`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 527464, 
                "TrainingTime" -> 3.401520371971754|>, "Index" -> 10|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 
         1382, "PreprocessorEvaluationTime" -> 4.21875*^-6, 
         "PreprocessorMemory" -> 94088, "InputDimension" -> 18, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.8472130263720676, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.868970440615246`16.340170400833458*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 10, "TimeBudgets" -> 5.861760790364184, 
             "ElapsedTimes" -> 16.465788, "ExperimentCounts" -> 8|>, <|
            "TrainingSizes" -> 50, "TimeBudgets" -> 8.373943986234558, 
             "ElapsedTimes" -> 9.178283, "ExperimentCounts" -> 4|>, <|
            "TrainingSizes" -> 250, "TimeBudgets" -> 11.962777123192216`, 
             "ElapsedTimes" -> 18.246313, "ExperimentCounts" -> 6|>, <|
            "TrainingSizes" -> 1106, "TimeBudgets" -> 17.0896816045603, 
             "ElapsedTimes" -> 16.763523, "ExperimentCounts" -> 5|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              2846111867015398573|>, 
            "f2" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"high"}, "ID" -> 
              41728420326286313|>, 
            "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                Interval[{5, 
                  DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
            "f4" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {4}, "ID" -> 
              536027689597629633|>, 
            "f5" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
              5753609278033805624|>, 
            "f6" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              8080186329754682489|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 61.169972, 
         "MaxTrainingMemory" -> 2033248, "DataMemory" -> 1781648, 
         "FunctionMemory" -> 352848, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 8, 18, 0, 40.649076`8.361625656281715}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|
     "Input" -> {{"medium", "high", 3, 4, "large", "medium"}, {
        "medium", "low", 4, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "large", "high"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 2, "small", "high"}, {
        "very high", "low", 2, 4, "medium", "high"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "very high", 2, 4, "medium", "high"}, {
        "very high", "medium", 2, 2, "medium", "high"}, {
        "low", "medium", 4, 2, "large", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "low", 2, 4, "medium", "medium"}, {
        "medium", "high", 4, 4, "small", "medium"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "low", "very high", 3, 2, "large", "medium"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "low", 3, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "medium", 3, 2, "medium", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "high", 3, 4, "small", "high"}, {
        "very high", "very high", 2, 2, "small", "low"}, {
        "high", "low", 4, 2, "medium", "medium"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 4, "large", "high"}, {
        "high", "very high", 4, 2, "large", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "medium", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 3, 4, "small", "low"}, {
        "high", "low", 2, 4, "large", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "high", 3, 4, "medium", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 2, 2, "medium", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 3, 4, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "high", 3, 4, "medium", "low"}, {
        "very high", "low", 4, 2, "large", "medium"}, {
        "very high", "high", 4, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "medium", "high", 3, 4, "small", "high"}, {
        "high", "medium", 3, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "high", 2, 2, "small", "low"}, {
        "medium", "low", 4, 2, "medium", "medium"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 2, "large", "medium"}, {
        "high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "low", 4, 4, "large", "medium"}, {
        "very high", "high", 3, 4, "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "very high", 3, 2, "large", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "very high", "high", 4, 4, "large", "low"}, {
        "high", "low", 2, 2, "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "high", "high", 2, 2, "large", "medium"}, {
        "medium", "high", 2, 4, "small", "high"}, {
        "medium", "medium", 2, 2, "large", "high"}, {
        "low", "medium", 2, 2, "medium", "low"}, {
        "high", "medium", 3, 2, "large", "medium"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 2, 4, "large", "medium"}, {
        "medium", "medium", 2, 4, "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "low", "low", 3, 4, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {
        "medium", "medium", 3, 2, "large", "high"}, {
        "high", "low", 4, 2, "small", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "high", 3, 2, "medium", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "high", 3, 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "medium", 2, 2, "large", "high"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "high", 4, 2, "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "low", 4, 2, "medium", "low"}, {
        "medium", "medium", 4, 4, "large", "high"}, {
        "medium", "medium", 3, 4, "small", "high"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 4, "medium", "low"}, {
        "very high", "medium", 4, 4, "small", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {
        "very high", "medium", 4, 2, "small", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 2, "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 4, "small", "high"}, {
        "very high", "high", 4, 4, "large", "medium"}, {
        "low", "high", 3, 2, "medium", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "low", 4, 4, "large", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "low", 4, 4, "large", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "very high", 2, 4, "small", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "very high", "low", 2, 4, "large", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 4, "large", "medium"}, {
        "very high", "high", 3, 2, "medium", "low"}, {
        "low", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 3, 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 2, 4, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 4, 2, "large", "low"}, {
        "very high", "medium", 3, 2, "small", "high"}, {
        "very high", "very high", 2, 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 2, "small", "high"}, {
        "medium", "medium", 4, 2, "small", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 4, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "medium", 3, 2, "large", "high"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "low", "low", 2, 2, "small", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 2, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 2, "small", "high"}, {
        "low", "high", 4, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "medium", "medium", 2, 2, "large", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 3, 2, "small", "low"}, {
        "high", "medium", 4, 4, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "medium", 3, 2, "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "low", 3, 4, "large", "high"}, {
        "very high", "low", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "high", "medium", 2, 4, "medium", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "very high", 2, 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 3, 4, "medium", "high"}, {
        "low", "medium", 2, 2, "large", "medium"}, {
        "medium", "low", 3, 4, "large", "high"}, {
        "medium", "high", 3, 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 3, 2, "medium", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "very high", "low", 4, 2, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 4, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "low", 2, 2, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "low", 2, 2, "small", "high"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "high", 3, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "high", "high", 3, 2, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "high", 3, 2, "small", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "medium", "very high", 3, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "low", 2, 4, "small", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "medium", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "low", "high", 2, 2, "small", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 4, "large", "low"}, {
        "medium", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {
        "low", "very high", 4, 4, "medium", "low"}, {"very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 3, 4, "large", "low"}, {
        "high", "low", 4, 4, "medium", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "medium", 3, 4, "medium", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "high", 4, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "low", 2, 4, "small", "low"}, {
        "medium", "low", 2, 4, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 2, 2, "small", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "very high", 3, 2, "large", "high"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "high", 2, 2, "medium", "low"}, {
        "high", "high", 2, 4, "medium", "low"}, {
        "high", "low", 4, 4, "medium", "high"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "low", 3, 2, "large", "medium"}, {
        "very high", "high", 3, 4, "large", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 3, 4, "large", "medium"}, {
        "medium", "low", 2, 2, "medium", "high"}, {
        "high", "medium", 2, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "low", "medium", 4, 2, "large", "high"}, {
        "very high", "high", 2, 4, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "low", "medium", 2, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "low"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "low", "high", 2, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}}, 
      "Output" -> {
       "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "good", "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "very good", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "unacceptable", "good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "very good", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "unacceptable",
         "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable"}|>, 
    "Predictions" -> {
     "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "good", "unacceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", "very good",
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "very good", "unacceptable", "good", 
      "unacceptable", "very good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "very good", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", "very good",
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", "good",
       "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable"}, "LogProbabilities" -> CompressedData["
1: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
Whs8JdQbFiVawP8B5ipgMQ==
     "], "CountMatrix" -> {{68, 1, 0, 0, 0}, {0, 8, 0, 2, 0}, {2, 1, 247, 1, 
     0}, {0, 0, 0, 16, 0}}, 
    "IndicesMatrix" -> {{{1, 7, 8, 15, 23, 29, 36, 42, 43, 44, 47, 49, 54, 60,
        64, 67, 73, 75, 79, 81, 82, 92, 101, 107, 112, 127, 135, 143, 146, 
       151, 152, 155, 163, 164, 170, 189, 190, 198, 202, 207, 213, 221, 222, 
       228, 233, 235, 243, 246, 248, 257, 259, 266, 278, 292, 305, 306, 315, 
       320, 323, 328, 331, 334, 335, 336, 337, 338, 342, 346}, {
       17}, {}, {}, {}}, {{}, {84, 86, 111, 172, 200, 214, 225, 255}, {}, {
       110, 239}, {}}, {{182, 301}, {52}, CompressedData["
1:eJwl0ulrDwAAANCftWFsMzvYbHa2zRyzzGzDtrZ2sDYJaxsJI1eO3OTIWe7I
USThgyO5yVnuJEdEOT9IORKSSHLklQ/vP3ipzdOHTGsRCAR+EEQwIbQklDa0
JYxwIogkimhiiKUDccTTiQQSSSKZFFJJI50MMsmiC9n0IIdcepFHPgUUUkRf
+lFMCaWUUU4FlVRRzQBqqKWOQQxmKPU00EgTwxnBSEYxmjE0M5ZxjGcCE5nE
ZKYwlRnMZBazmcNc5jGfBSxkEYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJW
trGdHexkF7vZw172sZ8DHOQQhznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWu
cZ0b3OQWt7nDXe5xnwc85BGPecJTnvGcF7zkFa95w1ve8Z4PfOQTn/nCV77x
PfD/709+8Zs//CUgdxDBhNCK1oTSljDCiaAdkbQnimhiiKUjccSTQCKdSSKZ
FFJJI50MMskim650ozs59CSXPHqTTx8KKKSI/hRTQilllFNBJVVUM5Aaaqlj
GPU00EgT/wB2QWZ+
       "], {227}, {}}, {{}, {}, {}, {3, 94, 122, 134, 157, 159, 165, 210, 223,
        241, 250, 262, 282, 296, 314, 339}, {}}}, 
    "ExtendedClasses" -> {"acceptable", "good", "unacceptable", "very good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006794450867052022, "SingleEvaluationTime" -> 
    0.005826, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{3.86896617348654*^9, 3.868966311492532*^9, 
  3.8689668453138514`*^9},
 CellLabel->
  "Out[432]=",ExpressionUUID->"525816a6-016d-40b3-a104-dcb961fcbf59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}},
 CellLabel->
  "In[433]:=",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],

Cell[BoxData[
 TemplateBox[{"357.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.868966455151699*^9, 3.868966522419289*^9, {3.868966572943582*^9, 
   3.868966625736467*^9}, 3.868966851157722*^9},
 CellLabel->
  "Out[433]=",ExpressionUUID->"35e9f6e1-cd90-4de0-adc7-055c46b337ed"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 3.868447512030362*^9}, {3.868964810263049*^9, 
  3.868964810772952*^9}},ExpressionUUID->"d293971e-29a8-48c6-9378-\
634a3d38a3fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tmp1", "=", 
   RowBox[{"Map", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"d", "=", 
          RowBox[{"Drop", "[", 
           RowBox[{"#", ",", 
            RowBox[{"-", "1"}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"Values", "[", 
            RowBox[{"trainedSoftNet", "[", 
             RowBox[{"d", ",", "\"\<Probabilities\>\""}], "]"}], "]"}], "]"}],
           ",", 
          RowBox[{"Flatten", "[", 
           RowBox[{"HardNetClassProbabilities", "[", 
            RowBox[{"HardNetClassScores", "[", 
             RowBox[{"HardNetClassBits", "[", 
              RowBox[{"hnf", ",", "featureLayer", ",", 
               RowBox[{"{", "d", "}"}]}], "]"}], "]"}], "]"}], "]"}]}], 
         "}"}]}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
     RowBox[{"Normal", "[", "testData", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868534500633864*^9, 3.868534530856123*^9}, {
   3.868534632169736*^9, 3.868534646264037*^9}, {3.868534678794361*^9, 
   3.868534701575143*^9}, {3.8685348592982283`*^9, 3.868534879711412*^9}, {
   3.8689592232795486`*^9, 3.868959373725676*^9}, 3.8689595069835777`*^9, {
   3.86896134733706*^9, 3.8689613476338453`*^9}},
 CellLabel->
  "In[402]:=",ExpressionUUID->"5a479eae-a14a-4e16-be45-c641694c4dfb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", "=", "#"}], "}"}], ",", 
     RowBox[{
      RowBox[{"Total", "[", 
       RowBox[{
        RowBox[{"d", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "-", 
        RowBox[{"d", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "<", "0.00001"}]}], "]"}], 
   "&"}], "/@", "tmp1"}]], "Input",
 CellChangeTimes->{{3.868959378725573*^9, 3.868959482804295*^9}},
 CellLabel->
  "In[403]:=",ExpressionUUID->"a3f04598-6a66-46f7-ade9-0b15965d1e09"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.868959381184671*^9, 3.8689594836429167`*^9}, 
   3.868961354362104*^9, 3.868965897250445*^9},
 CellLabel->
  "Out[403]=",ExpressionUUID->"14b493bb-af98-4853-ab8b-5610f853aa92"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tmp2", "=", 
  RowBox[{"Map", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"d", "=", 
          RowBox[{"Drop", "[", 
           RowBox[{"#", ",", 
            RowBox[{"-", "1"}]}], "]"}]}], ",", 
         RowBox[{"decoder", "=", 
          RowBox[{"NetDecoder", "[", 
           RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}],
         "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"decoder", "@", 
          RowBox[{"Flatten", "[", 
           RowBox[{"Values", "[", 
            RowBox[{"trainedSoftNet", "[", 
             RowBox[{"d", ",", "\"\<Probabilities\>\""}], "]"}], "]"}], 
           "]"}]}], ",", 
         RowBox[{"HardNetClassPrediction", "[", 
          RowBox[{
           RowBox[{"HardNetClassProbabilities", "[", 
            RowBox[{"HardNetClassScores", "[", 
             RowBox[{"HardNetClassBits", "[", 
              RowBox[{"hnf", ",", "featureLayer", ",", 
               RowBox[{"{", "d", "}"}]}], "]"}], "]"}], "]"}], ",", 
           "decoder"}], "]"}]}], "}"}]}], "\[IndentingNewLine]", "]"}], "&"}],
     ",", 
    RowBox[{"Normal", "[", "testData", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.868962568267823*^9, 3.868962568443388*^9}, {
  3.8689625990367603`*^9, 3.868962634844144*^9}, {3.868962954206461*^9, 
  3.868963006103692*^9}, {3.868963078743579*^9, 3.8689630799009457`*^9}},
 CellLabel->
  "In[404]:=",ExpressionUUID->"823906f0-cf51-4175-9177-0ea4071ef474"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"good\"\>", ",", "\<\"good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"good\"\>", ",", "\<\"good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"good\"\>", ",", "\<\"good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"good\"\>", ",", "\<\"good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"good\"\>", ",", "\<\"good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"good\"\>", ",", "\<\"good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"good\"\>", ",", "\<\"good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",",
    
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"good\"\>", ",", "\<\"good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"good\"\>", ",", "\<\"good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"good\"\>", ",", "\<\"good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"good\"\>", ",", "\<\"good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"very good\"\>", ",", "\<\"very good\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"unacceptable\"\>", ",", "\<\"unacceptable\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"acceptable\"\>", ",", "\<\"acceptable\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.868962627150137*^9, 3.868962639799542*^9}, 
   3.8689630118235188`*^9, {3.868963071858581*^9, 3.868963084172743*^9}, 
   3.868965902409729*^9},
 CellLabel->
  "Out[404]=",ExpressionUUID->"836929a9-e2bd-4562-82f4-f7c2fb2d62fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", "=", "#"}], "}"}], ",", 
     RowBox[{
      RowBox[{"d", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "==", 
      RowBox[{"d", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "&"}], "/@", 
  "tmp2"}]], "Input",
 CellChangeTimes->{{3.868962659994536*^9, 3.868962675665959*^9}},
 CellLabel->
  "In[405]:=",ExpressionUUID->"9fd13dff-5c88-40c3-9f84-5a1d2a26ef43"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.868962665376549*^9, 3.8689626759884233`*^9}, 
   3.86896308931984*^9, 3.868965904348075*^9},
 CellLabel->
  "Out[405]=",ExpressionUUID->"ad37c5c8-330b-495b-acba-ddcaf53c95e3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"softWeights", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.868598558993527*^9, 3.8685985805202436`*^9}},
 CellLabel->
  "In[406]:=",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"softWeights", ",", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.868598583187772*^9, 3.8685985949050713`*^9}},
 CellLabel->
  "In[407]:=",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.602], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.602], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-4.5, 0}, {-4., 10.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{30.863384457566042`, 54.340873591730514`}, {
           90.927510944812, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 10]& ,
        TagBoxNote->"10"],
       StyleBox["10", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[10, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-4., 0}, {-3.5, 10.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{53.840873591730514`, 77.31836272589499}, {
           90.927510944812, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 10]& ,
        TagBoxNote->"10"],
       StyleBox["10", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[10, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-3.5, 0}, {-3., 30.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{76.81836272589499, 100.29585186005946`}, {
           90.03253283443595, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 30]& ,
        TagBoxNote->"30"],
       StyleBox["30", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[30, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-3., 0}, {-2.5, 72.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{99.79585186005946, 123.27334099422394`}, {
           88.15307880264628, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 72]& ,
        TagBoxNote->"72"],
       StyleBox["72", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[72, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-2.5, 0}, {-2., 255.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{122.77334099422394`, 146.25083012838843`}, {
           79.96402909270553, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 255]& ,
        TagBoxNote->"255"],
       StyleBox["255", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[255, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-2., 0}, {-1.5, 711.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{145.75083012838843`, 169.22831926255287`}, {
           59.55852817613187, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 711]& ,
        TagBoxNote->"711"],
       StyleBox["711", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[711, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-1.5, 0}, {-1., 957.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{168.72831926255287`, 192.20580839671737`}, {
           48.55029741850661, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 957]& ,
        TagBoxNote->"957"],
       StyleBox["957", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[957, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-1., 0}, {-0.5, 1436.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{191.70580839671737`, 215.18329753088184`}, {
           27.115571675000496`, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1436]& ,
        TagBoxNote->"1436"],
       StyleBox["1436", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1436, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-0.5, 0}, {0., 2899.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{214.68329753088184`, 
           238.16078666504632`}, {-38.35207709900665, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2899]& ,
        TagBoxNote->"2899"],
       StyleBox["2899", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2899, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0., 0}, {0.5, 4304.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{237.66078666504632`, 
           261.1382757992108}, {-101.22428935292332`, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 4304]& ,
        TagBoxNote->"4304"],
       StyleBox["4304", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[4304, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.5, 0}, {1., 1577.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{260.6382757992108, 284.11576493337526`}, {
           20.80597599684944, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1577]& ,
        TagBoxNote->"1577"],
       StyleBox["1577", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1577, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{1., 0}, {1.5, 43.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{283.61576493337526`, 307.09325406753976`}, {
           89.45079706269154, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 43]& ,
        TagBoxNote->"43"],
       StyleBox["43", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[43, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{1.5, 0}, {2., 15.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{306.59325406753976`, 330.0707432017042}, {
           90.70376641721799, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 15]& ,
        TagBoxNote->"15"],
       StyleBox["15", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[15, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{2., 0}, {2.5, 1.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{329.5707432017042, 353.0482323358687}, {
           91.33025109448121, 91.87500000000001}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 1]& ,
        TagBoxNote->"1"],
       StyleBox["1", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[1, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-4.64, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-4.5, 2.5}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.868598587213368*^9, 3.868598595534347*^9}, 
   3.8685995277293787`*^9, 3.868600221413623*^9, 3.868602949041443*^9, 
   3.868604296907655*^9, 3.8686706335951767`*^9, 3.868672097574623*^9, 
   3.868681481840914*^9, 3.868947735099625*^9, 3.868948276385453*^9, 
   3.868959188370422*^9, 3.868961360146255*^9, 3.868963094406687*^9, 
   3.868965910434655*^9},
 CellLabel->
  "Out[407]=",ExpressionUUID->"98f5c4a1-95d4-40b2-b6e2-b4421e938d54"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 733, 16, 29, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1555, 48, 202, 3, 29, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1760, 53, 27782, 620, 313, "Output",ExpressionUUID->"8e0777b3-a7ff-408d-93a4-c379a9067373"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29579, 678, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[29808, 686, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[30276, 697, 127624, 2372, 652, "Output",ExpressionUUID->"97e716f5-e291-4891-968e-b1b7f7b73be3"]
}, Open  ]],
Cell[157915, 3072, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166445, 3279, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[166765, 3286, 2756, 68, 154, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[169524, 3356, 1775, 41, 195, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[171336, 3402, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[171694, 3410, 2866, 50, 133, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[174563, 3462, 1445, 27, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[176011, 3491, 1095, 25, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177143, 3521, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[177501, 3529, 1624, 31, 154, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179162, 3565, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[179621, 3574, 1755, 33, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[181401, 3611, 909, 15, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[182313, 3628, 243053, 4454, 495, "Output",ExpressionUUID->"61396991-0977-4292-903b-6c2bfc4adf23"]
}, Open  ]],
Cell[CellGroupData[{
Cell[425403, 8087, 710, 17, 29, "Input",ExpressionUUID->"260659aa-9626-49a2-b96d-2673b75262e7"],
Cell[426116, 8106, 414213, 8247, 68, "Output",ExpressionUUID->"6982025c-6678-469e-a1f3-8d8f972b52f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[840366, 16358, 327, 7, 29, "Input",ExpressionUUID->"5078f7c8-7b76-4fb4-adfc-89539893ca31"],
Cell[840696, 16367, 193639, 3647, 495, "Output",ExpressionUUID->"51b181d5-d313-4a5b-89bc-ca0744e67c59"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1034384, 20020, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[1034894, 20030, 823, 14, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[1035720, 20046, 957, 17, 29, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[CellGroupData[{
Cell[1036702, 20067, 258, 5, 29, "Input",ExpressionUUID->"9e1bb078-3630-47c0-b20f-fbdb3a14e559"],
Cell[1036963, 20074, 2931, 66, 112, "Output",ExpressionUUID->"085feb68-0957-4ed7-b327-69f98e5600a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1039931, 20145, 574, 15, 32, "Input",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],
Cell[1040508, 20162, 331, 6, 44, "Output",ExpressionUUID->"db46bd07-8503-4038-ac22-7f515a8b1258"]
}, Open  ]],
Cell[1040854, 20171, 280, 6, 29, "Input",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1041171, 20182, 412, 6, 69, "Chapter",ExpressionUUID->"85881d34-aa2c-47a4-9cef-231d0c092462"],
Cell[CellGroupData[{
Cell[1041608, 20192, 584, 11, 29, "Input",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],
Cell[1042195, 20205, 102350, 1826, 68, "Output",ExpressionUUID->"6871e97c-7114-4129-908c-f7164b0eb2dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1144582, 22036, 346, 7, 29, "Input",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],
Cell[1144931, 22045, 198359, 3748, 495, "Output",ExpressionUUID->"525816a6-016d-40b3-a104-dcb961fcbf59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1343327, 25798, 368, 7, 29, "Input",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],
Cell[1343698, 25807, 325, 7, 44, "Output",ExpressionUUID->"35e9f6e1-cd90-4de0-adc7-055c46b337ed"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1344072, 25820, 541, 8, 69, "Chapter",ExpressionUUID->"d293971e-29a8-48c6-9378-634a3d38a3fe"],
Cell[1344616, 25830, 1488, 35, 92, "Input",ExpressionUUID->"5a479eae-a14a-4e16-be45-c641694c4dfb"],
Cell[CellGroupData[{
Cell[1346129, 25869, 558, 17, 29, "Input",ExpressionUUID->"a3f04598-6a66-46f7-ade9-0b15965d1e09"],
Cell[1346690, 25888, 5004, 70, 282, "Output",ExpressionUUID->"14b493bb-af98-4853-ab8b-5610f853aa92"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1351731, 25963, 1604, 39, 113, "Input",ExpressionUUID->"823906f0-cf51-4175-9177-0ea4071ef474"],
Cell[1353338, 26004, 33317, 701, 1347, "Output",ExpressionUUID->"836929a9-e2bd-4562-82f4-f7c2fb2d62fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1386692, 26710, 480, 15, 29, "Input",ExpressionUUID->"9fd13dff-5c88-40c3-9f84-5a1d2a26ef43"],
Cell[1387175, 26727, 5003, 70, 282, "Output",ExpressionUUID->"ad37c5c8-330b-495b-acba-ddcaf53c95e3"]
}, Open  ]],
Cell[1392193, 26800, 322, 8, 29, "Input",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],
Cell[CellGroupData[{
Cell[1392540, 26812, 281, 6, 29, "Input",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],
Cell[1392824, 26820, 11065, 325, 235, "Output",ExpressionUUID->"98f5c4a1-95d4-40b2-b6e2-b4421e938d54"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

