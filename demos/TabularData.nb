(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1301905,      23940]
NotebookOptionsPosition[   1296942,      23847]
NotebookOutlinePosition[   1297380,      23864]
CellTagsIndexPosition[   1297337,      23861]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["DifferentiableHardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "DifferentiableHardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardeningLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardeningLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassScores", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassScores", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "NeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "DifferentiableHardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardenNet", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardenNet", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "NeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "DifferentiableHardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetTransformWeights", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetTransformWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralReshapeLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralReshapeLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["RandomBalancedNormalSoftBits", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "RandomBalancedNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["ExtractWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "ExtractWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomNormalSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "RandomNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetNetArrays", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "GetNetArrays", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanExpression", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetBooleanExpression", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralChain", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralChain", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomUniformSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "RandomUniformSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "GetWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetBooleanFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralCount", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralCount", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Require", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "Require", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralExactlyK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralExactlyK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBalanced", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "InitializeBalanced", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "SoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClassificationLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardClassificationLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassify", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassify", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralLTEK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralLTEK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToOne", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "InitializeNearToOne", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Soften", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "Soften", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassifyEvaluation", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassifyEvaluation", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToZero", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "InitializeNearToZero", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["HardDropoutLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardDropoutLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassPrediction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassPrediction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeToConstant", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "InitializeToConstant", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassProbabilities", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNetClassProbabilities", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "HardNeuralNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LogisticClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-08f19c5f-8190-464b-a88f-feba656dfed0", {
                   "LogisticClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{
  3.86479111604138*^9, 3.8647911657240562`*^9, 3.864791620800887*^9, 
   3.86479194597997*^9, 3.86479198092934*^9, 3.864792204697258*^9, 
   3.864792687703233*^9, 3.864793105592959*^9, 3.864793526801218*^9, 
   3.864793732850697*^9, 3.864794507927494*^9, 3.864796071752219*^9, 
   3.864825438485825*^9, 3.864825531891514*^9, 3.8648260962141314`*^9, 
   3.864830162877289*^9, 3.8648755408909893`*^9, 3.865049480919162*^9, 
   3.865050046751976*^9, 3.865051042066378*^9, 3.8650523426134*^9, 
   3.8650543558693867`*^9, 3.865058337414798*^9, 3.8650584086343327`*^9, 
   3.86505947338*^9, 3.86506885830449*^9, 3.865397062515942*^9, 
   3.86539822002991*^9, 3.865414037240362*^9, 3.865415448442546*^9, 
   3.865415610582356*^9, 3.8654172214829617`*^9, 3.865417469191354*^9, 
   3.865419590403018*^9, 3.865420075554387*^9, 3.865428054175325*^9, 
   3.8654793173710623`*^9, 3.8655665906709213`*^9, 3.865591995941038*^9, 
   3.865658579968223*^9, 3.865772215681147*^9, 3.865779562552833*^9, 
   3.8658370145359364`*^9, 3.86584060155225*^9, 3.8659992094486027`*^9, 
   3.866003652107215*^9, 3.8660161651613417`*^9, 3.8661754677644978`*^9, 
   3.866258657623454*^9, 3.866285693609187*^9, 3.86635057486532*^9, 
   3.866512485808078*^9, 3.866512816932197*^9, 3.866553529720395*^9, 
   3.8666025113336687`*^9, 3.866606144536639*^9, 3.866608546326232*^9, 
   3.866609704076623*^9, 3.8666137219288273`*^9, 3.86671285229326*^9, 
   3.866788776837541*^9, 3.866788812552528*^9, 3.866794689702251*^9, 
   3.8667979035574636`*^9, 3.8667996941084146`*^9, 3.866800686995532*^9, 
   3.866801936715271*^9, 3.866865563143631*^9, 3.8671595128431797`*^9, 
   3.867322056244096*^9, 3.8674794507502613`*^9, 3.8675828633257*^9, 
   3.867669743397482*^9, 3.867732450434094*^9, 3.867751859422694*^9, 
   3.867752571591299*^9, 3.867811509870346*^9, 3.8678117360040903`*^9, 
   3.8678203831872883`*^9, 3.867843695133718*^9, 3.867850373374954*^9, 
   3.86800725388065*^9, 3.868015027015581*^9, 3.868070609148181*^9, 
   3.8680707782820997`*^9, 3.868071504515008*^9, 3.868078566976554*^9, 
   3.868079276409031*^9, 3.8680936161674767`*^9, 3.868332595482695*^9, 
   3.868343297990016*^9, {3.868434780605877*^9, 3.86843479524651*^9}, 
   3.868445566107071*^9, 3.868519876174618*^9, 3.86853009787873*^9, 
   3.868533409155756*^9, 3.868591470469123*^9, 3.868591573510869*^9, 
   3.8686703712738132`*^9, 3.868674802626226*^9, 3.868944309055069*^9, 
   3.8690237136048*^9, 3.869041334767592*^9, 3.869042729449026*^9, 
   3.8691052086388483`*^9, {3.869119717935349*^9, 3.8691197334997396`*^9}, 
   3.869212277532627*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"a8160bde-1394-4ad9-99de-aba1517fc23d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11076311837203559612771654019538047733440425727513536347048], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11076311837203559612771654019538047733440425727513536347048,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9, 3.8685300999400797`*^9, 3.868533465833148*^9, 
  3.868591722379105*^9, 3.868670373439299*^9, 3.868944316441147*^9, 
  3.869023715466254*^9, 3.869041339373542*^9, 3.869119740136602*^9, 
  3.869212283188902*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"742bfa1a-6eda-4c65-ab3c-05c3cdb241be"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "featureValues"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}, {3.868682465592621*^9, 3.868682467103612*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9, {
   3.8686824585003*^9, 3.86868246003918*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"256", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize", ",", 
           RowBox[{
            RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}], ",", 
           RowBox[{
            RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}, {
   3.868520025904859*^9, 3.868520026662962*^9}, {3.868520165374518*^9, 
   3.868520172724663*^9}, {3.868520227657476*^9, 3.8685202280400333`*^9}, {
   3.868520278697311*^9, 3.868520283147401*^9}, {3.8685206145298347`*^9, 
   3.8685206150078983`*^9}, {3.868537004723915*^9, 3.868537005683709*^9}, {
   3.8686716248609867`*^9, 3.86867162498657*^9}, {3.8689423409409943`*^9, 
   3.868942344276237*^9}, {3.868947806296569*^9, 3.868947806625355*^9}, 
   3.868955246204385*^9, {3.868957393208212*^9, 3.8689574013451433`*^9}, {
   3.868957440249872*^9, 3.8689574443738937`*^9}, {3.8689577953130703`*^9, 
   3.868957801168947*^9}, {3.868958026730661*^9, 3.8689580269562798`*^9}, {
   3.868960876079372*^9, 3.8689608783682137`*^9}, {3.868964831153708*^9, 
   3.868964831513155*^9}, {3.868965437993729*^9, 3.868965438129128*^9}, {
   3.868975240520047*^9, 3.868975267560664*^9}, {3.8690319933178453`*^9, 
   3.8690319942928963`*^9}, {3.869034512435259*^9, 3.869034512808312*^9}, {
   3.869034610772094*^9, 3.869034611688615*^9}, {3.86903620618801*^9, 
   3.869036206373323*^9}, {3.8690363476068773`*^9, 3.869036349769408*^9}, {
   3.869036449105991*^9, 3.869036450054133*^9}, {3.8691058271725616`*^9, 
   3.86910585030811*^9}, {3.869106008681794*^9, 3.86910601769174*^9}, {
   3.869106118542383*^9, 3.869106126708026*^9}, {3.869106300198392*^9, 
   3.869106310243504*^9}, {3.869106550008959*^9, 3.8691065502511663`*^9}, {
   3.8691066023696003`*^9, 3.8691066409269953`*^9}, {3.869106728726873*^9, 
   3.869106732707152*^9}, {3.869106781369624*^9, 3.869106781690955*^9}, {
   3.869107221769636*^9, 3.869107224150084*^9}, {3.8691076647349586`*^9, 
   3.8691076791551533`*^9}, 3.869108111159465*^9, {3.869111253542173*^9, 
   3.869111266704829*^9}, 3.8691114531763678`*^9, {3.8691115014501963`*^9, 
   3.8691115024350452`*^9}, {3.8691115775921707`*^9, 
   3.8691115787758913`*^9}, {3.8691116899369087`*^9, 3.869111690538197*^9}, {
   3.8691117691600723`*^9, 3.8691117876982183`*^9}, {3.8691121802378807`*^9, 
   3.8691121836826277`*^9}, 3.869112387993538*^9, {3.8691125616997557`*^9, 
   3.8691125907168922`*^9}, {3.86911270806533*^9, 3.869112723740849*^9}, {
   3.869112956528831*^9, 3.869112966025186*^9}, {3.869113141057391*^9, 
   3.869113142033929*^9}, 3.869115743191606*^9, {3.869117545424532*^9, 
   3.869117552560911*^9}, 3.8691197572896433`*^9, {3.869121698753475*^9, 
   3.8691217122755747`*^9}, 3.86919713699297*^9, {3.869203795640698*^9, 
   3.8692038057553377`*^9}, {3.8692077554756203`*^9, 3.869207760735105*^9}, {
   3.869208079942*^9, 3.869208085087775*^9}, {3.8692088553125353`*^9, 
   3.86920886120012*^9}, {3.869209158678213*^9, 3.869209159292757*^9}, {
   3.8692095136217213`*^9, 3.869209514533951*^9}, {3.869211601191217*^9, 
   3.869211602739736*^9}, {3.8692123062616177`*^9, 3.8692123119646463`*^9}, {
   3.869212438589468*^9, 3.8692124505522203`*^9}, {3.869212552950715*^9, 
   3.8692125532671328`*^9}, {3.8692126127431927`*^9, 3.869212613253107*^9}, {
   3.8692126791033287`*^9, 3.86921268464844*^9}, {3.86921276395127*^9, 
   3.8692127642612867`*^9}, {3.869212861743297*^9, 3.8692128621976557`*^9}, {
   3.869212912650663*^9, 3.8692129131419163`*^9}, {3.869213418442769*^9, 
   3.869213422358157*^9}, {3.86921548420509*^9, 
   3.869215491793586*^9}},ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-\
4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->
  "In[133]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}, {
   3.8685364797630873`*^9, 3.868536496883217*^9}, {3.868600076169417*^9, 
   3.868600076637474*^9}, {3.868600134889481*^9, 3.868600135284954*^9}, {
   3.868601255470386*^9, 3.8686012558943872`*^9}, {3.868602902814464*^9, 
   3.868602903232891*^9}, {3.868943377521962*^9, 3.868943381357031*^9}, {
   3.8689434141572866`*^9, 3.868943425164989*^9}, {3.868943586951866*^9, 
   3.8689436089616327`*^9}, {3.868944023717293*^9, 3.8689440271979637`*^9}, {
   3.868944083020088*^9, 3.868944086825481*^9}, {3.868947817163151*^9, 
   3.8689478172894077`*^9}, {3.868949946458611*^9, 3.868949960076432*^9}, {
   3.868977243682851*^9, 3.868977248732733*^9}, {3.868977291844462*^9, 
   3.8689773017254*^9}, {3.868977346389843*^9, 3.868977377673813*^9}, {
   3.868977408389917*^9, 3.868977427933148*^9}, {3.868977539952648*^9, 
   3.868977554029306*^9}, {3.868977819969697*^9, 3.8689778435338573`*^9}, {
   3.869023762591353*^9, 3.8690237633179893`*^9}, {3.869023837158021*^9, 
   3.869023876685935*^9}, {3.869110793308095*^9, 3.86911082542246*^9}, {
   3.869110910640922*^9, 3.869110910806432*^9}, {3.86912172241117*^9, 
   3.8691217224768143`*^9}},
 CellLabel->
  "In[135]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{"\"\<TrainedNet\>\"", "->", 
         RowBox[{"NetDelete", "[", 
          RowBox[{
           RowBox[{"NetFlatten", "[", "#", "]"}], ",", "\"\<Loss/Error\>\""}],
           "]"}]}], "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      RowBox[{"HardenNet", "[", 
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}]}], "}"}]}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}, {3.86912103176339*^9, 3.869121111451393*^9}, 
   3.8691211481142063`*^9},
 CellLabel->
  "In[136]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", 
     RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}, {
   3.868964207787449*^9, 3.868964270803673*^9}, {3.869042816860148*^9, 
   3.869042853385454*^9}, {3.8691211223288383`*^9, 3.869121124951189*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "d84bc6a0-46f9-43a6-a8fa-b399aec7c513"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"95.4", "1.1"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    95.3757225433526087954`3., 1.1306581431718727426`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265192167`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.8880717006205934849`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0280523681363902266`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.8319669643478130316`3.", "\", \"", 
                    "0.9441764368933739382`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.8319669643478130316`3., ", ", 0.9441764368933739382`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.1187027953074738379`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0315827034087435704`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.0555373884899866971`3.", "\", \"", 
                    "0.1818682021249609648`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.0555373884899866971`3., ", ", 0.1818682021249609648`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.18`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"1.38`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQ+6DNjFSW4Hf2qmYrrrqXvrWvc7ru9nr+S3sGMPiA
QfubdR7NZn5nH5LOcb7R4409G6/gsSkTn9kXbCuaWfz3jb1HUcXW324v7Jc1
Za9fP+OmPS7zczSzW61S3tpvOXni4Nd3L+0lFrUceV7ywH4p/6Wdm+Tf2Edk
dfhb1T6xZ9K7v4c99aj9Xf0q1cub39q3zMg4sVv6tf2E616uds2PcboTRj+s
Elnn/vAWlM/AQKo5uPyFSz0u/+ISBwAbi5wW
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8461538461538461}], 
                    Row[{"Recall = ", 0.8461538461538461}], 
                    Row[{"FScore = ", 0.8461538461538461}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.07692307692307693`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.014705882352941176`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.07692307692307693}], 
                    Row[{"Row fraction = ", 0.014705882352941176`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.07692307692307693`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.07142857142857142`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.07692307692307693}], 
                    Row[{"Row fraction = ", 0.07142857142857142}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["248", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "248", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9841269841269841`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9880478087649402`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9860834990059641`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{248, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9841269841269841}], 
                    Row[{"Recall = ", 0.9880478087649402}], 
                    Row[{"FScore = ", 0.9860834990059641}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.015873015873015872`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.058823529411764705`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.015873015873015872`}], 
                    Row[{"Row fraction = ", 0.058823529411764705`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.015151515151515152`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.07692307692307693`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.015151515151515152`}], 
                    Row[{"Row fraction = ", 0.07692307692307693}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.045454545454545456`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.01195219123505976`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.045454545454545456`}], 
                    Row[{"Row fraction = ", 0.01195219123505976}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["60", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "60", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9090909090909091`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8823529411764706`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8955223880597014`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{60, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9090909090909091}], 
                    Row[{"Recall = ", 0.8823529411764706}], 
                    Row[{"FScore = ", 0.8955223880597014}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.030303030303030304`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.030303030303030304`}], 
                    Row[{"Row fraction = ", 0.14285714285714285`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.06666666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.07692307692307693`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.06666666666666667}], 
                    Row[{"Row fraction = ", 0.07692307692307693}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.2`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.04411764705882353`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.2}], 
                    Row[{"Row fraction = ", 0.04411764705882353}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7333333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.7857142857142857`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.7586206896551724`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7333333333333333}], 
                    Row[{"Recall = ", 0.7857142857142857}], 
                    Row[{"FScore = ", 0.7586206896551724}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.8461538461538461}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9880478087649402`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9880478087649402}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8823529411764706`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{68, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.8823529411764706}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.7857142857142857`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{14, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.7857142857142857}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8461538461538461}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "252", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9841269841269841`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{252, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.9841269841269841}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "66", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9090909090909091`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{66, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9090909090909091}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.7333333333333333}]}], 
                    "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["13", TraditionalForm]}, {2.5, 
                    FormBox["251", TraditionalForm]}, {1.5, 
                    FormBox["68", TraditionalForm]}, {0.5, 
                    FormBox["14", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["13", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["252", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["66", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["15", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "very good" -> 0.25, "unacceptable" -> 0.25, "acceptable" -> 0.25,
              "good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "very high", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "very high", "medium"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {2, 3, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"large", "medium", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"high", "low", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "very good", "unacceptable", "acceptable", "good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
Zed78XnyzB41FXBFWw9e2l+NrYc54pw7WbQx0YEf6dGTl4Q9pPV8OU+S88Lc
QYFb/9pIIc18eDxl8UenBDzvKaCyux8/OLceFvdR4/4ND8g7uwHi5IxuMrWQ
DHrWwevuCay+rFxV0FOJ05Yb4q4wEf7FDoWOk77A7/B+kPK1MY7zWwcNj7Ih
47sB2vjuUE2Ybw/pY2+zfUUN0GtoByjKrIG2ZpFw5p0e2jZPREOb9qohY2JZ
fu/ebEjrmbjBqIlqUv8pTP9FT1a6oCNrOkqJ7ZX1cPzqYu7+ScTrZnb859tK
qln7SHV8v4BeixlrW1ELw1/o4dZyBZpZ1ML6BcZonChg+WZ5Hl2yVDNIy17X
fYFZK65DR28dOPf5B/Pl/PJ88Inl2U+DDMMqWJttw+7HLoYS4ZcqsPYBaEPG
g6+NAucP/QcHpo6jkUvySGZVbl7dlCuD9XGSlwL/djbkjYfKLvGnnpwKFZj5
8TB3SD/IfRsP5gtWVANNUmJq60o66/8Lmu7JoCGeShxqo8Qni2/SzLQUTcmO
B1KO23eaYjWY+tU3wJ9cD+q92pxnyD+303Y1iruTeItlq+hD83N8X54OZrn3
J9PFBjg4bjhdPKvAjBpLabncffdu6vO2Vx04tdRCaOIjeNZbxL4vApirlRGG
yLyQWGjLbo3eDhdCmjL1cBf2J28lmzLsD3SbosfNbgtYtccUxGcVqtKWdfD+
Sgj7d7UBHv3Yz7oOqIX352+BH3PiL+KCKHHhb41L3A3Jsm08OX5rxafe3kZN
nhjxRjJffyuWO763gMuHayEhSQspASelre97cfsMAadHG/KE7lqQ2urgre9d
qYeBiDOkPBbaI5ll6XrRSbOp+G9tNXxNG8eWt2uNn6OXwbvrVRT9/jRLthFw
6e0TsFTOLTFjK/vX8Q4M0v+q+vZ1K3M7Xg9KSwXW8+3smmkSvn2kxp03b0hn
D50hPcvOfFiuGkvuN6Ki/hXSyxMK9l9IMP9yPlha/sORLDsHUtcxXtKkADUe
u/eRnr/eybs8G0Tlcevo32U1Ou3aKs1LtCEvWx2cG7aKNpUcoXdddbBjyh46
vmISX3lOB3TdihZHKfDy6QKpZ46AJ+sMUeW6Bd6+U/P+tiP5MJmP249awbPH
9MTowzIr+ZpRgKWI05sK2NlaxGTXAXyu7EMrLkVzizZR1GyqiEZPN/HKlqkk
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
qR32hjbVxqF9hAYOmScDxpY8/1RLka3hiqnRq1B+xhMDHGsWCUtcD7LRxiq4
ZKQH9gvMMWiVNCfoyTAd53RqrbsV/qxIw7xfW2D7t0C+Zdos3Gm7BXb4y7Af
p8tx+8Mt0HE8hVZ9yEezvxrMZa08882Qx81X2umgVH+2yn4T7NySQWUetWDx
1+Gs+EsnGW/zke8oU6Dr5FvIf6I/vI9zCmrelOH33o9nrc//igu2eJL9Y3I5
v9veGEhK0MA1DQOLeeIvPodRSsuxyEke5HZm0Cc33TDy8DFcJuX2Ut1ONoSb
TEvy1uLT8Br6LT6DavT/ooOGP+Eqpqei8a5D+G3vCZz1MpllzK0hq2usiO3I
SP7GpMM08+hjfOd7h7z2yiFd28JYWNUf+tZMlW0d6Ewtu67hp8dFeFB4j+d9
B6D3uiJsNRbCBM+/WBQxFJWPtdFR0n5XdJGHP6ABTVLd0fO6Ru1cujAidh4m
tirhRueTbFOuPaJeLQpeGWB5jCevfWkGXs6cgnWTH2PyCkvUCOkk38KjiG+C
Oj7JsUCflfHikMQBsLF4BwbYf6SunV9J/g6C+Fke1k9ww9e9lqgwYwz7+ryc
KGcoYNGz76S4dzFW5g/AwsAvqOzLYbC/BmuZrwBrPG6gk7gXs2waSd3VB/y+
vRJyuecDP691Hxl86y/NmebNTMXl6K7uiunVnPjn1gs4j5jjvY5jrMo8DBru
RWGedD58SK9Em0vbIfX4XWyytcBSJV2c7fGT7zi8Hf76GmOSqy0uu7EdesL3
0WGLtoODzyf6fqscOrQuo2Ok/WL2Vwb0OB7d5OdgztxZeLKtHP+/ltqAb9ls
U+Jfci83A3fEnuO/qMdi6I+TZG6AA16qCsO2k6PQwraSapeewvhuC5avlUyn
jJiOFmtF8Hf8fTrRUQHvLc5ETSl7lmAzej0ejdvPzaVFFukoDttMkn282TMH
EfRykbDZzBEfKk5Dz33NKN65GC8fEcFTVV9G1l3nNxw5SmNb99M/q2T4FcEL
cISHiHac9UD/1Ef83yY5+urdIMx9E0S1tUVgNGMu3il3wac5Iih/8gavzlEB
3VgReNp7ot8PEaTv+EJudj6i+4I1MTbTHPVnJrKOOyY4rXgcHjn1nVdW8KAv
Y6q4jFXnyVkjNz7zRy11nbkLFY6eo9P+6ZE6+U7S3xSCu4+8JZHrtzJbORF8
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
oYwaDfe3naSiW0644+JsGDEzSHT9sh/a9upIPnGb6e5rEzFhuIHoOk8Liu5+
4mzbMr6/S0/xbqCEKTKLJNw1w7UWlcLj92oo6K4R1Kk7zZ8zUUR0fQO9ZVYq
ayfhryv3KPbSYor3aCmCOvamxTuWiSF/z9Mk/TRRKjtua38t+HXRQs70Tjza
UMKEsR/obaY+DcuV8ITZYdLPyRJ3J+yjPsFKHKhtK65VKvBplwd80oxF4uzr
dKEzYTN9sMwRx5ybYMXAYJquyeQzOzaj4vuB9OdvA2gXZGmWLrMRdgE6eAh6
0PMmMiNG7qTqlEti5uN48NQdifPzl3HrDqPo+gkJB85+lG98IYsmHpXwfod6
aBS4g/I7L+XvdA6Jk9PVyN29qEyeuTPrbcTNOB28f6Scdm+q5IZProidct8Z
966FgN9DKbG7BW1N7cAj9eVjOGGHt4Z0hVwLCZP/K4LLPeugapYGQm+9hwlN
GmG4MhBsB/+nujHcBHWr98PO6Z9gfd8aaJD3d71OHjz8eABW+vqDf8fBYvGA
jexvogRGH2+KrtgAl+aEiBupy5B3+UOBP3apxj/ph59PZomYxnGqbaYKqC/V
pVELJDSSs2aOTn9ya+XHYYC78GpVSad7KHDon8FQNH68OGSnL37vmINN1wId
CR5Ay8eP4oeGZIhp1g6st1ECXaRMeiPnRbKFGV7a6YF/XA/wkmF64qbRdTLd
uY/fmGmOmWsfaxxGrqfHmQswa9BHsnx3DxoHxtF711jS5zLLXtLhvvckNOyq
FPonjmn+yo6iXuvKzTdt57pLLvNtxka0ylgLq2LkvPw3iuadSaSrGzzo+app
+HN0PVQ3NSHDNvUQu+gsU++ug/HjM1WdcnqJmG+9VQErV6vWdpVwVTTDhIdK
zHtTB16JiapVdTMCpGnnAwLNFdjxZ5Uq6Fk9/KmLB9CO9r9Y3wjvTDohbL+e
Fu8GjxBdep+kZN3F9FXI7L2qil+PXMsXbpQ5apyzMKjsJEa7pFHZjhbCYkcY
/WldD7y1Ei/V7yL7T8c0W2xlNmmuxOx/DbBVp5FITVej2fyhbMSdGTg8VQtF
yWtUvoFRaGA1guXfjGa+37SwWzmL1W2XcO+sqcxYuZJt/r6adWi9R+b0I2zQ
zxSW20IXRxoNZ7vfaGGTV7DKQOc7FC5vIp5ICly/XL5tlA6OvPNNc7/FFM6v
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
Jfx7PoL8DruR9T0lNhRfAI9QcxEdbCDmXtOCMqAQtn9cQv5Weji06ip8/t0c
o3zVeC9VSaflDM2YP5NHPZLwTt+LYubNoXzRi2L45WdKNWPtaMk1H3Lvkktd
B3cQgXXLeYqHA85xl/C03QbKrY4UA1KWaep3yMe3ZDW77e/DwqNnoHmDM7vQ
az8Ley3zUrcZ6BuTzlBnNzNYfZjttt7IVi6biv1Tt7GXawqYmV4mq3g+BeuS
l6hKW+5mvnSRxZv5MoPdk7GuMomEbi0NrNdDWKqFlsW3Ob+eKtiN63TmS4C4
8FKNn/d60uVaLRwd+p6PK/pDXXfmkW6n1zzd15D/mB1Kox8pMHziV4o+nsn9
PCW0TNJC/OOrmsAPM+jS3YlwsCgQt2TJmSD9g0/f1vOtzbLJd3kcddg7GwZf
vAwrUlvgwyR3sXL2NO4xJIpmGrfAKKtEYTveiuZhIj8VtgoyFozW7G4dQ3ce
mYrHlmqkWe8o5dIh3tlbjargHsK76SZ+52s1rTunBfcQmS0GasHj+nFRwKr4
DjlrLDsa8YXdtDB5TB4lTTYh29xnYs9nZzS2qQfH7DaQUWKhCv9cGhBVKgVM
Ms8HG3d3rJnzGpJqbjBNtTWsGvOSVWytZPtL62HLw8vMNP0qxI45DjruPdn6
lXqoyCiF5tt6QMvsDGa17BHM89dBa4s/8EZRD80HnASrk4kq37arWbubXmxA
7Bm49FJCi7BC0b+dK0t6I+GPHgHiYCdzmN7ZBTOf2LJ16bFsjLc++qxJg01/
TbFw8l74fq0NTHVaCXlzTOCq31s4e2yjSpFlCn7DmkHvg8l08Jg9phZ6Yu++
u8C9XwPMOGUDm+zt0X7Q9wDXuVawJdEcc+aksDvd3kBwZQNcv1VBcYOyqNBB
jV1ubKYZb+rBbqQaF1Ma3fTm9DJYwu7tH5NigYQv7tpjYictOO6t4XPNk6jv
92/keHuAuA9VtM7lPj96zpmaPNbCxzn76dze3tT92AJy+PuaD9MJwSuDFNi9
2JPm/P4NHW7p4l+lzANf+qLJlWAKeq1EMNyssaNf4uzuxeQwYQoVyPl4eea7
/K3dl/EQbxume2WPKlIdA6Gnu2GnqUpcmaWD6tOATi9r4GmqMRtUpIOJnx6o
3pU0Zv8672W6S/NV6a7VKl7WjLmOOCLnjgZ+Nl4MyUO/qCJnWbCT8z/TySYS
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
TRTeNH+ljA+bHsPL6k7T9ZsaMOlkhK8tH4u7PqSBMfsDz9bKcNqU6WIbiz+U
FpkL1z69B5fKy+I701SuXSl5t5kWCo1VrAfo4mJdfazcEsTUcj289C2Y+fzz
ZmuG6+HHHRtYlJsueocrmYPpBOYd3ENhP9MH9huuZ797nYSaTsUszWEKjm22
hn0YHMOq9yxA7rcAs0c2wVjXyeLMtDE8dL4Guh/Twrovenz31N4UKbajn4m5
lOlzV7xw9QbVDpF60UlAOt5MNEFv7inxWK/Re6BcYivfgQGqiIFnyNJAQC/9
O4oTR3byqZ0MuEX8AfDdK8OdB6/A+y1/wOPjRsW7kzas97ubsGbfZ/Cu1cN7
47Nh095msD2+VPFZ2pkbFwSsCaqHH3cWcqudnCWF6+MaSzXEZKbSh6EXqLqv
gMa9jlBm24O0uaVaTL7/WzVKyllbAxleiD5KUdNleDg7FWzt9OlQ9ATuFCXg
UqEb3Bm0FdLmaMjkbTmtUMRwk5ah+G48iddmHiWXbq6gadjPI56HomGSID6/
E06mtwz5gmurefS97eQ20UHRz2snbbMIw/2+oVj7Tp922rSHY1mh+NS/jM5s
d4S6ZQz3G2rh3SOnvadObOUdqF6IKSqpv0ofifNtkuFvMxle1ZPjQNtOPDXE
i6kkrllVuUJl7/zG+9nHbbAstphuVm1i1p1nQOzcHSD2k2ElyDA7W3KfFzLs
v6sbeawX0C63F983facY0HoLnySup3QPGXrorOF9pX5otXEnNS8pg9lDosXm
yYPJSsqCJTmbuH+tJabtzji3p/EQt3VXYoiPKc8O+yJ6//CnFQ1qKJzwksp7
aGGG1LuTvuykAf8EHGj4XuywOI1XFathfOdH9PFTiYo5WYhDwtVg8uM65cRo
QMv+EoUHhuGpcitona0Bo592MHtCJ/BtOwqX51+Dw3aJLOxPPNP6ooGSey0x
hWT43k4PU39LPYJWMEt6XnOb3YPcBT1g6+R0xZpDAHND+0Po4b+QHDMPt0Tv
YIaW++BzxHmmYxYLvQZ88q5dI8MzMRvYs9FrGBsvw+8L02j4PTmuP9sI6U+0
cf/1MWzxq14Kp5cb2IWHk9kcaS5Od2tPZ+/LMH65gNOvTQe5337q7K7FH76U
4bHHc+hbqh+3uC7g4R8Cblt+nV4nCRjQ3Rq/RqoheqEeX39WSUvlxvh0cgKt
M3xC+YpkCo18K5bbTIEtl4ww6oMRepy7yh4vN8PsRcVsd0tjNDK+zg5b3WKn
Qq6zz8k3mPuIKyxcr4h5yGtgaH9jnD38Oku7NB0PtTzYp/TyYGZ4bipuH36J
rSzOYa+vNcC80d1wU8cmiClswQ9O2E3G6RnkZnuycLueDH8saiSPaEM8u/sJ
LWl2gy647odHHwrpjsMS6orreaCBO1aGyzEYG+DGESnadfzp2y+JU1q15rOb
ltPyOSX8kZkcI3QyxfA0D0quuEszRSQxcjPNvFoFVY7SZfdJ7DFLDR2ip4jf
5laJC8MO8u3dNohqUMOA1RV0XaaNja69cHaoTHR5l8idHmbT2vU7oLafFp69
QHztumBVu5wbdESnTCw+rYbyVA24/BQwaJkantXvFTMK37DodjJcNW89hXw+
p2qzdg9FSA67J1UNH6Q+2Nr3tLf7nTbQsloNowd6Qti/9qDYq4XOv9whtKA9
pOXthH83Higsx8SzfXemsKK9veFI7mCc2lTD3niPBsN8iQEGG+AUfbM+B+xv
cevxb/j4peNorvEiCrJSg57UeUVtmlHebAEfp0m8+fY1dZd78uf5p8UQiWEy
pmhgm0sqlU4bzH9L2fjKTYn396lh29iHdL6ZDuW2zeP6RQL2fZrEcyf+EXN0
BZz//joZ7pThwSgl9nY14l/6raQiEw3kN1fDy96RdHpTgWqBbA2N6aHEBeM0
oH/iiarZ0lG8f6/PtNJKhtHHd7BuQgxbe+Eoq/FzZNNM+kHvlYfY4rQMxsIe
MPdes7FdTFCfbrHB6NPOm5+sTGOW0X1h37Sh6G8uKM5ezWCLr83EU/5u7EZG
GmthNgvnzpbhlrZSpz58TnccT1I37RoxRd0o9vHtT6svB/J9rSVmeyLDn2NG
o6/fOrEsUoabQvLEjZN+i7IsJbK6eFpxZj2ZSPNQPP2YmOzCxDmTLrMgaIR1
7qXAg2+D3jhdCOoVyHpaaWHTmy4YFrXJa9gRc2mHrDDP0w4Hzb3IXDN/eG88
cw0u5/dhNZIn1zpmgtYMBxzvdxMO9vWD/DkW+FZyybg97biDfCltlLqkXYEp
z309mK+TafFL/TvQbl8Bk6bZc9dxH8hqggZeSE5rufWEePRYOTQ6OdPKjgP4
HKchVNNdB91U2bB2iBzDJkhOojxNM97o8fTRbjRWbz+X5WSQe+AjqlCPEFtr
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
AM+lQSA=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {21504}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
q53Hma4k7tOxOZhXJY+MgFgoTPnJSrq8OZNi0/9/3+WuZZyAhJQ/7p59RGH+
/3//7UJy7CDUl9bzL7xdSXbS5ix5aCk787ubRv03Gf9kZ2JynCjeLXhEy2cf
QO+3uyhePKJy9e5zdCvCAgGJN2n2noeIklRl4RnKlbrmyWie4UeJxpkY+99E
PKwpYPF+ddzuCUS8V1eg8NUYj3SnIHlCEMQmL6eM+ecR4d+Hne3x2Ktvz80+
YYeLK0PJYssVbDfLw9DtvdAR1afnl7SpU3QX7fXeTcmPS8hxWzW+SKvzEJZV
+XT5OrKc0IKznXos0kKEzlqmGN1VrYX+aXt2vycN2qcvGQavH+T+iiXBUCeM
L7FQAney7nN3K3WMrJ/roE0/D/OsHxl6P1LDknfh/MObLXm+VeX8HROnCL4F
H+Xf/iLJd9kyRbAx5apgKecl+NtnLthaeAaLLe7i3YAF7/iZ0QIF8VjesYId
Avk5CXAojacpH2bDTSoGk/d+5nWI5LMB83ru2k5RFuZtgSvGenSp4xUbLVnM
bv2uhs3SRyx4Tyt15I5hmllHcWLoOp3zCMf3zpHs4ARfQPcn8/O8yVU2uJPX
1hxcXZYF64JCXuceb8x9wKOhmbWCA5tn8W5lnhM4Kx8Q5DZ+oSaLZu6RTTwd
XbuWeUnw6MM3M4HZjnzB6lHz0Lj+Gh1TdsbnpqX8/jGb+ddsNpFPmrbgvLwC
avR24KjcdME9pWMoPeCKyyeE2DdnA76fdzzvypO7vDElboKGpbG8yrsG7HVI
EUW+l+Z2n2uGTM9nWvFkMd98kYSx16KnfLuzGjynE995xWv1IHbfHyvUdqA+
MAaH0j+TOSeO7cH7ULJ7NtoWHISYrCW7sqmZo3AeLmRfoRjhbNhPbUER3waN
A3HY0ZlL03Rd8JjfS4ozf5N91BFB3Ocopng7lH95qyPguVGgaX8WU5z+8u2K
23je7SJMa6EOP2KDAdJu+aHf7D7/pTRhrORvnvtfWaxoVcbV0nL+dUdhfseW
L7yNytoQOlhKvMNFlH08DXem11PjNjv6tq+DVp+WQsPGFAy1d9O9UwEoZqdZ
ieFLxAvSScvhMXK8Pbj5dV9R8/gcCb05gGeG+5Gq7gij1/uoKGwiDseehPYr
V/pstZWLH9vIrQvax8SK8vDHRYzaF5TjdNttVrS3kzJLx0BZaJjBwpMxu1oF
0XJXWPSCuYieFU1mOzJhKvgPZYGT2Ws7B6oL2s1Ue80pxrqcQmyLmd3JhbR8
aBlt4q+liR267K1nFZlWx7MNtTcoXIzP9vwIx37h99zigAHiFpzDp5oqKG9W
hHqjGhuZkwa5azo4pynL4r/VM5t7E/Ar7Al25dvSjC3ytNFmKpuXZIyhyl7u
YOVsCnRwhtBaY+74iWnMqHsva495S9YRARVzFlUgVquObldfRvu3VJr1pAkQ
Kq4UtSzmhLaLQW2bXIVqfgjn6uDDfhsNkb3Xabq6MAlaWpfpro8I/j5Twett
ynh4laPlX/SwwKSfpDWK0Z8qiyjlB6SncoQqPqWD90ADo4VOcvuXvifprgxu
v4w5210+h67c4LDFZS7y/mzF6CnHIfzu0DAz3aK+7wPk/DQWE5/+4vxGNHEy
IhlkMsaE0h1u0taBKzSer8+eTVODV3pa5cEj/fimvheL61Yiu7QRJTOqodhk
gzTbPCZy1RoK9ecgf/8mTh6L5xzXbySX52KQnaZNM83GIUTfBeb8YaYKXIjS
+uf8o0kxFXs/NdCHbiGW8FGTnvNE2Zyoy3T68iuMzgX1eG6kB4f2k1+UC7yv
78USf7FrNRtFmU5fCl5OHKTs6z7k5W2MQ70tdHRAFN+0RvFVdiSgpXEHllxd
ymcW52hx+gY68HUWfFx0+FcW2pGLogNfXbGfl7wkh27cy6T5s39y+hGfjXbP
WyMojdDi9QVO4qvGEj998Sr+kHQx77+CIiwUHgHDEYNceHINFR6Nw39Nddjw
WRWZHzVhU78DM36WYlSCIfM3fId3h37jonY6J730BdUVvqDp8kQXrTRZ6+su
ehcpwuTqVrN1FaugkZeGmWFWTOt1BTJOvUFq8Q3K/m+QVtU1srK0KPa27zlc
963D1Ym7cWrjpUrBFFNIJ16nCQkxNGOREOLXZeFuw3pcuX8FGodekdZ7Q1pT
H8Mt8i2hi5FDNIIfzALPbMfMOk1ss5uEj52J9FxpHfYfncetU/RhLlChW1/O
0crsudTI+dPl5YPcAp/N8Co3g9KNVCpbtRQ3ml6w2rftXPMoFbQLRjG/f5LY
VGhNFiYPuTP3lZi86x62JuIyc3l4HaPiq4hqrNFz7zgWB3ewSD1vxP6YDq/S
GSSRmUXyck2Mf14Ig62XKvcZpNC4zB0sUH8vG/I7QA2bieMHC7Go28dZQVMp
HZqyCDlrn1CAmwXzVwlAwYVoWnrQATuGbtKOqZf4il7bMGG0NH3PSYZtVRwt
l/tCadP1BLvtvvFW6mvxx02SEOjMesybFxXJ/0/zAX99ZCe5i4jwnea7CjQm
Zwi+tJ/hx255Se591zF+dR6FNhVzLsVPBcUTxgselEojLLqKUpfa0iFbSyyY
toi8nAnBF7yRlTCGra5OR+9cOdZHGWzW5AnUMCULtkpK6JEbQNuDbnRsmMAi
9n0kee0DSDeYC2ujbTA6dRBODU5oyFPGl+omzHKLYZpruulk8jyu+QhH5TNl
4JRkgNq/x9B9cxqnGL4T40Z8h66UOz7c1oNVnCRTyZHjlvVIsacfW3Di1BL4
ratjmqss6HKxL5vg0oE9oTyE6paQ59F9fM8x2lhvs5l91Z3ARhaBHiW00bUH
viThdB85D3xQt3EiZksqY9ltYvGeZRjXL4mUp1bQLfOlwbbxgtbX2Xjgf4ck
psxnB+vlWL+LO3t6ZwBqPfGIu13CVM6OxMiRXtQZPZNdcR/B3pq8oYuLR0Li
02gWOO8rjdWajBLTU5D3i+W+s0T0juml7UM62DOUjodStezg9GLmve4YrB6m
Md2bsUy1JhNpZlJ8nkoVnm4roqavl3gSHiYC2Z4GWnPjGKbbO0PSPJqUQn7S
UvabhhKbaKvNDe5ObQHn+2061zdpHwKaFjOvTgmmPB0IDU+k+lthmPQygm6Z
9VDRiV/chphQTIxwwo9iKQS8dELlvAD8zLanTylu1Gk2Ejd6ilhv4VqsXhBO
9kxS0DF1ERNzTICr/EXSWTkZm5Z6otDXDG2nXQWB7+aAl7YcNlecWMAoIZ5b
YC2WLr3Gm7rgOtLK9QV5b5sFj5ZKCIxXiPFDc/uMVDbMEUw7Vwr3c0dJPekr
5oyIx+nKISo3TGNr3kgIZGaE0828Hv6Vn3JsRvAJQXWKFvbo5tJQ+wwIPQjk
7p68wB61T4fSvYfMcJGNwMf+JPzrrtCVT7LMNlYeJTGHqcRnNWbPqaBqJVnk
mRxApr4llB+q0e41S5Ffuw51N57C3zmDzUu0ZxXCC3Hq5kxMibFhq/dL4Yhv
A2qO+qJJagYuv88myRxZJsHpQeTcPlySHISq7l4ccfhIXmMysaYih3SH0pmV
lQ7nfFIPyn/MSFlzBlrr6+iWXxFbcDEQ7aq7oZO/Bt2yfAQduYR5eTNwdcFb
Eu96hI7NyUib/IT2tc5gSWUzkRtkhBHmHlyl6HMWrLCJ6ST6oPX7Rv4q95OQ
/KYMK08NViq2CC4r3djzLRPYulFp1LWnCCKtT6ixzxDG/hqoVr2O24djYGNn
Qi9Wfqc9d63hEX+U61xujzytXFqz4xCM3NZSbpkbzcpOYKsivOjxt9GU1ZYJ
y+h+alS7S9mRmtC9Oh/6Jm/4XpeT8OmhOX+23GJMFvfj6yYM8h5n3YGj5S9q
V/5udCPMWnDDqBS+oyMFOnvjBSP6TflmPrH8H1c38JP/miHyz1bB9yebBYeM
Y9izHDsWgj54r3mCD2qSuF1jBn/FFBbrVlaR2qVHjmcucUv9vBD4YxzpHozC
T9oE3+H+F9QrSrunCvArvhYpqvnw6NhMRv7JrP3PEeouqOFZJhsLdofP47uP
H8U7GVqOLhk5RJ7K5b9yO4Gzjtt4/GvTjCo5BXQ+PI6P124afQ5p4ku/U6Xc
NWXM2yuMdh5+yk81SxX4z50gOKOuCV7seGbRa4XN78cKLNxLeUFXtvCjxsfy
zqu+pavLoo38eGnIeWSAye2XabylNsKKRBHGnw/rB3MFty8Jsxl9orzuqVtR
Fjb8vLHuLMEkAuhQ5LrX+dD7lkmo9N3CnOIkUFyoVJms4EFxsTUkdeYRTH5X
ICZ3LPsofw/q50axrqNCWPlxLBs9Khx3fwggP8z+xpPsoC+ch9P+85lU/lfq
9P2C30nq5HkM1H1UH/u38GjhjBMYfN1IFU8OspgnIlAJ8mTBX16QbZ4EJNzL
uVgwcn+2hXx6v9Dvgd/ch/DHdK1xOpuW5Q/lWhlsHQyimUsYCSudhky9A08y
IhSZ8q+Z3I3beNOXi/RaM8SbleOwStlw3xRmd6Sc8FAig4bu/qbSP8K8E9Lh
yPgLJLhK8J7NlGUZYt6wW/YWa2gzupKa6c2pUFoxqRWbtj2lBc/E4NeqjaP3
bWhSei5l2wSz5VwItkUfpbM3J7LFH/QgekWRxpv1cxbL+lBUewLqUs64Orz2
nakr4dw3iZn/+4TmwQajOaUM/ZUW1McO8Ne1vMPc6GJq9LWD7J4q3nq1OzAZ
fYJeJOljjloA73ZZIcLKQ4wO612g2bL3cTg5EQW2Hoj9d46relNBxWLrOTe+
BOO9uQ5TvyPsrcwGwLuLNN9b0ZizyVTRsZTRr6N4bHaVtZ1YSCcKrlC/5WSm
P12eOa5Op+B9ArKyLYXw8k/43WEI/xdiNPWmL+SHRmDp5DZyO/8BP9xMWPKo
4yxffDMzC98LLT89JvBXRWH/Bm6+5y9KFd+KZmiQeHgsWWTcZfnPFzNzFQ8E
Duew8GEN3D1/m3oKVlFTxkjmPMxBv/IXwW3bD3qubYRJNY8qFdaPHebbPMpQ
SYKB/w2Exytgw9s6upJ4jFVejsL2jWMhM/4R+5byjCZE7WOivdKQ/N5OZydL
seulPzExUZi9WTOevZPTpTGGjsylbB922h/CnQ5ZZlF6nWstv46toaMR0ZgP
bfcE1Iy4iyH5fmp+84BmTEmlsQcu4OSAGM5oKuDlP2OaFA6uC2F0Ing9dfbK
wuixCaIK1VnVrOGM/JyMcF4EGz1hIrgbWlRl3kppViEY+NdMjR+uMUs3W1CL
CTmPWscWadRSZZAIN3W2FtaWLGVrii/RJ+tNEKz5zVW+aidRo3MsJjOATEZ4
YOQ2dyZ3xQl7RWsR19FDNorB2PZ7ObbNu0SinCjpee2AmW4lHfQNxse4R1Tg
0UJqQ1Pg+LUMso6u7ObrOCb6+QFN1WihSe/FEKnSQXI+VSxf8gl9SpzHeel0
M6c5Ovh57uwwg+rxNz3OgL5oHZWHWENssx3ur4wioR2TUNIiwdvnYAzRqUeQ
MzOJHF5c5f3stDWSkO/hpvtp8Y6c/s5ehBHC648yi+IPvNzaMbwDcbtwfeQu
Shzqqny9RAYSf/fCd/0XboP6UnxuluQ+O8Wh4ZM8Wtz3sZvPdRC3lsPTH4vY
4P2loOYiVKdOhPnOkcjTXYtWayfcXNKAloRGGG8Q5kIMw6D6PQ6So/TogGm3
YOzdCl5TsjfbdWsiHERijRKNXKnZ6D86r/ASmYIOeq8lyZumZMm3LnBBl4M+
k/fVo/GuV5BvqgmmfoXVMwlMuh8L/+lX2Gqny/R3eSrWOtkP1/cTOu0rQT1m
8dT42gHvYsIw5bcbmkpyaemOVNLeH4H+u110JtORvSucQ99PzaOiG+WQDuHz
T7INcGzTZYtqhkg3u5oNnrlJixbtxNz4j6Rz/zf+RK/AjDUPUDMtFoc3hbLu
H/as0fglDlWvJcvqjbxAzwCjWZVd/IdzvCjpGWNaD5bylmz5jJqnJ7GjSRSB
Sz+RILSZmQ46QvnzYwi/LUGE2i/a6rESIep25LmhDWbn9rGSp3osUGwHMsZZ
4OSsFUgsqEH5pnJa82QBdK6NZvxKK3icScaaSI4+JhhSUG4n9y76GkK8B8C7
KU11ESPQeXYEzilIoFvqPpUmtdGhvjTW+9EAW6aGseyfV9FwuZlCldTZ2voC
NAY/wKlgV/bJ8w/N2BWLFTePVuTknsa1xXPJI+g+/Vg2gS64nkVtjgi7c6KJ
4u5xNGJJLWHnDuJat8N76xFEFs1ge/COK57rP+zXNix1rxC2LhoB35p64m68
xTh2DeLtCoL1amfxeOw26D5LoBt/NyJofgAWCgUBrjks5kc1jZjiAcnUSL6u
TiRUjiVhwdp2tsV6Kl7vv0ZD+wXk+Cid1Fvj2OK3dvRrvTsKf5dwbwZEyeWu
AYtQfE4Sh6PxfrcpsytswU2nCfht9Yc7lrkCukpJiOpqh+xzPa64NQrKdvfY
fY+E4Uy3hqL2Fq5w4VMK1r6D7q9yOFG3C52nXKgrdzZrGSnHovx6uVrnbZz9
/rs8tcP5RqfCxcE3/g9tTiMxyXGIulLaKIB/38ho81XcqhWF2rofNNCUSFqT
FmBCykPCnMlQ35+PuT4OCOD3UTizQpVUIMYFp9P127mUpLmBqU9I5KCuBBWp
r3gqLY6WsgWsUWMd9TmMJoXI+XSNO4j3jvep4b9bZPimE/phVdC9cBHHda2w
en05i7IbgwMtpZCziYDBhWu4ES5Dn2UbyPqQJftp4gWRLefRZ+ZBP2wTmeOc
JYiquIz4TUNQntXFtfIv4OC/J5AZZsb48aep8vpknErYT0EvCGVHWmmFvy4k
X0Yg+idhQH0X7V/aT3+lmtn5vbE09zvRRslT8KNDkK2ZheTp90h4mgu0doZi
ynVJtOa+xH6BBEk7ZuGSrQ9pKuRB1+YojosUYLLJTK542kPOIDBYYNYaKrCI
zOQLwroocHk92z8YIVD1NCGbwhN40mQk2LehihnN2ixYzU7Be8AZyULObMe5
q0h5dwQdTufYCDEj/Pt9mHValnDZcz7QJsVQ7J9ydZhtklHZupvNF46An30Y
q3COxwqVJvqbr0j3C96Q7CdRllyzjx1uK6PEXa/w/UY3ie46zCqk1mOVnhDK
j0vh2swcyPwtpJz1kfjc9wqr32Zh/IoEZpwiYPlrlrInU0sQ8+QIo8uqEBf7
QVK6R9gkxYUQfczo2ocaLInUgH3DIEnKGJJu1BUa12tYefnFKDr5MBJDz2Lw
q+Mujek/iW1xFdTU307vp6Xiz+FleC+iR5UzHqH2lBdCG05S43Yt9nX9NTi0
HIZVXhbUQ+eyNFsbLIxowBhBKh7ZzoLBNzV69XIQF4670vSpqyl7Zjr8RUey
CxfSYNnqh/ogMWjUv4fR2R8ULveXdJJVBKffavHcFKvxsOICEtwLBOuezRao
ZwZisN0HnUJPef5z5fmhe3P4mSNH8qME/oI7okDe1m0w+/mGb+CRyxubmslf
VeTKz216xJssp8Z/nJuLZtVY2jcQikCvcRQ+po5tP7iEhPhKEOGNqXxWpIfT
N5YJBr22sBXWx6DDVuB2jymrPf+UBpSSWUyaBDjvdvI6PkTH6nTZ5eCXNEXH
k8tOz+OkxLWgJGWEk/Xz4D8ohSpZU7QsK6BRZ++RyLMgzuOpAk1WT8bxyweQ
+jAXOzIasep5Pr0ZMRVCgnFonrACeh5Lsc//LEa3XaS1c1Wxyu0hTG1t2fxN
w1yKcVAM8oPFzOsVttVnKT/4IfTqF5P5gqOUVf0Hi6IOw707iuZs1wAv/BFJ
aMpgppIitN89pwZBME5V7RKYL/iNAC1N5E3ezSZczIXxwwLOwXgZmjsV8Wp+
HBTej8fGwFicVY5lFarCLOL5bPzRcKssqnnJ/f2rileRTWSg8Qp3CjOZyu/J
zNV2F9oX3mQRNoewchOhVOI0btl64WeAMazOjWBTZHyQavWaVKJrmPcTG/Yq
s5Diuw3x/G8DdIwXI8E4h5sQrIhDKj/o7YY92G68geqD8ow+vjalNscPdMy7
F1NS1FGmmcUTcdNkFdtfY3R9pGHYK2U6oarIEr/MgMf2t4Z7Ss5TS4UY5hk+
ppgdESRnfclo0T8fqrW6xhNOPojTg3Mo0fsb5cfNRHBDE4VWi+LluGLyO7EO
hyLySLEyBudFRmCb3HM8PGHJ3a0WIHu5BXR820lM2gWvF/uyEsECKJQoY9bG
1TDYWsJWXljBNGulIXOlmQKaRsBb7jpv3I0MsjBdwfUPj8f4O6BizYxhV1vJ
t3hsjJM7tPH4lTgz+fqzUqPrMUYXHOQNbW7mDSxwwuZRC9juCWKGV6KcoZd+
mtnW/qOikuc0pmoPGt4pQKXxCHPUr4PvvzkUGWiAGXMnsePbIjGnbj2U5tlj
3a2ZEK//Qz9YCe5O3U5/ryvh240t9NFGnhWLecFvshrfNNiIN3OkHxP+shS9
QXMoe2Id/8cTbfY7aAoC3LOx8uuNysrcw8MuUkH2AfYQ0iuiL55buZWPQrHk
+Wae8KXfyGku5a1pq6CWPZKoq9iGWZG1XNzry9yeEEfsE/9Hr4xc6IvtPXxt
eUt1//+noM0SGVZGCFdewRSHsVU36S9u/cugLN15aGsSpxMKA3hlooDbZ1KA
gItwT5HGL9UdiD2wn8jqAqnrB1FWjDSTebsZOYnn4akUzc4betKjWmdWZpWB
VzvWI9X5C25ofEfUuApC6iE6EJVBMw6I45D5BdI0jmK7rw2zaUc4DkYGkUFi
OVNQyqaqqzn4seIl1ljtwopD8vRySRZtaXbDE+8HdOnGSE6xbhvbMXUzDNJ3
QTInGjpi8biwMRTckjKqvqsq2LTdnH9e6zOZbtnEXx4Wyf8Tk8l6XC8bapbV
V/qMiiJq2Yytpuex12MS1jlX8YJ+zoVcXyrfeM1IvBBJQvbmcl7CzQ4Yb1Pk
982QgoH5T4ofzMKNmEp2Q/k2Piyu5H5MF2frH8dg+z0xfLY2xTtLc4rsj6aH
LTHMxk9HsLO2GGqHr+C2sST7+1UFU/YswzqVz9xN7y2wlnpOreIX8MFPCy17
Del2lSRNydDnpq/+iq1VPRga+ZpWukWSyMqdpLVciKUo6bN3R72xoWsXCxjo
ovf5hyj/5jyMfK6O7K0dZHOmECF/O2jlqemsK2009jcsoyx+Jh0pjGKBjbZY
t/s29+Z2EQ7f+UaiRX7443GFrjdPRGDHVeptjyL37k/soGc+OiybKVqzEz+l
92PawcMk7Q326fEoJrn9AxXWPEHbySnUa5GFO5kp+LJhNfEwmXZvXYgLqcvZ
gim3hnlWF1evCEH1tBFGzcgnhePldKLRCXbqKZi3XwpvN95DS7sdlrqUUNj6
Ikx7chvrpebj7aof+OVfRJszxpD07gEy1FqKTYFKOFqpyY52zGFxyTIYf+41
KgzXMdu3urjvugJeMhn0ujKVXtUdG/atYsqNmknid53YmQ8HKtdu0MSx8n6e
OE8WyhlgDa3ygt9x+wUBN/Mw1kSPLXcwEYjzzOF06yJlao9Djm0ze8JP4MWd
Fed9+JMo+OW9nC5ZbMTjuYn09180FYhqY0PiQrp2+yqdss9iX54+JcfKFHqQ
kQS9L9NR+FKSyRZqkXaIIstgsdyNG1VIC/dn4/PtccOngEv1HwETozVsfJoi
Mofl/2J/FfnteUzlW85gX4kZWyv5i21ZegJW4cs4A9sGOhCShof8N/TM6w+t
XGoFqw17kaWhhPWuwUzr4xn8aTbC90QTytK8idViGUiueEibX5iy0NezuaIx
F5HzRQv1n4/DVSiTfX72kDmoRrIxJbr4oCiO+piz9O6xN6v15GGf9CDl8d5Q
44t46gmvo/wkjhtx8Qkr5cbiyGAgLnc/xzx/VeYXaorG/pEUGFuK/gtjcf1O
MjtgvZXVVJfiwGdhLLacgbcVRfyMiVmorj7IrGoFZPuxFDeejIJD1gx0u34g
LVVX5nPgLVntuAnHMfbYbpKNfKvd2Gl1FB/nhXFmO9fgqsUAp9F+k1nOimHf
i2pJRPgldt85jk77+2xS8GYEpt2nq8qDtF6uGjlH3xGvVQv/WaRUNN7MNjps
rokTf8rIbLCTmZwQovZtP4z6llpjxq/X9He8Nl9+9gQMSExhilXa5O6ymB+g
OE9wbNj1uCx5wfoBF0wa44mTvuJkrGHKFjp+N/yse4tUtmbRyKp07lpcHi9q
x3nD9dHKvB/tE41c+8O4fU0qrGB/s1FX81Na4rmaP+HKIL3KVeBFq09io1X6
jP7u+4/naWELqf/CKOinLjTefqmcd7kHYnflmcV6a1w94oc3s5ZgRMdENNs5
IsvpDFIUQjjZnHP06rQSgmvi2ei9a9EvUcW++o7C/vM/6ePVZCoaV8T5jrrJ
ZA4lsdLLa/G3L4y38etK7C+TozoDY8wYkmd/x1/mPdtnR64DGnzV13Y054gK
iiscsWBxANeyTRhJ4TAyc6wky5DZSFKSx5FtjrwJM89i70F5vsesDu6/P3ux
ss2bau8HoMQonOy+8mnOaoblrnYkYnuZiguMmFNHM6YGpLFr7pbQUlgBKeV4
yOx6SRP9hn31oiFk1Y5Vjp15lblhGgauNlKS7lYmHT0FrkWWdMjwJVtvH0p9
KyJZfeIy1vp9I/t4YzFK136h19ZhZPtOjXVzrVxNtD+ejhfFnbvFZKp+BIuE
rtMBxxgkl6RCxPs5XT59j7KuRfC2y42kM64N9LNyM3a7LGK7eu9RjH0US/95
nJNPvoRGeTWyscmGtrU3BnbwYP70Pc3X/0xeRhLsvrcFWt6bQc46nNS2t1cW
fj6LlIAflD8yEPHmgexwrA/UI44zudpeSjg2ir0uq6MlixKo0vAYnMSDIN/Z
RyXrVuLnuAhM7TTHpfenMVsomr5KCzGN3+5s95JByty8lKyPmlBwjza491fA
9ObT2I7xXI1IF7m2TaLvW87SXJk64g8006ppdZjxZQGW7xmA1tcD+OHeS9/M
31BL8GuubMiEzrrVk5CWMNQbgwT2Z46xt45PBYoHlyCCfqE1Oxr6WXG86mol
vusEK9Zhncx1rxpl3M3+cvfuTWLyj9xgLvXAyDHzDJ9vqANe+SJ+6oEeXN2Z
bLQw8yK2XpJkK12yBKQ1QnBUyJf2XpvGH/B9wSmVCLNpf+bj2505uKF8hkxT
RHmvFN7ynyy9zgr60jFSY7dhTvlxwdXSkVglLiyYvHsv4m6FYMe1azTjoyfK
/vUjvD4VsnuUUcBJ4XZ6Hq01NEG8yVxOzimHKey9g+OhA7C88xqy8z9j3e0H
9Cj8IkncFkP7ZAtOZNR8LNK5Q/2Sy7DltBB8RKRIeuIbyh8/ibtbX4mvY89T
6vFriBhxgtLUIumk/ixWFzfAKg+FsK0Lu7EpxY7tTT7Jdr4To1U/kyinwh3j
nrxDkHYn9zH6OaauWIYRIeNYa+1hiCuH8P9m2HLST97Sll0PmF1NERS4VDz7
ORVe/tKomlFBe53v0/yIV+AX7MNkRzks8t2CCu4J6USUIfDHEVgqR6NBKYqV
vrlILgseYs2TLZhka8fUimKJc0jCoU+yWK58CT/XSLAM3nJc1IkgJYVC8G9e
xjneFBYi1kud+iosc4QJvJsmI6DuDeqWMIRaqUIs+x1ljrnGFZ5xYxF33lPC
8bvcCJMiLmTVF/ITWY2nnzZwz++FIqPTFasOO1G99Rw20OxGXz80cy+YEMho
Ctqeh+L9i4lsdhIfQHXlXYUyrnXGK5owqg9WprK4Vl9JP9/XkrJtEXX1BeHa
jmwYHirFlJrhfcScsLq1lI5OTMT2w35oS4+jllW/6axCJ8X+0MeLgCv4l3YH
E93V8ElrHf16/JkGnm5mp3J/08tp/oJXa3KYD/8Cmz1YiOypEkwjXJvtOW7F
FRx7Sq/0dkJZRh+71u5EuuVJrMoNR9KIQDi7VbNwmwHE03Ws3+gOoQZVTPY5
TPVVIbTGfQq2rBrLZxiPzTt6qeXTHFwdmQg/13i420Ri88eLyLa9wF0c787u
eTVTxDDPzB7QwtFJHlhpMRdpKyej2EWfpj7L5m4MnOc2nIiEiYwcZP3kkTLM
d1HD7CZja8IGC/WpWdwA+zLLONHuIPohW0jPVbTJ+WB2uWTWAF6PInbVfxQ7
3xyPopHGdHfLUgTtHYcPL/NY5Y99+GqwGodO9pGmdDyS+S/xqKQIRo9XsfUN
L5jsnGSkl5txnubLqGyuEHPe9BzNTwyhDCfskbahNXKp5KKkS8XlO4n7t4Rl
ThvPgj4oEGvx5SJoGsa2D9Eiuad0yy6Q3ts5QPbiUUqqGIsw3Z2MxUmx0Cxx
tkdsPnSKpHDsZzokQhKxymAJl7jSDWuFDdgLKz62mh/BwhJvaH84Cv3Rd1Cb
ooPq8kj28VQR+819p4SELzj86gpUTm2mmsUlSL+cxX5cr4Ro7n0KdVSjX0uM
If74ElY6qCHg9k56mDML+c8WY3BvIn1XestUpnfQo16OrbNfxZR9rbAg9hX2
rdCidyuraJ7dYspIL4eGRwzCHPo44c9CaCqbDaPcl7iwZQIzXSeL0X+KuGuy
acw1JptZzy9BoH0ObfNfRTstsvm33/9HOmW93C4hhqL1QhB6OQbq4SewS2E0
nbUZQ7LzPtL+iE4E7DBAnJgK3o+IIeW8OqrSuY4HO7JQZZFFsgap2DRuHt7s
kmeXVi1k4R6b2Y6w6VgzwYzUnUFhJofJ0P8fTT7vBrPqpyy/UQNaftlkKBNF
b8rWs+4Sc5qz8xONKrhChU+12eLbH7kb9wbwIjGe9NOT4R+kwp+obczJfPfB
cLCxRJ4XM7dKhuriB9QnpQEr2zuV01UlMT0+HEt/huLbrBnssJI5W+OljBPs
AibLfyfF/GDibg9zx9R97F55BjOKSKXc+hCasu4J3TBQR1t0GncgJAD7Twmx
c1KR9FXgRi5dcbTwgRnLdPanxHH1EDnpRzed/8DGJwhiqw6y9doTsKHjJCwn
57BX7yciQSKN6bYosMeOI7hFhwtQv38VS61QhOzE57RELB3OdYw6F+1mv0c9
5KvNuoK+oeUojchEc+lK3HkdgbX3w3gH275wv/p28l7aWcDB9QVJT5HkWw7m
kIePGl+lxwNyNulGx7ol8HTtOZ5UzwOK9tjI6980jX9cIoJn/9SaJ2pljfI2
jiarK7IHawa4lF0TEdQxFWJrc7knH41ZYWwMLXiWjwMe+5EffIleKIvi/Jwl
bNtlA3axlWDYOAmXVabQ4hpvVD5VwErdIJyQXoti1Vk0u6xAcNk4GwPK2Sie
ATK0vMgKz13GavtdOKYxAqp8YfSvmovqG51U3hJGS/RLsEu4is49XDiswCqI
fHWVqb66ITifVk83zn7CKm9ROL5pIsOmiRhjmUvVPdrsdfcMmnB4BKpXBJFk
yhR8Mj6MU5uWYed5Efa8cAOTXmGBmNt3mN+hJlohpFYxXfMYZIt16eHhVCqJ
EB3ubUmkFfsfbXWKorGPk3jX6j6gLPwspfbPh6Esz2hP/UL4NkghOqYEdc3O
7Oncs1gSYEQLxe159nOKKLvqIh2wPU3+yWHYeVGer6fqSXLDnpax14Lj/iTA
NrmAZk7+guaVVpBdcpNzV87nXulLQu7SP3rSsxZt9wOxPyGFeRw/TqsVR2Jo
/zXMDRHDe3cD6B8/w/XdG0Iabz6bdWkegjsSUFMzm+6GpTHNFweZ6Y88whQh
VtAkj5vJR3CiTROdF+/RoHUMRV+I5MQy1MDW6iF3YRj31OwgHe9IpKTB25B8
NhXaNy7Qyr31rMrvO9WxGkHY5RgIYwUXVhTJXjotphlfbuFpoi/K9FeQeuF/
NNX0C4I/9HPrYy+iLlUYoh/d4GQTgq7aSEoWcPjb7YOGsUpwfQBB9voagafM
E2za1Q1llxZad4rxoi09yENUiv1tkcIvbXuaob7fyH9ePrr/hBs9DheCZpob
3/PZdKMl/Y8xNLoOLcKmUPtyS3CoRQyXP6bCV3IlEt1PUvqZGtIfN5bd5z2g
/gV9zGXcVLStNWCthXq4tSoXLtIX2HhlB4xqf0Zq585wClkCrmiFO2S+7cH+
GkV4KX3hfkhWsT1XTtDk/bvhZ5kC+WMLMEchBn8kL7CTtU6s/dsqJqr5GtpV
Vjicoo+hlhRIyE5FtVs1+k+eZhfkkliS8ClqTF8M+30V6IkezzpSg2ndvil4
d96FxLZfI4XzT+jIu+G9pP2PM+21w4o7umS0dwV5X8mkSqXH1HW0B5Wz/yCa
faAF306ym4t8aJzKfdoyJYS6Xlmz8tHamHbKAtenxNB/Pi5wfXkExRfG8B56
fML187MFyk3F6NYUQEzPk9sU952efhzDal9n06Vv41iDlyMe2EsgLO0HxYdL
GXULPuJUYglqUqqMFNwmI95Ujo0b/ZFKozSodcJ/FOv5itwNDiHOIJ1K3XaT
17nD9NS+F82Wv0l1+2kqeKWGyxmLEGGris/XRbG7q5+UO3sop0+V3Sr/RqZ5
OhibOwpdni+RlbeQ9cbT/8/wwuZuDzz19aLkxSfw6UAiuhLC4LfmHu4GiEOo
ZAKbGaqDxrSVoEY9+Nm00bLTlrjSvYMbk8pYZKovvbT/xmZWTGW+U5VZX2MW
9/97WiyEh6g3Yx159R6nhztukcITLxJxMqLtsiPxMkcJWhlLmFqyBcZfKoHx
Y2LrdnqSnu1H3Jk6ls2dl4u8kGqw0ztQbTVWsGVWDm90Sjyv758N74lTMZ6F
VWKL5yiBfbceTJfMFrx+cIt/5uZvuHSYYZ7Hkco6jUzBWh1NkpOQ4TWaS0K7
6aHAcOlRwfdibcGJeXNwz/g1dgXchXWJNcQ0QgR7JqnxN9QXc/Zzs5jWqCsU
cM+Ne9v/nddlyUFzzzbIflzEV2xfxJ+6rJ6/Ty+Jt+vyeiayWkawX9uShmwi
BAW7nGCkawbPfAPBy/8+0tuNqqi958IvyBdGaG8Y3Zs1gy9/MYRiR86FTkAh
3biuBdm7beRdyRdMiXzAE7dLQNHP29TrO57vGimBa+NF8NPzLKsVWQqP2VPw
2UUcsRte0u+ECTQpeDnNWXeBdZUroXGGHNtaLAoz9U002nkqJs2swLFXG3DP
MQnGbe2sxEyGbfz8GLtPbGEr1JNokdJprne/FIoEDbg5LgXTF7dX/pOTwvot
mfDJW4nJoXU0a9klOO0egXarHxQQV0kr746gbott7Ll/NX3ZnYb/9JNQHBcC
7zma7HjaDPy95Q2lPfMh3nyZC/hxCXX/2eHYmw+UsbsMk8eYMI2FEbQ5+ALb
+0kTbTSaOZmW0pxfWdRVasDyjrqyP77/CUzZeTw8f5OZ/k2mhMVjWXD5R+q5
f5Y94ung3uEqvsbOLty7LULzVcwQWh2IdZs+MImo3VyFhSwtUdrONH+tYk9r
j7MPvVE407CeDWh5c2HCKyBR6s87fc8Pf0JOIuXEA+5SxTlug9RFLGwfjcoH
C/HfwgY61BuKHgthOGxpRWijJzW/iqN1BePo7sdNNEZ6HjON4iO4cBprNNKk
SRNiuYGINmJaNXR6TDxaDngz2fsi6O3LwbEvinAwT6SrOgsr5X1P0DSZi/RT
F4g6m8cvWDsV08pCyaLqD/vY3AIT3S0s8Hoqa/I7h6S1wqxX2wnRG3YjYuAX
RncEYkOWJKz5ztT0XR8BJqUkG5WERzP2YsUHU7wtWM0X/S5G2nqvcGD1F0rR
zmcfZWcxBTcZxBqb02EXOYiqleDNn+t05ZED5ofexduaNEo6VoWvk1eiZNpp
aFiPxcR0U4zYfJU+352PZQYXmIj5RijsXwbnonj+UJA5sm8fY5ZBayn7Uwrv
nf4rrrppf2VU0U4Ule5j47pnCOyj5+CZlwyzbZuLPSfFcOqCN+QrD+Ljoz+0
5PJ46DR/o9cy9eTre5/+sxbBFYfn9G9tBCtsT6Ddnu6VNYjBmrOLkO6xDlQz
HtUeNTS+Ig1Rh+axVs1CnPd1oqaQcXjFAmn2/JNos5VAT2YWvo72MHKNNeG6
uhaxXwvl0P81ARMv1SIosYcq7viwA5FaCG4/Tv6VC1lhcC3NGqfHurY1QCOo
hw59mYtFcyupXvkYGzVkSs53hHi/lY+j7+ceNERdQtXVbiOfRl8yvlpE32WO
0C2dJ5i7fTprkPxHSS/K4Zf1GU+2/qGuMRcxaidRsegJtmlMKNtnbEd5yhvg
vGo/LBK/ExdvDonypSze/x2pLlgD0zF3aZbDA/bO/i6ZPvhDr48PMImz6xk/
2I9aTVzYkgPTcbP0H/1sXA7ntOH5jQ+ijSczOceQtygKCGf6P7fgv88q7J5b
Ig4/G0X3XqoxLwsJNrNkH97ui8O4mc4wcj3HIk1PY7X1cfo61RDeB38RzzIe
GiZCbM6QDB5Y9MBOMZ3NFa7lxI+MxqqyAtrGpXC9uWVs3NlwjBovT898R7Fq
3mi4K78Y5iZR9sZvFJbXfUKr13EKvW+DWd1BkFZYye6bVMPWWQ5i5kl0y2gz
rXHKw4yUCyTd+BuZbYmwmd2JiaVV7J3ccuqJOU+C88/JU28qi7ccpHXV32lw
7CpsbvDG+wvLOJWLd/E7twGi74xomuoJHFinxPy9dtOg+QMm01BAWmFy9Ljn
ISdvdQwPksXxX58c3P3O4vPgHJqwfC17oZDAXaxXYV9U3lHlPxVmHygJ46pR
mDXRZph5QxBZmoXJh95WptXJU9/dKXzHrfL8zPvRvOu6I/nH94pgyxsRftnx
O3Ri1hUq8b3C88QqME0r5Ibe4d8qEuePX6jCb5KK5N3JOUe3JjlUHui+hX87
bfDyvQRN0h1A5jdVNq0xmZaf7+L+fF7O5qx3Za03xeAfnorRS8vorlYyippW
YpzHT3q2ZzTKdE24L+/ewW72NNRujEKH77fKY5PNUGb3H4ofnBO0zrqIxyyU
k3gaRQGejbRzw61hF/PFYdF2FDrXkIxpOBUbTOSWrU7F4ppGfvKqY6zndyG5
rk3B++kWrLHhAM5pLOeuTwwk77wji44Z3mIRLrL8L5nx1MKkEHhsDfrWZ+F1
oiTP31VD4CLVwdu7io+hnOUUvtcD0ysiSP1kEg1N1UPcJGH+K/soA2cbO4GJ
2SWjj5tm8u9nvMSbK4VGsj6acN4Vjd1THOATOJ9fRJsE2jcfGZbtmV8ms2wK
rk5fS3PdbSg4U5pnIHbSiBftw1/Pn4SFzWI8m2XJbHmrPP/Uw7UYK9/O0xZM
gEZ2nOC080V4zVVF7pYW8vnuz9tWEUj/ysQFR8/4Cp7qLeEbhNdybKMcfyDv
sWBW204KplhInJ4MN8m35O9bxNtrWcTJj36I6HOWTCfIhlWaJlKjdSzj/fpJ
JfnrETPmHAY8OXJZN0CRNlexqKiVyenk0fkXp8ihZRAm8yyZomI5mb/qotO1
X2nsLwM6VX0Mhdd4tPPBcC2vjKVs7gSbauSKofZtkC7NJ+tXPLrkYs1WfAHl
HwvHUGcL2X6Sx6/eF3Q/0woeZQIsmvEJDsV2FCF6ji5tdMKh3CE6/mohuXdI
o+DXTGaS0EoeITIC4Qgx5p1zGRGWSVzq9jeE1broqkslk7dR+DhSDvsPPsPI
6mOk1mDHghvdWWHfDraoxxejEtrQvD+EGq7bCuTW7eEMS09UTN9ch3UPAjgn
RzlcKCyk/uo2El4nhKLxZwTBS2axS/2r2OzOwzzx5nbkG9bSrVW9bPrUOAjX
pPCPv4iigWv3uIOcDj/i7TR+inMYz9jvHaIlnfkPe4cZcIQN73jEKV5YbgTy
2/YKjLw28T0E18D8ummV8hRk/P5sJDl2PEIvePLfd8vzT0xXxrdvSTTydSrt
kmmonFxXhq815eh9NZvc5xTQo3gf+prUx3jSE4Zz/DGq0Uh6Tivx38B3ium4
zbxmJ0C8OIebdGoqv3/PcPYGJaH8tTV0no7H49nb6O3xI/g+9Ikcb67AR/3b
zHtsDNv55SWk1W5RmtRrMta2hcuZJAiv/EUyrdfQn/oKZv8a4e0/n3zy73Ei
/0SgfCCbIlXi8SCqF3e+NUN9rR2WyoTir2EszINUcfqWvOD9ybWC1jPbyFxi
s1FN+jT+kaq5ZF3qQQtdDQR80euGY8fFcUEGB5mlBydI2+rPf2/LE9x6/4Zn
7ycusHL0FWw6M+xkV/tJWHsK09qxEZ4eNZXcaFf25GUHN7YzAeuMD5BLwGmE
uEqj/G0+Aha5wjS4iuIMTlXKps5hxtubsSVyNQKrvnFH9dW4v9VzWNXZXYID
PrZI6Rwk54Rt7Gbec76BTB6bFzpA4hdfCEwf3sL3aSqwW7YVFQPnuA/bJ2Lq
QAhCJu4m8zgtrC2QF1TPWss27u1lmf0FgiWvfpL983qapRXA7ObpYkVKCp6n
zMfPJCu0qlxgWt7TsOleMg66jcH5nD1c04MWLupWObd8x0HqS9qDVVnxmNNq
Q3WKyzlMSKl84q6BvVH78MlvE+QfqKPO/w9Fl2tSS0AwZIRzmKNuIrv+zgKz
Ky5wm7Tz2IWh43gSocN2JGdwi+6dZu8pHIe5e+SbXogIX2/8HNTFeSNvFq9t
zmR0HLmFfiepP2os8ko+MM65BAvlmlC5ogCxjp6kczQVPS053ASzX9xBFwPE
pfdgnF0mHkZcgGf8f2yt7T42SyPRMCPwDr5ajsQv/7nQTTPA0a089AYMDteK
b2XCjxU0Z0llpfN6MfyPgvMO5+r9w7jsVYRsiSiRShr4nHPSTgOVkJLSIppI
2yYVKmWLSGYpI877fiqVSr4VldBUaQ/ae/z8/j1/Pc+5nvd9v17XdZ4TubwE
1YPqkZzzFRdsHuJ7lw6Ztq+Hp98h3BrxEcm3/5L7wqXYejeRlcdUMj0zXYeI
3i+RnxSGuZMyMNejAyd36ImL9y0jqcVVSFNbLiYG3K9NbjqDF839qNdeG8Rc
3ozK7vOkFMmzhl09fTfTGV9O1tFRWSXxufNFbjrc2dWAKnx7GoGtquW0+Wgc
5skpsqFPHBEVmkOhL7fhjeEi3OrozbYqOuDqqHxs3+zJRmiu7XGR+eJhE1dS
a17BNuaH4XPrOpapnoVoZQPmX/Eek8zqkPf4KZXflGEuf6+yUO1a0c0hnCVk
R7KFN2ThMTwI8w4sxfRzbaJpnB09cH+GGrN95JO+n9l/v0aDpHLJ/8JAEjNt
2bouFbY7t5E4xd7YbNPBlyzdz2avCsf9oh9kMc+LCi8VYOupAvx3wQrJPyJq
D9d8p/7ZyVg1zhorSgtZm/0pvPJVgXnBUipeVkH+7a2sWf455JkhPXvYjzKX
b4DiutRaT7/HCF5Zjria5aLTEgt265w63NNcUN6ehfrIozA1/kjNeupYYLkK
L5bfguHfZ6TLF5P6phOYvW0QnGZV4ua5y9S5XgoTWA0NGTADmWkO4uGwSio6
Ks8efH2HuwZRTHWoFOss+UNm5gNgU9obnzTP4/cmAXvSc+hF/yL2suE61bmF
o2C7MY2qu08z73yhOK9VUO2vBb9TD5j9n97s4jZ/lFfNQqLWF/GijBnbOGaY
6BeRjUkbl5Cj3XL8avhOa7ylsXjYHlqW0Q2FVaUQz51jUj1z/za1paaueyYi
o2/y83xd8XSIgLxAS+ZvdYkWae1lI8fsRNDs9ZihfwIL361HadIFvOizlorr
rqD3cQE1d5ORbjIbadOmYvKsnWzruSic2ZVGFUdW0YX+Y3EvYjHNeXydu9HW
zaVovuGMahRhNn8Y53rZCI1XdIWu1+5YeugMnxcZQI+2p3KPh+yC856eDG8a
BYfNqnyrRSV3TPE00myr6eHVIuRe7abldUdZV+p9llCdiLChcWzKLiPEjc5h
sUN8mEfSK3Y/8TNUtvdwjWYmPVrwGrJexljNMmjXSAF75+6Fya1GulRSBrNb
a1EV8wBHvxuheNs+4eEVHT5fivBtvzvf9UeVOzb4JxXojRPefL1Kz/Q+0/3j
WcL05SV0RDOXv2Rpg+2Tv5HrzHzeub7JngIaOZ8NGcLVtaHCBnk5/sQjb177
0CQUVd/kUv4rxsCY3ixyq4BxNatoc28VbkZ8OJs1v1gSm9ONqsgb4sffQ5jn
zHTeQ+8uZ/btMv1s7YN07RP0KP0cL9NaIqp7XpKE/DjKJg6VRmL0ZfLZM5ec
HU5ikrou2/glDpbmLezHrF20XE8b5kEtMKxwoce7VuHZUGd8lxvHRPPVTP9z
NFaZmLD6WcspWEkaU5320sxH7nC4bwZ2j+HpDTP8nKPCiorTibubDaXOACwU
v4NtNcKsiol03F6HTToSj/6GNpSXYobR02tw5VAC5qw1YXb+g9m1+64s5Jgj
BbHBrPLuMOZvYUqmYcaYoRHFRn6MpIEPDqHJ4yQsbp6lg3G78MnMkr3IT2Yd
KeV0yb6O5ObJ4GzoeLraoo0zlskwpd2o4OYgpvoT/He8otzzg4QL++KEaZlz
WZ/OIgf6vQJax3sLd/sa8/TqNI1pm4JWM1f4fdbCoMLVnIpBKF+f78kLB6fA
2t2DHH79lsT0CRW8vOQEx4hEoU9ab8SfeoQx1c3Y+cQLFHcNn+vWiMlB93C7
OZbOvUlnJguL4CvTjD8xn5Bklgk8/U7jZkeKQSpX4Lr0NqzfZjIUmADnCilA
aRlmtljD2P0vtf1XUntntjT1fTIb/U91ISnhuxjWzwbarSdEhblbMH/6MATW
HaJBQUOxIeY65RdU0Ic6R7QPHURXVE5QP7V+zLohT5xu0EFRin/FgaVWJL/S
C2GqJ6B92gEXdzXThzlvaPOoCJgVLcS7mPPIXVxNFU8Ym9c4GCf+7MeY0k80
ZasLKbifIYvEOsoMKifTyrNs8pyHEH5O5f45joCvSzTm2Rc5lDmMZClOOg5f
bsbR7HNzWOeUBHoTrIqdz9yw+dIA3NMMI1/5NE72YhGG3ZZC6xsFJldj6fBH
JY1tm2qNh4Uu8JIKZ0fGclj56judfDaBzdeZjeZl9kh6ag4lmQb6FqHBBkwO
wrCxnzDB/DgZT+oPx6pCXHQ+xW7qzie5a96omOTHQsf/oTEzttIj28O1Vo3e
3Plj25EplUFDtxrw3reecUu3mWDz8Bx+za3flPpFnb/jPkDwf2vC/yhp5T7k
jSbdX3nCMsktKrGYi+6ESezGVi/kLqzgru1sQbz6f/yGxiPQawsQLOJr2Ke1
JvzVnv3o2CvzZiP+/weQarFj2TMhJDRWGBduwklHTMFZ/Y2kaVhKqp89ea39
+bC2PisY/duCsvuzhPtvOqmh3xK8Px3Av2stgNnJGFxUK6PUvOGk8c5OeK2u
z8sn5GDsnad05e0dvlpDjquN8uL8l1vzjQfMuLGfJnATNdtqHYIHYEZbr55e
juf1Z1+WGC8/KQw+n0H5CqC0Sco4rtcBB99O6uCi2Ybd2ej2d4SW5QhRZl0+
VD6cQkA/TxK3JDONn1fYD6P7qPFTgv6GIIhmlfSIpqE28Iao0Ou4eLfkr6Du
+JsK9o/ltnC36GXgKzqobi48LHbn4d2E9rHJiNr4lVPSiiRuzlL+4Oy7lO65
UdK/rozW7gylGePn4tBYDdbrfIpw8t0P7stpP+Hk0yF4OluRulx+08TBE3Hd
Kp85JrbTkn6fmIe+D84FGGLuqYusOeYiBVpniN2HJqL3tJs4EFxPtx9cEtP6
EiQXprCvHy6gfs9JzLl/G7OHRIFf7UXhmuqIMauCfXgFOrcFoM6sRHx/+whG
RcaK6ly8qNfUk/GzOOpWUiTf2jPo3zmOguPyxE8rV9CWUpEp71iOSU3jWblg
jL4nbPnG0jFCUy9t2D7V5Hfq7hVGViRzS4deJ9WTG3kX1a3kNpIXpL6oCFL+
deKpzW+40g+v+awdozhDT2PofHWgqjPecCp05cncAdGsBLNUb9ArnSVkFD2J
LgQvx/5uXabUcoeu+Q9ie+8VoMn+GeZk2+DqhtP0MVgDc1YU0mx5Ds9k0/Dk
w1E8Vx8E7rM2TDySSJlPw6vBdjhT48JOr3iFsGcnESaXAOe7x1B6bR10f3VS
VPxXSt+xgdXlrSDN8ApSLTdj21OrcTNuAd7lSBBxSQWrpCZg3dnvdL39JdlH
F4l/2uLEhv2xeHLrJRqnj8GI9UOxbrAqhb1MwuD9w9An+wKFvU5hi0IGUtUP
eXzLyQI5hlHlIL+ejFPscToLnHbfwLJOzMKuIQYw32mO3c+qUVXSSi5/zfF2
lAnmbf9P/BzQRB8XFNF6KZ4d+5wD5cSr6G14F5/PVGHajSjm0cOTW6sVWdj7
T2JB5Se45ipSmrCejursIfetn8XxcWthmTyPcxwzSpxSnMAv2faudi7rL/za
W2xfULgD9ok3+cH6K/jei89wmSUQeo1v5CNMIDr1uFhV8Xi6IcULzUeKHDIN
kwWNsLV8wfG95PX9DZ2XrKZOXRVumr8iv9a2iJu4qZzevW6g+T3Md4ji4J3a
wmbMOCUcHpwCKJxB6GRrobgN3JOlSiiOe8vXDV/CTx32D3F1U4TsYDWWvu4g
PU8Oh8L7CGFr7hfKPnyTqzmuwk9Ryea2LX0kWZq8GlmpkZIxMduE8YtmY3Fr
Nr8rXB7vuzxrayoHid39zISm8sGYZW9MO/3KBNu1l2n22kYE28YKukm13IaW
k7iZuw5hbZPEPordDoVeMcicrEx7jB/y8ZaRwp+AOKFxSj5vOWQ32XlOEiSm
4fyj1v6iTd1O0TChmTftKhD2HC/lRnKW3FO1T7BMGYGlM85iU4cRtgX847Qf
/5S4WXrzehufkae3lfD3RyL/W9qEQsZO5DWqJfzLTik+KMuDK/h1iJKeXeS+
FuVDcn0fbnUZoqShkRvVJA31QEM2ef4kWrXAhJwLldkKDyOsa13GfLYmYsCQ
FKrruk4hS1Mwclof5rN3p7hMTEP5PG3K+JCGhO3ypPg+glduWk9t/cYyT1Uv
Cuzp0GsGo5CZXUZqYxthOPMikzN+QEqHk/ApJwS5QRL4ze/DNAZmiM9nPaaW
o9Np1LsM1hYisD4uBXRT+hS+ZqwkdYtBrC49DpKYYxjgcYyy7IYhq+Yb9n3I
wjK9C4jcaUr6P5XY5eI0UvtvAjMdMwqNvZzI5/JL8e6IBurb95U4sf0NlafY
oTA6EJs3u2JzpRruJhTQvknlos1nK7hgpehqPYTMwveyZzkHYGW2Ec7a9Vh2
bBeyK0Ng16uEru+dgBbtOlH/9znSXz+cG703lao6b6Nl+yqs6xUsnBlmJmTJ
feaWLg1l5toxpKCuxU9OvwoHuSSkBm/kbzW7om2SO9udYIjh/ykId04P5AKK
lbiAFfNExepivmJqPkZ634awYC03s182rQwrkNS9O84rj77IKQe4Y7rOA8LJ
M6RjdYwKl+tDaXcc/EYasAdz/0Lm/RCYrrgmXPtVwFp7vMHr0UT2X4cibkv+
8f7fpMX29qMIVLPC2Ki9OJp1Q1wdG4w2An2PfSSuxUFy/bmOLc0dQd/VBolN
Y+No7abN1M9mPS0wuocXf1fxJ+ca4O+Fi1Sadppf9iUWbUEZaLnlgsJ3XhL5
F1nwcK2hLVG7YKCryUrnJ+BIRiAN/LKTrRsqBZP9Imk9jkDbgDwKatSk5ybF
mN7pJ24LbaEFveWYdHpfGF+TIE9dYBYXO7HzdhCuhByjhxkf6cMxDza9LZs9
WpKM+WNKqPPPCeoeNB6B1xZzuZ0DmFf6Sn71aRVEHJLhZ647RMqH7eH8+T9u
dFI9RhdGcL+9BuDYwg9Y2d0PVe+nc1mD5cUDTBubixSFod+/0K2EOBbiJaKj
YzfqFv7AwdoTGHk/CHH/EmjvpXnCn0/jhRmzIiVnb04VarzKmTi2SKhQi+fz
/I6zo/kP8C1xPl86Q512uiSII1WUWdX5eeJfz7+0VepQLV4cIM0bcbRyXAzm
XI+ClVI+HS5TZ2rzd9MxrVhuRWEHN3hBO7ds8gI+oXYZN1B5JxksVROCtxwX
VaZY8JazBrKDB2Zw3jP+8Z31/fDT/Zq44XcwjQ+4CmH8AzQMS4TdHW8YPSlh
Ht8aaME3C5Z7Yjw2y3SLSk0NLHSoDJuuryIa20ZQ6Z6hOFkfxwJujBNMI9bg
7SZpXrXECGdMHLnxK2JolW4skhxq6HO3Etu9fxH9Hq6M0y7SrKPCRvxocpCs
gvugZk0+v19QYTMuDBGunktjRoUpbLnKVVozQRFdMfvIzm8Eva69T8FOEmz4
sovpOnXRQPKAk50V+gSmkOPbJvFl/jL6K7cI0vem4X3DXuhkv4dRQBaR9gVU
bz/HXFpH4vyRarr6K4YKOmpg3b4DW/+egXmcLt4UuUJ2uyucUg7AQmso6n8X
4W2bKwsPGoX4W2fhfqEWW8vPw2d2C3YnqSFseC98erESjkPOI3F2HpuQPAk/
3wgIVHEQz0z3xtHLMghYY8KebEwh83mh5NjhDLc1GTQ67xA6Xp4hJ91L+HLF
kdI0pjCN+f9gcTePtbpHsw/u+9m+ITugK9Fg7hcM2bqz5jTXbA8lzRtOmyPf
EOm1sIPKRCu7BmPm8FKsVG6nIZpmNN9GFSkn4hD5t55OXmgmya9J9MPYkzn5
9sapehV0qd/G97x/KMpcxgIVriBiEUPhTj2I1mWUV++MmSUPKam/FJqMJmDT
TEvUHzZkXPlstuPpHKhGtODZyNfiLtEUW47GkPX9b7Q0XxlvUYBhI5TEh8/z
4e/byqxMlyM6XRb2TdNZ8BsV+vjJg2pPv6TNHk7s94G+zO7QCdIL3Ae7HRyT
+ruNir1a6dGdB2SlJyAxyQiVBtnwKV6Jh39OwNjPHpPWnCYt14Hcz5VG3KiM
TposLc1nnzPklFapcjeO/qT/ru2CxgltZvYuiFcqMSCvc4fI4fJMITguEQWL
NvCeUmX8u+0yvEXXP878wc3a63t6sRMfNSGb/ZUbZbxQqJwairdrIrkrA52F
DX+mQ7s6ErsT9pG2YpSkZkwLuzuwlLvfxwd7zyvQ5mG3qUt2N5cy5jJXo3eS
69v/H1lKK/GG9r/J8PNNOtMZhgsxx9E1Tw7HRtqRo30L35b0nV4bqLEhgVns
0OwGcV+CI50Z8gtXj6TAcLgvbdVpoV4GzSxJ5jDbnzKFHbdvFgs8FmHnj17M
8kICjX4hy+jMLazQnEn/hf0hpe9TUFclUqvqWTzepAa3tp/oNDtOB/vGo8LP
E0M3d1PsoTPIWWiDGX6b8FT/GPrtWMzK7y5k49YuZ9xhL5j2D2KjC49j7Klf
SLy0DfONQiCr31d8eH0ULVcYAGHjVkq07sOiDjdQ78DjbJaeApaZfyCjeBlK
60jEvtZzCB5ajlGbBmDm44/UPaCFmn8X01/VQHwfLUsj6p5hXGsd9fouhzDr
TFp1pgvN3zdCvSaFvpddpzcBR+l6Yb549qMZXjnZ4vWvw6JvkQdQepp8Lu1m
h2GJPUdGCT6qXylrgwEGTfTE8NwciMPkYaWoyA4ensfAR9K4BZ2QafGH5s1m
ql9VjIjdyZhz256ZhCRTR0QvpqKWhfU3VNmdJ6vp0nRf8XNpPhzOS7HYdX8o
V30dDThwQLh+MJLzn7WZOeovYF+87ZhV5RJsr+kr2JqV4lJYNzOblYreiveo
8doalrMtF7E1C6ipI51Mllkxwdq5VnO5MS6OjcMZx++S489W4bbCGuHw/m3C
l6wqNFR38npV+0gqMhr/Pf/A/3n6U3w86ihvfLCGG/dnk3CpO5ne+ToKiR+P
oJ9NCj3MncO5m3zlxv97wPVZVgG/6ZbotrzI5j3aw6qeGAthnWvw6qgS6WW3
SdYdqoTDKGfMOPqISq9FY8PyXezQfikm83oQfv9wkJjOGI6jr9SoPa+Wez+v
iLkEBGDDo0t0qrIvU4lMI6a3j3Tz9MHpXsDPE7rYX3mOFehOIPvzkWydczLe
vDdj819a9Mx2uhjoN0YiGTwFyVH3UK+bhTHzd2CE1kF2sof7i7bFYdqVhbCP
n0QT4uXYva+v0BSTzyLfW+DcESUo1u+i1qX1GFahiyXXKtlcLwN8btKkWxm9
ydErHi//yaEwX8A9HQOEhl+Hy7FiGCZ4C1dCX4ouKRfgOzOKv+w3lftUVCuK
ejf5fot3ClrKAXyjzGj6GjBQoMp3lGRhIvHRfcD/x6nwH5W8sdbvFvdxSYSg
tmeQsHbgaXGDah716q0qbGqaj8qZwTDLmcEQfwOXzsrwBt3jcaM71aE+ME0M
8igmlSsZ4lq7H7TirgGMLTJpy7Pl4qXnBWR8O5U3Sj4nDnIbxruODaFz2U8p
Q47HJd0kdBxNxqPofFqe4izSuCxsW9yPDdh+Aw8jVZAw/AV1p33i/UPy2Hyu
z/+v6dHkpCO1dxamYvoYW7TtGIXnB3eixrgPvsVlUMofL6SbHWQKk4ej7+8o
fIw4wEL0hvHH8vWZ98wOLLWNho7WEXJytYUKk2I3qQSaQ03wbEMy3E+Z41BE
GYqW3sR3GUPyffgMTqFv8CNVBV9u+4vb4tbQ55dxom9UurhA6yCC047RHW0p
2K5OE21+pFGxxW72rXUfTNWMadWUUnr5wpodE7ZiSP4y1tdQHpdrz0Pjyx58
z2qFlfsq0mispeZF+2A/U4b+fv9IuTLVdK+BY9kPH6N793Dk39hF/+ncw6Mb
tRRcchvL0uagWusx2idMQsCsbKzvcwXUTx/zTp0UbeLCkPagBNLbuqD/iqcF
WY1Q+VOEtpwFTMUpgi2SsoNVXjXl/TNCVf9K8U5pGemtERChMIL5fowQqyuu
s/E2vrjHyeKm2EY2L4+xdWfyWcVwHivifISgwTps7RFVplgSi69qj+C7cAYl
xkcJbq15NFWHkcqpcNrqbSx8qb5BV5wkvMDG8DVLl+H2in3YLZuIsGvjaPr6
y9yt0tEIcFpP5jdOikfOZvScax3mcS+YFA6GoZ/oBufn5+nZOw9m8zIXY7py
ae7gX1Q4sJ344j0oOHuL5vHD8U8uEcuEy2huelr7lj2iO9b74TLbEqGJkWzQ
HF0m83AuNGxnY0e0BkYI2bgzKgunCjxw9U4W7HJ7/EWhEkX9Q6F72hMjwtbA
NDATBtuT+MurjVkjntGExiJI31whyZhsKI4wP4X5ek549CYLkRmFLLXKkhXM
4JHYXCH2m3UVsyI/UmZoINvsUUOfdj2jhwoMT16co9A8ZwoZMpWW3pTCtLje
PQx9ju3Xb6btQ6IEzWMJNdN81/OBXTbo2jgNW42GIMpEIqzoK0M1hgo432Qn
lETrst+fVcbpvu6L3HfvaJO+L8u+I02XPv2Fr9sxVGRdYWpn0qnPdH10z57A
5i80Z9dPCcz71wm8OBiPPaUZlFaqyDyLIzD8bRFt4rropV0RkxF92I/x6zHc
t5yFZ4RTQ8JhWl+UgAF/N2GW4TpIeR6tGTehgeRyL9LApDlYG9YbxYcyYb7T
iHRiPGBikwvlWhlcW5eGf1FD0DxmEevXngi/R+tZXnsOnO3+iRrwEzf0OYp3
wcnUy38hu6eqzTrOF9MOV7OePPhMciHv0ZaZhN+PT7NrMz1Z02yGtm3+iNs6
CEZJL+nTpytYd3YIVFEL4/hOZD4Zgq7SSNHPOEvQHimLJ+7r4WvBIc3KC4v3
JOP0uU7x5CNDUgiukoRMbyClIAMWYhHKr143Aof1y9A+Owd3HHNJ6tYPGGzs
4GR/VqNtZhfl6qXSAAtt1tQchAnaXRT7drs4Tv8hue1ZTxsup4iq/jIILUlC
srMaHdSzotQp7yGxL4DTnWP0IVKHXZWbx45tkEWR0kkUdvyh1A3qrMvUFPoK
ZqJ9oZxwul8OnX7fRPvkRahWvYbRuT90Yb4VP1//MH99e6cw5OFhHJuXLLw5
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
C4ulc1GWNwC/7o9k/ex78mrfNmgo9MOX/pWczuq5eFl+hauRzOcP6BbQyQ3H
6b/LjVDo85rflraINxz5jLvQcJUb1W5Nx8QArpftSH7peZHrLk3gp4yVZsPS
hwhFugaYMy+H/5phTI4GyahvWspWjshlBhEcLC/F0cgh0zC2ajelv7ShB211
9EExC4NMX1Ifw21s0aEZfL60H7TaE8nGrJX8pZ6IWm2jsIrtpLFTrDF+dDh/
nGbzpp+ncm75EmhVKgvRPhPopY053pxt4Cc3afC+smpMdp+bsPltETdo9EuY
jl3Gd1pe53oteUZu0VI4etVQlP3zlH95UQ6rTrryqSvuYkRRJM27IY98g/2i
rV4RRk+JZRVjzFl19mPxbdQ+pnLfGJPEJUhkp5C+N4EpPBDEzjcyYkvJbiZX
KsXCs/agUDRArros2j/qsMYluniiU85n7t7PL1x2kdPNTOhxG0/BgT+DERcf
cVpHvASfrq0SA5+dtDRpIQ263Zs8PNdio+pZKHTtF7wzvAWD+A5R+X1vbr6z
JZaXNXLyb3T5kzPP41n4X85+XSrrqFFhby3KKHenmvgo4SNeGSnxe3vm9Ga4
PG0ePZ9K1JeTva4ltzPVgn7w3yjtRT5c16Zx2hOOYXXmQWrodiKbf3vh/XoB
lP2cMEMsgf7ddlzKb0CNUgdVKZhjU44N9nxvxvk9I4kTNVmVZxrfd50R2Fht
vPFZC+2R61Gm9pa0l3wSaz72o5C/80ldSMR/682Y0RIXqCwbTDKnm+jOhAlk
GhuEvC92OOPZTRNSJUjdZclqpmZizser9D7ImC2Z+BSp+isxeMZfyjjcwf5O
+okr7oqs/Pd/9HTNRKZaEiTkLvJGwY/3lGo9TlDwiGVc60lJ98glQmSv3/yr
I9XCwRmLcdPxuqDvIS+8tp5ILRENdKN1Ag1INqdlH6olzqFlbLaChEmtHgyd
zg109o0um9Q8DOszYtiTvUcpzdYMO5XtWLCDAU45VsPx5RJmeE8bx2z2s1v/
zWLOajtg/PYIXV9lhfG+ZzDRXQuF9fV0UjYcR0bo4pjwRtR5upOr3TqWX1W1
kCuu8heq3ELobNgNbtuza9j4zQt7aso5e18r6j+yUsTSj2TvaCJMKnfjC3IC
+C83V3FOy1ygNCSBq7xdCf3zn/DV9BRdCe3H2kbto+s7tzPn3GrS8enHyibu
YsFrddhDj54Y7cNEvd8HYZC+CWWyUkynzxJyPn4Vz7fJ4XpHu3jA3A2q+kQD
re5RoWUS2+n4mFSDDGER64BpQRa4JjOSa/+xGCf+jOc9w4dyGZPG8frrevz+
gTqW4iDf+iOS/EIrUHp6A7wnNEE/vlN85jZB8i/5B+dUm83536/k+nUeg1fq
RD64OF18vicDgeY7Oa8163Gt2x1tH6sw6jbPJ6ywxZVsF+FDpiPkH9ejsncI
n/BzC713UuDvesdwb94M5ZVlE7D7mi+TsR7Lr2uzpvxLOdCWvitWm6kwlbPS
pLxNH3fji1nwPw5N1RehMloJI2tuwfVbDQ61b2GfygfAv2Ee+7z2DJmNaEXf
vK/46+iIzLAZtMqvHbX+hvh6swC1m6URsmMKa3kehYmlUaSyWsI8kx7imOo2
CHsusH1aaWhQrKbpYanihfIyvt5wfG2D4V7W36UQC3pzrMaqFObreNTlZFBS
zDL8TFFBuMFUlnXTCRG0FnZn8tj7oCrs6L2XxjpkYXb7RzHw+FMyaZyEqYO7
ajNb9dFUsICF14/A5toMeAlxjMUqo6Gnm0SNWNq44DDv57VUmLzgMf/20ji+
wPgiqe54xndfvyTZ7m3Kr5nfRn6VU4XKUb78wtjxqL3yWSK3X4IRdpfEvYtq
RLc3d0ijjyDMMgU9OrAKbtUvuVuWysK4CG/c0bJnW9qewupaCN8WdAxd0vNg
9mU/e3c3A1V/vWFRo4WUPOLjvPVQbn5fcmlkRy034ziePhjH5KyHsHabfMx3
kcH9eiMh5bIO+bTNxvnQ1cizURKXmGzlBBYDLNEj5RV3yGurs9ilugQT8vTo
q+Uuxt0ayq2Z74dFpw9x9ovyRdfa66woqEQyp0gd+yrM2YndnlRU4U99jZZw
d0oXYcTpMEp29uDWeU+GXmWE2N7rOWekO4+zf70M7UUFlKiZJtnhNoBV5U+F
yo0m5Nq6IPrBAeaV0ozmY1GY7H6C33BoHxWMGcjV/TyJUeOcuO2fnkg2DAqU
lE3bSJpKHdyx3cPxpH+4EPqwAAuK47C7yZh/Squg5GcM6ccLkPFnHTdmb7PY
F9K40VSP8ukd5KSajGg+WFj3YY9wP2w+7h5sYaM91PiF4dm0b0SukFY+mEs0
XUHj63Kp93RH1hYtYOi7IpS07CTDqzlY18Mdc3orsZjnB+mDzmgmfTZFUBqQ
hvqWXXDQk5NkX63p8ZcgdkvzA9//6xj4vSimKylP8LG+WLhKbrh+qxnfanr6
YznPazecFVsbArF1RJD9wo3TuCLfVipRM4PtplESlbydNNAsCfvfz2BnnXfg
+KxTGGC8GN16iixlWgxqwy5StVQwLZaKhYuWKc4oxCJOeh4dbngrRhzOQeNE
X7b3FcQP63Xo0esMMmwR2KMfaqR93JXp/7NBiqEz2gaexLvDOshiu/kthQ8g
M86aGao00tSXaSR1dSbbqRBFb599pazQqexdn2L2PdoLV3u4p3WPC0Lvr8GE
r5NwTqrHCZ9foL8+2izqZQSWfbSjtjZbjLNxg8k8O4zdkEyKmhlIXybFvmnK
wnv79dpckzNQXtVGZ7s+9bDSJtg6OaLujA+qRtvj7TULvP85AC9XFqOuvBib
Znay0sYTcNSTFcxuubI1yeuRH5rG7ZGPh++T3hQuvRjZ0vXivmGp2OlWR3Hu
k/BslB1b8qgTNnw9S5euEtVqVFlnZgr+LZLj94SOQtr8voJJs5HwwnuXILMo
j//4dQS/JKefMHOTKd4bZNSaTFgkKKlV8F6Ll0PtQjc/tfEtVVsf4es9i+na
muP8vKmDcafHB4vvmwnWjzNp/HY75vw5BFbj5XHnUR0uPciBZ2kv1mklDyE9
nNUvOYn9l6ahu9kU32fHkY2GPjOuOYnafkmkGTuTrv/RJM+DM7HSNBfbJ7hh
gHtvNqLOjbt3KImtdEoliV8SPd1zg3ucWUB+GSr8b6VdgkbcUCH0VgTvHz8L
g+4Y8dNbzvNx7UEUoRIsmCZH8J2t/Sm/NlDQuj2d89lViU75AIwJj4fLPKJ5
rp/p9YV4JOVOx5eevnH+rs5e7bhG85N4LC05i2yHZvj9qMDpr+8o92MlRS7c
jbc5OsjLTaHMiKMYUvYBpZ1HKMRgEvz2PBdz/g2gSdfl+T5Rwfy5a27ixPSL
zFxvM7WMncMdNn7L3c6p4s7ej6Do98fomkYTXyIchVTvIKYRkMlNvdfKdXW3
iOkjC3HAUuCcnq8TrnkPFu4ODOFjFq0mQ7Vpwg/fpZJLTx/h0LJCySfb6Sg1
PixEjbyLq2kHBWdnG7hKV2LO5lpaYxVO46yyBL+4xZzlez3JOcsYpm86Q5j6
XIPf+Nyerm8ZxuIPhNNvqZ/c8PO7mJ+5EYfXxVQ4d21toXYv9mxzJKZ/PgBD
jxDJdp8cLqTWAdtk1SRv+8/FIrVQ3AiPoMLVx7kTD8+QZsYgpvqtnDxOf4T1
1Vr6+iQKL2M6ED1jBwynVItnev1CVqQiGz7EAevKjrCfv0bQzRFucPmxi5XP
lWZrx5ysHX9vHVFXKX3feBmwS0BBeDnpKBxE9KsytL0vQr/943FHMbFm849E
lpnaLPLdgdjunULGf3PQtuEOpf73EsttwmnHFh1MHl1D2rsHY8brMmrS2E/p
BiNr87efplPzQ+lZxHBaMqob33odxaz0GUzqSzO4egETl5IYbPoL3JkjaGeH
iE5KWIHx39r4Xltxuu4dHk+ewmqfDqeu4wuY/ZsFYp+4k9gWb4C+Rxv4nQur
2Z3fXrj0OJzdl51MS71SqS0gl172GyMJjb7Eqyda4fvi79xfEzlc1h/JW2vs
FYbNs6aL8YC6xmBYag5HQONUtE6UUL+Hv7C4JBA74o4LIS9WCwUWOixrdbbQ
am0L3dkT6HX9ZMEp8qAQlJmDWN+pSJ6WgJdRmhTpM4FbvO43Fj57QV6ymaj/
L0F463CH32S+h9tyYAyCtGxRubkc8a674S55QHPGvIee00whZ0U5y1Wtx+gT
ZzDB7LzoeOYPXvz4gTMaA9mJBf+xuiIDpC7PFGWzffHEJ4+2LTkrGr+qpiW5
GpD6o4cPo5az/QYi9JTNJHfkE5j3wjpsWyDNtkV1YSbfxOv1+Fns82zaOLov
7hzNQEtKGvpPvIZLzTVsTXys2KpdiOErD8Mi6pOQpONNWbPGkfS4K7gn78Uy
Z+2DJEkGR7S1IVsdBffkg3AYUylenvJLPOQ7lB5OvIqQAROh8nQ73aJ7onJ2
Bo3Pq2ZZrhImq1dKs/2r6dL/v3O8Motl3szFbg+RmIoWVPYY46X8J+6+SzaM
GlPJ5dQyidF4S/F94WCY+A2Fgb1az7v6Qwur7tNppzocGJxNUS1x0OGHsprF
O5mryyZ+i38RVRu1iiXHNfCnI4KptP+mFqsFouuWNbD5Lc1GNTzCSS8f/P63
FNX3riG5/iYq17TRJ58E9Cq2wmn73kxcaSl69I4i92lqbN/+PXTv7BXJpJsx
1CvztfjacREC01fR+5Uv+N/3d2Pmb1W8whHY73NHBjdMsOkYKzjHGMPUazT/
YuUivi5eFgrqG/juGzEos9vJz7xyXpJclslLTgVLJqvOwYbgAHp8eT9J+eTz
Gsd+wL7xDWb/8Ubtn3phsJIqm/rBGGlX76PZUhXT/m3nXet+c/KbVKCwKhjf
TFJRLFmAY6JIZUWhoDNZdGF4iWT8MHPh1pnVwoOKcE5F04BbsyaXwt7vQn5B
D0PuMBay3t5ATFus4NJsjrfLV6LXgIO4dUcdDW1m4ssnbnT6nQE/guVR1S83
XnOTIcrGHcH9dB9qnpvMGqaosT7/upjkjg3W158UZT7WwcFpN2ubKI118dP4
Di1XKsr7hrxYb7b3Yr9xh5/mokCxh8M1orl+z2Mw1fYt5ezgYbuijQ5aPBcr
PHOwRrUDsgHn0a4XjO11rjB0WYDkLy5YYLUXZxQ1Ydt0na5nf8aJncpkr30c
hcZLED83l878mozovjfoVkg6GaZWYJiCIylcfI9H16/gq90WZq7Zid5luczb
8QrGcR9qrT4r0qeYt3DxnIsNE/uw+/KGLMH0ArP1eIbR3zaRYo4zSvWHwqP6
Am35oYbh4cb4dsgYY/pZI+CrNHktcsRwNzlattyYRb+0g5J0BCZGJNPepl8U
sKEvGyAZx/Yuk4Wq0x2szimEddhrstIxgeqOaxht6EIDGrwYlGtY2okNsEyP
h0V3z97eX6KjSgfQuCeOMqJkWVXZHFx86YQhXx2R/N870lz5Gd++vRA37t6B
SeWBpKEtiwOPzmO+z3TsWrQb3hm7oXjMShh7TwuTetxZLv0Jddgr0NXZDlhy
KhVN4QasaqA8ezx0MzSyXNiVceUkf6WE7WjXRv8Lhgib4cEuNS9iocvs2M8B
tjRlThQmdB3ka7JN8GPubRZddVNMoyTaErmJcku78HumHFfjJECiWkbVxe7s
2wFG+wdkSiwPzWI3wr9S7Ct/PL/ai0afvYhcz+nUsDeSLa70RO9TldyNDYEk
CXeBeGwn9znIj45K90GBzwCs8bNmUTc/UrFTDXNQXy5M27tDOK8kD/8/84XZ
Zq/g2xDGrvsn8nuiHvBtLUZs+uRjQtE8gf9c4MMfqK0j/f2J0FVQY/J3xuG7
9zVEh2WyMlEbbdn2zLhPGZv1VxWdx+0puGEwzpoNYD/dVJjP7Rf06chvMvax
Q/3dMLbbchS+jbjOXr7pj8UtPAa07yKrH+ksa0UUG/ahkw72r6aSsFVs3gpL
2G7pg67bjbgZXSjaCEfI6EoveHXtw78nF2uZgzGzMknCXtULODlUCwXTN+DX
qgjRZ30mc7qly2KkJ9PgNbvATGyQNK0G64xPiTWbb7GNBybhyLANTNPGD1pG
L1C19SO9jVSDXC9fuq6rhEUl2qg41wCVA2rsk0p/lntDjj0rXoGb5bIsdVYp
tq6bhlN7JqLtrjx+qWgxo7kx2G2RzSyPn6RezbpoiHZhk8RneC1ZguVTZdE8
UBP37O2w/uIcZJwejVK1GnHP4wNYWTGZcxh8nteyGtIzh/uwfIY0VE/ncxea
Wji56CIhMDpamPhBDYnmK7nJdxnXWLENBQ4DaFkvnuqatXj33ROpIvQpX/zi
gLCxYrFw9qEaVEa5I+xyCUm7erIJ8dGULbeFtwpzwNQMS+ZhuhqLq4ewu54j
MfvUOxiOOYo/j4KhF94J34f5mGpURFPea+J8eBn9vm7CHrUEYRYXQeoyvdHg
35/4ggv0PWYjswxoQbcGz0580sDUrVHwa5nFAuTz8GBdPFYlbcC75+lM9f09
Sfp+W4zSMkP8+QNIgireDE+jU5tbKP1bNEXdkMGHTdO5hR/tWPfHYGb5dhl+
7VbEgugBNODwRvi8j6DuKClR7vVtpKtIWJ38HSTNHIYFA4pEp2M9PDTiE1ya
LtDp8HN4obsfklnXaMenAOz/MZzFyrymoX0dmYvTGtbbsRjb/pqz12Wt5DJ5
L23JcmAJTdmwCNJgsxapscxF9bR/lTK7dNsDL/vZIStlAPnJOSKkrAAb4/Np
tpEqPRyuLJreWEZxZYdxWhJOaTF9xWOpjbBY8pA0RgdiWWgSPVPuy85tKqZt
+0xxZ5ccTG1/w0OuAbHHhiB9hSLrT/54dUGVWifup9qH8Rh/Z7BQW1LPra5x
4e2GqwgZi+ZyF/Tl+OYFNyUe+p7wctoJqdsJqP04WFjM9xWa0qJQO6ovO3k6
XmjKSON13htCJVWPH7j9MJf6Oo+vEjvYj+eJuPJfKf2VccFfOXvo+puhxe09
fvk3My/NU3RezYbsjpvSeLslbOPm66i79QQHAuURcD8BOSN6sbOZY5jxrSTE
rjyD3Gv5yL++h7/m7ECPPLcieetw/sWe5RgZskmAtB7M5g/iLJa4cwpHYsh/
i6ygfvcGd/NUG3kpT+IXLJgqtF9REhzcH/H3p/bBircif6/YlCISs/jz421p
sNxACh9RiPeT+8O0J9d/RDxHprC+h2OcUNM4jrLrwsT9nXmkcz8HlyUarL9i
Jk5939vjgWXMcOsaGjMzlkl9UsGmRiU2qHI/Xub1cIPsZISvDMY+Sxc4JuaR
96yb9NraEpoevuIm5+0YrjIPRo+lWVlcNO18/pVyMv6KD0+tILfYD7VXhtpT
nwv1sA7MpODrw8m05xznayVwvTy/QnqQsmTFZgdM9ukS6zUUsXt8Ek10VuOe
BqrxEa6jULbyEd/Lo0I02JWO2GwLqNd24NH9dcKWXBVBuvcuFp1lBMmgIO5U
kyrNOVFA8t624peAbrS8n4vKWx9oQHka+559BC8lIn/OM5M91g6HTOSe2nue
8XT7RhgWmn+EqoEBpnb5INWskfr/UcdI52oaUiTP+uVkwvpIHE2OfEizt2gg
LfUwRq0dyM5vTGFFhmHwfPGdhpudQmWWLub4+7Nq71gIZMUmWVjjrpcMmzB1
N/p8n8kmDf9DmqetEO05FJqv+1LTPi1scZiD19WfOI3banzAtyJO6awjBEtN
anMSUVx12X7hj0r+Y/wu/k1sNtc9LZG+J/7jz82V4/ndNRSTMJaXyV0gzP+s
KEwx3oOXcYHC6blfaOu963zUX47XrHwkHnT7iuu/P1P85zG4Yckj/PEDdKZN
F0Lcq2juNh/ozpRHTM5l2tcYwr17pcfvH9PN2fSqYsKgGnRtG8X7NzeTp0kk
0xgdSnJPJiB68hvyObsGmg3lLOz7dLQkDMei27qwcWnGyLE8vNx6no3Rws2x
vDDn1zxaMOwI5Iqf0cig07hfCjKp/YJd8k68l/EwNnxrAvrOfs8OnGlHoUc3
oWQJehsdpG97P0DRbR5WvxpMfp6NaE/YCLclVhhY/4/Mn61GgWY7fqXMYyMe
HYVTXAb5y8thi9sRdqvXYUSMKmUGYYV0cvkf3sM6lq/9vUoYeq4Zh1RTuGDj
EdgYWMcPerWM3NOzqer5Yd6THRXmGcgg8I49/mzbjYsvbPjS1MX8F9ORgsdv
dZI3OChOfVvH2wevxqAbIXyswhZsPXteuJIusMQr4/kBhQd4reI1Qvm4A3zZ
tt2EWd78eZ/XGPmhg/O+3yKqS0/jP5weAs8VCnSx6rBgseQ0f2PjevGBRi+0
LFuE5IOt5G/pSgtTCjDluC6u/u3L1L5epKPJnynpqyvjfPP4ONNJkA0rxpoT
N2nWGA9oNPJUJMNTSGEQWIA6e/FGmr2+wCPJzp9F8tv4Ovf5qBjTTXYTboCb
zjDFXJ19m5gB6Xvb2Oy9BT3+swB+MzIxLOgVrY7sJNvIBjhcdqE11tk4vvEA
rqg0MMNePzGQ9aLLqidI1WqY2HWzk3qzcnScrsWY7vnsxXAj1KvsQ5scx8YU
l4jf2QwWrpGP5RV78YPvRW9lVuCd/2iwudXYFifL9NhemnhOEaaWFaKLSgna
h2ojq9WOWjWH4Oj4q7TpnQrbNXM/pOZvwYXgVSgaYU+OOXpIv3uS8kY1sbpk
VeaweAJb+9cBR83noDhuIWTcoxA++RvN+KCNjKVPatcrKLHcDDU64XqaM/Cd
JQyYWw+fXZOR+3Uhs5V3Ru6OCUjdbsTaY6cIxz4+EK1/+HOudfYUr1wmOK9+
jIe613u8Y7RwRsZWGJ3EYRJTx9z/Gpj9ugy8HjSDNz9+AMOs3lDtzR2QLfyJ
zds4qIyxZRpXu+Ck9JheuMbgY/lAUoxWxOfCJ+L6BU+gNTEXoZvT6X8N14lf
TXsbxmENShIKGRoMFSlxcpDaay0kFaFEKkMcMxUhGryIZqFRg4gSlUKhYT33
rxIiQ6dN2YokIUrIcCpTvf0Pz+d+rq/m62KmqdaCcX3OYMLPUPjbuomRIfFY
sMgV4x8M5lOvj0LpSSn2zdCHV+kxamgnlvfIDhG3RYKhMeMPKfT+6RJsWJ2N
O53+1OTZKI67qoTKc5Yw1FjF0oYqsVwHNRr6YRSUE2RkFfNCvLVfBuctKay8
U5HKBzpgStlaeEgTyXVfDe3NP8iUvabC8ZAA965r2HbuNdk/VoRmnAspu36j
+D966L7fIGZnJlDADF4oi2kWo4OV4fJdoIpF/8P3MU/JoDuadS+tRGrLdap5
rc/s725C3ABdbmtTMN2YPIllGF6BUZuUfWn7CdW/aqm6PBkPLK6x5Kgy3Jm3
Bi7BvR0sW1kUnllDN+wi0ahfgpAzRPJOLzCsSZfZrXSB21EJbrBFtO5rH8K6
DRhdTagvC2Nurba4XLqD7r9zQrBOEW2wVIGxegutGZtFt9yusnknPaHjYo8D
22xB9dPxcocJTG8OgcbURfgr7zMZfVIoOqbZD9XW2WjpekXP1QZD2qlADy5u
E2ybrqBHZTe8ndawsTdVEOtiiosvE8j5wkh2ryWQdcYKtCmvgdhwA+Z+TKTX
QyKxakJvi0tTMVBagORBKZgWqEUHkiuER82uKN6cxPSTeh1xcqbo6F9NURum
Utp8ZUTKJ5LGlnShn+5PPF8wgh0rXUS17t10r3crc8NbeeM3KmzwqF3i4xW5
dCO3hJ1dqc2WplVxln29Yad9Vshf5CZ05DfRhZQsevhPDH9qThdN84ggFvWU
pAMP8Ku71/CTW2s4uzgF4W1zB583pYVLCktF47g/nOPLCvS5fpp/6GotmH5Y
BVaYwR+9PIeb1FeR7fIR6K2tPnV912Ee0aGQi32Enr4aiD98Bht0NpGFuQNS
/knlFxbFiXFj/AW1oBSyu/+ZEh3jhZF1GpzEdjSqYz+wtkRHvD5zBbNq+7CC
M3VYMd2Q1e3RJuON4Uw/ZRMK5HTQ6uzI7tbdQkfRMRY42pJpyaLY0H2faLbx
FzGjXyZCnp6m2U4WbLr+PSgnpmGLtYjhfqfJ+UcBjunfRlrQFCi2/caPP5XU
TxLNJr5/xZ52Tofu4R+ixaD3lG4TRMtGe0Gm95sU/G6yxbr3RYMFxvjc2wF5
M7TZK/E8JV/eT0t6tmLXMw88f6HN+ntawysvk2Y9W87kWupF9fIqyLN++PY1
kvKl9xDyZYbokC3D+cIGyN6EsHXvO9A2uF10Mh3GCuftpE+VinA5IQdLXx8U
qVaIb60fY9zjFqy208QCh+H4rrUevy9Ec2snzWXks4Ge1gXQ4eQ0OuR6jUas
kYf5k0TJN295uuxShn3d19m74ChSKA5iMtlzGN8qE5ssbnHdcUZMv0MZhxRv
878kRsL6oCP4skddiPYME+J/jcK/n4P5tbqWGF6jhDTvKE5D8o6fkrtcMO6c
DVapItj0PyV0uqbw9sW+fEyDNtq6V1GlRJ6ViG9gp6bB+J3GSGl/hVjXJKT6
ZzGTFdGwehWBwoM+8BIeM0e7mXCo6dvb/Hqo/JsXV0oNqdLclXl9SELM2Hbx
3Lc0fuzu05L84aqC7MkCOmHSIChIC4R37i7wb03E7fwJKP8YLNDYYvIyXcoc
igSMMM3B8LZ63od08PajIxXef0i/MkoR8uk2Z+AcjQ1ti/mNYSP4hgEp+Nil
xr9OnkV/vu6nYX0mIOVVCCf6HoP35Ep8dLts8aftJz3RseQDG/w4iyPm6Fqy
nN82/jW1hl2k5rw0bk+vic8pFHIa4UGY6VSF1J4Y+nFAka3e9z/23HksljVV
Q/mRPNYfkrIH555idkUVtS6LRoniWeTsOY2DK3JowZalNG10IbLi5FjRsF8w
HTAVK9cch8lnC0zQjYXYqIOfOQ1odT3OtnkPZeX1jSwsPZz3bnzOTKxN8cm8
gpWOSGZG0hIy3COlhUPqaWW2P35Mt4GL416krhPwx/EiIoduIhhoM7VBvQ6x
uc4Sgv9F0vL+dKJ5LzMzWcHUtYpgPXc+bX0yHfWbnpF3n3zMUjVksklj4Xnv
F/m8k4nN0ii4+OVA+XkTSrTU2Gy9YqQVHeZ/10wTrmpXiH46F3odUMUW7aql
2IoVWFUyHQO2nRZP/UmkuZ0xMOTNhcCUYDx4koG730vYBd+FzL237/U2ieLb
nJuY0RnEJL9UIZwbwiIS5mLR5j60ZZgxe/XkNpkeOYkTHp9IPVdfMmnlFIqs
D2JW3v3Z1ONEVS7RZO6eSolZMrrxrJI/YbYNHYFucFCPh2bFcM58pzxcvxqy
JoPSovePZQiICUHpFTeYajti889TuNhr+htnFtJ/Ha74HlmL5TnJiBnYF2a6
T3H1sB8+jLhXJOehA7ksf9qRHYLMJwbIL3yNHjdrtvneRXR4fwHbPpVeZv5H
Hvl/sfxe32TJO6GoIIt8m+fgf4vVhED7GvhVJrI5gj0OZ05B2qRM8VruCFim
J7PlX1NoUtxPMdblIwoa9Xnv7Sqkt9HA4lF0BlafVOPzTTwhcyvlVEad41vn
X8NRi2eSYT8X8Z8ny8RazQHCnVXT0ZhdjeplV3ut0M3RmXRsazbC27BVdPXN
Am7vnZ00TekFuyUzoq0d2eAyM3FxYbM4qukNvch4hPiwa/hqX0A7xmzEhaXK
rOBSOhJ8gmA9sgl8kDLCTxixe1YFWFuWQGEjeoomJmqwDza7ePv1M9jpOT2F
u2NjYX3UH7aFA/gXY1VYU6WOYHi1mL7s6Iv8A3voVZUDtFa64dvC9cIS/wDs
TuNw2dYMD+6u4W/vfSL+dl/O/zweTYOXNIoPa3wwL7fXmf5D2bJ+VzAzYSa6
I/Kw0GonZ3bNmP6LGSOs+WcOZ7LkPmUdGoz6rlr+7Ph94qOn84Vp9/PIXhjG
S0+FY5CmHXfl21K+ZJUS/IsSkTjEEWaJn0hM/oa+O0zZk8BJzGUxISPdkNXW
BsB1ZzFu2r1HW0AiyenvxtpQZxa/TIbyZTvo95wXeG+4mJlnVEDjbAD90tgB
v5UxvHa6GhVtzaPWHitEaBSzQS4jkVsXSg/WetFGub6Q35aAa/16aPHnWfw7
p1AynuAOJZ/1QpPsI9IDTZnnjw46vyyQySlnUdcFZX5tqDG/p+gsFz5Bnq3v
buM969r5f85bcZ4DkvjDs8IEPaULlCjvCa5lE1wvmoIL7wX8IGu017jgZtxM
3mpeGa+sxHi36l9crrQPMiY6IN5lBmwuPsKRuu00YXA3jqfrI+yvvYjQ9UdV
zEcxYacl8zCJwyDd4+J+lZEo51Tx2DqFnkV9RfRpbT7d+yT6fc+gXY5q8PjT
RY+eR7IfdwL4HisFFOZWiXMm5/IfNQrFjZMaYaC0n4/rKOOcztjQwrRsSAP0
0GCahZ3P0mCYM1GiNU4TS+8+E9XbQ2m7sxcOmX2h4jWh9HliKtOqPwpXtx/4
LNnMZrgrQXHIocIl7hHsVlM99LQH4UWcPepag2Ga6sRrVBbiit5inOy9lfzv
ctjVpIM5o3gEJh7B8EA/qPKn2eVZX6jyUjD7d98xUl1XBJ0zRuzl9jC6mRDN
lPQVEaveTqYGOezBp4Pw234Yau/aICtZzA4b3MfOhnCMbx+Djz4S3PxvMkLU
D2DM/a1oGeYrRDkZCwu3mEkeTU5C4AoVpPRfgqRweWE878vJy0tQ9/Q337Ak
Cz4+jPfvf43vuu4EhyAzoSIolEu42Im4H6FClQGh/KhA42Ou8DYaE6F5aTKr
95vL7vlWQNJ/HQxTtNjI0fFMqyIGmR5joDA/lD2OPkfzbN2hY5yGafvW098l
UshVqJKvki7T3msCXWk5LHNGoKvyBFZrSARZxFGef7mFX7F4GHTlWoQtiaeZ
LKEvztTGCHntFpxqH0PheG2mQD8W0rrxAcJ2ORO4K3/hjIVXdKCqmpfcdWdx
5Ms1lloV/azahbrEibh37iW6E78wr5Apvfswhh4WPYVXij+9eqkFaWo2rb+5
mx0312fefx+B6/didA3lken7jTg5K+wK0MG0hqk0Q+8CGl8eZ83mD3mbD44w
jdiPqOGD4WmezVaX3qBxMy9RR04/dujEDjrbNh4pjmWoPFpDsftE+iY5hraK
WLpwVQ3f1d/TrFXO2H9bE0lTrOH05ySZ6YxhVfa6cO7/kLO5U8tFbo3k13MD
eZ/0QYgfkYq0u0ew7vFtZD8s44ShWtzBPi3ozL1EeyUHOY2NfbkkZyX+8ck/
FranrnFntc9yPdXy0GhWQfKvXHiYRcGt/0Y2JC0W1clbsf98AmRSa6irarKg
6Lto/1ou2dkvAC0GKmycykC2wlkDBanT2ZCHy1nCN5DbpQYYRckzIe8Eoie4
cP8HOu8mKg==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {21504}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/3" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`RealT]|>|>,
                     "Net/SoftNet/4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {21504}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0]& ], 
                    "$Dimensions" -> {21504}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/6" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{21504}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{21504}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {21504}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/8" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1024, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1024, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 11}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/12" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJy9vQlYU0f3OHyzkEQMkABKEJBAXFBRQ0QWUUwABQsirsW6sCgqyr66BRJA
ia0KttZi64LWqu3rggUXUGRVqQKiWMGyC4oWIVgQ0AD5n7k3idDv/Z7v9z3P
7/n3eeXOzD0zc/ZzZjJzX4vA8BWBJAzD2oIxzMW1sHGuIYZpQT2QyZ/0xdq7
W8SKHL+xyyVeCMaCiWGnOBg2lmyBkaE+Hv7RpbwjojLqEhpL4PgtKYU5WYth
PJH6TaDEdBHZ5duxLm0sgaEDg+OpLYiSeUSUWvDc9FMPskTfkjeXMa4Zcl0X
y7h/kARRKZzpVtPTbfZmrT/CfVAG4x7gYthmeAosy8ZwAxdjFjMmZZhaTIY/
xlOZ+86l+0dtXs+dtDUpc/x+7DVDKCVHU/357hIWaXbw11YB//zy1n7Z1xaW
blVnGYUryCwqLVmUyeJSzF4zyF9wWiIytf4RfVKa8UkzSMx3hmysRzmNa1Wa
uYgtGZpBsp43XJeozdC22bac6q/8AvvmsDLWUjdVKJmw2MHhjTQsfTiR7lX4
BUZxWkQtHPwX5IcC/cKzrQccMDLpaw6Je+aAsf4B6uoQfuYjhoQtoD/lBPC5
h6cJ9rlwRRNdTWkkknSbUCuaCcMLbS2/ZdN4guOBPoyD2ikC1y18y3Ebnxou
L26L1u3hjmXvWt7mVmA7GQZ4bkpKOWq76Ch/qPSDW0GzrcETrxXaZKslK93G
fLds/bJeTyisnE6bRW5ZxP/6+Jlx3z0pZ14ukmxfXMZ8s+VrtxCW0KcSGmRx
i2VmF7cmUYa8jkxjkcdo61I5FnMmnTUWSMnGq7lCD30vkukZPhebO0Y028zK
5+gaW63lIP8AkIuJrFkJ/9G5TDuWCzbJRGaBHdPRfY/aKP7aEnMsEfPAtHqL
aD8PoDYSXwtBLsZ8TTJa8Y6ZOthKbBBLlzjXSrikdGyskG6S7obp+5N+00lx
wfZmFfnSUJlmgI31CeVPIPlKtie3GBaSV5kcfICNz/yrWYjGWYidxwZIGL3Q
HNOvghGs0AgXdfYbwoCh3ClkXzuWIaCXPp0Yef9kbExWSPoV1NUcR0BCadbD
xjAomXrYvFpuwL/H9CEFYEDFVAVOxTZKoSG2EJuEA/tvI2VhMVnSF8PwKhF7
iXXjQ71J1mH243yoohF8EJqHcPOw5mSdlKnYI9pLYqh0O5Y/C9uaJWUkkxzg
FYdRaBzCvZ+JVfpTRDRaBM0kQ8DAVmCVXEY6VydTZ58xVSQJsaoUMsibKVIa
NYKGLQFZmIAsDFKEGVxqSYokg2VokFKYITT1OOvF+jrIZTn/UI8XK3NbMXdm
dQr3ON/n+7kWt6ZQa1Msqo+OKbILaJ4X7tK9lOXMz2BJiqhS7eQxVI6siJNe
lEJi3pcwp1CD+BaZUxhbImgGZNsMlgycgMHEvYUUpwEtp8xkO0lq5DZKnAc9
/iJ9b62/9qsqWmcmHf52c+nxGH03nx6VSY/m0kMxvagIeiReRo0EAJT96TGZ
9DghPTRdF/6iahXttYQekUmP5NJ3VtG6JPTdLHoc0RF/m82iR0noX+gx2Pou
+w8exUi2LhknuoquO+692RIct1b364r1NkbMzQmPROU5tw/TWyLtWA8X7zhQ
3WvI+OXS7UeZGYe0vi3a/PvRjspGC9IDi5Qi4B4L/lHpWa7zzrl10zBMAlWu
g8Ri9WJraIcKGTwRByskMX/N2yqSTIIWBvwr5GK6/h73aPJurtASIyBBnnT+
ub8OrM1gcdmoJ/zjMyQUzorc1JUkEh9T/2damP71wotjGZoGrBnbv4qvHyzE
sSHjTTCU9ndfU8iZKhwxDLD6/uTmiSyMpu6GsNq4iEIBZKCGfDSGpvvlm0U0
IcYdOdSnHxz5FAzTR2AsFdgfOikwkpWKRhxM/6SHDsZdq+qJ0zjXqdoUZkJ0
S1TIP9x7dh5GloxE7M8ht3iMKqRg+LQYFoG5Tjfc/Q/OK0yoodF+VSdMTyXY
TOBfa/U3heijwf/Dk7MkklDFaXxG7e/PLsTIhaQRM66etfwMRi2kqHkBM/4W
Z0lZAZiT1W0IzCvgPCBGHQmW87sXiSHRsL8Zm2THMHxdimFlZITDGBR3JmZw
jNle6QfHTHG/T3WdYEievBjbLtG+kUGZdxBLD0TjXQP7OwnPOQyJaWmL6RZD
0gKZq0NKyUEXCX3XTnp0RiTzNabXydLtlejOYbpMLC4yqzxjuoWvhYMlm5RT
FpS5LjhIWVC+82BMBH0Pg77LIzUigr47ghK3MzWCm2pcztZ9l67bwtcL4+u1
dut2++jOYZWaNVqY1lqYFQdM3MI/4HQn2anK1TGHMv9O8vwUilN5t2GcP33P
Nrr9ttQo+CtJjUhPjfCnx1nR4wa0YNh4SaofIzWSkxqVkborQ2rd1a3b1az7
oVD3HZ8SWHbGtO2MaTn+tz7A9KGFaanU7GEA7Xm6q2OZq2MG/vdWicNRVwcZ
xeloyWyYdDDJ6RnFKauE+SA4NcI3NSoiOWYbfad/agwnNSYz1bhypV4XpveP
j25bum6rUK+Fq/sOqOBamdUXTSwWTXxqYVovnVjfbNrWYvY3aeIWznIHMMUT
yU7lPpNUhPinxu+k78xY7tWbroc4MHH7xIcBpm8szBqLzBJIExHCFmbdAbRV
+5IdykucslwXAEMGi+e3uTrJoFpy8J42UJoaD/gw6Lut6FEZ0vWtLN13hbqv
fHR7+Lyip6KJbS1GtS1mjYCAh7FTVvKCnGSTlBKHg66O5SXzbxU5lpUAjfPL
PXIiGXTAKhIY6JtqXHdf952/Xmcz+DO9V3y9V1y9Ph/dMJZuK18Xqj3NtLfN
um0+ugN83st3AabFUrPaFqN3FmavLcxKLcxAgm8szLdwTzrdcV1wi+J4NNmx
3PcOSB+I3Q14eqTGRwD3UnVfsXS7cWzlfN2edN1eH2Tq2C4wGU94Rk304LrK
mMZjogQeXJ704JEjT9wyWVab59sIXA6nW/y8jRtGWmni/9UNUOwvw0O2RAWE
cl3DQyOCQ4KiuIJZNnNm2czic7eER3G9gsNid3J3OthxrexsZwYGx0BK9EVs
WBDXxs6aK+ALBNNWbYvl2thwRbFb8TrXxnaejWCeDT8kJC50Vkh4eMSsuKBN
MeFRwbuDZgWFBQSGBP23N/HBm2O2fX6xOTg6Jio4MDZG3QfDeIwD9kn8iDnU
IqaU78ov57IeMF2k5VxO6kHqFKtxdna37X6w/V1gn7ecPOn0bXu7OblZdka3
Bbm5OfY3lydN+kXddC3P1u732Xk5N35fTkY57a9grxbwHKsdZQV2QN/tG5EB
vC8BjXOsKkl6bXr/jM4bETLT10g4SL/G27b667b7gNrqtSHl1Wv30e3Nkkjp
u6xwq9qZGknolG/EiRKHHJLTueQFR0vIO8BATetbTOu5pm0B6O8b6cTiANOq
M6ZlhCKQnoAfQ26cXj7/XLLTCTAmyoLM5PlgWOklyAcFgHz19CDeUrn6Y6mE
JzS0kk7gkKxkLlaZ5GnkCYZuYw5ihkvZR0V/GC4aA53eQ4RZAnCW7mXpy7VT
wpCegAPC/Fbuio4JCvXzWxoQ4bfYz8/Vz88nYNOOoM2iqKiAXX4rggJC7Gz9
bP7HjYL/3vh/ZZZ53MlxAVE2dnxbDJuR8matjQc7Jykj4/5akY9X6yXu9POR
a1jjqx1myL4JPjGOet+2Utty04StWmdsDmUn1SKwCK/WEMYkbA67opB2jm9g
wwwRas9h38MrbKJykZ9FmlbuxqSYpBd7udngFSpUyO+LpAc5hhgjiTQtXcTZ
vKKWTaFgIj5fS5CV5KXtFOiPcRm08z403/QlAe5MJkYtKjQsF44VTHsnk5Ik
XE5GsXGIaMo+Mxs+xqJSVgqTrcvOZfFoNCzJ3187uFDruGFcaSEmZDG9RDp3
uN8VH+ZwYDLptEtFRjFtVRISJ32aqcccZhCXZqJFdhFJ0qebetgzpcYSkhYp
SjShMItkQ6Xy67mXSJyDHI4+I0n0vbbUtFxAdeEH+ngBbhOmc1ZRy6ylfB82
g0Re303jhwi5JJIK+E9t8G3ZTAobiDSAee9rP7QmPdFJ7qEFC0WS9Vw6QDNJ
JKY9IwajEWj7/OGSBV3usb2ifbgyzsCZe8W2nhG9931oMYW0EpqbhE6tMkk2
fiY1YZqwRG5Yvs0JqVlWURaJXU8i9d6X0OJxMCG70Ja+L4lxdn5uOu0ctUxr
D1ZCoxqwCiOSq+j+fIKxf86inuM/KnQoEt47MqeHb29hE87PcsHK9a0pc+nm
pnub71SE3tHx7i6a3U2y94keKGqhV96qv3+rOcV8MMk8AoCsTDOby0tCyyne
5SWzJWQAkhVbaFcuq7+/rLl02WCSFQKaZnqu+d390Hc073f3Z6cjoIziAG1v
p/rFj5pTpg0mTUNA000vNtdXhuYwvTOLZ2cioIvFZ7S9O+sXdzanTB9Mmo6A
Zphean72JPQS0zureHYWArpV3KLtPb/h/sPmlBmDSTMQkLVpYLOsKFRG8pYV
zZYhxMuKLcZ6m9QvNml2MxlMskZAM01zmi8VhV4ieV8qmn2JZK8hfBydM+mE
wCfyxBfF0yjjHszEKwfd8IofXin1RBX3O3jlDl55cHtEJdUcr7iNucBcZboM
tVyS0MdciClpfucy04fFNRogg+hchViJDtlBUkQo8qph1okS6xIDrWpTQ4al
TsK2oW56NrXSli5Jkp2ztpTS8HZWwrZhYYW+WwO/W+Twjgw6SnLU6GgGBeko
qLdokb7IqVzgtVoYD7NlUmC2XSwk+UxdteTHfUF9z3/kH1BkS9dKYuwz/2vJ
0WJr0Z86lAu6bUgzq3Q1minXaOZ1N3+9bOaL8bhmrh84cy1lRrm+f4nOf1h6
20CNYvHBZPvNv/KUFVkXPddx5RQmz0MEl1PUBLss0BA8h90NBBvRoBeWJONY
rfc6V5JFChj7uxCr4Pv2desaMjzcdV9J9D4JXSTQ30WIVU8ax7CcmCAhLc1x
XfCGfM0FENUDRG+5oLGLF2rGXsDOKLUu4RwV8StEUi6ZNnDmPdW0yoCbTQ1A
hupfGGoko8KYK3AhLNH0C2RfKrVONs4UFeLs3iwx/8r3IOVPF0m5/tEi4SJu
urRtQ4Q+zNiMz+jyhabnVnZhqbXrhEvEjFEw4/F9E8v1M0X2zPh0fZ4IeFqo
r+HpLJKap9cW+RhkMyO4dIJ5E5pTb4zv5Htm0Rr4PrOk+oZUBk1AIpXQSlks
7MU9aUwJq4zqiXj6jKrmafFShIWFFLCIZQ+UWlNMckRq77QB904iE+YqKtmE
uyOiyBvURQrqEujvAe9Xb5Tt8y0X3CoyofJo96hJ/pkt+wSe3bRSXfB+ywC0
RRfHd6EG3w+L/MdnM6N9CHw9TJtT7xtd5nty6Q38O8XL2qigklJfjUqma6lV
cvKEoq/KBbWkiVScszHA2W0HqX+6AmefIc5WSXtpRie0gKYBXFXTx2ucVDA1
wuZROn0PC9e7elLCtvNHxmZTd1bpUGadu+eLmJGlpWZG0jqNSC6xn92zpkBw
x0Vylj5w5vJiz3L9dySpSOLPMmKBNGQiIbbKhP5Ux5VltAPJSGikkVEconk/
8MTnyeIqo2zm3ip6kUxkA2zelh3gwwZdEiNd2it5V6S1GyRE1WcVqsRwiz3h
jM2jZnoiS+X340weWheZV30BfngvgLp54twZ0HDnnokouFxwkDyd4M4Ziflf
YTkl1lIrHzPokonkb4Z3kdHUXbQmiraXC44WTyO6nIMu4SlaFW7A0MxiXJem
NafSJr7ne0ZoN/ALS7b1aiHZBGtkk6kZKmhi0Y5ywbni6VTKOGkfnTkNOQz2
BGr6zjP1ARTybN9kbL+ODJvNaE75UxJASZpKJnPCOF9RmIvxiJz5VZrEboux
b9G4pGBdbSp7daHe0gW9Acf8x+UFlKU+d9DRJreRa6FjIIPhf0uUrsPn4OE6
Wds5qT4jaOc+X8Z5RyuW21ekhTn9sm/Wkr/krmCwmNsp5P06jJUMhuShpXBW
lg7HjltpyZW00Ej2hf5EUJ+uYCRsOiYav80i43WmkCXVGqz6O3nSljGB0o0W
wllVqEugBeoi/dxliHF/07Ez48OILsehyz+bZm8Zs0263kLIH9BhQB9/Cy62
+xssF5vvXyuRfSPB9ptQ32PJRGpyUTjJI20tbX3VPv8fk8mi0vHdrgq9jIzJ
t/YBS1zm70xOwnIzUUcO4hKrUsOl6UcKF2wx3llkhHPpyPpCvUNuXpuOCY3y
AhwO9DD0tMnU5A8SFZsm3CeLNht1JzMXUyeuSlpQ62oftemWBUePnxGEwWoT
59du4Jdh7oG1ZL/MSEb62HoKCCkKZ7FET83ih4uSFBlBVqnR0AVjuVWJWnzb
5pct1j1nsl/oXIvj6qzBtQvHdQzg+tuRwoVbjItFpkns5ECyiF+1rTTTUrhl
TGlApiWrmERKHdsHszEmcSVsiiu8vxjl5ua2+ViAaZkFx8ZqCqRiOu5H15Kj
uM8BsU8ItAZHbECD2G/uZIPjQR6psQQt5aSFthODv1mbFM2thS4uVOjyAu/C
Yau7TPcijzse5E+PZ+xEnHcz63alGLzPmOybGqP3qlL/TgnukZyaU8dPabXx
bNZ1MwB9PwD6HmCAG7QVWe3Eji/ptsxmwhoTPI/QtcNHP9vGJ7Kwcl4IepZV
zpP8EQKhOydb9z98E4jnnZdKviq/L7wndeqImJgtusXmppiQBPVcKkQ9vl4v
4ZdKKQnbwiwnZFP/qdIp2Vha9jXyS1UMjV86pPFLMfq9ZdauC+pdwS+d4Sbp
/RE9darLGzbXqA1B/81G7i+Lp3Z/q09RAwWP0vUUxDS1MM3OFTBNv3AHdOlF
XULxLt2fu5ymbhE8KtQbZsWU+A95HEaYyMZoco7jGkzO6l/6w7pkYYob4SH1
Bs7seygDD0l54Sbxx6YgD9nsJsQa+DFbyFMMwRMFk/FIhBCcopntN2qU4BFX
fxKRsfYCgheLTbKpw+CfQy8tOY5mv/V59hOa2a/o1/9h7brkBDE7WX/gzPWH
xuX6KaUo6WF8MembS9tw18aTmv/4n8wia9KSmJJCy8jfcUxiNJj4T9UkNZep
YmCV/gwCkwxqwrbsfwCTqZBxh9eOOYEwadNgUnxKg0muvuyhNcXzlhugbPpu
yUk8SfuM8kUN4F39Ew+tSzxLVQwDlD88PFyuf8nNnnkVm74bFhDr+dM1EeQX
jcId8iycns0UiAyIqOnZnDplVifoqH4DP8v918ExKJH7TeOZL2qrPfO+WaJL
5YJnpUsJJ8+Xmv+VO1hkLfI6YZWlzbSnbg2kZTMdjhDDlnk1px6bdZvvKTRo
MwLV/w8MSJqAY5KlwSTXM2JGNnNeEdFFtrQ59fmsfhvPCAPqROhyCbpYTMS7
5Gi6/OGZBV0WvDfAMzWGr5XpnYwv7Jn/8ZlxFREsmaEhOE/Tp8WTNSubGWAz
nsDMuzk1bnaz6BKKmvNtIGo6FT0p1cpHMtyBkzyoIfnP2dLcckHmvq8Ikp2l
5hMKCsusi5aV67fRlyG5yrQStg2ugAxgk+gam8uRjUWZUDabhR0vR/mRbOxV
JL+jYzWCztXkR5MNbj2ypqw9ukidH/1B5EdrUX60lrspsihvdH70sOybO+WC
jHtr1fnRmYMCz4jxDfzB4ryjY1FAva0RW+FYNQ2vBEX55YJLi9YRNARLzb96
VPvAWvoV2KNu99lZSIF7NArsM1uT6pRTBwWPmsdHEAqcBYQKvtPNpoaK/IGi
ekRRIJEdfe5SQeXOecQyiia63IEudj3QJeKJDmV326M7iBXdGlYkFWhUeb7B
0XJrysY3i3BVtjQaONPJXFCuX65V5A7ZkQDZfpk7ZEd2eHYkUCBRCwUaUU+h
qLOjI0urBNnMmOVG6uxo0yY8O4pFco6Rlt/Tmk4ZlR1tM5hjM+eRv1G8elUc
ZwfZ0YaYkiq96a4CxJuZFDVvugUaN1NHtZvzKMsokyC0DQgNaTXPpu5+olMS
fsfrISK0jKmx2QoNoVEG78qtXf0GCUKLgdB7FUvK9SX3cQPwg3Bh32bj2W3k
RgNpVqBwQcMpdKColfnF0u452cwzNhNglS0S8F1hJZ1SdotMgsnmWgiowp9h
6jdo6l9wnAvnqHH+vpG6ac4j4YTzBM4yWsK2XTyDbOrPT3RcvboPViCcBzU4
u9RqcE40yKywLgk+txjHecWEgTMfK5aW62fQKjwk/kI7JJxnHkKsTRvS9BfI
zMfiKG/VoPy9d7NdNvO3ognEAm97c+riefNFnpAcnrsP2XYmbe4Eo4s6MLM3
zq06zcy/GZRXWLvuuEPM/DvM/Mth33L9LNpHmLkbn1myRIjZ6oHHqoeZl+vh
M0dpZi7yTrfPZmZZmBAOZkdzat+8rcDfCZMAWVIDdBFpE/m1pssT7yrokhNA
dPEIaU61c9ph48k1aeBnpDQU6miRkqSNQpWd6URLuQKTARHt956p067Z71lp
t3lOPatMh1MuuFMSShjcdXAaXaX3rKWhMSXd4/estEdKlaBRKmyeRkBy6oU5
jyQmeSAgjCt7t7/4fWUDoV8gq7srjbKpeaJrIKWDusjHEOaq6f3nAPXSnEeF
JnfZ3Tji4eDWnfeAWzeJmUqKKnoLGB+ZitP6q4bWk8swp2xmAXsiIZidzalb
nK+67NEHg2lBBtMsHbivdQlQTTmNO5Vbupo1grOos1wgo+8iaGyFWPCp6qE1
aRf4vAlXkuchGq9paOQ7aQxnkJo355HPxHZVVKQnbOveBAlEu+gXfVhGIsIu
6KMuEZ+7DFHvAlsm/k10OQddeqtnZFP/Blt7XO/9DuntG12Nrck12vPJ4OBj
65LdOe6ErU0cOPNK70W5fg79T3fJ+mYnUJ56d7zLwOd9D4MTj62T9xQSXf6B
Lh/0ynwSwCuT9oJXLt7D7YwsGgBWFpnjrHylYeUhn0LnbOZ7G3NC0/YC910m
z/Hkm8fMAO5/RNyfgXd5+5n7PtjCbGZvANHFQwzcd5ELPP3Nf3XS7CFmnu4Z
syL+897jwrcG57o024hFCc+nejR83n4cylqWnrdSs205uPw0N/aCZgfyY7Wz
6G9vzc5lb7s46dlJzSbkO71BKiRykJ10lT7+hOeLehpPPYRzKAU4ZGvYCxxK
eOfOV21StT0Qas1gDJzZuhD8yEBz2iDq+k7T1UWp6epkmF5lTUnsdYd452PB
oP2oe/yxdVFCTAlfMBS9EDQmwrV7IS51ePmnnpaV7aNmcyXyy6sAwdeuf8/x
rDKPpkkFqu56J8utixLf/ZFCIWHdDAx7vSRilTCmQxyWSXXXcrvZKJ9qxmJX
SAx3P+65NVxj38WbOpG7lP6Ee6+h3alJOfeKosyYk9DK+sH/NNlby21XWo3z
ip68NN8c4QoSu7IuJy2jAQph8lvLFLK52pPGsV7F+ilkRXRUiklUlE1eVC2y
9Tgiv+lds/CwQraUeNGokI0ZC6WW+WLopuswjvU29rHCo0HuHJhJeSZksItY
Fb3ubha2KxMUsny6D8XCjepqW23O3lflFSvnfWmEMNS6UpfXoFR08p7PTl8l
PNox1MU75oxK7bFdPNpCoU4Ki8184pXoZugypzMn7USc0M2WsqI+/6580K81
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {1024}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/13" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 317576, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 11, 15, 4, 17.582633`7.997658895747094}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "medium", 4, 2, "medium", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "very high", "medium", 2, 4, "medium", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "medium", 2, 2, "small", "low"}, {
          "very high", "high", 2, 4, "medium", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 2, 4, "small", "low"}, {
          "high", "medium", 2, 2, "medium", "high"}, {
          "low", "very high", 3, 4, "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "medium", 4, 4, "medium", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "high", 3, 4, "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 3, 4, "large", "low"}, {
          "low", "high", 4, 2, "small", "low"}, {
          "very high", "medium", 2, 2, "medium", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "very high", 2, 2, "large", "high"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "medium", 3, 4, "large", "low"}, {
          "very high", "low", 3, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 3, 2, "medium", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "low", 3, 4, "small", "low"}, {
          "medium", "low", 2, 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "high", 2, 2, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "very high", 4, 4, "small", "medium"}, {
          "high", "high", 2, 2, "small", "high"}, {
          "medium", "low", 2, 4, "large", "low"}, {"medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 4, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 2, "small", "high"}, {
          "very high", "low", 3, 2, "large", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "high", 3, 2, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "medium", 3, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "large", "medium"}, {
          "high", "medium", 2, 2, "small", "medium"}, {
          "very high", "low", 4, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "high", "medium", 4, 2, "medium", "high"}, {
          "very high", "low", 2, 4, "small", "high"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 4, 4, "large", "medium"}, {
          "high", "low", 3, 2, "large", "high"}, {
          "low", "low", 2, 2, "medium", "high"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 2, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "low", 2, 2, "medium", "high"}, {
          "high", "low", 3, 4, "medium", "medium"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "medium", 4, 2, "medium", "low"}, {
          "high", "low", 4, 2, "large", "low"}, {
          "medium", "medium", 2, 4, "medium", "low"}, {
          "high", "high", 4, 4, "large", "low"}, {
          "low", "very high", 3, 4, "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "low", 2, 2, "medium", "medium"}, {
          "low", "medium", 2, 4, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "high", 3, 2, "medium", "low"}, {
          "low", "low", 3, 4, "small", "high"}, {
          "high", "high", 4, 2, "medium", "high"}, {
          "very high", "high", 4, 4, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "very high", 4, 2, "medium", "high"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "high", "very high", 2, 4, "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "medium", "high"}, {
          "medium", "medium", 4, 4, "medium", "low"}, {
          "high", "very high", 2, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "very high", 3, 2, "small", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 4, 2, "large", "medium"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {
          "low", "very high", 4, 4, "medium", "low"}, {
          "medium", "high", 2, 2, "large", "high"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "high", 2, 4, "large", "medium"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 4, "medium", "high"}, {
          "high", "medium", 3, 4, "large", "low"}, {
          "high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 3, 2, "large", "low"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "very high", "high", 3, 4, "small", "medium"}, {
          "very high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "low"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 4, 2, "small", "high"}, {"very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "high", 3, 4, "large", "medium"}, {"very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "low", 4, 2, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "medium", 2, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "low", 3, 4, "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 4, 2, "small", "medium"}, {
          "medium", "very high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 4, "small", "medium"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 4, 4, "medium", "medium"}, {
          "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 3, 2, "large", "high"}, {
          "medium", "very high", 4, 2, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "very high", 4, 4, "medium", "high"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "very high", 3, 2, "large", "medium"}, {
          "very high", "high", 2, 2, "medium", "high"}, {
          "very high", "low", 4, 2, "large", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 4, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 4, 4, "small", "high"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "medium", "high", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 4, 2, "small", "medium"}, {
          "medium", "medium", 2, 2, "large", "low"}, {
          "medium", "medium", 3, 2, "large", "medium"}, {
          "high", "very high", 4, 4, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 2, 2, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "low", 4, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "medium"}, {
          "high", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 2, 2, "small", "low"}, {
          "high", "very high", 2, 2, "small", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 2, 2, "large", "low"}, {
          "high", "very high", 2, 2, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "very high", 2, 4, "medium", "low"}, {
          "high", "medium", 2, 4, "medium", "medium"}, {
          "medium", "low", 4, 4, "small", "medium"}, {
          "high", "low", 3, 4, "medium", "low"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "very high", 3, 4, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 4, 4, "small", "high"}, {
          "very high", "medium", 4, 2, "large", "low"}, {
          "very high", "high", 3, 4, "small", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 4, 2, "small", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 4, "large", "low"}, {
          "very high", "high", 4, 4, "large", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 2, "medium", "high"}, {
          "medium", "very high", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 4, "medium", "medium"}, {
          "very high", "very high", 4, 2, "large", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "medium", 2, 4, "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "high", 3, 2, "large", "high"}, {
          "very high", "medium", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "medium", "high"}, {
          "medium", "high", 4, 2, "small", "medium"}, {
          "very high", "medium", 2, 2, "large", "high"}, {
          "medium", "high", 3, 4, "large", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "low", "high", 4, 2, "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 3, 4, "medium", "low"}, {
          "medium", "high", 4, 4, "small", "medium"}, {
          "low", "high", 4, 4, "large", "low"}, {
          "high", "medium", 3, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 4, "small", "high"}, {
          "low", "medium", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 3, 2, "small", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "low", 4, 2, "medium", "medium"}, {
          "medium", "medium", 2, 4, "small", "low"}, {
          "low", "high", 4, 4, "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "high", 4, 4, "large", "medium"}, {
          "very high", "high", 4, 2, "medium", "high"}, {
          "high", "high", 4, 4, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 4, 2, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 3, 4, "medium", "medium"}, {
          "low", "high", 2, 4, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "high", 2, 4, "large", "low"}, {
          "medium", "medium", 4, 4, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "medium", "high", 3, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "high", "low", 2, 2, "small", "low"}, {"very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "medium", "low"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 4, "large", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 2, 4, "large", "low"}, {
          "high", "high", 2, 2, "small", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "very high", 4, 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "medium"}, {
          "low", "medium", 4, 4, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "high", "high", 2, 4, "medium", "low"}, {
          "low", "low", 4, 4, "small", "high"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 2, "large", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 3, 4, "small", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}}, 
        "Output" -> {
         "very good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "acceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "good", "unacceptable", "very good",
           "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "very good", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "very good", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable"}|>, 
      "Predictions" -> {
       "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "good", "good", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
        "good", "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "very good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "very good", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "good", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable"}, "LogProbabilities" -> CompressedData["
1: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
uXApfe7swqd5d/HE6i24julPf/2xHtIi5PX+8n/RCxqPXP5mz51HM+djeJeS
NcoimyPnJfg8/DDTV1y5XB3s5ox03b+SvkbMgSCDewJ3apj0ItL3WOrom8oH
fryW/oKcf5Qy/MOei/Sn39m8xMY/t/5PilxN6o/rNRRZBzc+Nwq7CI5ZHcvl
d/b8QnXYbKsS8G/yxuTzTYC7KXEPBFsHzKOCyxwj4/mG3+P0C7H/k3JXpp+n
fwns5hGKEOPPDPyxganIl/GPAoODWJVIsj/jC92S27H1ogvM+XX8jJeEf3wn
5m0tkBmNZihWjsB9Ocd7V67b5mZRny6+18b9unZzer1c/0Q203ZzYfDH9U8M
gy+ja3VJ+TLO6GnKTdKXG1uxQQP36R7dH1Qeus4TbVHuI/WAU+suan+vsfjN
MRuyPkPblUS/FJtZXW0QOKIZk3aat2bII6V7LUlXG4ooJyNr1URvATrN9Km4
+vcAg3vWzqz92brQmumbPxLS9RNXn7Ud/q1RD/AXtP185vULTqg0NF9f/7Ya
Wutxq6Ut6RXFXvvTtxci5/y//Mzme7a/bbFYm6yPy58HRE9J/3fZG1onxAW8
JbrhpWGdxjnQEd/kH4D+c0ZGLRBfUKdtNmve9N/5LzfxSN/7tIqF/heo94OO
XH4q7WmKek/qblSFur9efwPcG6NfxMNInuTO7/zwHcHvTdVbJM9z67fLJ2n/
lj1KrGsAvJsu9gpJlNZCuzKM7heWLaTybSZNSpTW/d4/4vIj2/c+mfFIDa+z
qPPZW1x/FjL1p9/9Z2q4/5Czam95qJQnMm45pIlxo7SnmuBoc6rbynwZJ7RO
TOvmTb6W8Vg3j2V0s+O+ZUdIX4bRKVx8RjLnDiXeNM9w8RPD9LfYczhu/OXq
0XXto6BU53hlV3T41B1S99R/C/iG66A1lfJQ3zkhW00/PuaD4UU7Z04uXiOe
+6SV1N8Wuc5SmGdSGH1cjvsjU//tj0yxou1kErkY8tDEH/LTLRcjwxCIP3Z9
vWR9T7/zP7vOU3a+Yp4wuF/9tfQY/V5H3e0LB0Lh+wHds1bj9zuSRtDvd/SI
J4F+Dfihvy00CoC6xBu5MfHPzS/TGfsuSj1H4pPLn1WyGcR+Y1/T/gnZ1QH5
572oUtaMxD97vew5g/AMt/8jUPcn8bXemH5fYetx+j0Go6tt+rpJQrHcpXii
4wYtr4b4FiL/CDquJVYT6D7Zss+XXSGu2DqKrauGGkeQfZ6L/hn27YmSx9L4
4OpD2fU0fl+O0e+Rgjgstewldv1i9uLgFLDzrnL6fF3R2pfgdMT7mNEYvzOH
+wEf2iPFyA8ExwN/pc8vnIbQ/BirbUD48WRaD4y7oIsJMwlf9Jc/XaaDnYST
fsjPh5j8qOGYRvKvYH+Kz3SH1eIXTP9na9RCKYzzlmW0fabGWhC7WDD8t2De
Dhj3/eH9Ejb+2XGR2QKib127/Yzeg3/9GH2sMP0m8X/iLzrkPQCP7NnkvQAz
0wlNF6I/ilOuTzflQ/0pnpy963W0CTJ9tWPn6+jhaGiPmtJK61cUe00Z+Uex
XbAt+ikxN80S6v6d2ff1zijXUtm2BfGxeaao2eoB5H2oRyQmPri//k1yrXbx
oAmU7rzyLbi/7nZOjsQHl99Y3jvS09vUIc1HgQNbx3gI/BC1P1XW3QNRce/L
Pn8VWqClLrqEn7n4UxvpTfwy1mdtlzXs76HFJ7gaooDkttIpyU5USmBRhzWs
56Y/HZ/96au3BhWEZydL/CJwfPAZ+1VHVBA/Vt7CfPRv/4+tC9m6mu3jc/UH
WxedqBgPedYXXb/0jJyP1T2gz8duvbCDcR8kqOuQxTyRuCHPD/c3nzP9TVfN
K7K47/GN0f9c/gxh8qr/jW4Jfh+kv/6soZcQ4sAfHUz/SPSXiOGfW9PzQX8J
0cCLZsr1kL+awoty8PtVUgr0+1VSPV+V6yG+o3SZ+pyzvxiFd0R/sv1DLv5Z
fRR2bDfM74Pape+R+S+x/FfyB4wHos3hhXfzgLdrh4wb9Qb0eGaQSrntm0LK
ofqIzRstY3SMeQ63PxRRQ+//D0ZPcPvb7Ljmvh0bsf7fPv1+1FHQ/X1b648+
07JCOtmGx7H+PzqDjl8uv+jfpp8/l6mzuPxayOgefU+6v3mi7kubHvDNCne6
z+k6bmEL7nOGMvqdWx90FdPnxlm5tI7n5ve0Tvo9nyYmD3L3f4vB36vqdw16
8LzVlf+rn8aYKzTqwf7LqMw+Rfj875W//ozfXzTRpN9fNBz1vGcI6N65EY4H
+RAn7ZUW83C+L/mruN6zslnMjv8f1YF6Jg==
       "], 
      "CountMatrix" -> {{11, 0, 1, 1, 0}, {0, 248, 3, 0, 0}, {1, 4, 60, 3, 
       0}, {1, 0, 2, 11, 0}}, 
      "IndicesMatrix" -> {{{1, 44, 56, 63, 119, 151, 177, 178, 186, 187, 
         233}, {}, {318}, {114}, {}}, {{}, CompressedData["
1:eJwl0ulrDwAAANDfbDNmZmaGbTa7zCxmbczN5tiwmY2NOZIhSm2KhBzlzk1S
rsiVq3xAUY6kyBG5Qq7kjBwf3HK88uH9By+5pq6iNigQCHynHsGEEEp9wmhI
OI2IIJImRBFNM2JoTiwtiSOeBBJJog3JpJBKGum0JYNMsuhAR7LpRA655NGZ
LuTTje70oCe96UsBhRRRTAmlDKWMckZQSRXVjGYMYxnHeCZQw0QmMZkpTGUa
tdQxnRnMZBazmcNc5jGfBSxkEYtZwlKWsZwVrGQVq1nDWtaxng1sZBOb2cJW
trGdHexkF7vZw172sZ8DHOQQhznCUY5xnBOc5BSnOcNZznGeC1zkEpe5wlWu
cZ0b3OQWt7nDXe5xnwc85BGPecJTnvGcF7zkFa95w1ve8Z4PfOQTn/nCV74F
/t/9wU9+8Zs//CUgdxDBhBBKGA0IJ4LGRBJFU6KJIZYWtCKOeBJoTSJJJJNC
Kmmkk0E7MmlPFtnkkEsenelCPl3pRR8KKKQf/RnAQIooZhCDGUIJpZQxjHIq
GE4lVYxkFNX8A0BMaUo=
         "], {50, 94, 288}, {}, {}}, {{277}, {40, 73, 108, 214}, {8, 13, 17, 
         23, 25, 29, 42, 61, 67, 68, 69, 70, 75, 80, 82, 83, 87, 109, 113, 
         123, 128, 129, 137, 147, 149, 152, 158, 161, 173, 174, 176, 182, 183,
          192, 194, 196, 197, 200, 226, 236, 241, 243, 252, 258, 262, 265, 
         267, 275, 280, 300, 301, 302, 304, 306, 313, 315, 316, 320, 334, 
         346}, {105, 271, 314}, {}}, {{88}, {}, {167, 294}, {74, 96, 102, 106,
          117, 205, 208, 218, 224, 242, 340}, {}}}, 
      "ExtendedClasses" -> {
       "very good", "unacceptable", "acceptable", "good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0007214826589595375, "SingleEvaluationTime" -> 
      0.004184125, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "68b9cb93-719a-4fe9-836b-1aec5cb122b1"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"95.1", "1.2"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    95.0867052023121317461`3., 1.163688555873921171`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265192167`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.8249156374944299763`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0425321442501720437`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.7398513489940858889`3.", "\", \"", 
                    "0.9099799259947740637`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.7398513489940858889`3., ", ", 0.9099799259947740637`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.1924741554586281989`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0515365698744885414`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.089401015709651116`3.", "\", \"", 
                    "0.295547295207605254`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 0.089401015709651116`3.,
                     ", ", 0.295547295207605254`3., "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"3.2`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.17`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKiz7R/qz/5Y29WZapQYXcC3ttd0W98J83
7H8neYa+D3pnf0ao2fZHyVt7O8XddjLzX9qvbn5g8ZfhnX3WkX1RgfZv7Hke
xl9bW/nM/tulCevu8L2x1/A8/Gmm8RP7P/bL9t5VPIzTXlzmwOQfVomsc394
yx7mU8HlYTdsV7y1j078s/rb+1f2sU9mnk8RfIzTnRNOXn98KPCtfVuUpaPu
ypf2kYtmBpysu09y+OAyHwC044yV
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.75`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9230769230769231`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8275862068965516`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.75}], 
                    Row[{"Recall = ", 0.9230769230769231}], 
                    Row[{"FScore = ", 0.8275862068965516}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.1875`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.01195219123505976`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.1875}], 
                    Row[{"Row fraction = ", 0.01195219123505976}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.0625`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.014705882352941176`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.0625}], 
                    Row[{"Row fraction = ", 0.014705882352941176`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["239", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    "239", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.987603305785124`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.952191235059761`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9695740365111563`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{239, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.987603305785124}], 
                    Row[{"Recall = ", 0.952191235059761}], 
                    Row[{"FScore = ", 0.9695740365111563}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.012396694214876033`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.04411764705882353`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.012396694214876033`}], 
                    Row[{"Row fraction = ", 0.04411764705882353}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["8", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "8", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.1111111111111111`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.03187250996015936`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{8, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.1111111111111111}], 
                    Row[{"Row fraction = ", 0.03187250996015936}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["64", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "64", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8888888888888888`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9411764705882353`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9142857142857143`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{64, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8888888888888888}], 
                    Row[{"Recall = ", 0.9411764705882353}], 
                    Row[{"FScore = ", 0.9142857142857143}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.0625`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.07692307692307693`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.0625}], 
                    Row[{"Row fraction = ", 0.07692307692307693}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.0625`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.0625}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["14", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.875`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{14, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.875}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.9333333333333333}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9230769230769231`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.9230769230769231}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.952191235059761`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.952191235059761}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9411764705882353`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{68, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9411764705882353}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{14, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.75`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{16, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.75}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "242", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.987603305785124`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{242, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.987603305785124}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "72", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8888888888888888`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{72, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.8888888888888888}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.875`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.875}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["13", TraditionalForm]}, {2.5, 
                    FormBox["251", TraditionalForm]}, {1.5, 
                    FormBox["68", TraditionalForm]}, {0.5, 
                    FormBox["14", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["16", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["242", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["72", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["16", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "very good" -> 0.25, "unacceptable" -> 0.25, "acceptable" -> 0.25,
              "good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "very high", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "very high", "medium"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {2, 3, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"large", "medium", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"high", "low", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "very good", "unacceptable", "acceptable", "good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJzdl0vOZUcRhBsGiG2wBVgAYguGDRjJjCwhmQFixtIxA0uHUmbGF5F1bhuX
ZPc9VfmIykdk/b/769+/+duvv3z58o/f/vi/b779559++OHbf/35N//9+O7b
7//w++9/9ePPL3/5Uqx///F/f//03/Ob6HXnp43TR7cqLESuO6+wTHbPO1T2
iP1O77Sv4lHZqu6u7uP6cc5v3FHZnGqN6kw5U/U2YZ5qi/TRaUvd4fx28uX2
Fe1xWosEA7Gj8JF6ocut4e5fguWM7VRjm5ol5wl/OhxP8KiVzqlKxq2ZiYe7
PLrYO6xEr9PpaukG9xDsycw7bTk2nVk52Ux4jeJyYunOxcn3VAsENzmrMKex
dfbdGlFylNsmbN293+67aaWxUjaVL2c+Ut5Q+ZuwnTJuzSXLiUG1R+qGxMPt
R4qPyE7+K45MeFZ9OzaT2HR3qPTcvJ+6Tq9M+8m8c+UmLiDxr3hrOj9lyerw
O3NN9a2bd5fvqzgoG5tcOHhOTDRmp7xa9L5OD3V2tzJdHW8xdXEjveHyIen3
xP/EfZNNZa+qvSlOdHV2FR7lc+oVhcc5u1ELk9wUa9XnSe8pHp/23TjTPG9z
3u1RPk/r3J0XFEuFabJRndF5utmrMCtsHZZJbuoNql/5VHmfZiLlADVnSI6n
+G95gXKz8qPqxrmri13JqFiTXCg8NzjkaWv6njAojAqLM9ucWul0t7PH5bqk
byecEzaCU2FxclpxncvNW66l+4S/aM4reSeGnd3Ol+OP+iZ4pjtPmNQMcnw5
tZDykcvFikO6elLx6c7cnE6rmx2bnqPz7ql/k5vIPFQYqS+F4/RFbU62KIYu
r3ReTL5VnRIdB4PS77iT6k/nE09Re6r3aR+kuXt+u3Gd9LqaJlw37Ss83d50
rnLo1gvRoz2jbKs4J3zq3s+Zl9Q/0aP1SfTIzFD5S2qW8uONPN6o2wqb66Ob
NxOHprV0+iM1Q310NZDM0u5c1TGpBxVnGtfJjsLnYCPyZ5wdviO4CRaFk8xA
MntU/ykflc3JFq2rCeOJRWGuZKd4TTimXjzv6NY+xTfxwGRrwkH5i9a0ywNO
r6qcqZpWNqZ7nHsTZzg9nvD11GvE5im75S7SS6T2iJ+uzglHd1icHHQ+CIco
HKcszWeSd1fejZmSneI58ZzCRXyqfyeM6drEutqbaseNN8FJ6p/2UVJTnWyS
I2c+KRw/7SW+Jwzd/FFypHcoFtp/295Q9txevzFrOky3eFDZI7mnvtRZ4mvK
u8rlFM9Tf9rrbE7YSR1Mv8mdJwxO3oiemlnKBuFRhYn0UoWHyKQ8o+469Z1z
f9o7lGc6HZrHadE8UbvbPKVzz/FN63rCV9Vkmg9aD6oWyF1VnRNsm17o9Jyz
CSPlIse+8qPs0Zk1yXdyVV10GDsMqpYrX+6idaf6qMNAe8ddKobJ7ycmlSfa
q6Q/nbqavl25TtftR3X3ieu2PNbJVb6UnjsraL13fTTFwF201jvOo3ymuMGZ
Mwq/E8vOBvXZ+XU5bTpXeXZ8bXiC8viGl9xcuLLqTmdtJ7E/bak9atfhy8of
zQXto8km4aYbdU37deIUEjcVH9f2ZCPhRDorOnlyjw7DhquV3NM38alq3uVo
hwfIbKvsktw6PVnhUfLK76lL8kFnQsKtajl1TGP/lN3MphQ/5Q0X32mD1OSE
q8NW9Ud17s4fZwYQXdLv5xnt42l/6i0ai0l+Wu6cePpxZo2Lp9pXcU/mUbe/
4T9nbXhyg2GL2/VD+mPD7w6WTy/KK5Xe+Tvt7+5byVOfycye+O5r1KcTm0/W
UpqTU77D7/KhWw+U04ntm3zfYUhkOp8373573ZpdiU11dzfmmzfQZlVvkups
0lV3d94GCQ+T5b5DHbubt9bX4uSnPyc2nf4tXvtEDG5zobJ7Ix635jvJ+afe
4yn30D76Gr310z0cDrjtP5G78VZPMG3eJokOqas33paUYx2ucd+xRM+dBcT+
p/jPsZnWeBJziuk8c+7s2HT16bohf/uNRN6ebm+m/im+LYc4/kjdpDXZ2ehw
Ul5K/CtMTi2kK30fKg5LfHccmN71jXdN9yb8xBvqE2+SBMfN2Z3aOPfe6Jnz
Hd353fIyjY/zDvxEnU73TvPRcUT65kn4hcTOrcekphWmm+8QhYnEQs3yTof4
mGy6tZH0Ubd/i8sm/W5OUj80VikP3aqlt+aXsr/JUWp/knNi5PTbp+aq00fU
9qZnU9v0/Je+0l5IeUudJ++tmzU9ySd+kpnuvGE2s3WSSd8K6VtukiN235wv
Kh60fqhM+ob4Glw2vUOSuCS+iVz6jky4zelfaiN9x0x21PuX2nx7nfkjv4kd
V/8pc2tmOLaUzGZuJmsz21QstrlIe+sWL1c40nfKxLEEw2ZVsyWxeYMzUg6n
364P5w34NWbzdqXc+Pz9yTp9S8d9f7p3T9c0z5J3C/F3a6W2NjOO9OtmjhMM
rvyEx+UhgkXNGvdt+P/Ie2rd+JvLmR1buxt9hSl9g72FTfnfzonnfROeT+P5
xupqOL0PzXnyN9GbS8XA/buN1uXPjRs/Md+n+eLOlul8w0tuTbr94v6N4PxN
k+Ka1qfrlMZiOn/z7wEin3DhZMPhafouvFVv6az/2m8EpU/+lqL2FQ+5PJXk
dvv2Vyt9096YiZtYdn633Lp9K35qVbW4fTvTWUz0J9nExu3Z4Lwd3377dvYp
nyT8SXknmTfknOBK1s33wFPG4dntm/jNNb1Nnufq+wbf/NxXWkvT7HBrhr7d
nFx8rby5M/UmTvq+JvIUk8PllTzxc9um8z5+6r85I2/njPYmnb9qzzk/fTs8
68oq35Wc+x5zeNB9M3TxSd8enX2y/6m5R3srmc+k3n9J831aitfcedKdUZub
5eTtxJDe0/G11Ul4ujpz57W7tvNm4zPhxJ9rr994A7rvFSXjvj2mPWXrxuzp
YvE8J3fectYbNfYWj3Y2aT1RW5VNV5+uDvttLnJqdqq7aV46fUzflwSXo6ve
E5Ud503v1J77jlV4Xd5SejfiTTFU5zfeFM89J4/p2nDRBsubveL2jrqHUxub
HnXsJPhU/ybzI5E7fU48ML0dXE52ar2LnXrndPMweWMkfTnppjO0k1Hx3L5H
knpzOInUA51bqo675XBEwpkUU3JP16/6Tfub8ufNOys9dUa4WOFQdmle3Lnd
1bY7R4lM0jubmUZ9dLZJrd7wSTmc8MZzz6lXsn9jBqi14doNN7t9o2Q6exu/
pPbTXJ2ySS1SjJPd6t9JVvklGLccpexX50n8NnVRySf2ie00FxU+OktvnBNu
3sSouo/LxR0+gulmP3b36PZcTu90kl7teNfl7lN3iofCQ+WcuCX5nXKYzO8J
0w0+d/xNtqc73swj7VG3HomfhBvTnNM3Q+WDcmBnt7PhxIOeqTyl/erwB130
ndHpKVy3Ykz9Kb9ODun5hgtUzSccRLA5sVT+1Qzf8EXni+BzfNCa6rDcwOXW
kcvlnSyZK7e4yolz900wpm8Fl2PT9wrRcXCS/qR+CQ41jzsum+bNUy7BQXuQ
xGUbT7oots2MIbKO/e0cfMo6tenmscOacoOS6d4crh+Hi53eJEvF6xanbXmz
s7mZ59X55l3h9PKGo7f8TvemmZ76S3hty790Vm38kR691afPbzcXKadMvlV8
FRal457TmVW9TW7OemIzPbth+/YsJxx4K77ObH3DZ6pX1Ryx7fR52ksbjpn0
FSYVC/Ieob2S9hS5S8dB7syj9XyzticcpKddHCn3b3hqw/PbeenytKqxiUNI
P1EOqPRUDaaxdd4RxGZlz33/OFzwJu5Jvvp2+ceV6bgu9fMGh1T1SrAQf0/7
3bdrS8kmeUztkrpXfUBXIu/M8jR+jvyG/5UdyvOdPD1PZjKdOZ2es0cWuYMT
Y+XLmQ/nXoKVznKX97Y1QbiBxkXZP/cnLiKL8Hp1VsW325u+E0yVfDJ71F0m
PMr25D/l8Gnf6QOnnib5Dp+6n3P/DgeZC5SHFZ8rzHRGJTVK5OgcnmRojTmc
T/qWnqlaIjaJ/gafy1udPXJXYts5d/M07Tk1Mtkgs4TccVMTTj1P9qbvdBEe
pfPYwbTlsYq3urk82Up7QdlP80x8n/tOH9F4qP0tX7q2SP0784nWO+2PJB60
ryofan+ye+pWPeD29FRvlIfJmYPl6Z/KUz0nTpsZqRbhoedvl6Mnrndy6sh0
/qiNqh+3HFWdb/hkg0HNPAdP4r86UzjcHnzyRpI7l786HJNMwjNkLpOV9Bo9
p2+NtJfVovN7yvF2Zrjn59l2lm75xK0Pakfh6b5TLlHyycwkuu6cnPac8+19
kjsR7k5xdZyR8HM3ExJsLvdNWDrdqr+qWNIeeyOO1RnR775V72/q+7Th3iGp
7RszrYuX4t8p36deMltuz+MJqxtjitO5y1Qrbk/cjOMkq2JPZq/yU91lw/eT
/hQ30ienDQcPqUcyq9+YNzQmxLZbw+78mfqb9JBb00SOzuFp352HU13SOiK8
6fRnMq8qHGQWdfZJHLa8Nfmezrtvh2smnqKzMo2nsksxOf4Tm6f8c4/2LbWr
+ICsrueSfjrtdN/U3raXTrlkpjh7js3qfJPXbf8ltebimLhmsuX0ssunhMOU
/qZXOhlyt/NsuovLdQqrOx/ISrmHzj/KI0Sf8pV7n06XzohKL+EvYqOzV+Vx
0wPTHd05SmpyM1ddPAoj4Whih+ClZye+qT46fnKXygmNhbKZyDg+J/tO/Va6
KsaEWxyuSGdW5f+Ud+5R2ex8KRydL8KBk47q3a6P3H6usDg1SfpYYVM5oTWW
8ufpd8MN1X7CBZ0uiQ/p7U6v+nZnSrduxpBykcJBvilGio1wkNI7dZ14dr43
WCa/1dxRS9V9wm2drtMvDh/SeCZ3SO24d5h0prlFeXzyXeXF6TPq85Tf4qT2
kv4kesrWlKMKW+eX4HF9VXinlfCQY1/JJnNWyXa9k8w64pPKUw4g8p0Ngony
V8frCpfiO+WX+KA+T1lyF+XzTY4ksSUYFS7aC06PV3sbnk96NtU5ZUneJ1sK
Fzmn9d5xaFLjSe+mPeLUQueHYFTzV/mZZJ/nXf10fdB9Ez8dN1eY6RmpXae3
nPlF7kNwnr9pDJJeI3jSeaO4iOpOmFz7T33Xx2TXjanzu9sj9eVwvqofai/h
ntOHwvHE4uTaiXdnS/nufLlxIz3icm6Fj9qYdBIbHT5lz81bZ6PLZVdjaR9R
PORsw9tKX/2udB1sCee7HNx9TzXf3cPprenM4b4OA50NKfcqTLTOujmSxnTi
2PRekw139lQ2la2kL7tvNwYJFxB7qibTOCdnbi8rXuvklN0Ki1szymann8yM
SiapEVLLLmd2d3TmppOrbo/OxdQv6RWFt6vnicsq/Q3HTroTD7r2Se92/tJ8
d9/OmZu7Wzi33EH2aZ1Ny/X7PHPqiebhue9w+BSPCSu9w9mvnd9JJ5k5jtwZ
N+qPcL66u9NnE5ZOr8JwmzMpl6j6VP2d1FyFk9R0witEhuTb4R7Vu44swUkw
kjzSvp7sk3NarypnVX26+Ds9Ym/KbdKXk12iQ3P4xjzZnJE40b5RdZ767lYy
pyq7bq9PstOscuI2+b6Vcxo3h+dIDdD4pLmd8JBZSOtzyqE7v7oeo/GkeZnw
kD4g/jq7bt1ucn/aqWJAeGqTz+5swuTeYZKffJPl8KCy7/SNO7cov5z2k/qm
XE7tdLJuj0+L+Jq4t7JB/BA5UmMqviQXFCeN86YPlR8yg6q7k+XGxOUAYqvC
7fSbi2/im0nGXWfeUn6e9p15RO7qftO8KSydHdoXic9zv5PvZCqMUy+SuNHY
Jrm8xQ8kLs6MTTh2wuPOk+deUk9EZppTbo5crO59q95U/Ur80Xt1e1OPTTGd
8Dr9Qjk8nZG03zt+6WTPs7RuK1xkz5kRkw6x59TlGUs6ixLu7bBs+Sapi2nf
6fPKThJ/grHTmWq9s0fqJeGTDUdS2W5mdLjV6jB33DTNBoW9stfhqPbnu/8H
riAK2A==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {21504}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {21504}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/3" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1024, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/4" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 1024, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 11}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {1024}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/8" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 212816, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 11, 15, 4, 17.921411`8.005947184346473}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "medium", 4, 2, "medium", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "very high", "medium", 2, 4, "medium", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "medium", 2, 2, "small", "low"}, {
          "very high", "high", 2, 4, "medium", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 2, 4, "small", "low"}, {
          "high", "medium", 2, 2, "medium", "high"}, {
          "low", "very high", 3, 4, "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "medium", 4, 4, "medium", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "high", 3, 4, "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 3, 4, "large", "low"}, {
          "low", "high", 4, 2, "small", "low"}, {
          "very high", "medium", 2, 2, "medium", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "very high", 2, 2, "large", "high"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "medium", 3, 4, "large", "low"}, {
          "very high", "low", 3, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 3, 2, "medium", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "low", 3, 4, "small", "low"}, {
          "medium", "low", 2, 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "high", 2, 2, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "very high", 4, 4, "small", "medium"}, {
          "high", "high", 2, 2, "small", "high"}, {
          "medium", "low", 2, 4, "large", "low"}, {"medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 4, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 2, "small", "high"}, {
          "very high", "low", 3, 2, "large", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "high", 3, 2, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "medium", 3, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "large", "medium"}, {
          "high", "medium", 2, 2, "small", "medium"}, {
          "very high", "low", 4, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "high", "medium", 4, 2, "medium", "high"}, {
          "very high", "low", 2, 4, "small", "high"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 4, 4, "large", "medium"}, {
          "high", "low", 3, 2, "large", "high"}, {
          "low", "low", 2, 2, "medium", "high"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 2, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "low", 2, 2, "medium", "high"}, {
          "high", "low", 3, 4, "medium", "medium"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "medium", 4, 2, "medium", "low"}, {
          "high", "low", 4, 2, "large", "low"}, {
          "medium", "medium", 2, 4, "medium", "low"}, {
          "high", "high", 4, 4, "large", "low"}, {
          "low", "very high", 3, 4, "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "low", 2, 2, "medium", "medium"}, {
          "low", "medium", 2, 4, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "high", 3, 2, "medium", "low"}, {
          "low", "low", 3, 4, "small", "high"}, {
          "high", "high", 4, 2, "medium", "high"}, {
          "very high", "high", 4, 4, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "very high", 4, 2, "medium", "high"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "high", "very high", 2, 4, "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "medium", "high"}, {
          "medium", "medium", 4, 4, "medium", "low"}, {
          "high", "very high", 2, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "very high", 3, 2, "small", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 4, 2, "large", "medium"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {
          "low", "very high", 4, 4, "medium", "low"}, {
          "medium", "high", 2, 2, "large", "high"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "high", 2, 4, "large", "medium"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 4, "medium", "high"}, {
          "high", "medium", 3, 4, "large", "low"}, {
          "high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 3, 2, "large", "low"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "very high", "high", 3, 4, "small", "medium"}, {
          "very high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "low"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 4, 2, "small", "high"}, {"very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "high", 3, 4, "large", "medium"}, {"very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "low", 4, 2, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "medium", 2, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "low", 3, 4, "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 4, 2, "small", "medium"}, {
          "medium", "very high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 4, "small", "medium"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 4, 4, "medium", "medium"}, {
          "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 3, 2, "large", "high"}, {
          "medium", "very high", 4, 2, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "very high", 4, 4, "medium", "high"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "very high", 3, 2, "large", "medium"}, {
          "very high", "high", 2, 2, "medium", "high"}, {
          "very high", "low", 4, 2, "large", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 4, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 4, 4, "small", "high"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "medium", "high", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 4, 2, "small", "medium"}, {
          "medium", "medium", 2, 2, "large", "low"}, {
          "medium", "medium", 3, 2, "large", "medium"}, {
          "high", "very high", 4, 4, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 2, 2, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "low", 4, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "medium"}, {
          "high", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 2, 2, "small", "low"}, {
          "high", "very high", 2, 2, "small", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 2, 2, "large", "low"}, {
          "high", "very high", 2, 2, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "very high", 2, 4, "medium", "low"}, {
          "high", "medium", 2, 4, "medium", "medium"}, {
          "medium", "low", 4, 4, "small", "medium"}, {
          "high", "low", 3, 4, "medium", "low"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "very high", 3, 4, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 4, 4, "small", "high"}, {
          "very high", "medium", 4, 2, "large", "low"}, {
          "very high", "high", 3, 4, "small", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 4, 2, "small", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 4, "large", "low"}, {
          "very high", "high", 4, 4, "large", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 2, "medium", "high"}, {
          "medium", "very high", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 4, "medium", "medium"}, {
          "very high", "very high", 4, 2, "large", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "medium", 2, 4, "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "high", 3, 2, "large", "high"}, {
          "very high", "medium", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "medium", "high"}, {
          "medium", "high", 4, 2, "small", "medium"}, {
          "very high", "medium", 2, 2, "large", "high"}, {
          "medium", "high", 3, 4, "large", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "low", "high", 4, 2, "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 3, 4, "medium", "low"}, {
          "medium", "high", 4, 4, "small", "medium"}, {
          "low", "high", 4, 4, "large", "low"}, {
          "high", "medium", 3, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 4, "small", "high"}, {
          "low", "medium", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 3, 2, "small", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "low", 4, 2, "medium", "medium"}, {
          "medium", "medium", 2, 4, "small", "low"}, {
          "low", "high", 4, 4, "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "high", 4, 4, "large", "medium"}, {
          "very high", "high", 4, 2, "medium", "high"}, {
          "high", "high", 4, 4, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 4, 2, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 3, 4, "medium", "medium"}, {
          "low", "high", 2, 4, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "high", 2, 4, "large", "low"}, {
          "medium", "medium", 4, 4, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "medium", "high", 3, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "high", "low", 2, 2, "small", "low"}, {"very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "medium", "low"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 4, "large", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 2, 4, "large", "low"}, {
          "high", "high", 2, 2, "small", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "very high", 4, 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "medium"}, {
          "low", "medium", 4, 4, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "high", "high", 2, 4, "medium", "low"}, {
          "low", "low", 4, 4, "small", "high"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 2, "large", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 3, 4, "small", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}}, 
        "Output" -> {
         "very good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "acceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "good", "unacceptable", "very good",
           "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "very good", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "very good", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable"}|>, 
      "Predictions" -> {
       "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
        "good", "unacceptable", "very good", "unacceptable", "unacceptable", 
        "good", "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "acceptable", "very good", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", "very good",
         "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable"}, 
      "LogProbabilities" -> CompressedData["
1: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
       "], 
      "CountMatrix" -> {{12, 0, 0, 1, 0}, {3, 239, 8, 1, 0}, {1, 3, 64, 0, 
       0}, {0, 0, 0, 14, 0}}, 
      "IndicesMatrix" -> {{{1, 44, 56, 63, 119, 151, 177, 178, 186, 187, 233, 
         318}, {}, {}, {114}, {}}, {{154, 175, 337}, CompressedData["
1:eJwl0mlrzwEAAODfbDNmZmaGbTb/bcwsZm0zNxvZsBljY45kiFKbIlGOcucK
LSVErlzvUJQjKXJESMiVnJHjhVuOp7x4vsETqmuoqg8LguAjTQgngkiaEkVz
omlBDLG0Io542pBAWxJpTxLJpJBKGp0IkU4GmXQhi2xy6E4PculJHvkUUEgv
iuhDX/rRn4EMppgSSimjnApGUckYxlFNDbVMZBKTmcJUplHHdGYwk1nMZg71
NDCXecxnAQtZxGKWsJRlLGcFK1nFatawlnWsZwMb2cRmtrCVRraxnR3sZBe7
2cNe9rGfAxzkEIc5wlGOcZwTnOQUpznDWc5xngtc5BKXucJVrnGdG9zkFre5
w13ucZ8HPOQRj3nCU57xnBe85BWvecNb3vGeD8H/i5/4zBe+8o3v/OAnv/jN
H/4SSBxGOBFEEkUzoomhJbHE0Zp4EkikHR1IIpkUOpJKGiHSySCTzmTRlWy6
kUMueeRTQCFF9GYAgyimhCEMZRillDGcEYyknAoqGU0VY6mmhvFMoJZ/dbZl
Jw==
         "], {37, 50, 94, 143, 212, 288, 310, 325}, {122}, {}}, {{277}, {73, 
         108, 262}, {8, 13, 17, 23, 25, 29, 40, 42, 61, 67, 68, 69, 70, 75, 
         80, 82, 83, 87, 105, 109, 113, 123, 128, 129, 137, 147, 149, 152, 
         158, 161, 173, 174, 176, 182, 183, 192, 194, 196, 197, 200, 214, 226,
          236, 241, 243, 252, 258, 265, 267, 271, 275, 280, 300, 301, 302, 
         304, 306, 313, 314, 315, 316, 320, 334, 346}, {}, {}}, {{}, {}, {}, {
         74, 88, 96, 102, 106, 117, 167, 205, 208, 218, 224, 242, 294, 
         340}, {}}}, 
      "ExtendedClasses" -> {
       "very good", "unacceptable", "acceptable", "good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0004604277456647399, "SingleEvaluationTime" -> 
      0.00320475, "Version" -> {13.1, 0}|>]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9, 
   3.8685204529294043`*^9, 3.8685215146011333`*^9, 3.8685301612497177`*^9, 
   3.868530590591856*^9, 3.86853261496434*^9, 3.8685338436228123`*^9, {
   3.868535643570589*^9, 3.868535653266458*^9}, 3.86853620504729*^9, 
   3.868536647435892*^9, 3.8685368910591183`*^9, 3.868536956624065*^9, 
   3.868537492992119*^9, {3.8685379158969793`*^9, 3.868537942476584*^9}, 
   3.8685921415849247`*^9, 3.868599486276321*^9, 3.86860013955028*^9, 
   3.8686009455378437`*^9, 3.868601165154408*^9, 3.868602872755411*^9, 
   3.868604168888167*^9, 3.8686705600345984`*^9, 3.868672040003127*^9, 
   3.868681397928339*^9, 3.868938938636381*^9, 3.8689425626275787`*^9, 
   3.868943546605094*^9, 3.86894388526086*^9, 3.868944114037065*^9, 
   3.868944544993232*^9, 3.868945583119274*^9, 3.868945795964314*^9, 
   3.868946090455439*^9, 3.868946301277932*^9, 3.868946812077159*^9, 
   3.868947529554852*^9, 3.868948234247651*^9, 3.868949916263268*^9, 
   3.86895035411582*^9, 3.868950591820963*^9, 3.868955715946851*^9, 
   3.8689590912506847`*^9, 3.868961292873067*^9, {3.868964211642971*^9, 
   3.868964271971294*^9}, 3.8689658659417048`*^9, 3.868975187773774*^9, 
   3.868975807387333*^9, 3.869030236615261*^9, 3.869030576485284*^9, 
   3.8690318983554163`*^9, 3.8690322955085077`*^9, 3.8690328949105043`*^9, 
   3.869033235901104*^9, 3.869033495671227*^9, 3.869034576712833*^9, 
   3.869035610130576*^9, 3.8690361433581657`*^9, 3.869036324430427*^9, 
   3.869036425981944*^9, 3.8690403482379503`*^9, 3.869040564944063*^9, 
   3.869041421524418*^9, 3.869041561340787*^9, 3.869041673839971*^9, 
   3.8690421991522627`*^9, 3.869042855424157*^9, 3.86904326803651*^9, 
   3.869043554339016*^9, 3.869043746795423*^9, 3.869105420473537*^9, 
   3.869105653283306*^9, 3.869105982326734*^9, 3.869107184493881*^9, 
   3.869108234728773*^9, 3.869111749761622*^9, {3.869111919016803*^9, 
   3.8691119399060993`*^9}, 3.869112356812172*^9, 3.869112702187408*^9, {
   3.869112904171596*^9, 3.869112930067875*^9}, {3.8691133852077427`*^9, 
   3.869113414126828*^9}, {3.869121126953014*^9, 3.8691211520853*^9}, {
   3.869121847143949*^9, 3.86912185561662*^9}, 3.869203188780602*^9, {
   3.8692071057867537`*^9, 3.86920713930786*^9}, 3.869207400202592*^9, {
   3.869207739721821*^9, 3.8692077456111937`*^9}, {3.869207952002699*^9, 
   3.869207963437224*^9}, 3.8692080125106792`*^9, {3.869208714713435*^9, 
   3.869208729773431*^9}, 3.869209077756652*^9, 3.8692094954446297`*^9, {
   3.869210938078933*^9, 3.8692109446365433`*^9}, 3.869211902166511*^9, {
   3.869213234631062*^9, 3.8692133334937763`*^9}, {3.869214218655706*^9, 
   3.869214223564402*^9}, 3.869215458371559*^9},
 CellLabel->
  "Out[137]=",ExpressionUUID->"f784b65e-f0cc-4e79-80a3-c13f939e2254"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedHardNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}, {3.869121279126927*^9, 
   3.869121279479135*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "featureLayer", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     "testData", ",", "\"\<Acceptability\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}]}], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}, {
   3.868530047989657*^9, 3.868530063111247*^9}, {3.868530190826717*^9, 
   3.868530196600292*^9}, {3.86853144384466*^9, 3.868531451560924*^9}, {
   3.868532766824644*^9, 3.8685327949413958`*^9}, 3.868532945602283*^9, {
   3.868533874444491*^9, 3.8685338747929583`*^9}, {3.868604441984084*^9, 
   3.8686044511364*^9}, {3.8689602387396393`*^9, 3.8689602481032057`*^9}, {
   3.868960681250607*^9, 3.8689606824317408`*^9}, {3.868963143100669*^9, 
   3.868963145210929*^9}, 3.86896321844506*^9, {3.868976255892177*^9, 
   3.868976256410039*^9}, 3.8689764091880903`*^9, {3.869034393625832*^9, 
   3.86903439400725*^9}, {3.869043275878063*^9, 3.8690432774187603`*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.9479768786127167`"}], ",", 
   RowBox[{"\<\"Results\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "238"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "64"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "14"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "12"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "10"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "3"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "2"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.8690345877152042`*^9, 3.869035626521063*^9, 3.869036152783195*^9, 
   3.8690363341385193`*^9, 3.869036436421172*^9, 3.869040357729239*^9, 
   3.869040576634907*^9, 3.869041433742779*^9, 3.8690415722677*^9, 
   3.8690416867128763`*^9, 3.86904220858243*^9, 3.8690432824600554`*^9, 
   3.869043562445753*^9, 3.869043754721044*^9, {3.869047065454893*^9, 
   3.869047090738934*^9}, 3.8690471518063593`*^9, 3.869047184930591*^9, 
   3.8690472207124777`*^9, 3.8690472595671577`*^9, 3.8690473069192467`*^9, 
   3.869047356173808*^9, 3.869104541974283*^9, 3.8691049803090754`*^9, 
   3.869105042273468*^9, 3.869105162486998*^9, 3.8691054315005198`*^9, 
   3.8691056671929417`*^9, 3.869105994037698*^9, 3.869107195753681*^9, 
   3.8691117585270443`*^9, 3.8691119669156637`*^9, 3.869121285329372*^9, 
   3.869208833562628*^9, 3.869209098161392*^9, 3.8692095035118723`*^9, 
   3.869210954522581*^9, 3.869211920142223*^9, 3.869213356256194*^9, 
   3.869214236948101*^9, 3.869215471853537*^9},
 CellLabel->
  "Out[140]=",ExpressionUUID->"5bf35833-1da5-4105-b995-048659206436"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Association", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Prediction\>\"", "->", 
         RowBox[{"trainedHardNet", "[", 
          RowBox[{
           RowBox[{"KeyDrop", "[", 
            RowBox[{"{", "\"\<Acceptability\>\"", "}"}], "]"}], "@", "#"}], 
          "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "->", 
         RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}]}]}], "}"}], "]"}], 
     "&"}], "/@", 
    RowBox[{"Normal", "[", "testData", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}, {3.869121310826304*^9, 3.869121313255774*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.9479768786127167`"}], ",", 
   RowBox[{"\<\"Results\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "238"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "64"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "14"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "12"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "10"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "3"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "2"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9, 
   3.869105434085964*^9, 3.869105669300963*^9, 3.869105996859831*^9, 
   3.869107199042075*^9, 3.869111759364867*^9, 3.869111970506278*^9, {
   3.869121299804845*^9, 3.869121316611709*^9}, 3.8692088360902042`*^9, 
   3.86920910005622*^9, 3.869209505631686*^9, 3.869210957184381*^9, 
   3.869211922653748*^9, 3.869213358735955*^9, 3.869214238649056*^9, 
   3.8692154737290087`*^9},
 CellLabel->
  "Out[142]=",ExpressionUUID->"bf396ce6-df03-41b3-8ec8-fd2bba9b1fc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],

Cell[BoxData[
 TemplateBox[{"5.25`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9, 
   3.869105674742872*^9, 3.8692091039680862`*^9, 3.869210963050486*^9, 
   3.8692119248338833`*^9, 3.869213361375114*^9, 3.869215475324996*^9},
 CellLabel->
  "Out[143]=",ExpressionUUID->"1276783e-9e31-4a52-9faf-8696d0400c71"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNetBooleanExpression", "[", 
   RowBox[{"hnf", ",", "inputSize"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
  3.869031937904567*^9, 3.869031943129614*^9}, {3.869121341559927*^9, 
  3.869121348104578*^9}, {3.869210965421191*^9, 3.869210971914925*^9}},
 CellLabel->
  "In[419]:=",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"85881d34-aa2c-47a4-9cef-\
231d0c092462"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Acceptability\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Memory\>\"", ",", "\"\<Quality\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}, {
  3.8692109926431*^9, 3.869210996642137*^9}},
 CellLabel->
  "In[421]:=",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1382", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
           "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
           "Doors" -> <|"Type" -> "Nominal"|>, 
           "Passengers" -> <|"Type" -> "Nominal"|>, 
           "Cargo" -> <|"Type" -> "Nominal"|>, 
           "Safety" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
                  "Cargo", "Safety"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1382, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                   0.5381047338323698, 0.31349173058168534`}, {
                   0.2878959194482099, 
                   0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                   0.2578066194971254, 
                   0.4093083635172316, -0.7050063333319737, 
                   0.08206678121922453, -0.2152687718915405, 
                   0.46464274419035045`}, {
                   0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                   0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                   0.3669612074237795, -0.03875817355088801, 
                   0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                   0.5767907589006783, 0.1852877321886701, 
                   0.21134659605041434`, 0.33089384854127}}, 
                  "Precisions" -> {11.396708918937332`, 11.702295237769018`, 
                   11.751709980827822`, 12.269447018561033`, 
                   12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                  None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Mean" -> {-0.0027242377292722524`, -0.0004734344948340772,
                     0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                   "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 6, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   7052420854593502203|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 1301520, 
                  "DataMemory" -> 446480, "FunctionMemory" -> 62320, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.5374646114340518`, -1.5374646114340518`, \
-1.4481495799387802`, -1.3901532053842829`, -1.3900959198753926`, \
-1.3059537438182822`, -1.239089852169043, -1.2261733685503937`, \
-1.2132739652746585`, -1.169323039076807, -1.1079994773194297`}, 
                   "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                   0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[7.816606057704673, 0.25703225729782303`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Index" -> {<|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                   DirectedInfinity[1]}] -> 4|>, <|
               2 -> 1, 4 -> 2, Interval[{5, 
                   DirectedInfinity[1]}] -> 3|>, <|
               "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.12314196676015854`, -0.861851692199707, 
                0.10532767325639725`}, {
                0.8298183679580688, -0.28949323296546936`, 
                0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                0.38437455892562866`, -0.8375512361526489, 
                0.1422276645898819}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                0.4795919358730316}, {
                0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                0.2534555494785309, -0.4526385962963104}, {
                0.3543681204319, -0.37547722458839417`, 
                0.5876661539077759}, {-1.1276206970214844`, 
                0.17602579295635223`, -1.0098364353179932`}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.24657385051250458`, -0.8256815671920776, 
                0.8846340179443359}, {0.6182233691215515, 
                0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.34666627645492554`, -0.5679200291633606, 
                0.10750995576381683`}, {
                0.6412044167518616, -0.1759643256664276, 
                0.6604856848716736}, {-0.8092290163040161, 
                0.12987354397773743`, -1.1753407716751099`}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                0.12715618312358856`, 0.1291729062795639}, {
                0.21379514038562775`, -0.6005780100822449, 
                0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
             272386066020895428|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                "very good" -> 4|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113, 
        "unacceptable" -> 0.7012987012987013, "very good" -> 
        0.03896103896103896|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Acceptability", 
          "Order" -> {
           "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", "Cargo",
             "Safety", "Acceptability"}|>], "PreferLabeled" -> True, 
       "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> None, 
    "ImputationStrategy" -> Automatic, "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
    Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                 0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                 0.09347633272409439, 0.20684024691581726`, 
                 0.00729140592738986, -0.3824177384376526, 
                 0.2153223156929016, -0.46700865030288696`, 
                 0.21194063127040863`, 
                 0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                 0.07883942127227783, -0.375686913728714, 
                 0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                 0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                 0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                 0.1690395474433899, -0.28660914301872253`, 
                 0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                 0.17016777396202087`, -0.32100844383239746`, 
                 0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               18, "$InputDimensions" -> {18}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                "], "Biases" -> 
               RawArray["Real32",{-0.23329688608646393`, 0.1376294195652008, 
                 0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                 0.1361909657716751, -0.07115011662244797, 
                 0.0030301439110189676`, 0.04029219597578049, 
                 0.05379099026322365, 
                 0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                 0.0140318488702178, 
                 0.18612468242645264`, -0.17168177664279938`, 
                 0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                 0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                 0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                 0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                 0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                 0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "7" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                "], "Biases" -> 
               RawArray["Real32",{-0.30062639713287354`, 0.12008462101221085`,
                  0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                 0.09417349845170975, -0.10099706798791885`, 
                 0.08236243575811386, -0.2349618673324585, 0.1114811822772026,
                  0.2365228235721588, -0.1581137776374817, 
                 0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                 0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                 0.08413115888834, -0.2386404424905777, 
                 0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                 0.017599068582057953`, -0.16277392208576202`, 
                 0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                 0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                 0.048794329166412354`, -0.2748609185218811, 
                 0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                 0.15255072712898254`, -0.054961107671260834`, 
                 0.12484297901391983`, -0.013735197484493256`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "10" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{-0.18632154166698456`, -0.05518893152475357,
                  0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                 0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                 0.12943300604820251`, 
                 0.21619535982608795`, -0.12615013122558594`, 
                 0.12520363926887512`, 0.1943180412054062, 
                 0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                 0.12467250972986221`, -0.3208949565887451, 
                 0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                 0.16070689260959625`, -0.07001221925020218, 
                 0.07522184401750565, 
                 0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                 0.24120552837848663`, -0.04254811629652977, 
                 0.19626277685165405`, 0.04852093756198883}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "11" -> <|
            "Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "12" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                "], "Biases" -> 
               RawArray["Real32",{0.18740198016166687`, -0.1249600350856781, 
                 0.03215433284640312, -0.2378043681383133}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
        19653.548073458904`|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "Mean" -> {0.23124615267859935`, -0.72822837729203, 
              0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
              0.10517240908924025`, -0.24024309043728495`, 0.3074998656424723,
               0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
              0.3879769949206493}, 
             "StandardDeviation" -> {0.42336656209659007`, 0.2672799034098392,
               0.07124798075524297, 0.36989547912470067`, 
              0.17138659393602926`, 0.5155818183543911, 0.688893371869374, 
              0.24977193740899778`, 0.6403849334448501, 0.4897664046907167, 
              0.46819109868519837`, 0.43423173863577835`, 0.6276718952348702, 
              0.28383206529853633`, 0.7719651260033509, 0.09756213850198994, 
              0.2950767752080472, 0.22147755480753964`}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, "Key" -> 
             "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
         Around[0.9926698116140742, 0.007247173785702781], "EvaluationTime" -> 
         0.0002390132437947042, "TestSize" -> 276, "ModelMemory" -> 101904, 
         "ModelUtility" -> 5.3529526868256205`, "TrainingSize" -> 1106, 
         "TrainingTime" -> 50.11872336272725, "TrainingMemory" -> 1025056, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.021350027675851042`, 0.008527240234488089]}, 
         "AccuracyHistory" -> {
           Around[0.9926698116140742, 0.005124525728307819]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           4, "NumberOfParameters" -> 8600, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
              Around[0.5039356498747214, 0.011280914837970198`], 
              "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 2744, 
              "ModelMemory" -> 101904., "ModelUtility" -> -5.255034068743364, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 474568., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[3.3682246428941447`, 0.11709052181782027`], 
                Around[5.718797544659934, 0.1974406032409913]}, 
              "AccuracyHistory" -> {
                Around[0.4977980114632854, 0.013422541870627485`], 
                Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
              Around[0.7731731038259634, 0.010538572727576656`], 
              "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 2532, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
              461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.0207920682675256`, 0.13567904919872614`], 
                Around[1.989358115693642, 0.12729332292504641`]}, 
              "AccuracyHistory" -> {
                Around[0.7666435334598815, 0.01212548962300386], 
                Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
              Around[0.8754721532521594, 0.013799020363039234`], 
              "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.6640374106578726`,
               "TrainingSize" -> 250, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 580856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7727930479153965, 0.07355983104423623]}, 
              "AccuracyHistory" -> {
                Around[0.8754721532521594, 0.009757380872436296]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.021350027675851042`, 0.012059338789226588`], 
              "Accuracy" -> Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.021350027675851042`, 0.008527240234488089]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
             Around[0.021350027675851042`, 0.012059338789226588`], 
             "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
             "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1638549337103177`, 0.10037145501929841`], "Accuracy" -> 
              Around[0.5492390926678674, 0.023756280779855192`], 
              "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 1300, 
              "ModelMemory" -> 62416., "ModelUtility" -> -2.4356505013181984`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 315949.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0659744269130655`, 0.06346538833801657], 
                Around[1.2617354405075698`, 0.023724306617050557`]}, 
              "AccuracyHistory" -> {
                Around[0.5686355009414037, 0.0494049938117882], 
                Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
              Around[0.34906013350595955`, 0.01773043247078872], 
              "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 2744,
               "ModelMemory" -> 62416., 
              "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
              288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.7284854644248697`, 0.024470278570364008`], 
                Around[1.7449836721317225`, 0.02985267016659267]}, 
              "AccuracyHistory" -> {
                Around[0.333797137166834, 0.012654176408351573`], 
                Around[0.364323129845085, 0.01286858453924453]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7297176649588678, 0.030635251566725513`], "Accuracy" -> 
              Around[0.7731352673792209, 0.01749760840751051], 
              "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.4608603411176038`,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 430312, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7297176649588678, 0.021662394126187413`]}, 
              "AccuracyHistory" -> {
                Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
              Around[0.8462070332421717, 0.03062402709723611], 
              "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> -0.1999951890132391, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 882408, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.38327177587574507`, 0.029923508235575796`]}, 
              "AccuracyHistory" -> {
                Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020558565549557822`, "MeanCrossEntropy" -> 
             Around[0.38327177587574507`, 0.0423182311805343], "ModelMemory" -> 
             62416, "TrainingMemory" -> 882408, "TrainingTime" -> 
             1.2870992522366111`|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.35435313401532587`, 0.026162924108051638`], "Accuracy" -> 
              Around[0.8602959769418544, 0.016276096618821716`], 
              "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900, 
              "ModelMemory" -> 58320, 
              "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 250,
               "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35435313401532587`, 0.018499981052472317`]}, 
              "AccuracyHistory" -> {
                Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
              Around[0.4905470789487266, 0.05942169230008629], 
              "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 2672,
               "ModelMemory" -> 58320., "ModelUtility" -> -4.197660943845806, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 273552., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5949653673903932`, 0.05337852556796832], 
                Around[3.769761211170389, 0.12190065068836999`]}, 
              "AccuracyHistory" -> {
                Around[0.549197732950539, 0.013394029354165352`], 
                Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
              Around[0.7442585992282589, 0.013337895880245353`], 
              "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 2632,
               "ModelMemory" -> 58320., 
              "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              308650.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7090566921048821, 0.029587871638874982`], 
                Around[0.9267562156706394, 0.048804806717094945`]}, 
              "AccuracyHistory" -> {
                Around[0.7339496000489554, 0.012070557593356287`], 
                Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
              Around[0.9791671208169963, 0.012128533944401654`], 
              "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07118410180594256, 0.013542997191503502`]}, 
              "AccuracyHistory" -> {
                Around[0.9791671208169963, 0.008576168597937634]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
             Around[0.07118410180594256, 0.01915269030340499], "ModelMemory" -> 
             58320, "TrainingMemory" -> 945064, "TrainingTime" -> 
             6.2334652825440156`|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
              Around[0.838474265252356, 0.01562338483938151], 
              "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 1100, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 250, 
              "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 845536, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4150311982338223, 0.022874520429674614`]}, 
              "AccuracyHistory" -> {
                Around[0.838474265252356, 0.011047401365013764`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.9363303357963932`, 0.22063573174865092`], "Accuracy" -> 
              Around[0.6016657435215405, 0.009931734042792198], 
              "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 2400, 
              "ModelMemory" -> 187664., "ModelUtility" -> -4.394526005243066, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.8628854898161876, 
              "TrainingMemory" -> 768069.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7328302955198254`, 0.11030764480200886`], 
                Around[3.1398303760729616`, 0.1343428411885501]}, 
              "AccuracyHistory" -> {
                Around[0.6013282055836575, 0.014050468348716146`], 
                Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
              Around[0.7771993076355267, 0.016090257916624478`], 
              "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.4133613417100643`,
               "TrainingSize" -> 50, "TrainingTime" -> 1., "TrainingMemory" -> 
              768752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0883077850611167`, 0.06546404015990553]}, 
              "AccuracyHistory" -> {
                Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
             Around[1.0883077850611167`, 0.09258013344187536], "ModelMemory" -> 
             187664, "TrainingMemory" -> 768752, "TrainingTime" -> 
             16.33188643150958|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.06349687324568681, 0.020314194118190455`], "Accuracy" -> 
              Around[0.9752187821898789, 0.013178658637319573`], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.1990832337140014`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 1031984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06349687324568681, 0.014364304415312347`]}, 
              "AccuracyHistory" -> {
                Around[0.9752187821898789, 0.009318718889391335]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
              Around[0.5614696628952743, 0.02316984504064622], 
              "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 1900, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.375448364812931, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 588357.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2425860137311924`, 0.09670887865815357], 
                Around[3.472752094517207, 0.15761956845763322`]}, 
              "AccuracyHistory" -> {
                Around[0.5412325518696653, 0.01645230430382249], 
                Around[0.5817067739208833, 0.01550253065862414]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
              Around[0.7822399753364762, 0.011053793618809461`], 
              "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 2632, 
              "ModelMemory" -> 164368., "ModelUtility" -> -3.09292339195906, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.9314427449080938, 
              "TrainingMemory" -> 599973.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1299535489778723`, 0.07202244880796001], 
                Around[1.862147339889153, 0.11678580277280175`]}, 
              "AccuracyHistory" -> {
                Around[0.7898676324542127, 0.011253506706433129`], 
                Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.42705750837440937`, 0.035076829136806445`], "Accuracy" -> 
              Around[0.8446730233225903, 0.015135382766381485`], 
              "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 1132, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.5213181632194831, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 668632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.42705750837440937`, 0.024803063745157707`]}, 
              "AccuracyHistory" -> {
                Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
             Around[0.42705750837440937`, 0.035076829136806445`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
             "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.29713763668876286`, 0.029783149124946628`], "Accuracy" -> 
              Around[0.8857231716276136, 0.013316951171936615`], 
              "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.27080207566416914`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 518544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.29713763668876286`, 0.02105986671133995]}, 
              "AccuracyHistory" -> {
                Around[0.8857231716276136, 0.00941650647840652]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
              Around[0.4534728434064575, 0.03657154854139636], 
              "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 2200, 
              "ModelMemory" -> 93800., "ModelUtility" -> -4.7036563931676705`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.5848931924611134`, 
              "TrainingMemory" -> 372712., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.8582879282812748`, 0.09593272842945073], 
                Around[4.168810776492888, 0.14832220789749126`]}, 
              "AccuracyHistory" -> {
                Around[0.4184413958301533, 0.015453697183599058`], 
                Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
              Around[0.769971120234303, 0.0162893024591907], "EvaluationTime" -> 
              0.00006291890573589659, "TestSize" -> 1332, "ModelMemory" -> 
              93800, "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 
              50, "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2977572298050588`, 0.07725242580096887]}, 
              "AccuracyHistory" -> {
                Around[0.769971120234303, 0.01151827622969245]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
             Around[1.2977572298050588`, 0.1092514282939514], "ModelMemory" -> 
             93800, "TrainingMemory" -> 386192, "TrainingTime" -> 
             25.884295625347566`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5879853515835944`, 0.14718023198397873`], "Accuracy" -> 
              Around[0.7939162815913106, 0.015646642549432373`], 
              "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -3.152069743372218, 
              "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 600288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5879853515835944`, 0.10407214009248054`]}, 
              "AccuracyHistory" -> {
                Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
              Around[0.5705716928210636, 0.02387696402198573], 
              "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 2100, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.803632164263322, 
              "TrainingSize" -> 10, "TrainingTime" -> 5.444439372449127, 
              "TrainingMemory" -> 583613.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.6845044721043254`, 0.10447663667270932`], 
                Around[4.364677185562806, 0.2100094842353753]}, 
              "AccuracyHistory" -> {
                Around[0.5492372585429602, 0.014247131834686502`], 
                Around[0.591906127099167, 0.01628060211969826]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38151664752165954`, 0.03977608365046414], "Accuracy" -> 
              Around[0.8740940349402928, 0.013875001085229821`], 
              "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 250, 
              "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
              683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.38151664752165954`, 0.028125938478286556`]}, 
              "AccuracyHistory" -> {
                Around[0.8740940349402928, 0.009811107356336711]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00037881779653037317`, "MeanCrossEntropy" -> 
             Around[0.38151664752165954`, 0.03977608365046414], "ModelMemory" -> 
             164368, "TrainingMemory" -> 683480, "TrainingTime" -> 
             92.6247680155231|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2846789544300572`, 0.10135837559026044`], "Accuracy" -> 
              Around[0.7374636238433064, 0.017014953179959547`], 
              "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.6005267903937916`,
               "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 341168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2846789544300572`, 0.07167119470992618]}, 
              "AccuracyHistory" -> {
                Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
              Around[0.5152833374237896, 0.07249298936486862], 
              "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 2744,
               "ModelMemory" -> 58320., "ModelUtility" -> -5.074385087421649, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 295925.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.5190643035821725`, 0.1028129894230038], 
                Around[5.812425858174743, 0.191466359358563]}, 
              "AccuracyHistory" -> {
                Around[0.5871646538577457, 0.013267469359568705`], 
                Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020244886234998508`, "MeanCrossEntropy" -> 
             Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
             58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
              Around[0.8717062863197803, 0.01777595950885693], 
              "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.10702789819239966`, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 374688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3301382275974658, 0.02068135393911543]}, 
              "AccuracyHistory" -> {
                Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
              Around[0.7363490438369396, 0.017031507261842195`], 
              "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.3231968082428875`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 338064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6791528095168373, 0.027387263849560993`]}, 
              "AccuracyHistory" -> {
                Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
              Around[0.4863596829810406, 0.04278093185210315], 
              "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 2744, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.180492238404206, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5444439372449126, 
              "TrainingMemory" -> 322133.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.508549842629893, 0.04605766705211905], 
                Around[3.771470810362135, 0.12018564135103059`]}, 
              "AccuracyHistory" -> {
                Around[0.5280828090172973, 0.013434097226343747`], 
                Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
             Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
             9.109108405185806|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5038386117534089, 0.041784890614198204`], "Accuracy" -> 
              Around[0.828465928965194, 0.02654031530216917], 
              "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 400, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.7882946404845459, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 528184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5038386117534089, 0.029546379504437673`]}, 
              "AccuracyHistory" -> {
                Around[0.828465928965194, 0.018766836924992914`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
              Around[0.3679296647759494, 0.07392752974250799], 
              "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 2744,
               "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
              449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.148424842980697, 0.03780978285236538], 
                Around[1.4568966776552688`, 0.026077841742531138`]}, 
              "AccuracyHistory" -> {
                Around[0.2945557228909562, 0.012245543527860529`], 
                Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
              Around[0.6180757845356775, 0.05382602805907864], 
              "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 2632, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
              461714.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.155425119141791, 0.02396130422338247], 
                Around[1.0610392976248695`, 0.02621811203957636]}, 
              "AccuracyHistory" -> {
                Around[0.5650696245779578, 0.013556795434539574`], 
                Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23257721592841687`, 0.03163453421313113], "Accuracy" -> 
              Around[0.908886547057971, 0.024356212382520913`], 
              "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 0.7369941836531197, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1045880, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23257721592841687`, 0.022368993661782865`]}, 
              "AccuracyHistory" -> {
                Around[0.908886547057971, 0.017222442939700294`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
             Around[0.23257721592841687`, 0.03163453421313113], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1045880, "TrainingTime" -> 
             1.4937384274690055`|>, "Index" -> 10|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
              Around[0.7457728338345587, 0.018472683364634448`], 
              "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.7509502414499094`, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 309112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8371599125387441, 0.047884777618598134`]}, 
              "AccuracyHistory" -> {
                Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
              Around[0.8882989940963734, 0.013145309817848845`], 
              "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.48100284988718467`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 469432, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2722926005782066, 0.022605846381320353`]}, 
              "AccuracyHistory" -> {
                Around[0.8882989940963734, 0.009295137712999018]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04678344173247784, 0.020786249475512084`], "Accuracy" -> 
              Around[0.9851396376350638, 0.010281268792086398`], 
              "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 3.8798539588000582`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 972672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04678344173247784, 0.014698097959569912`]}, 
              "AccuracyHistory" -> {
                Around[0.9851396376350638, 0.007269954882085916]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
              Around[0.502464111857925, 0.07130486561817233], 
              "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 2200, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.6637320197127625`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299269.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8332223163074313`, 0.08054167103388306], 
                Around[4.86043648706169, 0.16818929238262642`]}, 
              "AccuracyHistory" -> {
                Around[0.572995990979411, 0.015538960918031978`], 
                Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
             Around[3.3468294016845603`, 1.5153492244478233`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 299269.3333333333, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 11|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
              Around[0.762381947001795, 0.01642868812328819], 
              "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -1.7030510878983651`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 600016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7752070403907262, 0.03017334558439825]}, 
              "AccuracyHistory" -> {
                Around[0.762381947001795, 0.011616836777975974`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.39447704061745437`, 0.03234768531334908], "Accuracy" -> 
              Around[0.8594906763316973, 0.01476170763807768], 
              "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 1100, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.3625496870271967, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 675000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.39447704061745437`, 0.02287326764075762]}, 
              "AccuracyHistory" -> {
                Around[0.8594906763316973, 0.01043810357277798]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
              Around[0.9455603955460657, 0.019279136977717354`], 
              "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 1.404009915150804, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1142080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15855325263059325`, 0.025484079405049796`]}, 
              "AccuracyHistory" -> {
                Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
              Around[0.5116939418989973, 0.07010685788967808], 
              "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 2400, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              586421.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.521906370483909, 0.03515613181787799], 
                Around[1.5882755791735657`, 0.05563504596868172]}, 
              "AccuracyHistory" -> {
                Around[0.442311083421225, 0.014256465737770922`], 
                Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
             Around[1.5550909748287374`, 0.04454750436345691], "ModelMemory" -> 
             164368., "TrainingMemory" -> 586421.3333333333, "TrainingTime" -> 
             5.818068863066169|>, "Index" -> 12|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9007091827219887, 0.030008702121127984`], "Accuracy" -> 
              Around[0.6760965348587569, 0.018079481767156038`], 
              "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.8723329888169609`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9007091827219887, 0.02121935676445673]}, 
              "AccuracyHistory" -> {
                Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.43111245312757496`, 0.025345577264303743`], "Accuracy" -> 
              Around[0.8330426045067885, 0.015571490015669136`], 
              "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 1132,
               "ModelMemory" -> 58320, "ModelUtility" -> -0.4088030140985044, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 364536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.43111245312757496`, 0.01792202955667676]}, 
              "AccuracyHistory" -> {
                Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.1842923793671783, 0.025304164192749383`], "Accuracy" -> 
              Around[0.9457395297710746, 0.019169568233064083`], 
              "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 891920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1842923793671783, 0.01789274609295091]}, 
              "AccuracyHistory" -> {
                Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
              Around[0.43385363675367183`, 0.011415114317526467`], 
              "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 2472, 
              "ModelMemory" -> 58320., "ModelUtility" -> -3.5149737403880033`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 273418.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4396046101139186`, 0.029031135765925187`], 
                Around[2.475712680707863, 0.06775654619883521]}, 
              "AccuracyHistory" -> {
                Around[0.439498971976867, 0.014905537896345295`], 
                Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
             Around[1.9576586454108909`, 0.5187408468073508], "ModelMemory" -> 
             58320., "TrainingMemory" -> 273418.6666666666, "TrainingTime" -> 
             4.386881933034051|>, "Index" -> 13|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8419793893936219, 0.040743862542620725`], "Accuracy" -> 
              Around[0.7373831716775224, 0.01693418574125903], 
              "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.8856361050895067`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 782064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8419793893936219, 0.02881026149561968]}, 
              "AccuracyHistory" -> {
                Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
              Around[0.8250320562814308, 0.01594299951984108], 
              "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, "ModelUtility" -> -0.6112985333219293,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 848080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4432056724888078, 0.02238507759095115]}, 
              "AccuracyHistory" -> {
                Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.16858329728652338`, 0.029069351611494675`], "Accuracy" -> 
              Around[0.945560395546066, 0.01927913697771735], 
              "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 1.2824675838731772`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 1207096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.16858329728652338`, 0.020555135649183976`]}, 
              "AccuracyHistory" -> {
                Around[0.945560395546066, 0.013632408492368258`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
             Around[0.16858329728652338`, 0.029069351611494675`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
             "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3249962292171797`, 0.12170206901231112`], "Accuracy" -> 
              Around[0.793195580192614, 0.015828005629622638`], 
              "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300, 
              "ModelMemory" -> 164368, "ModelUtility" -> -2.7896299497840076`,
               "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 589096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3249962292171797`, 0.08605635828303838]}, 
              "AccuracyHistory" -> {
                Around[0.793195580192614, 0.011192090113365015`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 250, 
              "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 686536,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00044256629018744604`, "MeanCrossEntropy" -> 
             Around[0.3701221449474526, 0.03366489354688038], "ModelMemory" -> 
             164368, "TrainingMemory" -> 686536, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 15|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1227673790868702`, 0.10368611279141937`], "Accuracy" -> 
              Around[0.757173277714323, 0.018196954510351714`], 
              "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.342528378471589, 
              "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 309656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1227673790868702`, 0.07331715346968586]}, 
              "AccuracyHistory" -> {
                Around[0.757173277714323, 0.012867189931212827`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33220140414624993`, 0.047853257302163214`], "Accuracy" -> 
              Around[0.8965085805171233, 0.012697194170323252`], 
              "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.07288974716187491, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 510104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33220140414624993`, 0.03383736274022428]}, 
              "AccuracyHistory" -> {
                Around[0.8965085805171233, 0.00897827209987787]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.029497520149122013`, 0.01667491875741592], "Accuracy" -> 
              Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 4.7583398302297795`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 39.810717055349734`, 
              "TrainingMemory" -> 948200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.029497520149122013`, 0.011790948129103553`]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.2949671588281193`, 0.14749235577106196`], "Accuracy" -> 
              Around[0.5835796437000327, 0.02088503617561304], 
              "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -3.761313256061099, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 297120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2949671588281193`, 0.10429284493889672`]}, 
              "AccuracyHistory" -> {
                Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
             Around[2.2949671588281193`, 0.14749235577106196`], "ModelMemory" -> 
             62416, "TrainingMemory" -> 297120, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 16|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
              Around[0.7677501064780398, 0.00816276162917491], 
              "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 2664,
               "ModelMemory" -> 93800., 
              "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 386088.,
               "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.5973296386447973`, 0.09710009617968923], 
                Around[1.6944960008299512`, 0.10490120341267964`]}, 
              "AccuracyHistory" -> {
                Around[0.7682281016221508, 0.011537187632355594`], 
                Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33249143642424983`, 0.02780494761566639], "Accuracy" -> 
              Around[0.8613277396783116, 0.014507674452371017`], 
              "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 1132,
               "ModelMemory" -> 93800, "ModelUtility" -> 0.05248807658590138, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 502672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33249143642424983`, 0.01966106700957443]}, 
              "AccuracyHistory" -> {
                Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04443140001711353, 0.021314953380441544`], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.92776201569796, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 970336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04443140001711353, 0.01507194807598534]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00046938966244621503`, "MeanCrossEntropy" -> 
             Around[0.04443140001711353, 0.021314953380441544`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
             "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
              Around[0.7384665234825579, 0.010719276135332273`], 
              "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 2432, 
              "ModelMemory" -> 93800., "ModelUtility" -> -1.9350890275488193`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.37788092188698263`, 
              "TrainingMemory" -> 378786.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7726332524190396, 0.028941631998749596`], 
                Around[1.0060756456836646`, 0.05024424270156515]}, 
              "AccuracyHistory" -> {
                Around[0.7324400373766513, 0.0120571885743892], 
                Around[0.7444930095884645, 0.01307837056160318]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.34782344779765667`, 0.025712507033831242`], "Accuracy" -> 
              Around[0.8557374599745653, 0.014686070676875251`], 
              "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, 
              "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 250,
               "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.34782344779765667`, 0.018181488084928872`]}, 
              "AccuracyHistory" -> {
                Around[0.8557374599745653, 0.0103846201646034]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15276622770087278`, 0.028666652684449675`], "Accuracy" -> 
              Around[0.9498135082589592, 0.018508440411731872`], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 1.5673860415737628`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 907872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15276622770087278`, 0.02027038450709391]}, 
              "AccuracyHistory" -> {
                Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.15276622770087278`, 0.028666652684449675`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
             "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7753042739299817, 0.039969593621796584`], "Accuracy" -> 
              Around[0.7375401740439216, 0.01714466436223822], 
              "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 1300, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.637907986699601, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 461800, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7753042739299817, 0.02826277069124294]}, 
              "AccuracyHistory" -> {
                Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35554695739060116`, 0.027033696117590978`], "Accuracy" -> 
              Around[0.8470897173852533, 0.01508748965454944], 
              "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.08838018962147687,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 567400, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.35554695739060116`, 0.01911570984528502]}, 
              "AccuracyHistory" -> {
                Around[0.8470897173852533, 0.01066846624581379]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15410934185340477`, 0.03040532289461026], "Accuracy" -> 
              Around[0.9596068784743268, 0.016667152171683092`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 1.5363925902488362`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1024944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15410934185340477`, 0.0214998100029455]}, 
              "AccuracyHistory" -> {
                Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.15410934185340477`, 0.03040532289461026], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1024944, "TrainingTime" -> 
             2.891283046943182|>, "Index" -> 19|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.9025240498596048`, 0.17368396265702707`], "Accuracy" -> 
              Around[0.7888324315844696, 0.015739599038312638`], 
              "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -3.5329225623661613`,
               "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 780096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9025240498596048`, 0.12281310777813492`]}, 
              "AccuracyHistory" -> {
                Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
              Around[0.8854786750958584, 0.013351117434256547`], 
              "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, 
              "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 250, 
              "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
              837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6454807954277998, 0.062000766216747265`]}, 
              "AccuracyHistory" -> {
                Around[0.8854786750958584, 0.009440665674180743]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00022514047861176898`, "MeanCrossEntropy" -> 
             Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
             187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
             115.3099731077524|>, "Index" -> 20|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
              Around[0.5296860458536663, 0.019284927181766578`], 
              "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -2.44789502640578, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2036312536280331`, 0.01921988365429954]}, 
              "AccuracyHistory" -> {
                Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8399174549925484, 0.024903779896598206`], "Accuracy" -> 
              Around[0.7369045920343117, 0.018395727422659554`], 
              "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.7311181711686499`, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 351208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8399174549925484, 0.017609631642061807`]}, 
              "AccuracyHistory" -> {
                Around[0.7369045920343117, 0.0130077436054219]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
             Around[0.8399174549925484, 0.024903779896598206`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 351208, "TrainingTime" -> 
             2.4002626703166206`|>, "Index" -> 21|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
              Around[0.7313061583954904, 0.017144680944532857`], 
              "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.028995426006972, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 313112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9663976578750052, 0.05017890964418109]}, 
              "AccuracyHistory" -> {
                Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35008419981942934`, 0.024708646909891732`], "Accuracy" -> 
              Around[0.8568009346457361, 0.014673031432912107`], 
              "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> 
              0.0029327369312612817`, "TrainingSize" -> 250, "TrainingTime" -> 
              3.981071705534973, "TrainingMemory" -> 398384, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35008419981942934`, 0.017471651783928475`]}, 
              "AccuracyHistory" -> {
                Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.042170347467092334`, 0.016000630897312476`], 
              "Accuracy" -> Around[0.9907604816520923, 0.008121627376877738], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 825792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.042170347467092334`, 0.011314154610752645`]}, 
              "AccuracyHistory" -> {
                Around[0.9907604816520923, 0.00574285779246056]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
              Around[0.5804592460589959, 0.018783072828788897`], 
              "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
              "ModelMemory" -> 58320, "ModelUtility" -> -3.4638943660534287`, 
              "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.987919142262011, 0.07603787179768637]}, 
              "AccuracyHistory" -> {
                Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
             Around[1.987919142262011, 0.10753378955027475`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 299984, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 22|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9403941167153582, 0.030071559648660914`], "Accuracy" -> 
              Around[0.6590202792143492, 0.018327916017389055`], 
              "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.9641702588327155`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 318200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9403941167153582, 0.021263803748423883`]}, 
              "AccuracyHistory" -> {
                Around[0.6590202792143492, 0.01295979370091334]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.45576172147997035`, 0.02603166210338864], "Accuracy" -> 
              Around[0.8256280537105091, 0.015920374420882354`], 
              "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -0.525479429825631, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 420072, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45576172147997035`, 0.01840716479886297]}, 
              "AccuracyHistory" -> {
                Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
              Around[0.9385178062088241, 0.020368186136795634`], 
              "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 1.0349935743091963`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 933232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.20578142008052, 0.019371630008387233`]}, 
              "AccuracyHistory" -> {
                Around[0.9385178062088241, 0.01440248253779802]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041974250697322877`, "MeanCrossEntropy" -> 
             Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
             62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
             2.29662775876662|>, "Index" -> 23|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5041540185761222`, 0.12792697018320168`], "Accuracy" -> 
              Around[0.7491330451581357, 0.01676873732368961], 
              "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 1332,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5041540185761222`, 0.09045802811319117]}, 
              "AccuracyHistory" -> {
                Around[0.7491330451581357, 0.01185728787351688]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3551338319540449, 0.027278187743878263`], "Accuracy" -> 
              Around[0.8473263359267194, 0.015089820198610777`], 
              "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 1132,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 250, 
              "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 527408,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3551338319540449, 0.01928859153217609]}, 
              "AccuracyHistory" -> {
                Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
              Around[0.9895518014074794, 0.008620653342748424], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 4.258968427388813, 
              "TrainingSize" -> 1106, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 932288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.03734914821299343, 0.013125775259394882`]}, 
              "AccuracyHistory" -> {
                Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
              Around[0.46102332820255726`, 0.018987327336901637`], 
              "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 1372,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10, 
              "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.678346364097339, 0.08174114510413875]}, 
              "AccuracyHistory" -> {
                Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00029572208708069134`, "MeanCrossEntropy" -> 
             Around[2.678346364097339, 0.11559943601018015`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 449640, "TrainingTime" -> 
             18.983242383456506`|>, "Index" -> 24|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
              Around[0.7762423210420635, 0.014329340894644918`], 
              "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 2432, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              605098.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8208265202024376, 0.05283642239438791], 
                Around[1.4514603795294685`, 0.08835215155478726]}, 
              "AccuracyHistory" -> {
                Around[0.7878452988653784, 0.012263467049955281`], 
                Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, "ModelUtility" -> -0.2386147056327178,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 680424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.06082621292123911, 0.019650473295384628`], "Accuracy" -> 
              Around[0.9770146234585061, 0.012716008303818851`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.2838445796528624`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1099664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06082621292123911, 0.013894982920691632`]}, 
              "AccuracyHistory" -> {
                Around[0.9770146234585061, 0.008991575701254757]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.06082621292123911, 0.019650473295384628`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
             "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
              Around[0.7627369072147341, 0.011750893611347561`], 
              "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 2664, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              468021.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0095607638414457`, 0.05525446612282441], 
                Around[1.1842784010456864`, 0.07075909436910463]}, 
              "AccuracyHistory" -> {
                Around[0.7543389604118015, 0.011774622135660197`], 
                Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35804951443350097`, 0.026655439166062223`], "Accuracy" -> 
              Around[0.8488505284229317, 0.014960827173881168`], 
              "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
              527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35804951443350097`, 0.018848241789828087`]}, 
              "AccuracyHistory" -> {
                Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 3.3814381242084908`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 959184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.05985945373078884, 0.01350088664315196]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.05985945373078884, 0.01909313699480727], "ModelMemory" -> 
             101904, "TrainingMemory" -> 959184, "TrainingTime" -> 
             6.89353199975045|>, "Index" -> 26|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3358149900117273`, 0.12222648201044096`], "Accuracy" -> 
              Around[0.7862467400481814, 0.01602150238466662], 
              "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 1300, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.825724619026342, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 781952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3358149900117273`, 0.08642717427015836]}, 
              "AccuracyHistory" -> {
                Around[0.7862467400481814, 0.01132891298099421]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
              Around[0.8858609662855659, 0.013283721779471411`], 
              "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.3445805711537584`,
               "TrainingSize" -> 250, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 845640, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6317653258849528, 0.05961837551263815]}, 
              "AccuracyHistory" -> {
                Around[0.8858609662855659, 0.009393009749659667]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
             Around[0.6317653258849528, 0.08431311521662489], "ModelMemory" -> 
             187664, "TrainingMemory" -> 845640, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 27|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1154980744941485`, 0.034353683515180075`], "Accuracy" -> 
              Around[0.5814498430933545, 0.019088672339769665`], 
              "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 1332, 
              "ModelMemory" -> 93800, "ModelUtility" -> -2.347503593111097, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 386152, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1154980744941485`, 0.02429172257232034]}, 
              "AccuracyHistory" -> {
                Around[0.5814498430933545, 0.01349772965529921]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5546183182382579, 0.026395794652472045`], "Accuracy" -> 
              Around[0.8135685469111952, 0.016337844310188795`], 
              "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> -0.9566176476083332, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 451760, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5546183182382579, 0.01866464539357059]}, 
              "AccuracyHistory" -> {
                Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
              Around[0.9299868058195125, 0.021652291921408842`], 
              "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.7601699845170374, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 918608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23091679939394155`, 0.02259715579830503]}, 
              "AccuracyHistory" -> {
                Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041019731090850185`, "MeanCrossEntropy" -> 
             Around[0.23091679939394155`, 0.0319572042010208], "ModelMemory" -> 
             93800, "TrainingMemory" -> 918608, "TrainingTime" -> 
             1.3087789598585713`|>, "Index" -> 28|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
              Around[0.7681507374150377, 0.016318407378901893`], 
              "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 1332,
               "ModelMemory" -> 93800, "ModelUtility" -> -2.137795388853302, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 386256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9948450772059008, 0.05585599851339633]}, 
              "AccuracyHistory" -> {
                Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
              Around[0.8617176768356566, 0.014429545856984168`], 
              "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.052922354317971765`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 497976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3326799470819294, 0.018734832919486785`]}, 
              "AccuracyHistory" -> {
                Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07021180454193646, 0.026976812427827776`], "Accuracy" -> 
              Around[0.9710277520559213, 0.014250347362805026`], 
              "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.0477874334351047`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 966920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07021180454193646, 0.01907548700251455]}, 
              "AccuracyHistory" -> {
                Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
             Around[0.07021180454193646, 0.026976812427827776`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
             "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
              Around[0.7911413261337976, 0.015627505897240296`], 
              "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 2332,
               "ModelMemory" -> 187664., 
              "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
              774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.7558990910227044, 0.037970217663081576`], 
                Around[0.9594474328704059, 0.07043483754789011]}, 
              "AccuracyHistory" -> {
                Around[0.7779594452749371, 0.011355683387275856`], 
                Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
              Around[0.8389781853611775, 0.015335274506302916`], 
              "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4042669758821077, 0.022272205006115358`]}, 
              "AccuracyHistory" -> {
                Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.10406413363415194`, 0.020899367441681686`], "Accuracy" -> 
              Around[0.9736914348517792, 0.013553043838557063`], 
              "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 2.2363622110324752`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 1218600, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.10406413363415194`, 0.014778084440522468`]}, 
              "AccuracyHistory" -> {
                Around[0.9736914348517792, 0.009583449203962254]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
             Around[0.10406413363415194`, 0.020899367441681686`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
             "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 1382, 
      "PreprocessorEvaluationTime" -> 3.9375*^-6, "PreprocessorMemory" -> 
      94088, "InputDimension" -> 18, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.869215141896656`16.340197867844974*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
          "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
          "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 40|>, <|
         "TrainingSizes" -> 250, "TimeBudgets" -> 138.0795097872658, 
          "ElapsedTimes" -> 151.156252, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
          "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 21|>}, 
        
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
             Interval[{5, 
               DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
           5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
           8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
      "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
      "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, "Instant",
         "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9, 3.869210988494907*^9, 3.869211542035791*^9},
 CellLabel->
  "Out[421]=",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}},
 CellLabel->
  "In[422]:=",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "19034f41-be4d-4eaa-9650-6c15422c87b6"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"99.1", "0.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.1329479768786114846`3., 0.4991396165558288911`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"69.1", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.0751445086705189169`3., 2.4883140570071944353`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9564305105930941409`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0303164048540168762`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8957977008850603884`3.", "\", \"", 
                   "1.0170633203011278933`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8957977008850603884`3., 
                   ", ", 1.0170633203011278933`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0445471424083839287`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0316921409220950537`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "0.0188371394358061786`3."}], "\", \"", 
                   "0.107931424252574043`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -0.0188371394358061786`3.,
                    ", ", 0.107931424252574043`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"7.04`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.43`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKL96k7RRV8dY+KOjpDQbrV/Z9e/5HbLZ6
aH9Nxp6Fze2dvdmLST56Lm/tC4SvXDFReEnQvIdVIuvcH96yZ0ABxLvnafFu
1ROib+2tl7O8S9z4wr5rUTe/tvVtkv11gumH1M2Pr+13x6+w3LHlsb2OQUn3
hPJ9JJtT+e0aU/7Lt/Zlp+/u8Xv22v7VOq5H6pOe2gMAbTJnmQ==
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.9815950920245398`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9876543209876543}], 
                    Row[{"Recall = ", 0.975609756097561}], 
                    Row[{"FScore = ", 0.9815950920245398}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.012345679012345678`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0041841004184100415`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.012345679012345678`}], 
                    Row[{"Row fraction = ", 0.0041841004184100415`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9979035639412998`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.99581589958159}], 
                    Row[{"FScore = ", 0.9979035639412998}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.024390243902439025`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.024390243902439025`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.923076923076923`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8571428571428571}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.923076923076923}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{82, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.975609756097561}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{239, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.99581589958159}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9876543209876543}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{14, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8571428571428571}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["82", TraditionalForm]}, {2.5, 
                    FormBox["13", TraditionalForm]}, {1.5, 
                    FormBox["239", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["81", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["13", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["238", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["14", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
              "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
              "Doors" -> <|"Type" -> "Nominal"|>, 
              "Passengers" -> <|"Type" -> "Nominal"|>, 
              "Cargo" -> <|"Type" -> "Nominal"|>, 
              "Safety" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|
                  "FeatureNames" -> {
                    "PurchasePrice", "MaintenanceCost", "Doors", "Passengers",
                     "Cargo", "Safety"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 6|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 1382, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                    0.5381047338323698, 0.31349173058168534`}, {
                    0.2878959194482099, 
                    0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                    0.2578066194971254, 
                    0.4093083635172316, -0.7050063333319737, 
                    0.08206678121922453, -0.2152687718915405, 
                    0.46464274419035045`}, {
                    0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                    0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                    0.3669612074237795, -0.03875817355088801, 
                    0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                    0.5767907589006783, 0.1852877321886701, 
                    0.21134659605041434`, 0.33089384854127}}, 
                    "Precisions" -> {11.396708918937332`, 11.702295237769018`,
                     11.751709980827822`, 12.269447018561033`, 
                    12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                    None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 6, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 
                    1301520, "DataMemory" -> 446480, "FunctionMemory" -> 
                    62320, "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-1.5374646114340518`, \
-1.5374646114340518`, -1.4481495799387802`, -1.3901532053842829`, \
-1.3900959198753926`, -1.3059537438182822`, -1.239089852169043, \
-1.2261733685503937`, -1.2132739652746585`, -1.169323039076807, \
-1.1079994773194297`}, "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                    0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[7.816606057704673, 0.25703225729782303`], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5495059474424677337|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Index" -> {<|
                  "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                  2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                  "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                  "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.12314196676015854`, -0.861851692199707, 
                   0.10532767325639725`}, {
                   0.8298183679580688, -0.28949323296546936`, 
                   0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                   0.38437455892562866`, -0.8375512361526489, 
                   0.1422276645898819}}], 
                  RawArray["Real32",{{0., 0., 
                   0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                   0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                   0.4795919358730316}, {
                   0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                   0.2534555494785309, -0.4526385962963104}, {
                   0.3543681204319, -0.37547722458839417`, 
                   0.5876661539077759}, {-1.1276206970214844`, 
                   0.17602579295635223`, -1.0098364353179932`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.24657385051250458`, -0.8256815671920776, 
                   0.8846340179443359}, {0.6182233691215515, 
                   0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.34666627645492554`, -0.5679200291633606, 
                   0.10750995576381683`}, {
                   0.6412044167518616, -0.1759643256664276, 
                   0.6604856848716736}, {-0.8092290163040161, 
                   0.12987354397773743`, -1.1753407716751099`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                   0.12715618312358856`, 0.1291729062795639}, {
                   0.21379514038562775`, -0.6005780100822449, 
                   0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
                272386066020895428|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                   "very good" -> 4|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {4}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113,
            "unacceptable" -> 0.7012987012987013, "very good" -> 
           0.03896103896103896|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Acceptability", 
             "Order" -> {
              "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
               "Cargo", "Safety", "Acceptability"}|>], "PreferLabeled" -> 
          True, "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> 
       None, "ImputationStrategy" -> Automatic, "Prior" -> Automatic, 
       "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
       "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
       Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                    0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                    0.09347633272409439, 0.20684024691581726`, 
                    0.00729140592738986, -0.3824177384376526, 
                    0.2153223156929016, -0.46700865030288696`, 
                    0.21194063127040863`, 
                    0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                    0.07883942127227783, -0.375686913728714, 
                    0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                    0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                    0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                    0.1690395474433899, -0.28660914301872253`, 
                    0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                    0.17016777396202087`, -0.32100844383239746`, 
                    0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 18, "$InputDimensions" -> {18}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                   "], "Biases" -> 
                  RawArray["Real32",{-0.23329688608646393`, 
                    0.1376294195652008, 
                    0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                    0.1361909657716751, -0.07115011662244797, 
                    0.0030301439110189676`, 0.04029219597578049, 
                    0.05379099026322365, 
                    
                    0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                    0.0140318488702178, 
                    0.18612468242645264`, -0.17168177664279938`, 
                    0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                    0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                    0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                    0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                    0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                    0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "7" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                   "], "Biases" -> 
                  RawArray["Real32",{-0.30062639713287354`, 
                    0.12008462101221085`, 
                    0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                    0.09417349845170975, -0.10099706798791885`, 
                    0.08236243575811386, -0.2349618673324585, 
                    0.1114811822772026, 
                    0.2365228235721588, -0.1581137776374817, 
                    0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                    0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                    0.08413115888834, -0.2386404424905777, 
                    0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                    0.017599068582057953`, -0.16277392208576202`, 
                    0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                    0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                    0.048794329166412354`, -0.2748609185218811, 
                    0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                    0.15255072712898254`, -0.054961107671260834`, 
                    0.12484297901391983`, -0.013735197484493256`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "10" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1: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
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.18632154166698456`, -0.05518893152475357, 
                    0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                    0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                    0.12943300604820251`, 
                    0.21619535982608795`, -0.12615013122558594`, 
                    0.12520363926887512`, 0.1943180412054062, 
                    0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                    0.12467250972986221`, -0.3208949565887451, 
                    0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                    0.16070689260959625`, -0.07001221925020218, 
                    0.07522184401750565, 
                    0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                    0.24120552837848663`, -0.04254811629652977, 
                    0.19626277685165405`, 0.04852093756198883}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "11" -> <|
               "Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "12" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.18740198016166687`, -0.1249600350856781, 
                    0.03215433284640312, -0.2378043681383133}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
           19653.548073458904`|>, "InputType" -> "NumericalVector", 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "Mean" -> {0.23124615267859935`, -0.72822837729203, 
                 0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
                 0.10517240908924025`, -0.24024309043728495`, 
                 0.3074998656424723, 
                 0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
                 0.3879769949206493}, 
                "StandardDeviation" -> {0.42336656209659007`, 
                 0.2672799034098392, 0.07124798075524297, 
                 0.36989547912470067`, 0.17138659393602926`, 
                 0.5155818183543911, 0.688893371869374, 0.24977193740899778`, 
                 0.6403849334448501, 0.4897664046907167, 0.46819109868519837`,
                  0.43423173863577835`, 0.6276718952348702, 
                 0.28383206529853633`, 0.7719651260033509, 
                 0.09756213850198994, 0.2950767752080472, 
                 0.22147755480753964`}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
            Around[0.9926698116140742, 0.007247173785702781], 
            "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
            "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
            "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
            "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.021350027675851042`, 0.008527240234488089]}, 
            "AccuracyHistory" -> {
              Around[0.9926698116140742, 0.005124525728307819]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 4, "NumberOfParameters" -> 8600, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
                 Around[0.5039356498747214, 0.011280914837970198`], 
                 "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -5.255034068743364, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 474568., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[3.3682246428941447`, 0.11709052181782027`], 
                   Around[5.718797544659934, 0.1974406032409913]}, 
                 "AccuracyHistory" -> {
                   Around[0.4977980114632854, 0.013422541870627485`], 
                   Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
                 Around[0.7731731038259634, 0.010538572727576656`], 
                 "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 
                 2532, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
                 461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.0207920682675256`, 0.13567904919872614`], 
                   Around[1.989358115693642, 0.12729332292504641`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7666435334598815, 0.01212548962300386], 
                   Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
                 Around[0.8754721532521594, 0.013799020363039234`], 
                 "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.6640374106578726`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 580856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7727930479153965, 0.07355983104423623]}, 
                 "AccuracyHistory" -> {
                   Around[0.8754721532521594, 0.009757380872436296]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.021350027675851042`, 0.012059338789226588`], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 5.3529526868256205`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 1025056, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.021350027675851042`, 0.008527240234488089]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
                Around[0.021350027675851042`, 0.012059338789226588`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
                "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1638549337103177`, 0.10037145501929841`], 
                 "Accuracy" -> 
                 Around[0.5492390926678674, 0.023756280779855192`], 
                 "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 
                 1300, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -2.4356505013181984`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 315949.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0659744269130655`, 0.06346538833801657], 
                   Around[1.2617354405075698`, 0.023724306617050557`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5686355009414037, 0.0494049938117882], 
                   Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
                 Around[0.34906013350595955`, 0.01773043247078872], 
                 "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
                 288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.7284854644248697`, 0.024470278570364008`], 
                   Around[1.7449836721317225`, 0.02985267016659267]}, 
                 "AccuracyHistory" -> {
                   Around[0.333797137166834, 0.012654176408351573`], 
                   Around[0.364323129845085, 0.01286858453924453]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7297176649588678, 0.030635251566725513`], 
                 "Accuracy" -> 
                 Around[0.7731352673792209, 0.01749760840751051], 
                 "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.4608603411176038`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 430312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7297176649588678, 0.021662394126187413`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
                 Around[0.8462070332421717, 0.03062402709723611], 
                 "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.1999951890132391, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 882408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38327177587574507`, 0.029923508235575796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020558565549557822`, 
                "MeanCrossEntropy" -> 
                Around[0.38327177587574507`, 0.0423182311805343], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 882408, 
                "TrainingTime" -> 1.2870992522366111`|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.35435313401532587`, 0.026162924108051638`], 
                 "Accuracy" -> 
                 Around[0.8602959769418544, 0.016276096618821716`], 
                 "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35435313401532587`, 0.018499981052472317`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
                 Around[0.4905470789487266, 0.05942169230008629], 
                 "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 
                 2672, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -4.197660943845806, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 273552., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5949653673903932`, 0.05337852556796832], 
                   Around[3.769761211170389, 0.12190065068836999`]}, 
                 "AccuracyHistory" -> {
                   Around[0.549197732950539, 0.013394029354165352`], 
                   Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
                 Around[0.7442585992282589, 0.013337895880245353`], 
                 "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 
                 2632, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 308650.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7090566921048821, 0.029587871638874982`], 
                   Around[0.9267562156706394, 0.048804806717094945`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7339496000489554, 0.012070557593356287`], 
                   Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
                 Around[0.9791671208169963, 0.012128533944401654`], 
                 "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
                 "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
                 "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
                 "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.07118410180594256, 0.013542997191503502`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9791671208169963, 0.008576168597937634]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
                Around[0.07118410180594256, 0.01915269030340499], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 945064, 
                "TrainingTime" -> 6.2334652825440156`|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
                 Around[0.838474265252356, 0.01562338483938151], 
                 "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 
                 1100, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 
                 250, "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 845536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4150311982338223, 0.022874520429674614`]}, 
                 "AccuracyHistory" -> {
                   Around[0.838474265252356, 0.011047401365013764`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.9363303357963932`, 0.22063573174865092`], 
                 "Accuracy" -> 
                 Around[0.6016657435215405, 0.009931734042792198], 
                 "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 
                 2400, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -4.394526005243066, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.8628854898161876, "TrainingMemory" -> 
                 768069.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.7328302955198254`, 0.11030764480200886`], 
                   Around[3.1398303760729616`, 0.1343428411885501]}, 
                 "AccuracyHistory" -> {
                   Around[0.6013282055836575, 0.014050468348716146`], 
                   Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
                 Around[0.7771993076355267, 0.016090257916624478`], 
                 "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.4133613417100643`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1., "TrainingMemory" -> 768752, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0883077850611167`, 0.06546404015990553]}, 
                 "AccuracyHistory" -> {
                   Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
                Around[1.0883077850611167`, 0.09258013344187536], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 768752, 
                "TrainingTime" -> 16.33188643150958|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.06349687324568681, 0.020314194118190455`], 
                 "Accuracy" -> 
                 Around[0.9752187821898789, 0.013178658637319573`], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.1990832337140014`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 6.309573444801933, "TrainingMemory" -> 1031984, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06349687324568681, 0.014364304415312347`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9752187821898789, 0.009318718889391335]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
                 Around[0.5614696628952743, 0.02316984504064622], 
                 "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 
                 1900, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.375448364812931, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 588357.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.2425860137311924`, 0.09670887865815357], 
                   Around[3.472752094517207, 0.15761956845763322`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5412325518696653, 0.01645230430382249], 
                   Around[0.5817067739208833, 0.01550253065862414]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
                 Around[0.7822399753364762, 0.011053793618809461`], 
                 "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 
                 2632, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.09292339195906, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.9314427449080938, "TrainingMemory" -> 
                 599973.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.1299535489778723`, 0.07202244880796001], 
                   Around[1.862147339889153, 0.11678580277280175`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7898676324542127, 0.011253506706433129`], 
                   Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.42705750837440937`, 0.035076829136806445`], 
                 "Accuracy" -> 
                 Around[0.8446730233225903, 0.015135382766381485`], 
                 "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.5213181632194831, "TrainingSize" -> 250,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 668632, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.42705750837440937`, 0.024803063745157707`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
                Around[0.42705750837440937`, 0.035076829136806445`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
                "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.29713763668876286`, 0.029783149124946628`], 
                 "Accuracy" -> 
                 Around[0.8857231716276136, 0.013316951171936615`], 
                 "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.27080207566416914`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 518544, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.29713763668876286`, 0.02105986671133995]}, 
                 "AccuracyHistory" -> {
                   Around[0.8857231716276136, 0.00941650647840652]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
                 Around[0.4534728434064575, 0.03657154854139636], 
                 "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 
                 2200, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -4.7036563931676705`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.5848931924611134`, "TrainingMemory" -> 
                 372712., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.8582879282812748`, 0.09593272842945073], 
                   Around[4.168810776492888, 0.14832220789749126`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4184413958301533, 0.015453697183599058`], 
                   Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
                 Around[0.769971120234303, 0.0162893024591907], 
                 "EvaluationTime" -> 0.00006291890573589659, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2977572298050588`, 0.07725242580096887]}, 
                 "AccuracyHistory" -> {
                   Around[0.769971120234303, 0.01151827622969245]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
                Around[1.2977572298050588`, 0.1092514282939514], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 386192, 
                "TrainingTime" -> 25.884295625347566`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5879853515835944`, 0.14718023198397873`], 
                 "Accuracy" -> 
                 Around[0.7939162815913106, 0.015646642549432373`], 
                 "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -3.152069743372218, "TrainingSize" -> 50, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 600288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5879853515835944`, 0.10407214009248054`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
                 Around[0.5705716928210636, 0.02387696402198573], 
                 "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 
                 2100, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.803632164263322, "TrainingSize" -> 10, 
                 "TrainingTime" -> 5.444439372449127, "TrainingMemory" -> 
                 583613.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.6845044721043254`, 0.10447663667270932`], 
                   Around[4.364677185562806, 0.2100094842353753]}, 
                 "AccuracyHistory" -> {
                   Around[0.5492372585429602, 0.014247131834686502`], 
                   Around[0.591906127099167, 0.01628060211969826]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38151664752165954`, 0.03977608365046414], 
                 "Accuracy" -> 
                 Around[0.8740940349402928, 0.013875001085229821`], 
                 "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38151664752165954`, 0.028125938478286556`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8740940349402928, 0.009811107356336711]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00037881779653037317`, 
                "MeanCrossEntropy" -> 
                Around[0.38151664752165954`, 0.03977608365046414], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 683480, 
                "TrainingTime" -> 92.6247680155231|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2846789544300572`, 0.10135837559026044`], 
                 "Accuracy" -> 
                 Around[0.7374636238433064, 0.017014953179959547`], 
                 "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.6005267903937916`, "TrainingSize" -> 50,
                  "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 341168, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2846789544300572`, 0.07167119470992618]}, 
                 "AccuracyHistory" -> {
                   Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
                 Around[0.5152833374237896, 0.07249298936486862], 
                 "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 
                 2744, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -5.074385087421649, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 295925.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.5190643035821725`, 0.1028129894230038], 
                   Around[5.812425858174743, 0.191466359358563]}, 
                 "AccuracyHistory" -> {
                   Around[0.5871646538577457, 0.013267469359568705`], 
                   Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020244886234998508`, 
                "MeanCrossEntropy" -> 
                Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
                58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
                58.99948267602831|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
                 Around[0.8717062863197803, 0.01777595950885693], 
                 "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.10702789819239966`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 374688, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3301382275974658, 0.02068135393911543]}, 
                 "AccuracyHistory" -> {
                   Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
                 Around[0.7363490438369396, 0.017031507261842195`], 
                 "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.3231968082428875`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 338064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6791528095168373, 0.027387263849560993`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
                 Around[0.4863596829810406, 0.04278093185210315], 
                 "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.180492238404206, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5444439372449126, "TrainingMemory" -> 
                 322133.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.508549842629893, 0.04605766705211905], 
                   Around[3.771470810362135, 0.12018564135103059`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5280828090172973, 0.013434097226343747`], 
                   Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
                Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
                62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
                9.109108405185806|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5038386117534089, 0.041784890614198204`], 
                 "Accuracy" -> Around[0.828465928965194, 0.02654031530216917],
                  "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 
                 400, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.7882946404845459, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 528184, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5038386117534089, 0.029546379504437673`]}, 
                 "AccuracyHistory" -> {
                   Around[0.828465928965194, 0.018766836924992914`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
                 Around[0.3679296647759494, 0.07392752974250799], 
                 "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
                 449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.148424842980697, 0.03780978285236538], 
                   Around[1.4568966776552688`, 0.026077841742531138`]}, 
                 "AccuracyHistory" -> {
                   Around[0.2945557228909562, 0.012245543527860529`], 
                   Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
                 Around[0.6180757845356775, 0.05382602805907864], 
                 "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 
                 2632, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
                 461714.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.155425119141791, 0.02396130422338247], 
                   Around[1.0610392976248695`, 0.02621811203957636]}, 
                 "AccuracyHistory" -> {
                   Around[0.5650696245779578, 0.013556795434539574`], 
                   Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23257721592841687`, 0.03163453421313113], 
                 "Accuracy" -> 
                 Around[0.908886547057971, 0.024356212382520913`], 
                 "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 0.7369941836531197, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1045880, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23257721592841687`, 0.022368993661782865`]}, 
                 "AccuracyHistory" -> {
                   Around[0.908886547057971, 0.017222442939700294`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
                Around[0.23257721592841687`, 0.03163453421313113], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1045880, 
                "TrainingTime" -> 1.4937384274690055`|>, "Index" -> 10|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
                 Around[0.7457728338345587, 0.018472683364634448`], 
                 "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.7509502414499094`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 309112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8371599125387441, 0.047884777618598134`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
                 Around[0.8882989940963734, 0.013145309817848845`], 
                 "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.48100284988718467`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 469432, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2722926005782066, 0.022605846381320353`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8882989940963734, 0.009295137712999018]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04678344173247784, 0.020786249475512084`], 
                 "Accuracy" -> 
                 Around[0.9851396376350638, 0.010281268792086398`], 
                 "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 3.8798539588000582`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 972672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04678344173247784, 0.014698097959569912`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9851396376350638, 0.007269954882085916]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
                 Around[0.502464111857925, 0.07130486561817233], 
                 "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 
                 2200, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.6637320197127625`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299269.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.8332223163074313`, 0.08054167103388306], 
                   Around[4.86043648706169, 0.16818929238262642`]}, 
                 "AccuracyHistory" -> {
                   Around[0.572995990979411, 0.015538960918031978`], 
                   Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
                Around[3.3468294016845603`, 1.5153492244478233`], 
                "ModelMemory" -> 62416., "TrainingMemory" -> 
                299269.3333333333, "TrainingTime" -> 18.65727460278956|>, 
              "Index" -> 11|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
                 Around[0.762381947001795, 0.01642868812328819], 
                 "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -1.7030510878983651`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 600016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7752070403907262, 0.03017334558439825]}, 
                 "AccuracyHistory" -> {
                   Around[0.762381947001795, 0.011616836777975974`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.39447704061745437`, 0.03234768531334908], 
                 "Accuracy" -> 
                 Around[0.8594906763316973, 0.01476170763807768], 
                 "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 
                 1100, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.3625496870271967, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 675000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.39447704061745437`, 0.02287326764075762]}, 
                 "AccuracyHistory" -> {
                   Around[0.8594906763316973, 0.01043810357277798]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
                 Around[0.9455603955460657, 0.019279136977717354`], 
                 "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 1.404009915150804, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1142080, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15855325263059325`, 0.025484079405049796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
                 Around[0.5116939418989973, 0.07010685788967808], 
                 "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 
                 2400, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 586421.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.521906370483909, 0.03515613181787799], 
                   Around[1.5882755791735657`, 0.05563504596868172]}, 
                 "AccuracyHistory" -> {
                   Around[0.442311083421225, 0.014256465737770922`], 
                   Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
                Around[1.5550909748287374`, 0.04454750436345691], 
                "ModelMemory" -> 164368., "TrainingMemory" -> 
                586421.3333333333, "TrainingTime" -> 5.818068863066169|>, 
              "Index" -> 12|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9007091827219887, 0.030008702121127984`], 
                 "Accuracy" -> 
                 Around[0.6760965348587569, 0.018079481767156038`], 
                 "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.8723329888169609`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9007091827219887, 0.02121935676445673]}, 
                 "AccuracyHistory" -> {
                   Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.43111245312757496`, 0.025345577264303743`], 
                 "Accuracy" -> 
                 Around[0.8330426045067885, 0.015571490015669136`], 
                 "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.4088030140985044, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 364536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.43111245312757496`, 0.01792202955667676]}, 
                 "AccuracyHistory" -> {
                   Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.1842923793671783, 0.025304164192749383`], 
                 "Accuracy" -> 
                 Around[0.9457395297710746, 0.019169568233064083`], 
                 "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 891920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.1842923793671783, 0.01789274609295091]}, 
                 "AccuracyHistory" -> {
                   Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
                 Around[0.43385363675367183`, 0.011415114317526467`], 
                 "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 
                 2472, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -3.5149737403880033`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 273418.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.4396046101139186`, 0.029031135765925187`], 
                   Around[2.475712680707863, 0.06775654619883521]}, 
                 "AccuracyHistory" -> {
                   Around[0.439498971976867, 0.014905537896345295`], 
                   Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
                Around[1.9576586454108909`, 0.5187408468073508], 
                "ModelMemory" -> 58320., "TrainingMemory" -> 
                273418.6666666666, "TrainingTime" -> 4.386881933034051|>, 
              "Index" -> 13|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8419793893936219, 0.040743862542620725`], 
                 "Accuracy" -> 
                 Around[0.7373831716775224, 0.01693418574125903], 
                 "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.8856361050895067`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 782064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8419793893936219, 0.02881026149561968]}, 
                 "AccuracyHistory" -> {
                   Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
                 Around[0.8250320562814308, 0.01594299951984108], 
                 "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.6112985333219293, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 848080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4432056724888078, 0.02238507759095115]}, 
                 "AccuracyHistory" -> {
                   Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.16858329728652338`, 0.029069351611494675`], 
                 "Accuracy" -> Around[0.945560395546066, 0.01927913697771735],
                  "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 
                 276, "ModelMemory" -> 187664, "ModelUtility" -> 
                 1.2824675838731772`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.2589254117941673`, "TrainingMemory" -> 1207096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.16858329728652338`, 0.020555135649183976`]}, 
                 "AccuracyHistory" -> {
                   Around[0.945560395546066, 0.013632408492368258`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
                Around[0.16858329728652338`, 0.029069351611494675`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
                "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3249962292171797`, 0.12170206901231112`], 
                 "Accuracy" -> 
                 Around[0.793195580192614, 0.015828005629622638`], 
                 "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -2.7896299497840076`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 589096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3249962292171797`, 0.08605635828303838]}, 
                 "AccuracyHistory" -> {
                   Around[0.793195580192614, 0.011192090113365015`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 686536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00044256629018744604`, 
                "MeanCrossEntropy" -> 
                Around[0.3701221449474526, 0.03366489354688038], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 686536, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 15|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1227673790868702`, 0.10368611279141937`], 
                 "Accuracy" -> 
                 Around[0.757173277714323, 0.018196954510351714`], 
                 "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.342528378471589, "TrainingSize" -> 50, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 309656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1227673790868702`, 0.07331715346968586]}, 
                 "AccuracyHistory" -> {
                   Around[0.757173277714323, 0.012867189931212827`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33220140414624993`, 0.047853257302163214`], 
                 "Accuracy" -> 
                 Around[0.8965085805171233, 0.012697194170323252`], 
                 "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.07288974716187491, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 510104, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33220140414624993`, 0.03383736274022428]}, 
                 "AccuracyHistory" -> {
                   Around[0.8965085805171233, 0.00897827209987787]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.029497520149122013`, 0.01667491875741592], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 4.7583398302297795`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 39.810717055349734`, "TrainingMemory" -> 948200, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.029497520149122013`, 0.011790948129103553`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.2949671588281193`, 0.14749235577106196`], 
                 "Accuracy" -> 
                 Around[0.5835796437000327, 0.02088503617561304], 
                 "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -3.761313256061099, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 297120, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.2949671588281193`, 0.10429284493889672`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
                Around[2.2949671588281193`, 0.14749235577106196`], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 297120, 
                "TrainingTime" -> 58.99948267602831|>, "Index" -> 16|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
                 Around[0.7677501064780398, 0.00816276162917491], 
                 "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 
                 2664, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 
                 386088., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5973296386447973`, 0.09710009617968923], 
                   Around[1.6944960008299512`, 0.10490120341267964`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7682281016221508, 0.011537187632355594`], 
                   Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33249143642424983`, 0.02780494761566639], 
                 "Accuracy" -> 
                 Around[0.8613277396783116, 0.014507674452371017`], 
                 "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.05248807658590138, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 502672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33249143642424983`, 0.01966106700957443]}, 
                 "AccuracyHistory" -> {
                   Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04443140001711353, 0.021314953380441544`], 
                 "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.92776201569796, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 970336, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04443140001711353, 0.01507194807598534]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00046938966244621503`, 
                "MeanCrossEntropy" -> 
                Around[0.04443140001711353, 0.021314953380441544`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
                "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
                 Around[0.7384665234825579, 0.010719276135332273`], 
                 "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 
                 2432, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -1.9350890275488193`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.37788092188698263`, "TrainingMemory" -> 
                 378786.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7726332524190396, 0.028941631998749596`], 
                   Around[1.0060756456836646`, 0.05024424270156515]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324400373766513, 0.0120571885743892], 
                   Around[0.7444930095884645, 0.01307837056160318]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.34782344779765667`, 0.025712507033831242`], 
                 "Accuracy" -> 
                 Around[0.8557374599745653, 0.014686070676875251`], 
                 "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.34782344779765667`, 0.018181488084928872`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8557374599745653, 0.0103846201646034]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15276622770087278`, 0.028666652684449675`], 
                 "Accuracy" -> 
                 Around[0.9498135082589592, 0.018508440411731872`], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 93800, "ModelUtility" -> 
                 1.5673860415737628`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 907872, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15276622770087278`, 0.02027038450709391]}, 
                 "AccuracyHistory" -> {
                   Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.15276622770087278`, 0.028666652684449675`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
                "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7753042739299817, 0.039969593621796584`], 
                 "Accuracy" -> 
                 Around[0.7375401740439216, 0.01714466436223822], 
                 "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 
                 1300, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.637907986699601, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 461800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7753042739299817, 0.02826277069124294]}, 
                 "AccuracyHistory" -> {
                   Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35554695739060116`, 0.027033696117590978`], 
                 "Accuracy" -> 
                 Around[0.8470897173852533, 0.01508748965454944], 
                 "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08838018962147687, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 567400, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35554695739060116`, 0.01911570984528502]}, 
                 "AccuracyHistory" -> {
                   Around[0.8470897173852533, 0.01066846624581379]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15410934185340477`, 0.03040532289461026], 
                 "Accuracy" -> 
                 Around[0.9596068784743268, 0.016667152171683092`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 1.5363925902488362`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1024944, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15410934185340477`, 0.0214998100029455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.15410934185340477`, 0.03040532289461026], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1024944, 
                "TrainingTime" -> 2.891283046943182|>, "Index" -> 19|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.9025240498596048`, 0.17368396265702707`], 
                 "Accuracy" -> 
                 Around[0.7888324315844696, 0.015739599038312638`], 
                 "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -3.5329225623661613`, "TrainingSize" -> 50,
                  "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 780096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.9025240498596048`, 0.12281310777813492`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
                 Around[0.8854786750958584, 0.013351117434256547`], 
                 "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 
                 250, "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
                 837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6454807954277998, 0.062000766216747265`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8854786750958584, 0.009440665674180743]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00022514047861176898`, 
                "MeanCrossEntropy" -> 
                Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
                187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
                115.3099731077524|>, "Index" -> 20|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
                 Around[0.5296860458536663, 0.019284927181766578`], 
                 "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.44789502640578, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2036312536280331`, 0.01921988365429954]}, 
                 "AccuracyHistory" -> {
                   Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8399174549925484, 0.024903779896598206`], 
                 "Accuracy" -> 
                 Around[0.7369045920343117, 0.018395727422659554`], 
                 "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.7311181711686499`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 351208, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8399174549925484, 0.017609631642061807`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7369045920343117, 0.0130077436054219]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
                Around[0.8399174549925484, 0.024903779896598206`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 351208, 
                "TrainingTime" -> 2.4002626703166206`|>, "Index" -> 21|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
                 Around[0.7313061583954904, 0.017144680944532857`], 
                 "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.028995426006972, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 313112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9663976578750052, 0.05017890964418109]}, 
                 "AccuracyHistory" -> {
                   Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35008419981942934`, 0.024708646909891732`], 
                 "Accuracy" -> 
                 Around[0.8568009346457361, 0.014673031432912107`], 
                 "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, "ModelUtility" -> 
                 0.0029327369312612817`, "TrainingSize" -> 250, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 398384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35008419981942934`, 0.017471651783928475`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.042170347467092334`, 0.016000630897312476`], 
                 "Accuracy" -> 
                 Around[0.9907604816520923, 0.008121627376877738], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 825792, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.042170347467092334`, 0.011314154610752645`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9907604816520923, 0.00574285779246056]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
                 Around[0.5804592460589959, 0.018783072828788897`], 
                 "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
                 "ModelMemory" -> 58320, 
                 "ModelUtility" -> -3.4638943660534287`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.987919142262011, 0.07603787179768637]}, 
                 "AccuracyHistory" -> {
                   Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
                Around[1.987919142262011, 0.10753378955027475`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 299984, 
                "TrainingTime" -> 18.65727460278956|>, "Index" -> 22|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9403941167153582, 0.030071559648660914`], 
                 "Accuracy" -> 
                 Around[0.6590202792143492, 0.018327916017389055`], 
                 "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.9641702588327155`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 318200, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9403941167153582, 0.021263803748423883`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6590202792143492, 0.01295979370091334]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.45576172147997035`, 0.02603166210338864], 
                 "Accuracy" -> 
                 Around[0.8256280537105091, 0.015920374420882354`], 
                 "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.525479429825631, "TrainingSize" -> 250, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 420072, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.45576172147997035`, 0.01840716479886297]}, 
                 "AccuracyHistory" -> {
                   Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
                 Around[0.9385178062088241, 0.020368186136795634`], 
                 "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, "ModelUtility" -> 
                 1.0349935743091963`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 933232, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.20578142008052, 0.019371630008387233`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9385178062088241, 0.01440248253779802]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041974250697322877`, 
                "MeanCrossEntropy" -> 
                Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
                62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
                2.29662775876662|>, "Index" -> 23|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5041540185761222`, 0.12792697018320168`], 
                 "Accuracy" -> 
                 Around[0.7491330451581357, 0.01676873732368961], 
                 "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 
                 1332, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5041540185761222`, 0.09045802811319117]}, 
                 "AccuracyHistory" -> {
                   Around[0.7491330451581357, 0.01185728787351688]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3551338319540449, 0.027278187743878263`], 
                 "Accuracy" -> 
                 Around[0.8473263359267194, 0.015089820198610777`], 
                 "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 
                 250, "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3551338319540449, 0.01928859153217609]}, 
                 "AccuracyHistory" -> {
                   Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
                 Around[0.9895518014074794, 0.008620653342748424], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 101904, "ModelUtility" -> 
                 4.258968427388813, "TrainingSize" -> 1106, "TrainingTime" -> 
                 15.848931924611142`, "TrainingMemory" -> 932288, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.03734914821299343, 0.013125775259394882`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
                 Around[0.46102332820255726`, 0.018987327336901637`], 
                 "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.678346364097339, 0.08174114510413875]}, 
                 "AccuracyHistory" -> {
                   Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00029572208708069134`, 
                "MeanCrossEntropy" -> 
                Around[2.678346364097339, 0.11559943601018015`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 449640, 
                "TrainingTime" -> 18.983242383456506`|>, "Index" -> 24|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
                 Around[0.7762423210420635, 0.014329340894644918`], 
                 "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 
                 2432, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 605098.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8208265202024376, 0.05283642239438791], 
                   Around[1.4514603795294685`, 0.08835215155478726]}, 
                 "AccuracyHistory" -> {
                   Around[0.7878452988653784, 0.012263467049955281`], 
                   Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.2386147056327178, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 680424, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.06082621292123911, 0.019650473295384628`], 
                 "Accuracy" -> 
                 Around[0.9770146234585061, 0.012716008303818851`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.2838445796528624`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1099664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06082621292123911, 0.013894982920691632`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9770146234585061, 0.008991575701254757]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.06082621292123911, 0.019650473295384628`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
                "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
                 Around[0.7627369072147341, 0.011750893611347561`], 
                 "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 
                 2664, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 468021.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0095607638414457`, 0.05525446612282441], 
                   Around[1.1842784010456864`, 0.07075909436910463]}, 
                 "AccuracyHistory" -> {
                   Around[0.7543389604118015, 0.011774622135660197`], 
                   Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35804951443350097`, 0.026655439166062223`], 
                 "Accuracy" -> 
                 Around[0.8488505284229317, 0.014960827173881168`], 
                 "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35804951443350097`, 0.018848241789828087`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 3.3814381242084908`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 959184, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.05985945373078884, 0.01350088664315196]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.05985945373078884, 0.01909313699480727], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 959184, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 26|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3358149900117273`, 0.12222648201044096`], 
                 "Accuracy" -> 
                 Around[0.7862467400481814, 0.01602150238466662], 
                 "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 
                 1300, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.825724619026342, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 781952, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3358149900117273`, 0.08642717427015836]}, 
                 "AccuracyHistory" -> {
                   Around[0.7862467400481814, 0.01132891298099421]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
                 Around[0.8858609662855659, 0.013283721779471411`], 
                 "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3445805711537584`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 845640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6317653258849528, 0.05961837551263815]}, 
                 "AccuracyHistory" -> {
                   Around[0.8858609662855659, 0.009393009749659667]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
                Around[0.6317653258849528, 0.08431311521662489], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 845640, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 27|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1154980744941485`, 0.034353683515180075`], 
                 "Accuracy" -> 
                 Around[0.5814498430933545, 0.019088672339769665`], 
                 "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.347503593111097, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 386152, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1154980744941485`, 0.02429172257232034]}, 
                 "AccuracyHistory" -> {
                   Around[0.5814498430933545, 0.01349772965529921]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5546183182382579, 0.026395794652472045`], 
                 "Accuracy" -> 
                 Around[0.8135685469111952, 0.016337844310188795`], 
                 "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.9566176476083332, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 451760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5546183182382579, 0.01866464539357059]}, 
                 "AccuracyHistory" -> {
                   Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
                 Around[0.9299868058195125, 0.021652291921408842`], 
                 "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.7601699845170374, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 918608, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23091679939394155`, 0.02259715579830503]}, 
                 "AccuracyHistory" -> {
                   Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041019731090850185`, 
                "MeanCrossEntropy" -> 
                Around[0.23091679939394155`, 0.0319572042010208], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 918608, 
                "TrainingTime" -> 1.3087789598585713`|>, "Index" -> 28|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
                 Around[0.7681507374150377, 0.016318407378901893`], 
                 "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.137795388853302, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 386256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9948450772059008, 0.05585599851339633]}, 
                 "AccuracyHistory" -> {
                   Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
                 Around[0.8617176768356566, 0.014429545856984168`], 
                 "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.052922354317971765`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 497976, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3326799470819294, 0.018734832919486785`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07021180454193646, 0.026976812427827776`], 
                 "Accuracy" -> 
                 Around[0.9710277520559213, 0.014250347362805026`], 
                 "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
                 "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.0477874334351047`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 966920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.07021180454193646, 0.01907548700251455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
                Around[0.07021180454193646, 0.026976812427827776`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
                 Around[0.7911413261337976, 0.015627505897240296`], 
                 "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 
                 2332, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
                 774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.7558990910227044, 0.037970217663081576`], 
                   Around[0.9594474328704059, 0.07043483754789011]}, 
                 "AccuracyHistory" -> {
                   Around[0.7779594452749371, 0.011355683387275856`], 
                   Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
                 Around[0.8389781853611775, 0.015335274506302916`], 
                 "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4042669758821077, 0.022272205006115358`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.10406413363415194`, 0.020899367441681686`], 
                 "Accuracy" -> 
                 Around[0.9736914348517792, 0.013553043838557063`], 
                 "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276,
                  "ModelMemory" -> 187664, "ModelUtility" -> 
                 2.2363622110324752`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 2.51188643150958, "TrainingMemory" -> 1218600, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.10406413363415194`, 0.014778084440522468`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9736914348517792, 0.009583449203962254]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
                Around[0.10406413363415194`, 0.020899367441681686`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
                "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 
         1382, "PreprocessorEvaluationTime" -> 3.9375*^-6, 
         "PreprocessorMemory" -> 94088, "InputDimension" -> 18, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.869215141896656`16.340197867844974*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
             "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
             "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 
             40|>, <|"TrainingSizes" -> 250, "TimeBudgets" -> 
             138.0795097872658, "ElapsedTimes" -> 151.156252, 
             "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
             "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 
             21|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, 
       "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              2846111867015398573|>, 
            "f2" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, 
              "ID" -> 41728420326286313|>, 
            "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                Interval[{5, 
                  DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
            "f4" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
              536027689597629633|>, 
            "f5" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
              5753609278033805624|>, 
            "f6" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
              8080186329754682489|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
         "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
         "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|"Input" -> {{"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "high", 4, 4, "medium", "low"}, {
        "medium", "medium", 2, 2, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "high", "very high", 2, 4, "large", "low"}, {
        "high", "high", 4, 2, "small", "medium"}, {
        "low", "high", 3, 4, "large", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 4, "small", "medium"}, {
        "medium", "high", 4, 2, "medium", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "high", 3, 4, "small", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "high", 2, 2, "large", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "low", 4, 4, "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "medium"}, {
        "very high", "very high", 3, 4, "small", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "low", 4, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "medium", "very high", 3, 2, "small", "medium"}, {
        "high", "very high", 2, 2, "medium", "high"}, {
        "high", "medium", 4, 2, "large", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 4, "medium", "high"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "medium", "high", 4, 4, "medium", "medium"}, {
        "low", "high", 3, 2, "medium", "high"}, {
        "medium", "high", 2, 4, "large", "low"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "medium", 2, 2, "small", "medium"}, {
        "low", "very high", 2, 2, "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "low", 4, 2, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "medium", 4, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "high", 2, 4, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "very high", "low", 3, 4, "small", "high"}, {
        "low", "high", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "medium", "very high", 2, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "medium", 3, 2, "medium", "low"}, {
        "high", "high", 2, 4, "large", "high"}, {
        "high", "medium", 2, 4, "medium", "high"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "medium", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "high", 4, 4, "large", "medium"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "very high", 4, 4, "large", "low"}, {
        "low", "very high", 2, 2, "medium", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "medium", 2, 4, "small", "high"}, {"low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "medium", 3, 4, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "very high", "medium", 4, 4, "large", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {
        "low", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 4, "large", "high"}, {
        "high", "low", 3, 4, "medium", "high"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 2, 4, "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "low", "medium", 4, 4, "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 3, 4, "small", "medium"}, {
        "high", "medium", 2, 2, "large", "medium"}, {
        "medium", "high", 4, 2, "medium", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 2, 2, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "medium", 3, 4, "small", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "medium", "medium", 3, 4, "medium", "medium"}, {
        "high", "low", 2, 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "low", "medium", 3, 4, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 4, 2, "small", "high"}, {
        "very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "very high", 2, 2, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "low", 2, 4, "large", "medium"}, {
        "low", "medium", 4, 4, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {
        "high", "very high", 3, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "high", 4, 2, "medium", "low"}, {
        "high", "medium", 4, 4, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "medium", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "low", 4, 2, "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 3, 4, "large", "medium"}, {
        "very high", "medium", 4, 2, "large", "high"}, {
        "high", "high", 4, 2, "large", "medium"}, {
        "high", "medium", 2, 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "high", 4, 4, "small", "low"}, {
        "low", "low", 2, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "medium", 2, 4, "medium", "medium"}, {
        "medium", "medium", 3, 2, "large", "low"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "very high", 3, 2, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 4, "small", "high"}, {
        "low", "medium", 4, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "low", 4, 2, "small", "medium"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "very high", 3, 4, "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "large", "low"}, {
        "very high", "low", 4, 4, "large", "high"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 4, "medium", "high"}, {
        "medium", "very high", 4, 4, "small", "high"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "low", 3, 2, "large", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "very high", 4, 4, "large", "medium"}, {
        "high", "high", 3, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 2, 2, "large", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "medium", 4, 4, "large", "medium"}, {
        "medium", "very high", 2, 4, "medium", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 2, 2, "small", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 2, 2, "medium", "medium"}, {
        "medium", "low", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 2, "large", "high"}, {
        "very high", "very high", 4, 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 4, "small", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "medium", "medium", 2, 2, "medium", "high"}, {
        "very high", "very high", 4, 4, "medium", "high"}, {
        "medium", "very high", 4, 2, "large", "high"}, {
        "medium", "very high", 4, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "large", "medium"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 2, "large", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {
        "low", "high", 2, 4, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 4, "small", "medium"}, {
        "high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "high", "low", 2, 4, "large", "low"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 4, "medium", "medium"}, {
        "high", "high", 2, 4, "small", "medium"}, {
        "very high", "medium", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "medium", "low"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "medium", "low"}, {
        "low", "low", 4, 4, "small", "low"}, {
        "very high", "low", 3, 4, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 3, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 2, 2, "medium", "high"}, {
        "very high", "very high", 3, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "high", 4, 2, "medium", "high"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 4, 2, "medium", "low"}, {
        "medium", "very high", 4, 2, "small", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 4, 2, "small", "low"}, {
        "medium", "high", 3, 2, "medium", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "high", 3, 2, "large", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "very high", 2, 2, "medium", "medium"}, {
        "very high", "low", 2, 2, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "very high", "low", 2, 4, "small", "low"}, {
        "low", "low", 2, 2, "medium", "high"}, {
        "medium", "medium", 4, 4, "small", "low"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "high", 3, 2, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "very high", "very high", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 2, "medium", "low"}, {
        "medium", "high", 2, 2, "small", "medium"}, {
        "medium", "medium", 2, 4, "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "low", "very high", 3, 4, "medium", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "very high", "very high", 3, 4, "large", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "high", "low", 3, 2, "medium", "high"}, {
        "low", "high", 2, 4, "large", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "low", 2, 4, "small", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 3, 2, "large", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 4, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "low"}, {
        "high", "medium", 4, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "medium"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "low", 3, 2, "large", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "high"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}}, 
      "Output" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}|>, 
    "Predictions" -> {
     "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
      "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", "very good",
       "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", "very good", 
      "very good", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "very good", "good", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", "good", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable"}, 
    "LogProbabilities" -> CompressedData["
1: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
9XRNEKE4i9l9otgfv2sXmh9tWi3aJ2iuwyjz1xX9GQr7/Y8edMqmSY9Xb74y
Qe4LifGmRe9TrIDgYwevMsn2jZP+Q/KV79WkyLdrV4lq/6iarrqf+dxG2X+w
rwvQvjA9aCaan8LjBmX/bC8eTeyfn95/Sii1h9v9lwQ2JSzYk7ls64/lZ3GC
ywp2I/nwX55D+4eQfmc+Zfylrmh/hMLlKG+VrxycQ5Ff6RWUl9eNWaGKY2uW
UOJX178abAg/srQ/e/1k2Lbwn31rroaDb22EVStTghM84N0KZDe0bSbo/Mi9
d49yPhKm8NJhx+Ix7R3fXEnETgn8QefC1dPbF3vjd2oNFK1fgqHvR7X5Cz07
yPc/HhttFA7HTRR5/sebcIIb7roeCpn6hdmm+SG484C1LLbNFUgcbHED0/xR
dTabkV8rpt9HcUDuFknZ//sORiG5gkkIqmdNMqHEf/EKrUhYRNjprko/8CT4
2tRwmN1P2PeDFAnBBexGdP8mZ2HIPoTfmin6eR62NxQYPVr9k+g38a6dAobB
BkcgEHviOxm+R7HMuM984MXAXumze1Z49js9zpS3bkAgI221N4kyzi3V/UmW
yj/prnkU/5exytD85ZdxFF/5qwLU9QvSEnwGvH82qPxaKpOMm4CxLmWHAzMY
M3601YtEr29PfeAeuSGUBUmMCPszmBkGVhh2fohNAIm/luEBwDX9eGtF9VPc
+UjI+otfbMCs9cAbZaAHicebP/mAR1VHTNCaSbCn5Vus2UwmiUazA91BcLna
bvySf3G6s7whU28SEBg+bZcdCE0VY2PnuEOyr0auRqASf629RjjXZiq+bW8i
M/gWEUf3JooOTfUgkX9RjPJ/2qETyG7kzRaU/I7uvxHZLytyEpK/YkIUxb+x
NtdY8HOHiSbdDPjDnCdeVxAOZ8f8WluknYET5e0p3T4w85/K3NcXVuBmaVG5
wGMAgcmuo70RytYj/82pK0FxgtHwmaJf2dgJaNy6hyr9CJ7Pptz/iHz4CXBm
FNalxJnQrodxb5qHAztAqRxxpkZCcFpys+r++nUDiiv0BO8U9efvvfBG66lc
4o5QXH9cPT4JTCreciCK91W5kvafRGepBuOS1BsI7JJN8yMxy+SRB9meM1Ib
+a186GFKfBO1rUfxJYNvi/yUwVgXrb7/idrdUfwWrKlX7Q8nqfdPhzcZRkPD
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
     "], "CountMatrix" -> {{80, 0, 0, 2, 0}, {0, 13, 0, 0, 0}, {1, 0, 238, 0, 
     0}, {0, 0, 0, 12, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwt0KFOAgEAgOETvHndYnAyt2MGNpkkZYZjYzNoACYEIDhnMEExa3Qjsjkf
gAew6IZuBhPB4pwmghQ3SRJsBv0C4at/+NePu7XOQhAEFUKWiFhljZgsG+TY
pMA2O+ySUKLMPgfzXpU6TVq0OeKEU84454JLevS54poBN9xyx5B7HnjkiRHP
vPDKG++M+WDCJ19M+WbGD7/8kTIgzSIhEcuskCEmS54tChRJ2OOQBv+qkSTf

       "], {}, {}, {142, 188}, {}}, {{}, {19, 21, 27, 49, 62, 66, 70, 99, 109,
        207, 235, 250, 266}, {}, {}, {}}, {{107}, {}, CompressedData["
1:eJwl0ulrDgAAwOF3aBq7rNlsjL1b7bKx2oWZxRqzmc07bFOUFUXaHLkpdxQh
Uu4jc5Oj+IZcIZSUK5QjvqCQUMizfHj6/QO/YEtbqDUsEAh8pqOd6EwXwomg
G5FEEU0MsfQgjngSSKQXSSSTQj9SCZJGOhlkkU0OueQxkHwKKKSIYkoYQill
lFNBJaOooppaxlJHiAbGM5FGmmhmMlOYSgvTmM4MZjKLVtqYzRzmMo/5LGAh
i1jMEpayjOWsYCWrWM0a1rKO9WxgI5vYzBa2so3t7GAnu9jNHvayj/0c4CCH
OEw7RzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7zgIc8
4jFPeMoznvOCl7ziNW94yzve84GPfAr8f+8LX/nGd37wk1/85g9/6Zg0jHC6
EkF3IokimhhiiSOeniSQSBLJ9KYPKfQllSBppJNBJllkk0N/csljAPkUUEgR
xZQwiMGUMpQyhlHOcEZQQSUjqWI01dQwhlrqqGccIRqYQCNNNDOJf4h0Y6U=

       "], {}, {}}, {{}, {}, {}, {11, 73, 95, 103, 139, 152, 187, 234, 246, 
       273, 324, 334}, {}}}, 
    "ExtendedClasses" -> {"acceptable", "good", "unacceptable", "very good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006979190751445086, "SingleEvaluationTime" -> 
    0.00704475, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{3.86896617348654*^9, 3.868966311492532*^9, 
  3.8689668453138514`*^9, 3.869211547634626*^9},
 CellLabel->
  "Out[422]=",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],

Cell[BoxData[
 TemplateBox[{"753.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.868966455151699*^9, 3.868966522419289*^9, {3.868966572943582*^9, 
   3.868966625736467*^9}, 3.868966851157722*^9, 3.8692115560464487`*^9, 
   3.8692119399774446`*^9},
 CellLabel->
  "Out[438]=",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 3.868447512030362*^9}, {3.868964810263049*^9, 
  3.868964810772952*^9}},ExpressionUUID->"d293971e-29a8-48c6-9378-\
634a3d38a3fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"softWeights", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.868598558993527*^9, 3.8685985805202436`*^9}},
 CellLabel->
  "In[424]:=",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"softWeights", ",", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.868598583187772*^9, 3.8685985949050713`*^9}},
 CellLabel->
  "In[425]:=",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.5459999999999999], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.5459999999999999], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-0.05, 0}, {0., 13785.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{37.50666783426742, 
           52.332901548511536`}, {-99.32799274165829, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 13785]& ,
        TagBoxNote->"13785"],
       StyleBox["13785", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[13785, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0., 0}, {0.05, 537.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{51.832901548511536`, 66.65913526275565}, {
           82.02400202377434, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 537]& ,
        TagBoxNote->"537"],
       StyleBox["537", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[537, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.05, 0}, {0.1, 649.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{66.15913526275565, 80.98536897699978}, {
           80.49083298590233, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 649]& ,
        TagBoxNote->"649"],
       StyleBox["649", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[649, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.1, 0}, {0.15, 413.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{80.48536897699978, 95.31160269124389}, {
           83.72143917284693, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 413]& ,
        TagBoxNote->"413"],
       StyleBox["413", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[413, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.15, 0}, {0.2, 486.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{94.81160269124389, 109.63783640548802`}, {
           82.72214149637678, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 486]& ,
        TagBoxNote->"486"],
       StyleBox["486", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[486, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.2, 0}, {0.25, 406.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{109.13783640548802`, 123.96407011973213`}, {
           83.81726223771393, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 406]& ,
        TagBoxNote->"406"],
       StyleBox["406", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[406, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.25, 0}, {0.3, 436.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{123.46407011973213`, 138.29030383397625`}, {
           83.4065919597125, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 436]& ,
        TagBoxNote->"436"],
       StyleBox["436", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[436, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.3, 0}, {0.35, 298.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{137.79030383397625`, 152.61653754822038`}, {
           85.2956752385191, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 298]& ,
        TagBoxNote->"298"],
       StyleBox["298", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[298, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.35, 0}, {0.4, 467.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{152.11653754822038`, 166.9427712624645}, {
           82.98223267244435, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 467]& ,
        TagBoxNote->"467"],
       StyleBox["467", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[467, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.4, 0}, {0.45, 430.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{166.4427712624645, 181.2690049767086}, {
           83.48872601531278, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 430]& ,
        TagBoxNote->"430"],
       StyleBox["430", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[430, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.45, 0}, {0.5, 748.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{180.7690049767086, 195.59523869095273`}, {
           79.1356210684976, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 748]& ,
        TagBoxNote->"748"],
       StyleBox["748", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[748, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.5, 0}, {0.55, 399.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{195.09523869095273`, 209.92147240519685`}, {
           83.91308530258094, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 399]& ,
        TagBoxNote->"399"],
       StyleBox["399", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[399, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.55, 0}, {0.6, 249.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{209.42147240519685`, 224.24770611944095`}, {
           85.96643669258809, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 249]& ,
        TagBoxNote->"249"],
       StyleBox["249", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[249, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.6, 0}, {0.65, 199.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{223.74770611944095`, 238.5739398336851}, {
           86.65088715592381, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 199]& ,
        TagBoxNote->"199"],
       StyleBox["199", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[199, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.65, 0}, {0.7, 162.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{238.0739398336851, 252.9001735479292}, {
           87.15738049879225, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 162]& ,
        TagBoxNote->"162"],
       StyleBox["162", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[162, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.7, 0}, {0.75, 126.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{252.4001735479292, 267.2264072621733}, {
           87.65018483239398, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 126]& ,
        TagBoxNote->"126"],
       StyleBox["126", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[126, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.75, 0}, {0.8, 73.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{266.7264072621733, 281.5526409764175}, {
           88.37570232352984, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 73]& ,
        TagBoxNote->"73"],
       StyleBox["73", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[73, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.8, 0}, {0.85, 94.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{281.0526409764175, 295.8788746906616}, {
           88.08823312892883, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 94]& ,
        TagBoxNote->"94"],
       StyleBox["94", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[94, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.85, 0}, {0.9, 86.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{295.3788746906616, 310.2051084049057}, {
           88.19774520306254, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 86]& ,
        TagBoxNote->"86"],
       StyleBox["86", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[86, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.9, 0}, {0.95, 69.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{309.7051084049057, 324.53134211914977`}, {
           88.43045836059669, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 69]& ,
        TagBoxNote->"69"],
       StyleBox["69", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[69, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.95, 0}, {1., 19.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{324.03134211914977`, 338.8575758333939}, {
           89.11490882393241, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 19]& ,
        TagBoxNote->"19"],
       StyleBox["19", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[19, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{1., 0}, {1.05, 2397.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{338.3575758333939, 353.1838095476381}, {
           56.56244478768552, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2397]& ,
        TagBoxNote->"2397"],
       StyleBox["2397", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2397, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.07200000000000001, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-0.05, 1.05}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.868598587213368*^9, 3.868598595534347*^9}, 
   3.8685995277293787`*^9, 3.868600221413623*^9, 3.868602949041443*^9, 
   3.868604296907655*^9, 3.8686706335951767`*^9, 3.868672097574623*^9, 
   3.868681481840914*^9, 3.868947735099625*^9, 3.868948276385453*^9, 
   3.868959188370422*^9, 3.868961360146255*^9, 3.868963094406687*^9, 
   3.868965910434655*^9, 3.8690319681917677`*^9, 3.869034213800087*^9, 
   3.8690403778000517`*^9, 3.869042975607337*^9, 3.869043303143322*^9, 
   3.8691056830996943`*^9, 3.869107210252901*^9, 3.8692115670096397`*^9},
 CellLabel->
  "Out[425]=",ExpressionUUID->"dcf617e1-666a-4ea3-80b4-7ca21dd80c85"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 779, 16, 59, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1601, 48, 202, 3, 29, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1806, 53, 28365, 632, 313, "Output",ExpressionUUID->"a8160bde-1394-4ad9-99de-aba1517fc23d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30208, 690, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[30437, 698, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[30905, 709, 127718, 2374, 652, "Output",ExpressionUUID->"742bfa1a-6eda-4c65-ab3c-05c3cdb241be"]
}, Open  ]],
Cell[158638, 3086, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167168, 3293, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[167488, 3300, 2756, 68, 154, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[170247, 3370, 1775, 41, 195, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172059, 3416, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[172417, 3424, 5472, 87, 133, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[177892, 3513, 1445, 27, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[179340, 3542, 1095, 25, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[180472, 3572, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[180830, 3580, 2088, 38, 133, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182955, 3623, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[183414, 3632, 2099, 42, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[185538, 3678, 1078, 19, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[186619, 3699, 546744, 9924, 495, "Output",ExpressionUUID->"f784b65e-f0cc-4e79-80a3-c13f939e2254"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[733412, 13629, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[733922, 13639, 923, 16, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[CellGroupData[{
Cell[734870, 13659, 1242, 22, 51, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[736115, 13683, 4213, 89, 137, "Output",ExpressionUUID->"5bf35833-1da5-4105-b995-048659206436"]
}, Open  ]],
Cell[CellGroupData[{
Cell[740365, 13777, 1152, 27, 51, "Input",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],
Cell[741520, 13806, 4038, 87, 137, "Output",ExpressionUUID->"bf396ce6-df03-41b3-8ec8-fd2bba9b1fc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[745595, 13898, 574, 15, 32, "Input",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],
Cell[746172, 13915, 541, 9, 44, "Output",ExpressionUUID->"1276783e-9e31-4a52-9faf-8696d0400c71"]
}, Open  ]],
Cell[746728, 13927, 424, 8, 29, "Input",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[747189, 13940, 412, 6, 69, "Chapter",ExpressionUUID->"85881d34-aa2c-47a4-9cef-231d0c092462"],
Cell[CellGroupData[{
Cell[747626, 13950, 702, 15, 29, "Input",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],
Cell[748331, 13967, 215647, 3688, 68, "Output",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[964015, 17660, 346, 7, 29, "Input",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],
Cell[964364, 17669, 313627, 5620, 495, "Output",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1278028, 23294, 368, 7, 29, "Input",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],
Cell[1278399, 23303, 377, 8, 67, "Output",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1278825, 23317, 541, 8, 69, "Chapter",ExpressionUUID->"d293971e-29a8-48c6-9378-634a3d38a3fe"],
Cell[1279369, 23327, 322, 8, 29, "Input",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],
Cell[CellGroupData[{
Cell[1279716, 23339, 281, 6, 29, "Input",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],
Cell[1280000, 23347, 16902, 495, 254, "Output",ExpressionUUID->"dcf617e1-666a-4ea3-80b4-7ca21dd80c85"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

