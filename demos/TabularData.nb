(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    428836,       8268]
NotebookOptionsPosition[    425347,       8203]
NotebookOutlinePosition[    425785,       8220]
CellTagsIndexPosition[    425742,       8217]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["DifferentiableHardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "DifferentiableHardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardeningLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardeningLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralLTEK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNeuralLTEK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardWeightSize", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardWeightSize", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomUniformSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "RandomUniformSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "DifferentiableHardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBalanced", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "InitializeBalanced", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Require", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "Require", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "DifferentiableHardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNeuralNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBiasToOne", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "InitializeBiasToOne", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "SoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["ExtractWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "ExtractWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanExpression", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNetBooleanExpression", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNeuralNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBiasToZero", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "InitializeBiasToZero", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Soften", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "Soften", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "GetWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNetBooleanFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNeuralNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeToConstant", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "InitializeToConstant", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftWeightSize", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "SoftWeightSize", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNetFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LogisticClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "LogisticClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SpaceSaving", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "SpaceSaving", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClassificationLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardClassificationLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralReshapeLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNeuralReshapeLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "NeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["HardClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralChain", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNeuralChain", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "NeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["HardDropoutLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardDropoutLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralCount", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNeuralCount", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["RandomBalancedNormalSoftBits", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "RandomBalancedNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralExactlyK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardNeuralExactlyK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "HardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomNormalSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-ec51ac85-f724-4169-8845-fd90a6123181", {
                   "RandomNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{
  3.86479111604138*^9, 3.8647911657240562`*^9, 3.864791620800887*^9, 
   3.86479194597997*^9, 3.86479198092934*^9, 3.864792204697258*^9, 
   3.864792687703233*^9, 3.864793105592959*^9, 3.864793526801218*^9, 
   3.864793732850697*^9, 3.864794507927494*^9, 3.864796071752219*^9, 
   3.864825438485825*^9, 3.864825531891514*^9, 3.8648260962141314`*^9, 
   3.864830162877289*^9, 3.8648755408909893`*^9, 3.865049480919162*^9, 
   3.865050046751976*^9, 3.865051042066378*^9, 3.8650523426134*^9, 
   3.8650543558693867`*^9, 3.865058337414798*^9, 3.8650584086343327`*^9, 
   3.86505947338*^9, 3.86506885830449*^9, 3.865397062515942*^9, 
   3.86539822002991*^9, 3.865414037240362*^9, 3.865415448442546*^9, 
   3.865415610582356*^9, 3.8654172214829617`*^9, 3.865417469191354*^9, 
   3.865419590403018*^9, 3.865420075554387*^9, 3.865428054175325*^9, 
   3.8654793173710623`*^9, 3.8655665906709213`*^9, 3.865591995941038*^9, 
   3.865658579968223*^9, 3.865772215681147*^9, 3.865779562552833*^9, 
   3.8658370145359364`*^9, 3.86584060155225*^9, 3.8659992094486027`*^9, 
   3.866003652107215*^9, 3.8660161651613417`*^9, 3.8661754677644978`*^9, 
   3.866258657623454*^9, 3.866285693609187*^9, 3.86635057486532*^9, 
   3.866512485808078*^9, 3.866512816932197*^9, 3.866553529720395*^9, 
   3.8666025113336687`*^9, 3.866606144536639*^9, 3.866608546326232*^9, 
   3.866609704076623*^9, 3.8666137219288273`*^9, 3.86671285229326*^9, 
   3.866788776837541*^9, 3.866788812552528*^9, 3.866794689702251*^9, 
   3.8667979035574636`*^9, 3.8667996941084146`*^9, 3.866800686995532*^9, 
   3.866801936715271*^9, 3.866865563143631*^9, 3.8671595128431797`*^9, 
   3.867322056244096*^9, 3.8674794507502613`*^9, 3.8675828633257*^9, 
   3.867669743397482*^9, 3.867732450434094*^9, 3.867751859422694*^9, 
   3.867752571591299*^9, 3.867811509870346*^9, 3.8678117360040903`*^9, 
   3.8678203831872883`*^9, 3.867843695133718*^9, 3.867850373374954*^9, 
   3.86800725388065*^9, 3.868015027015581*^9, 3.868070609148181*^9, 
   3.8680707782820997`*^9, 3.868071504515008*^9, 3.868078566976554*^9, 
   3.868079276409031*^9, 3.8680936161674767`*^9, 3.868332595482695*^9, 
   3.868343297990016*^9, {3.868434780605877*^9, 3.86843479524651*^9}, 
   3.868445566107071*^9, 3.868519876174618*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"dd9be02a-3bb0-4b80-9d79-92e39b3e3885"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11074767698297934000987696449997714507361477861051676338728], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11074767698297934000987696449997714507361477861051676338728,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"ea390a55-8630-4d7d-b137-afb4c7c2b40f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", "featureValues"}], "\[IndentingNewLine]", "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", "\[IndentingNewLine]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[IndentingNewLine]", 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"100", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"HardNeuralNOR", "[", 
          RowBox[{"classificationLayerSize", ",", "classificationLayerSize"}],
           "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"testData", ",", 
          RowBox[{"UpTo", "[", "1000", "]"}]}], "]"}], ",", 
        RowBox[{"\"\<Interval\>\"", "->", "10"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}},
 CellLabel->
  "In[521]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainedSoftNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<TrainedNet\>\"", "->", 
       RowBox[{"NetDelete", "[", 
        RowBox[{
         RowBox[{"NetFlatten", "[", 
          RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}], ",", 
         "\"\<Loss/Error\>\""}], "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"trainedSoftNet", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "Net",ExpressionUUID->"80c26e1f-3dec-4512-a7ff-e8ee2a3f41e5"],
                
                TextCell["Net"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"91.3", "1.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    91.3294797687861290569`3., 1.5150205451723284256`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"70.2", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    70.2312138728323702708`3., 2.4617055388677187011`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.7817933784653703366`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0306410752865795`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.7205112278922113367`3.", "\", \"", 
                   "0.8430755290385293366`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.7205112278922113367`3., 
                   ", ", 0.8430755290385293366`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.2461647952608762013`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0391832891402610767`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", "0.167798216980354048`3.",
                    "\", \"", "0.3245313735413983824`3.", "\"]\""}, 
                  "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.167798216980354048`3., 
                   ", ", 0.3245313735413983824`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"3.61`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.93`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2KPT+64dyH387K39t+sRkzfceW0fscp2mnLl
U3tuedbLnCnv7L9+XZQ3c+tb+yxjje3m7q/s399cs2tx0lv7C68cZ3x58dK+
MehlpWfqAwxzYfTTX0kLylTf2X979pdB9eQb+4fvNi3TffDcXk7m8Zf6h6/t
0zZN4bbKfWy/Zm5z3FmhXTjtxWW+jceHR4fk39oz79slz3b3hT2Tatn2C89u
20/rf7lxyuK39kZTGgSi7r2y9zK83jH18SOc/oWZ97BKZJ37w1v2DCgA096P
WmYfNIH+0QwV6wxKem7v1vCyP1T0Gk53AgCUC5tx
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["229", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "229", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9423868312757202`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9703389830508474`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{229, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9423868312757202}], 
                    Row[{"FScore = ", 0.9703389830508474}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["9", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "9", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6428571428571429`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.5`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.5625`"}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{9, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.6428571428571429}], 
                    Row[{"Recall = ", 0.5}], 
                    Row[{"FScore = ", 0.5625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0273972602739726`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.0273972602739726}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.21428571428571427`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.25`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "very good", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.21428571428571427`}], 
                    Row[{"Row fraction = ", 0.25}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["14", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.15384615384615385`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.05761316872427984`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{14, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.15384615384615385`}], 
                    Row[{"Row fraction = ", 0.05761316872427984}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.06593406593406594`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.3333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.06593406593406594}], 
                    Row[{"Row fraction = ", 0.3333333333333333}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["70", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "70", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7692307692307693`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.958904109589041`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8536585365853657`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{70, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.7692307692307693}], 
                    Row[{"Recall = ", 0.958904109589041}], 
                    Row[{"FScore = ", 0.8536585365853657}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.01098901098901099`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.08333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.01098901098901099}], 
                    Row[{"Row fraction = ", 0.08333333333333333}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.25`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.16666666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.25}], 
                    Row[{"Row fraction = ", 0.16666666666666666`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.08333333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0136986301369863`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.08333333333333333}], 
                    Row[{"Row fraction = ", 0.0136986301369863}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["8", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "8", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{8, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.6666666666666666}], 
                    Row[{"Recall = ", 0.6666666666666666}], 
                    Row[{"FScore = ", 0.6666666666666666}]}], "Tooltip"]& ]}, 
                   
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "243", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9423868312757202`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{243, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9423868312757202}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "18", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.5`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{18, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.5}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "73", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.958904109589041`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{73, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.958904109589041}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.6666666666666666}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "229", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{229, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6428571428571429`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{14, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.6428571428571429}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "91", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.7692307692307693`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{91, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.7692307692307693}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6666666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.6666666666666666}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["243", TraditionalForm]}, {2.5, 
                    FormBox["18", TraditionalForm]}, {1.5, 
                    FormBox["73", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["229", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["14", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["91", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["12", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Expression"|>, 
              "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
              "Doors" -> <|"Type" -> "Expression"|>, 
              "Passengers" -> <|"Type" -> "Expression"|>, 
              "Cargo" -> <|"Type" -> "Expression"|>, 
              "Safety" -> <|"Type" -> "Expression"|>|>, 
            "Output" -> <|
             "PurchasePrice" -> <|"Type" -> "Expression"|>, 
              "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
              "Doors" -> <|"Type" -> "Expression"|>, 
              "Passengers" -> <|"Type" -> "Expression"|>, 
              "Cargo" -> <|"Type" -> "Expression"|>, 
              "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
            MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> False,
             "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> <|
          "unacceptable" -> 0.25, "good" -> 0.25, "acceptable" -> 0.25, 
           "very good" -> 0.25|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> 
       MachineLearning`PackageScope`$BatchProcessing, 
       "Model" -> <|
        "Method" -> "Net", "Net" -> 
         NetGraph[<|
           "Type" -> "Graph", 
            "Inputs" -> <|
             "PurchasePrice" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"very high", "medium", "high", "low"}, 
                 "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                 "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                 "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"very high", "low", "medium", "high"}, 
                 "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                 "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                 "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
              NetEncoder["Class", <|"Labels" -> {4, 3, 2, 
                   Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                  "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4, 
                 "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
              NetEncoder["Class", <|"Labels" -> {4, 
                   Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"medium", "small", "large"}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"high", "low", "medium"}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
            "Outputs" -> <|
             "Output" -> 
              NetDecoder[
               "Class", <|
                "Labels" -> {
                  "unacceptable", "good", "acceptable", "very good"}, 
                 "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 4, 
                 "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
            "Nodes" -> <|
             "TrainedNet" -> <|
               "Type" -> "Graph", 
                "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                  NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                  NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                "Nodes" -> <|
                 "Net/SoftNet/1" -> <|
                   "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
DE8VXdauYU5+V2SWmAwV8RR9mEnBqqL2bfoz3WYoU09C/JjP9vHQ3mEbE//y
paiPySB436qCeTEmgnGqDmXSv4YyE7/kwI5Rh6B8fARzK20pTfjGfWfsqBXB
LLSPYM5fDWYe7x0KGT8HIPERLPgYymRFDGRz1PsL2ZwuooewQlEEP1etZeYo
7xd19yoHDu7tn1OTQyZh4oh4XLHfkbkZ2Rbl9F0EJdvl8eiHeCY9T1bguzCT
SbGpZpzsjuOpGdXMuuR0dk6eYyikd45O/U/3KQjc/evW/IoztrFlFK4WYvLi
wTRhgstzFrJcHLkMJ66ax8p+j4agdoYDTtjuwzKxE5nL8bomRSsHO7LyFcYC
F164SZV17m7yKzoPXEMTnqO8gm7kU2rH/6EVztbvye52bD8jOvGdn5MrIPyn
/brxRJ3WiRvxn9eSX7YebtKm/CSF+nXT9bqxKL3in+dlnmX9PRPjDaL6MjuJ
/9Pz9txxB6jWLtth7rt9LBP8mNAbx80QA6f3ef1ZInNQHSqPl09oIJG3vNot
yaXKhDRhUvYIQb5gh/yFRnPU6ZxYSZ1TVzbeV91qkeDi0dcCKquxffBUlf/U
7qGJs9i8eLNpTfLhrhNbL6eXfZDD7eBR9EG3GiByCCpL7O7L+yBnX6g4Cu0e
1Mkcdh39QSX1TxRw+t3elVS2w234FRY/q5vY1T6sRMLjh03DhvbKUe1R55QM
zelJ44oYDnQ3Ia2sOplqaDOLrYGglT/B+tB9UV+9a6zNqvNeVi/y3ocNYwl2
RgrpwHzAxSH78PGqNszaR0Z4Zo82HDnogs781RAc6CZe/c6XWTYzM7NPQqFg
vY0OxukowfnCQKaosAcye0eC5s3zFOG3FvaoZKjBXPxh8Nt7QX/CEsP1jY5R
zZ1TVIuTddcZvd/9u+cGDdGjQkiXhq6Q5PtWvGPHSVHYJoYg9sNPirCwKpSZ
EzIclQ+uZq4fKgOHxTo4+HognBvfH6/fGQZa3W4xBR59sfV6OfBIkAaLxEom
doMhlHk8h8VSS2Bu1CkwO6ULh77pwOrpgyEr+xpzOdwO4roNB5kIijm/XQOo
g15M3FgP+JgMzIdbUUyOIB6WF4mhMOiH4PvS/mA8IFW05Z4n0115l8nsElkg
+NP+DYj98zMpDtaz+9BdZ9KU89ZV1I2wGX8cUxioTM9SzGXHiZJT89dQC/vW
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
S+yz7wqxRukUOB7xZUZ0i4GbHvdY3PdTpAnbX/ClOBvBBMFV/osVinhpaxhY
yj4Fk+32FP9MKnL+0Z1+//2Pv8VcXyHdzaVQ0KN/XVvodyj412PVy6L5/plv
OYJeXDKJ9ZUUz8J39zvBGo0QePUxBrSNakCNThMQJljDnwCJoSkw0eg1M7VY
D212p8P6dZdg5Ss5qqr1cpgxswysiydC2aib0HOxHazvUAhv3D9DoJUmTZiA
P6QL9jp3B8KOboHEAcgQWwfRKRPOT3zF+zZS37yeYLnpRoqz91btjVLtZEF7
ugpo9t0F9vJiFgMvbUbCnM3ZfxqrH51njiPvj2PlCenJfC6eQ6e9ZxnC3k+F
NGHbe3aCASVCOneIXpN+Vl5+8R/b+93L+t95Tzate/7oPH8PVTBnMNuuhnl1
zy82DX782zlMPbF+u2MUlzU5Vob5decEapGKIGJSBkWYwFw+iV8lfskX2g7m
l/cMZ2XCRI9zuM3n4ja8+knt/LSG5nQOLXReUl/LnIEg8GQ3OnLkEhw/fT7N
2QjmlbVB7dsDkMirI53Bs+UAGDixGOd7ObO2H+k2LJOYGsoBJkZ5wq/1v2dR
/05soVtos+3gblzXR81168eMakbjfus3P55yOyz643og5/QHqugv75n+CV2M
Z9NvnBuXpfoP13cXrGOR4G5t3yIcGeAChHOk1XicvtxFE46ITURcLEHqGhWK
cNXWHSx7xLdn+XbHpEZrBrM1S+gJfnXv9IxP+8a2BX9yy3/9vsN+o/14acgl
cP/hh0N0hsGOpYn4bXENbIrZBaOr94N+/BUw/57CMsHRTBn8EjIIx229DfHP
D+KAaWtw0Y1S1rf1k5Am/LfbLjlW0Gx9p3ys+52Xw6pQ6q260V8fP+vudb8X
u6E6/f/kmP8TPIaso+cm2DaZE5wW1AiWPtrG/xXPPurQhDutTOHPi9/GD3iz
nr8rZRt/Vm1O97vb+Oe7bqKyN2/ja5du4wvytvHtW6XxU7Zt4w+o1TvFDAQO
e2t8qe6qGSAO8oceL2xY24YOhZnX5/rgkxxVKm/KSKgYK4tzruYzfmOmsv5e
hZkUYdUButBVdihEpJwBZvLI/5M2wrY96Ko2Gmy7D5Z+DOPW3hSEl1XBhYD2
TN5VH8HAZ1XQHKKGydAxyla4dMlskDVfhCD1GObsPQut3xXBtAXzkJQ1Vbsj
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
7IMqHbVR55gupiXx2JjJD+fThEeudaVH1ua2qs1puJ3hgr9/3pYxEZt8ByrP
Qp5+5CCkDb8Np18NbXoP7J9wcXRy/XsmGYtpmNu4z4efNQAOVzaOoBvqe0/k
CgjLeIopzubWvs7G4ZGXqqBvYrikHKfbpvRbuv7dMqv3r5qt763FFn/sdz3L
Jktibm3uwxDM0lSiCeM5U5yoIoTuSxdA/9Y94aDqB6bSugb6TVWB7j1LwcWu
Gwy+7wT85BfM08ivENnxEVjb5jPZ89rDpeIDzBvtzfC77Za3MJMcr6HB26jh
M+X+sa4b//f++vQusrSb/gITDmpmdffVWueO44e+fMVzOn6HV9DxJZvzOTyF
1SNy634neXdeJY/kpNXOg1y+jGknVk7M9uM51Z6/bg+tnafV/XjRs7zoC5Yz
+Rx2zL5DNdSX585rpOutMWTjhwX68Z7UbstseH3dE271/qvxr3tASLff8O/u
2XUd8Z099kmPPRvlzXmnKdEDEzPZGKvlioJA72xKy67xNzcZu3H4UCWSIkzg
kqvEspJzP9ziNJKVY1dFsjoXQ9Cj42xco+JEN7TFeI5GLU8zvDm0PWxeZ4q5
Z+UY+1eHmKF2Qrp3thzDYXffXEFDXaAZhwltnGDJzUS4Lt8apsSeE22vlYWJ
+TAocCXmXl8Eo4u1xS9MtoipWl6dGSEeV8vBij7i3Fo5W1pHLHruLL6wZztO
72IgXkBNEf/wUxAf3SuE6LQs2FhYivza+Mh4D5owwTEnD3pokSy+PnAQt+qq
MnHFLjjHbhvIdDZHJ0EHDJBNZ/LPpTIdh/ZlMgv9YKHrCUjfPAm3SytjtYkj
nlqhi5VfZ1LHVq9D07SFlMODF7DxOQ+2X8mBbHlZhvCvmFmZRhFOrBxK/+pz
9RXSW+0eN8mx93/MjqPe/3vG5ir7hT1+Vafr+4rmnco/zllnewU2mvd8jWcB
h1AjDUElWuCuOadhznU+M8wiEqbIaUFOuQWjNpRG6d4TkYs9WTmWHq5ziTm5
UwtuvzkDwzftwBE+fky+ix286rALlVb1EMcNLsa8tD3Uj165wOLlE1ZWOZ/I
ePy8DTtOtxdLj1cVG76UF2f3ew1EbkPfFbj33SBSXT0KQ12C8XL772i75DhW
5ZtSp8ZGYEPspQMltlfFx5nY9GL40XM3xHc+DPdP9mI+HvrI+IzciA8HdgVq
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
aorLHwnvKq5vlEhjVOTuMmez8tHXiRboQuoxxnbnCDTxgQQ62YOP6r/bMvbJ
a5mfswuRe0cv9KRcCeXIbWCues7hq566wdT4fWMe+x5nFLUrkHxqJnN0T7D4
OHlM6ds/2r+tOC+gRv/mHdP25r+etytOan4Oy/lF8/rlmve/jT8WlN+Viqvc
iTCXVmUii773GRcJSSSTGgI4tiqPRF9VPjJdG6xYf06uOs3Vc7wxGEBH9/nI
KIlqiOQS5pVVFmQEroPM2RkwuiQLclMyQH1pFmQaZ8OdmftAzmY97HqaBrlV
a6HfvfVQk7gWPlVmw4OAHAimsiBhaBbkUEUwSXADClOzwW1oJsQWSFGjD8fA
OLtGlOg4EDh7uIIchX1sc1ywXc3W3B72neHqMHsWj6HXballOP/f+qZT/+d8
9wTRFkezbR/vDBzwj79rv76/7t962u06Pxwc/k+/0xXiIrtNvWXRfN6zZfel
/3zvkYacNP3zw68xrWuKGqhXLZ4lKg2W/uN5G9Lr13XkV5eS2Hl56dm8D5kz
bCHCxAc40ViHfZ6Fzl0Zz4QVXkJrZp9Hlve0kH26dWHfaVuKFJWDGVyDY1Pr
M/hr7ujRXPvJpwVie/k+Ae31tP1lPEi+8I/2gQlrBHSk2q/3RPQfOwxd7tTE
YMUcGr6dedPZBJGn/FFJB3/+xOvGaEtiLP/S1S5o2iESlX6qZEoPzUDnk93Q
vQ8OSO7YOmbrYmv0Wm4foxNpgt7r+TP9N/31TFLVrLb33jU2f/aiE/++rqpW
1LN9ecq2P+/9UZrPMeStB7VyfB55t3wL+VVTlqT2bSJ7Fk4gx3zbSsrL55Cz
vm4kuVpb24H0lL2b2Lq3JVvY2hSiA6/q8BvCTlMXHN53o7FirJbOEtuYhP16
0L1OF8JLClDUJCNg1PqBiyieuNSYjaeJ8tlUA7NUlBu6YjCQ6s5tnh2YsTin
3d/FZELzObvTnDBxPua5gPa71vqdLzsP/3pP/d7v8q2Wdx7VPE6V35BYvt2a
63+0LnT567mKRicj+vtYt//p3r0/Wt6Wj2j1fao1gtjPDD5m0ub3Nz3XdplQ
rzv4n+Zx449ZvF1Buf+6LnSp+f3yd/9ZR0pKovl6Tmf1YfxT7bzTR7tuym/b
r7T+9TspOjylsk40v6svNbH1dNL3+PzRtuaRockfrdsWl5vHoh5sd7NVn11a
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
gyhR2Xct9i1kp6Jbt9JGkZIUskRC1rrzPCGyZcm+71LWbC226Ddn7mdu9SnL
5/v74/16P+f9PGfWc86cmTlzxiBz8CiQ3FlZBulNGuNtsxPgskOKRqltGCv2
GVRGrR1SJnfSdRwa8A68cvuzCRsegoAnN77ShGOGdqEr6wSDc0p57UZmW8w9
EwEGusk8v0m9wcaIC3gm6V4eAJOnx8KMgijIfRoD5e8LJNNCz8jHltnD4rUt
wefZZZjK+S/ktGUIE1hrzoS05c/ka6JCUNA8VAfQ01Kv4rCFGfAheQ6sn/EM
IjZKGcIEmWkS6NszBNJa9oTXny6ygk4QykoZ4vPj7IOP60kmPnIFqkcI7M+f
DQcmiGCXyw24OMYNZpcHUATtnugygk0QPLaMmuEqoypr18KlfMxiDoEnnoqJ
PS1ivzJuX/tY0QLOdn63DAV8aKzNrCgsBmIf+VFOn7RNhcp+V0N7qD02MLOy
RvB1qjYj2G8T2lQrS15BWKUsSQ4o3kcb6bVjRt7bwvdfPvqd5mPCStrVWA/Y
Kcn0pl2K/yx2bgD04bneyn5PXtc6SntIccXc6RtvKf5NsXWe4n1HZOtvyu3w
t55CzzK3gcumtmz5IF1Iyt5Ff92/FQQMUEmif2g3lTyZ9gEq62fSpYxgN3sW
xudpMOMDaJsNZVftsv9lG7Lo21llm9Fgw6/r+oT6o+klffKqHK/sXq/B5EAb
9H+RBs8HzUbBLiw2Q5ImtgBqhJxu9M6YqawRfEydxQh5B1om0V7fH7C5pcvY
DPVxbNZSM3gySMbuGHCNLck7zBZHW7Gltyg4rn6JZVo1BrOyrmxQdBHrNmQG
mhcMkhR9MYEdnXpDQmyq/K1fSIaj/QfWO2AnnIyOkJRsSIbUswAzS21xjHq0
fLGJJW4aI5Hc7PQciR28ryVDWIDhgac04Tc2z7FzwXSsfWo3TBo4hE3TzoXA
0Sth45zhtFqhIX+8zj8w+W0b+flNJr21bSB9YprqX11jVGc9Vh5n9k3bGvM4
fF9VpX1PfyZlyhop7meWbqk4j/kZU2D5hMnQ+acYW49vgI97ueOAb31x03d1
LJV3wpLPYh4LuGsxz61vwoZVd6F2nU6Q75UKA77fY+O4WOI73MOHj/kWXfU9
weiZ+/lyfuuw+I/7V8/Z9D/3J+o3HsvYXVysXPYM8Z+f41zo5MwkWDcU3Wgj
5ZmgW3kuLdgEBY24e4nWKynVxjJqZ0MZZdBERkUbyKjXnE78Z+PK+Ph926Op
NZz/NYd6UVW/gXz1XjHXYiu3ivfuOzP+2/Owx+di2bW+UoYwgRaHntdag8uV
FCjauo3efrfCRxC0NQkedK2TeaKWPf6wTQDssA8MEr9AyNGpctdVQ2BIdjK+
66CG8iH1WL9oa1DXscC5N5bQqltHgADjJhKcOL4++IxTARXdY3B6ygt2oZMN
62GthjMvtcSjV3qxDpp1weNRffak7nnYOaMWumT4UwQe5+pICL//MJURtH+j
ZLCZxEdbxtsTOGzKbyQRfFdXjFbmm2PRHtVi2uKx5R3RM2AumB+ZCsbvDrJT
Qs7BzSafgfjTH5yCu3HX4IbHN5j9tZwmGkHXrnUZwVZ3ug6ruztJiP3v47vv
1m1afVy2si1uemsGU+4/TXmOBqtX9Cnq7ISK8TFxFefxxKgi+sDJ+7+9pw2f
bVdj2T7TpOZ6P6s8Cu3nuzOECdbcu4haah/A+2NrOKZ3De6Vb8XuU+PgtNFa
8PnUlo9p47ODJux7djZGzwyBPUv24jyt5bT3ST1YfigZeu09xF7tPgmPJtpC
gr0RfKgfAbu3NUJ1cSvsPLUldr20gW1cJ5Td8mUbG9lxHqDaJ/px8QYg+LjZ
FZ9910GXccXQZcBbUCkvlBQ/l0FJbAMMMlsq1wzdw4qeprMXCz+zm6y1YNfF
B2zO7X5yk48NodlddXwQuo5tsHche/XaaZhkcBW8dyfJZ1ucYbv57pGvnlPE
bng6HaKNN0tWr7KAxhNsGC+fCLGAbkf2UundZZS+g4xyCtlG1eX4EiOjcmA7
le8uo542k1HotY3Sm5DMp5/Yy6ivnF/I3yVRR3ENbrNSXDDr1/VvSu+1v2x/
rBeGKq+FRdMm8nZWm2hooENhgyZn5I2DJ1NbclyZqc1Xw78RNGs5TfgOdx3+
t6/eknhJSbolZRfpwKp2GaK8FrvaVu2nBgx8Tce6due1cwPFzCWJDuN8789t
ifuCFkxCy7tI0KW/itImeBTaiU/nz3CGjl4FOM70ADwK64UjD5VAhMYLPC/d
xcaXHsRaRxCKn5yA2PJ2co0vryHxvBZfj9757/plma81eA2d4Tfrj+25+MlO
fhnjjU5KLgzQZzwf5LOVcf5+Plu7RyGenf6IPXU3n32Qmc8mH3nGTg3Zzmtl
bbQyR06phw7aBUD89WKfsWfa29FCfu1lfqhabzF65CxCw66reCZ4LR/OCLY1
519+3D+T2PW3zMQOjxZhyD++xQ0awcbkPfQAXCSZxsVZcD4P+whqjcoRqoi7
Hjhx7f69SFVavL2cJkywaFwE7zubGc77Ez5y9dwnQlF2OB3HRCjzEQxo7lHz
GJFhivM7wv6ueJCu4v+72in1lOf8atBeelnLK788xm1kzfHarVBonL4JC87U
xsLntTCtqwlm5NVCG07bfydM3N3aBAVcCzBAd93aGNugNpbv4u6vBhmgLhe3
fIou0yqqOca0qYtrfzQFFaurkFY/DLLUW+CVrVfBL6s5iPqUwsz8NnCslyeP
K+elDGHiG25fqtQJPvY4whL2fP6ZT9ukXeHLwNccxX121p4cPo3air5Ol/tL
f1vOVz+KpJMtq36Pkd3ZHwgOS6SMYAuY6i9l3uq1oitrA0XIEn4ge84K2qms
9hC3pRvaXhjAa/7HzDNP+nbODNynnrnB7yc+7W4L4sENcRmnE+3+/UaYHdsU
x8nG4sW0DfTIrMu0d8FElkDjaJHS7lQ0SLxLdT0Oy1oB25aFsbPU9vNMcPFE
JOQdS0HTso540DQABX0qE6+0Ca49kzAD1b3wypXn2O+mNixs3o59/nQvpnTS
YSc4erP2Kals8qZ3bMm1/bDPyZt9WDsbWtUPh9XbN2DSjDEM0QRklJYCBNxm
rxx6wmpbSpW+iM4V9n2v79Se+ZoirYjv1KyjMkrP6SWVn5RLpQ65QrVf/J06
KT8rin39gsJGE0Rr6ydSKVeMmO++UyQET71lVEjSd8oy/DtF0ike1rzP3Wqk
EthDyhDelt2HFrSHY2TU0QVc/5WrMy/eKOaB91kso0KXcO0a55+2Zr5ENJWh
w6zaSjaE0ZI0DsL5f+1Tc9vY73DFnGsL9XtWKTOtCg2Y/leq54vsXADSQE3s
3bUA7r5xBpIm2Lz+Oy3YT2WaePmCC29HJA5mBF3AjFe9GAeXMgmxyXJ23sm2
fWxSiwr0MqZ0H/pRkwcZU7Vf61Elp5pRXSfb2350MaYE9GrkwQj2tFnGEsIb
sl/ShA/a+FMLixtTNzj7T23t73Br6Fv6zCcJI+9RfVznrcWKuROWvlOMIbw1
bSQ9pmf1f7v8LTIuJULuGxXcfrIr0irNaMvsxpgdbIM6u3WgVcktUH84BZuu
W4g3Z4Tj5yJ7+HZKJbNhzgHc+HEXWDQdBJpW3WDh4j2Y/nwk02FgGhD0mnBN
TnBBy5QRbIvkekrbrMcisFG5Il+y3px9TYv4+Gu+6rz/yOsC8JHb4vENTUC8
6Tp8XmyL58ZeBJOUixKrHtE04coY2NueIew56rpEdV0DWnvtDYn7m8uSw7Xv
UIO4/QscdJvqOHGFMp9qzjRGsO9+uiLPbz8VerTPZwe3VWCN9wfWmUtv4HzZ
R+YBsU09y2nCa92aYo9GiTCQs0l60tsMXlcXqfUkPOvzdH7c7/qFivHzV7xe
V7kmaybp/qfzpGE4VzFmd+JcDNEuglHSEljSxR4/ykrAeYQd7lteAq1CNmNn
ixLo5rgDBnsFosS/BJ72qYcf/Epg36JHIA4q4SEdK2UID15Wm2eHaWNQzccY
7hSo450ji9LN6+TB3rqb4Vy3a+zAw1lszERjJLDUbM7wfPUgu2NzAat3QwKC
r+WGSxLBvu9/T/LcpOq/n2bs/ip2ap7w234HZa2Yz/CVUU+mo8oWPtZzY8X/
7R91H4gLk80ZwgT9bQbiE471w4Owkf1A/MTZjTit6IIlr7dduR7LOda0UUCF
iwlI64HvZ+6nVbj0FC5def0fzinGvLbzrxgP7rq8FzP0umJsgWnWg7+6D47s
NgJvbrXlesG58mPbHTC9rR4MHhDKGs1PYBnTg3BjT7AScZ2SJae7j2KEtOuH
JTD3YzCrvcQILnPppqueSYhOlvuzq4z6AV6iM53XUup5KhIB6fuv0a7vIym/
4CAq+Oo1/hmD4At9cYYWbOtlaTTJS/wFduupna8VY9J3NRvzy/1KnK7923Ka
aVB1vMXrL4Y8Nru0ZAh3KDKkRp/XoKI7mFEXSg2Vfj5mrQMf42ai4KvTdKln
HQ0pnxY/bYWYIYNuK7dtlFs8HXLiRrVtPSd1/+15udy/6rVjkWOSRBqghav1
tfDH5eN4tcFDfMHZG701sAf0yiyYOgCbHh+KS/RJf1oLXd5OzrygnsoGcXl8
k/JplvMncnpmq3tgOGWYLdHrPeiBAaop9KO2VccavNJQq3HbrAJrvg5evan4
b+fQ5DS+LnjUmcMYTJ6jqPut/vf5BCbVLpPsSKnok67uYiZ22ej5x/e9tm2q
3u8Yjar+vyyNnp1+u123DXtI6J/P6I4r3lc5FqET/ZT5HMY9qXachjSzg2x/
ETQxscTIFj7swKW9QEDEOwmjIkqDnlqB2GZyKNaa0Qd0Ol1BybQtEmcjOwi0
S5I7bo7AiZud5aCfDFNmJciHu8rxu9X//v3SJS3F8S/82bzKMlqucAYBRt1E
zCFNH/D4qYUBly3gFUuxlf1br0uZ7hE72X0Bq6H33anY8+kxGLaPYofpOmLK
lbvsnCl3Jb5M9Xco/wWS7n0U9yRzvemsEV2rHNekgjzqbcNAyjoqkLcXX1zI
EP43XmTvpQV74RVGaa9ZLuXjjbcF8NrucFOJgAULpQzhM2+7MpV1ww6zlOnp
0x/z29Fkg53o5XaufYnsx7dXgt9k8SzlsS2rryj33XWr/zOcQMdQndF5vuqv
xix4yyzppbszWAHTdh9k53Q+Bh7dtNg7bi/YNYsy4F5zXda9eRj7cXwAkJgD
b0z5PANXu7JRri/YHs0iYQm6sLXKa0Mrz9V/nKOg1ecE2k3Dh1l+rNEfy9x9
J8UYyujI9ijA2V7KXLrvmPlqpnWmZhOHzIOic5Jxho6Z4ic2maUXZmTWid2H
eSte49vscZndPpdghkc7FJ91zjynEpp59Jy7ZP8oRxz0JhIWX4uh60UHiAXs
19EXdWgno+wcZFQtdxkl6CeGp/Nx/PlxiqdcSjRFgu9wtxs0iSf57rttpI7W
25OxPTpE3rxegfx6R3/5rnbP5A1tNsofhpewfjvdWdG0TZCyMDHDcHgY+230
OfnWrcvkT9vEsY6e41nz9DkwaetB9vEoD/kHhxFsj+zDEvHCEWyfkM/UBfln
qnnJNspxGFdWn66iLti8p4jesnwDVX4oTeKTtY0mTHAuZRWV2SOeanN0H+U4
4TCvnbyUSpP4Ho1klIzLm7n1i7J8PDmt+A6tmbOsxjbZaYYf3XdyG2ZXTs3f
q3W/pqj/Lzy86OhdD395zal7sEsV345DO38ZO+PqHX77qI2B1N0W5JllIFWH
u68yvhdE9XALpEI4PZiUX9FtiYBBagtoVy6mfVwgFd6ca3+7z6dNnz6XNGvz
RNKjYQtGiBPW8XFIxH8a17NJ25Xf3iZdfJiBZ3vyeQMSFH2gxSlZcO5cV4bw
v2G/rRvTR+KAJp/6sac+22PPXf0wSr97pmdhLwytexdTbn7Ebl/sUU1/GiY3
zaE0DFpiQrsBNY7Z+zeCr2/6Y99rUZA9M/Kw4pk++zAWC6xyITpdBjkTc9hT
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
ycNaj5Fnv1bBWnn7kK3tLu+nf48mLOD6D31lOvjZbqU9+usJVjzhJLu4cAOG
ZraRv9R4yy/rb/ap8ETFu4V6c/Wr1Pt23L4aDbxT5XjRE1vSbctXUJURptNM
qanN86N2vF5OjVXxo9q3U2idt81X+k8GSBnCeCiAGvHKh7KMWfHb7Ut9WVqt
LVrkr5inSBr6d+9XK2Nr3FBmi1bFv7qCvNx4e47bCubCpCNV7ju/6xvTDzMr
vst7EXiCddxYhyZMcDtYweM/b4foQoVNYOmmwhDe/WiHRNAISEzR0S2sV1K8
iKR9359gV6wci/KAAji+chY+nlgX5W4HYOvZAjFhgrEWW5DE2OS6YZNxozFJ
JmUEn4DF+vOZJYkPaBKHuoG/HbPnP1qb0TdXjKWMm9et6hxlERm/fO6x+cAw
ZnDuIlpAnE2waBGEUZuLg6n6H0KonafCqGCXcEoSGUj1OsS17VyMKddmVc5z
4HwtxjQsnGrzLogKNwul9H8uYOOiajOECXIWXYftA2aCXU5nLAvbzwo6QcSr
4Uy/zQOhxaCVcCo0FRjxWPnaDalykUQNiP9ShyE0YebbJfqy+gC5gMJuqfLR
0dcz5r84Ib94xJ1tbv1W3m7qCrno5Ei5t1+99C5B9VizvCJ5rF0tVnL5UPpt
zQT2QfsnbN3T7hkefc5lNO6uBsIxmPps3i/7Ij604hv/jxKfv34nuKCRjFrf
9zJlWfcZlbKnSPJdZiP6N0aVd2II9zs7nRY0ko8vnzlIkXSKnQ/vI9rPw4px
1Xd6R9VYN3rHr63WXl/Q61LjNmvds/pj2/7o5D2+fmbp/hTrLlPM7501r/o7
zbpBU6qtw3tVxf9w2155ytvTH+2pcbtbeSjGW+s9ucyvr0NnxT+obe2qx79N
qrje6c6s+fuG9qCYE1+XrrgeLBkuZTbJvH/Zppx5o03Lhlf9pj5vQNl/aoNm
JACs1VmFw3rugQ8ZXB/EYBoQjGvYhSHcyn0l+mSb4L7MTNA6fov3JW4JoPm4
7+roULsEYJMaTrubKFHVVUM19e044XMeRkV+wZ8dPuGh168lnS/lIb33DdK5
epnu63Lw5sViNE78ifnzWiM99zSmBodgrdgfuCv1DdoEn8eV5/Nw65UhaNBU
yoht62MfLj1mUvXnFqFj9ZiJLr6/3d/VFwqrtdfZ/zw7GumYA6l1QsEkpS0a
DDzC0v6OQGCiZ0YTNv5aLBE0AU9FJrRgnz8mZQgHXdjBfurtzGum5qrQz0wV
umztjfOGHoIQzh7AaVM4+/1gX9YsQ8qQtIDS8wvRorY1zuD887lYB46HNrgl
KXIPhejFFqjFpcvq14E6P9eyP5Ns2DTH22z7SSpyPW4fCAtIujVUme7azklE
WLuSn9Vrw5D0TU8ZTdLLuDqr+TOEWmkqozbUT6AW5GiLBSxtuZLOkiXxPhJD
YglI2v2KhojEBBmtpIX4WZ4rGML6Z7fTo3Q/igVMjpdRE2iu3s7n2oFMGSXo
Q87t5OPIOSjuvZuaLNpNFXTlmIvv1lARv1kso3pRu2s8p+vCtiivC/Ni5jN7
iiX8+dy2X8q8ORdQpTx8jtTh2wxrg0j6+NBOtOX9qfQCDEetTH+M5ngwNQy7
cbyQQ2atFTifY4LR4gPYn4tpx9kLxg7DHeiP7Tnb8h+ktQqjV3ncpBdx9hgO
lde5c5OU0Z9474/vTTSM39MbZf7Vyu+bf+YgHfA2kIrmOGPkRUp380Uq3qgz
86p4o7gyPjr6KLX5bxXzVJN4ku/QYx0RsQV/+Tc3pt12O8nrf+YC2D6x1S+3
US73lRgNmlFl23YH1zy+pGPIQbrFvX6SyvAdKmX+rREM71iH17/NUefzkPy3
W8soPyMZVWKhYL59zR2GAlyC9tGTX69E3XefYLXxQ/iZrMnrftt0MGa3Mx43
EKFxg+HQtrciPthYHwPkDsr8iy8aMIT/dD7qLA2hm8Yt+OvrpQAnw2L6UXTV
7z8aZufz+3bpTNUx+veoivfutyca/LGtVik1+WM5MmuiVmUd0T096WD5xSrL
Pnq3Pti2H8Pavl/PfkiJxg4yA5xsPoU9/m0l2zZyFUyIqstjByWlCddrtwSP
p92WtKudhMYrZ0Ju8isYvXNMBv1pE7qWJss/vYwAhzW1YGXJWIZwZdjqhNGE
38k2Ysv8BCzzvIqBJ2KQaE0ipXy8y6vjuLeVLnaPfI9fC3vQaqIQDNwjBmF7
g1pX/y+te5Tim6rBuibKfSs/35hpu3NItTY+8tg0xXcDbTbTtSrNB9d83Tpa
/WvFfwpUZPm0Y61fj6WcML3q//Ti8ffPz8PXtmOM3NZU254hOYrvN146GjD5
qmuU6ws/9lxpW47WwFVhEWhyPQz6DWnGWPc9DAJufNBnUturYKcRITjWciBb
8D2ZlQ8YjxnzInGKSyd85PSEFmLPzDKQWC4Pwc3XnSBtyUCYO28grOMwc1kM
RHKczGnfpgyCpZztwmFMQjnr8o8dlXcL1NjjIKQJ1MOsmcXJrZh8Lp8nl/5t
m3bxOc+J1xVjVfFOzXPKRj+q3u5VxpQGj/9YNxr1lDLLzlX/PkrAq0ONsNH4
c1CefRIIV4bqbAuG8NCTp6CF7UNek1sMZQS/b3s7unJ8U5dPPPf5xfsmJzfF
9lb2J9TwbTbBstV+f93G5Nz8QR/6pvju0mt10l/37fqYdAGC0EPbaMIOFhGQ
P3oLeO42hgYPPrNEkzX6QAtxExsvld8zlLLBr0QYOjuTjfZawbZeepIVc77p
J5uBfcJ6SKl1HzZ+qQsj2uTDrV1lIDYvhm6Z+rj4cnfcz/nqaEeigKs5Uqb1
80ugSd9huxtdhhsXjaCl5Qzw71IPH1rT8EY9SjK+tQ6GXZUyW3t5/Xa/8m5U
HRM5MLrmf5TE16p5OWvDf/D1sfWEv3+e9G+YZ6ujfZElrtf8AetSzkKuBw2G
J6QMYYJ0HS0I7x4ESzqqwYFJtaDnKmc4w+lZGj+gZ85jGJE7G+rdbQ0xkZ5s
XtdwyUlOT3aNV+LJPhnEZgbC9QVvYNzYPOieORWJPmG8lKkcZ9nvFU3YpHa7
DPeEQvn1PVthpuEwZcyvtr91p5rn86mMkT0VY1ZH7VL8T+AnrSinJdoOeKCe
A/7QcEDVqGu8/Y2zm4x3wOHf7PGB1Tleu75nKZLYN+28Mtd+tce99RT56udK
GcKQFU4Tvh9+GocNWwPjey+Fhobf4EvuTnYfZwsIY6VMy1eFsGNjE/TQtKbt
OS16+R52VbM50De/A+t56xktxHbhsPFOJDs0HiCq6CG4lzyE15FhsHrvJvEy
Li1Au+kHmvDCwYsYQXv87RBcpjIoqvghxFzdC+0/cxxtIt7ltFZsYaPCvudi
ij/tFhGkizPEgr13bTgt2JVhk3lNnHKyVjXfekkdhjA5lmPTg0W90ot+ey7M
Uyqega1o+f2vnrmPMI6D7aL1gPEJkN/ym/yMnhQmzTTDKROfwdOBN9leJnFw
1XcOEiZIuWgKUd1mYl7iMz7dZexQhjDJE3bfEvVjnlUpS2ldPvPbdG3yconn
2UH0RyfnGtuwLik1t3kfzRTxmgPieMTXHc8ItgC/PYoxxmFmcVQad7/haFbh
W+M4kY8fYqVgfpu4GLvC9VRn3VyW4HK3MQzhJ4tm4KjxuiDaUwIHBptiR/Fd
WoghcJspwYHp+3HgtxE4YX4DDFW9J581U4aWj+ZSC+PiYfrgQ7+sR6xu9WcJ
mzrMVzx7TnOkd8e1/2Xbzj52wjaJj2jClXEiMq+K5nhwOc8q4U2Zf8d2Ce+I
2xp0UsbPPFUxdvy7rZRp2FxLmd5xVJ2Z05T+z23eDqdgiYAs7hor2G9yM2jC
zzqHUBr/jCOJCjyvjIdWLO23+wQtpIn/mFEgdb/Ff29vr85UlKPSzXa/LP/b
x/erdqy/21/g61mfG62qPSsy+WDxn+fxzonIopvZL/vP9wQElsM68uv73KIx
CqjdsYCunE5Vb4wP/G6KK2vUs45M5bQQZ95aV6lffRoG4Qf1WKf6WnjMwQ3a
WgZA58kv2FSL6WCuJ4OLicDD8iBLE05eqALe7aIgI8Ka68sYw81Ud9jbvy8S
n92jNgxh3S6//h6TQCfIjAEPxVwPi8U9lMekRNSKserzpca8O7L12NYztWjC
BMV0Y3DjeJbTRNC10KI9HnaFLfsioe6dYnljz3A8e7dYnhEcAsVPGdxduynu
TzWCvMO18GQ/fTAY3A1O1imEXov1RTHF/lTD1fqiNQlNRMzhd9TER1NowgRa
qj0ZwRbQv74mry0o8af6rTSl1Ooaio6V+lOavoUSos+9WvP/7QXol7O/9a8J
d1H6e36qK/FyDRN1nxNL1W0oo4w/r6GmdZRRTY2b0gRa9+cxgi0g0F+q1Nw6
Z9Ekn7taJGVpJaP2HY+luhrIqM19VvPLD0hvwJgPqn49TwysuLcckVKLGe9q
+//6HkRA3Z6KuqgW+3f/FCutXzGvpNn2KL4OGNoqnremmH+tsQ4Gvwj547IT
y/bAt7lt0HfUfdgT8wBiXPZARysPMCu4A+eN9oDuurrge2063Ol4BOKvp4Ob
1V4eBQNGMyrbkkH1sToaBn2GmAF7oLj3RVbj8WVom54MIp9x2OpkDI5dyzCz
YyeigHcHxzFHJ0/G9o+KIF4jEq+/7Ae761lhh7rd8JHuJPTq4oEdh9qzXgct
MUeiQn9+sRLLL4/Gh/NGgwA2S4UR7ObqT2nCDeOHsqXeppmBdzzZIY7HwGaF
e7r4SB54h0yBO7tWsn4FrdhVj62QoJhqJ0keFs/+Hwd0Cuk=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {21504}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                   "Net/SoftNet/2" -> <|
                   "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1024}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                  "Net/SoftNet/3" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {21504}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                   "Net/SoftNet/4" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Clip[#, {1.*^-8, 0.9999999}]& ], 
                    "$Dimensions" -> {1024}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                  "Net/SoftNet/5" -> <|
                   "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1024, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                  "Net/Catenate" -> <|
                   "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                  "Net/SoftNet/6" -> <|
                   "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                  "Net/SoftNet/7" -> <|
                   "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                  "Net/SoftNet/8" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], 
                    "$Dimensions" -> {1024}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                  "Net/SoftNet/9" -> <|
                   "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                  "Net/SoftNet/10" -> <|
                   "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid[4 (-1 + 2 #)]& ], 
                    "$Dimensions" -> {1024}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                  "Net/SoftNet/11" -> <|
                   "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                  "Loss/Harden" -> <|
                   "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 0.9, 0.1]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2fac60ca_e057_440d_915a_be7795aaf760", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
Dfq15qTVa6LqW6fLss/hMO8l0mINN8clNc5R3qwnTI8zspzGugWV8jLRKkTA
tabdftXxl6sTAXNHTR8P3hd8+rp4+4yyVgrO1czr4jlHBepD76J2h6vVik6e
bYFculAbkXx7iVxqqINK89bLpcE0KP2V7y2XjsN5Zpsol5qgtpaBfJiS7oHm
jOz/VNmeeLDVOVBCBdxyw+qcA4coqOTd7hz1O4kNE0X2fz7UkbgE8P+HPJJv
eqfk0sWao/hmJ+NNcVkpWFlXmz2vsHn2oR6WgfWnsnE0NzSXpONGgmxBGhCn
7T+y0420Z/NlvOdOiK2ywS6ewWqc86eb9jQq4N1gJ+/NvFGMfncj7YQBwecr
NQOne5wDd3lquN1a3+rcyes3xDXt06EOx6GanE6ewQRc0/Ze6b+zXmF7UF52
jyBc0mG3tD/xZIdzYBki19Gv2jnwWwpo366KDufl/TfTOOcEK0jLKqrvNDn8
kMZZDQqY0HMjjXMW6eTd6ry0E8ECWxO3ZP340/1xQ8C/6utpvkOYLcvFje82
Z4i9jFGRU+Mc+AENvvNUtXPUj6QnMSyt5c15l1s/NQFvTfFqm/ykTO7X7xx1
jvQXqr/d1VTzKRy0FBC7hNDZCS8Da3LSfKMQOt6tuQq3lDROEyCxofUG2EO+
Iwj04xJ5jsLYOeoxLi9JR//d6kRRnXPUA9JTYpL8jk9+dbfTfHch7K+0X0+r
3YGXmm6l+cbgpZrbaZxEKC3b0AGly6hUUZeftu4bG0TkjjBZ7HDHrbT6FXj1
VlhHzHBrfprvNQQX1nonrb64bT35g5e0+lKp28KK03Lp3tGKESfjbZ49Sogt
eWnG37tb6kr0P4Z2iA7VxZ5slTf221YqBjp5fbYjIf9yDryAs2JpO7AZkBBh
95zHWoeKUxh1rxgPQ1sLQhfC6+t3e3JnL5Okcd5he22+SOEIyOYhWf/pF72t
BvVfRhO4zQHrbpJXKOZ38cbPAONKqbPtAtPsUjGtovqTXzswyEwInL/SlI84
X6v0STfSfINR6VTHjbSMILzUmpvm24X4cagGONODl9pvptUeXwG+q+nOUvnj
Fh7dmEUrNWd7LGu60dh+a32N44a6naLW2ATFdTDY67jpfjoIfgsvDVyWS+9p
j2Ljzi7eg/FKz5m3XpHXxXtuOYqrDXfSagNxFHvy04y3YvdHMErUnrikyTnK
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
w5J+mZL89qHhVnBJsbhzggD2DFZZPxkolxe7GxSQJNwYbSkfnQPL8JjpDYxo
wjdK8yGivkHrvE/rwdt/wEuiaueoCkJHm/PyO4b8mkCev41avsZAt0ejQwMw
aC+eKX+GvOcgzqrdp0BD0E5xSx6sCU8S+XajXBqqazyO1XCr4vR3NiO2917x
xqVeawn447uhhJJHAzYNtqnZ1b3jjbq+Whv2r0zmOmTvLfRRu7dxnbzzM/EM
WSTj3eRghD+X2Q/3gDMqG+UWqwtgGZCPO+0bYeC0M6Jw82sFlVAurvJhMX0Q
F7sdJLzvRjuMG+CfjVUGkzdU0wdLc8Ls5GB2E1CpH4xtNcpdUtrzu3h9eFv7
bnCUmNLhOXrDgr3e8/8rft3A49dzwhxzwYAJU46X8SbttbYoNpqR/Ivn7ugf
pv/ynx+i5b9HBuzenTyjxPOX6GPJGz1/2R6QHL3YqVy8da6UNu3vtVejh2Tx
prnPxdKttHO3dp68+bHg/G5Tx1dYMHofk98uG7raWe9+wL75N7HH1d2NiebF
7ntKl9NPaEr/OdUoKj0fa3rt7q9k8zt3g0/3He5Jlm4WfHu75qORor/R/b0v
9zexxc3ol+4H+FBiPOiscw+z4ZofJ03rPfkmVH71Xb37JXt/YmD3PW0PKefe
cSecK4zdLZMV3N9patUjOUc+O+9qsKnVKtI2borUX7r5M+8s6/i7K6LSTMpF
Ccs8yez4uzSpy9bzE/oP1+lsRbP/XCM7NRz9aJzHdG5x/MT+w606EeeTt6a/
6uq5LUtsKKN/rymNulMjamNQuGcN08k1sqHzicN97Fb99Onch/K8/tPS7sPH
b4pK7TQQjXfPi8692W5qtSgJUFn3GJCSYRfIZ+882G76W3+d+/tgoFC2/SVg
H0Fgf0u+57Gs4Eqk6bUGhL3xze2mjvu/E43f9BIbw75xj32krktxvI9tpA34
PQy+3c/uQZg+DHXqZ5eMz6S5SBn7tp5fYK555ljES/fyBeIJDDNzztljw1KL
lM1/hJteuy8+RzY/Idtueu0dGv/Ezd2muQ8IaXbXv+kYgjdWcpxvNSBH67kD
S5Iizd8rtphHbfA/I1XIFfos/UB0ZXj4R2y8iWL76Vvpv72BMX7Hh+hyrnk3
/DjcNLcQQwpR2LP75ofTV0VtuyyAV0mPIzdcUNS5/23SfziaKUbM3vMgtn54
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
wn8ZiJKskepE+I3/Aw0+4rg=
                    "]]|>, "orcInstance" -> 90331184, "orcModuleId" -> 
                    56159184, "targetMachineId" -> 62867488|>, 
                    139849226626896, 139849226626752, 139849226626832, 
                    139849226620928, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_fa08fd00_4437_4818_b699_5a145bdbd8f2", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
FBb+HX+Wv6I=
                    "]]|>, "orcInstance" -> 89386048, "orcModuleId" -> 
                    30883232, "targetMachineId" -> 89873424|>, 
                    139849226613280, 139849226612880, 139849226612960, 
                    139849226612736, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", 
                    "$InputShape" -> {4, 256}, "$Batched" -> False, 
                    "$CompileBatchedWrapper" -> False, "$MXOpName" -> 
                    "1a1747b3df68f942", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                  "Loss/SoftProbs" -> <|
                   "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                  "Loss/SoftmaxLayer" -> <|
                   "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                "Edges" -> {
                 NeuralNetworks`NetPath[
                   "Nodes", "Net/Catenate", "Inputs", "Input1"] -> 
                  NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/Catenate", "Inputs", "Input2"] -> 
                  NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/Catenate", "Inputs", "Input3"] -> 
                  NeuralNetworks`NetPath["Inputs", "Doors"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/Catenate", "Inputs", "Input4"] -> 
                  NeuralNetworks`NetPath["Inputs", "Passengers"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/Catenate", "Inputs", "Input5"] -> 
                  NeuralNetworks`NetPath["Inputs", "Cargo"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/Catenate", "Inputs", "Input6"] -> 
                  NeuralNetworks`NetPath["Inputs", "Safety"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/9", "Inputs", "Weights"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/6", "Inputs", "Weights"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/Catenate", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/Harden", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Outputs", "Output"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
              NeuralNetworks`NetPath["Inputs", "Cargo"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
              NeuralNetworks`NetPath["Inputs", "Doors"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
              NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
              NeuralNetworks`NetPath["Inputs", "Passengers"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
              NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
              NeuralNetworks`NetPath["Inputs", "Safety"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
         MachineLearning`MLProcessor["Identity"]|>, 
       "Log" -> <|
        "FunctionMemory" -> 224736, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 3, 7, 56, 43.36086`8.3896728646508}, "Instant", 
           "Gregorian", 1.]|>|>], 
    "TestSet" -> <|
     "Input" -> {{"low", "high", 4, 4, "small", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "medium", "medium", 3, 2, "small", "high"}, {
        "low", "medium", 4, 2, "medium", "medium"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "medium", 3, 2, "medium", "medium"}, {
        "low", "high", 2, 2, "medium", "high"}, {
        "low", "very high", 4, 4, "small", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 4, 2, "large", "medium"}, {"very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "low", 3, 4, "small", "low"}, {
        "low", "medium", 4, 4, "small", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 2, 4, "medium", "high"}, {
        "low", "high", 4, 4, "large", "low"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "very high", 4, 4, "medium", "low"}, {
        "very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"medium", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "high", 2, 4, "small", "low"}, {
        "low", "medium", 4, 4, "large", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "high", 4, 2, "medium", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "medium", 2, 4, "small", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "low", 2, 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "very high", "low", 3, 4, "medium", "low"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "medium", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "medium", "medium", 2, 4, "small", "low"}, {
        "very high", "very high", 2, 2, "large", "high"}, {
        "high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "medium", 4, 4, "small", "low"}, {
        "high", "low", 4, 4, "medium", "high"}, {
        "very high", "low", 2, 2, "small", "medium"}, {
        "medium", "medium", 2, 2, "large", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {
        "very high", "low", 2, 2, "medium", "low"}, {
        "very high", "high", 3, 2, "large", "low"}, {
        "medium", "medium", 2, 4, "large", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "high", "medium", 2, 4, "small", "low"}, {
        "high", "medium", 4, 2, "large", "low"}, {
        "very high", "high", 4, 4, "small", "medium"}, {
        "low", "very high", 4, 2, "large", "low"}, {
        "very high", "very high", 4, 4, "medium", "low"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 4, 4, "small", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "high", 3, 2, "small", "medium"}, {
        "very high", "low", 3, 4, "small", "low"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "medium", 4, 4, "medium", "medium"}, {
        "high", "very high", 3, 4, "medium", "low"}, {
        "very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "very high", 4, 4, "large", "high"}, {"medium", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "low", 4, 2, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 2, 4, "large", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "high", 3, 4, "small", "low"}, {
        "medium", "medium", 4, 2, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "medium", "high", 3, 2, "small", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "very high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 3, 4, "small", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "very high", "medium", 3, 2, "large", "medium"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "high", 4, 2, "small", "high"}, {
        "very high", "high", 3, 4, "large", "medium"}, {
        "very high", "low", 4, 4, "medium", "low"}, {
        "very high", "high", 3, 2, "small", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "medium", 3, 2, "small", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "medium", "high", 4, 2, "large", "medium"}, {
        "high", "medium", 4, 2, "small", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "medium", 4, 2, "small", "low"}, {
        "very high", "medium", 4, 4, "medium", "medium"}, {
        "low", "medium", 3, 2, "large", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "medium", "very high", 3, 2, "small", "medium"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "high", "very high", 3, 4, "small", "medium"}, {
        "high", "low", 3, 2, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "very high", "high", 4, 2, "small", "low"}, {
        "very high", "high", 2, 2, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "low", "medium", 2, 4, "small", "high"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 2, 4, "medium", "medium"}, {
        "low", "high", 3, 4, "large", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "low", "high", 4, 2, "small", "medium"}, {"medium", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "very high", 2, 4, "medium", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "low", 4, 4, "large", "medium"}, {
        "low", "very high", 2, 2, "large", "low"}, {
        "low", "low", 4, 4, "medium", "low"}, {
        "high", "very high", 3, 2, "large", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "high", 4, 4, "small", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "medium", 3, 2, "medium", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "high", 4, 4, "medium", "low"}, {"medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 2, 4, "small", "low"}, {
        "low", "high", 2, 2, "large", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "medium", 4, 4, "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "low", 4, 2, "small", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "low", 4, 2, "small", "low"}, {
        "low", "medium", 4, 4, "medium", "high"}, {
        "high", "low", 2, 4, "large", "high"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "medium", 2, 2, "small", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "high", 4, 2, "small", "medium"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "medium", 2, 2, "large", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 2, 2, "medium", "high"}, {
        "high", "medium", 4, 2, "small", "high"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "medium", 3, 2, "small", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "very high", "medium", 2, 2, "large", "medium"}, {
        "high", "low", 2, 4, "medium", "low"}, {
        "very high", "low", 4, 4, "medium", "high"}, {
        "high", "high", 4, 2, "large", "high"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "high", "low", 4, 2, "small", "high"}, {
        "medium", "medium", 2, 2, "large", "low"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "medium", "high", 3, 2, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "very high", 2, 4, "small", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 3, 4, "medium", "high"}, {
        "medium", "very high", 4, 4, "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 4, 4, "medium", "high"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "very high", 4, 2, "small", "low"}, {
        "very high", "low", 4, 2, "medium", "low"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "medium", 4, 2, "small", "high"}, {
        "high", "very high", 4, 4, "medium", "medium"}, {
        "medium", "very high", 3, 2, "medium", "medium"}, {
        "medium", "low", 3, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 3, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "medium", 2, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "low", "high", 3, 4, "medium", "low"}, {
        "very high", "low", 3, 2, "small", "medium"}, {
        "low", "medium", 3, 4, "large", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "low", 4, 4, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "high", "very high", 4, 2, "small", "low"}, {
        "high", "low", 3, 2, "small", "high"}, {
        "high", "very high", 4, 4, "large", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 3, 2, "small", "medium"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "very high", "very high", 4, 2, "small", "medium"}, {
        "medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "high", 4, 2, "large", "medium"}, {
        "low", "medium", 4, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "medium", "medium"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "high", "high", 4, 4, "large", "medium"}, {
        "low", "high", 4, 4, "large", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "low", 2, 2, "medium", "medium"}, {
        "high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "medium", "very high", 3, 4, "large", "high"}, {
        "low", "very high", 3, 2, "medium", "medium"}, {
        "medium", "low", 3, 4, "small", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "medium", 2, 2, "medium", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "very high", "high", 4, 4, "large", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "low", 3, 4, "medium", "low"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "low", "high", 2, 4, "small", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 2, 2, "medium", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "high", "high", 3, 4, "small", "medium"}, {
        "medium", "low", 2, 4, "large", "low"}, {
        "low", "high", 3, 2, "large", "medium"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "medium", 2, 4, "medium", "medium"}, {
        "low", "medium", 3, 2, "medium", "low"}, {
        "medium", "low", 4, 2, "small", "medium"}, {"low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 4, 2, "medium", "low"}, {
        "low", "very high", 4, 4, "small", "high"}, {
        "very high", "medium", 2, 4, "small", "high"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 4, 2, "medium", "medium"}, {
        "very high", "medium", 2, 2, "large", "high"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "low", 3, 4, "small", "high"}, {
        "very high", "high", 2, 4, "medium", "high"}, {
        "high", "very high", 2, 2, "large", "low"}, {
        "high", "high", 2, 2, "medium", "medium"}, {
        "very high", "low", 2, 4, "small", "low"}, {
        "very high", "low", 2, 4, "large", "high"}, {
        "low", "medium", 4, 2, "small", "high"}, {"very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "medium", 4, 2, "medium", "medium"}, {
        "high", "high", 2, 2, "small", "high"}, {
        "very high", "high", 2, 4, "large", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "high", "medium", 4, 2, "medium", "high"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "low", 2, 4, "medium", "medium"}, {
        "low", "medium", 2, 4, "large", "low"}, {"medium", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "high", 4, 4, "medium", "low"}, {
        "low", "medium", 4, 4, "large", "medium"}, {
        "medium", "high", 2, 4, "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "high", 2, 2, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "high", 2, 4, "large", "low"}, {
        "medium", "very high", 2, 2, "medium", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "low", 2, 4, "medium", "medium"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "low", "high", 2, 4, "large", "medium"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "high", "low", 2, 2, "small", "high"}, {
        "medium", "very high", 3, 2, "large", "low"}, {
        "very high", "high", 2, 2, "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "very high", 3, 4, "medium", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "medium", "high", 3, 4, "medium", "low"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "high", "low", 4, 4, "medium", "low"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 2, 4, "medium", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 2, 2, "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "high", "high", 3, 2, "small", "high"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "low", 3, 2, "medium", "high"}, {
        "high", "high", 3, 4, "medium", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}}, 
      "Output" -> {
       "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "very good", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", "good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "good", "acceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "very good", "acceptable", "acceptable", "acceptable", "unacceptable",
         "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "very good", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "acceptable", "very good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable"}|>, 
    "Predictions" -> {
     "acceptable", "unacceptable", "acceptable", "acceptable", "unacceptable",
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "unacceptable", 
      "very good", "acceptable", "unacceptable", "acceptable", "unacceptable",
       "acceptable", "very good", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "acceptable", "acceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "very good", 
      "unacceptable", "acceptable", "acceptable", "acceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
      "unacceptable", "acceptable", "unacceptable", "very good", "acceptable",
       "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "good", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "very good", 
      "unacceptable", "very good", "unacceptable", "unacceptable", 
      "very good", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "good", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "acceptable", "good", "acceptable", "unacceptable", "acceptable", 
      "acceptable", "good", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "good", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", "good", 
      "unacceptable", "acceptable", "acceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "acceptable", "very good", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "acceptable", 
      "unacceptable", "good", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable"}, "LogProbabilities" -> CompressedData["
1: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
ceYy9Ft2631pO22sf1aoo3eltCUlSgw90872R4EM8b2STkvF+at8SqcTL69R
le/zAp5ZIKUHhyJwH+8RE4So2aBRf1EOXQ0JtEzZe+1m6Rliq/ekBalo8N+a
YUunN849oE52MHWpkjwTv3wO3mPwzcbmGTp5ZSt1dyET3zwrE4D31qHXBBM/
E29dXGym2kvc1O7PMDql8e9aMio/I7BEF/3+ueDYPStp5N/xui0BdCm/I/lP
yMl8YtYqLeSelRKyCk0aDyyXJkj52Xt4oN7C1G+U3wW+XjW7dG8LnONOVomx
9iNJmnRNCgO3R+b5r3uOm7H/Et+Xini/h5v0RI6UqP+7nk7kpuDzfLCZoGeo
fKd+lHJj4Pa++0x9epJ/OALX8726DmmMm95D2+M6AEc52f9GvgL8TMn+cKYj
BfBHRKjyzt8UosvUp+WBgTTqC3JuPgU4dd79feFfqCMWP1rO85FX0s5IzI/8
ymqwWqCo74aNpQ/JtPX35SI1oV7UnTfRNclktOggVyT+/68gf3TI3yIqpwnW
p18fRdIvQ/4i6vvg/1kghQ3ld7q27idULaRPCDeKov+95qeNbI65WUX4vYtY
mu0G/qwhZeXCeDFk3vwpJClxltAw38yJ9Z/CL70ej0pNpC7faIv132W/qG7K
7/VItHNHednnj7RfB9L6se769eZeA/Y3quZxXrj/YxQcQgxyRNABiTcGPlck
Uamz0K7vUSHEl9PWYQt9hdFSk/oIzC/rpQp5cH5m5vnFcc2WBRgf6rE8iFhM
/TLft7TQ1xEYF+6vdYY6skJRzwMX9oBvquGNl02D+og5oV7MHZFPnMgp534I
dcO636HzDdSjJVLPeUDH96vdWQr8uBEZgj77CfrM+YoT4MOGf/qs3WipCdYn
HwcKOJ68/kjjV5X1qof+42qaqsfvF/dApg/304c8+y2LwW8KnLbn5QP/KaTb
oX0UzuE8NM3pZ6iP2HbcQqZWimh3UjB3LxedYK3mX0w5Vj5qJqzz3UNvA36d
k3FWw/HSG2f6M9pxpl/7T6Pioz/4OhrfpJ/0IA+KFp1q+JiXTwQ8s2/PE5JA
D1dLq3w9JIymqydVlkOc/T+9UKR+CyYke9/WTgEfLZzI1dcFPjL7cE38UYMM
undrwGs2yo/Y6WIvEZ2lgL5sDckt85dD7MEN19a0yCCXsypGuVCXKiGapca5
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
71vM6NujJktIGLfZyrgY/bhz9Qm7B8A/TwaYfKN8Oz4S4+KC0vdRGD+/nPMV
nnmYR1Nd+jkO123ZPub5xdDa0/j+7UNTF699kiD+hlV/7ADebvQe/4TnMqxr
Fn6ozM/LrC8yv2PtXbcSzmmHPIWkGX7QU38Fwx9+tF7jh/1i+IUHoCd1ULFl
3EFhVRF04xmbZpBhL8Fah9QvaRnWrP33fNb3P9Z8/snAZWP8/JmZ3QWdMvwo
tFpzm36XDGpTD/Tf7p9HsP7ey36RCNara3/XhuL9DpEa/sPnCRVff0K80QS9
cHsbvnHMkbilSjp/EfIuFlojhH1mdvrbuEnAAT2Db7c3Fw3SkpU8D+L+bz17
ud4T++6a6V6snw6oBZxJCM4nHnE+TggWkkflDif1/IBvFTdYv9ZbpIWKte57
YP7d12LXsQH8rhT/DQ/8ewq25qzD3MC/79npdOL9Pao3lTmXfXWFmX/WKjyS
oX9Df4yWQoqUvwK4PeDUIOcD+7s63EjRAr9w/NeL6BvgD0wDyhZhPJJenMTI
H91uSxyu95nqe9eqhVej00Y8cquaWonUUx/jzpSPE6HXKY1/Zf4nvs4b3kXg
76ks/cRRxNS37nlWvnNXRP6tq+zXvdtOPkSs+2OjZZelgMIkfT7j+ZZQnWa7
3iLQNRJhix7D+5WZDH/C709JWKu3ZUwJ2UjF7Oh71Ur4dYh/qAb+e5fvsl4c
cMxToqo5rzKP9kRANQ7zu6P5d8Z8NyHLIR7X+ZB6gaJb5UeadaNjH653I84h
hj715CtgxJ91/qB5PCl/9sAY6whWfZwaOHcmuJcDiR3oe+knJ4bS2wrul3iW
EaQPBhpegDdcqjSHYcAbeU+X4WsnNJH/iqSjGI94I14e5u5W//d8VjxUTjH7
dKv6c4iXLSp1Fl96fNCCNsnBZoLnIbT5799Vj/4y5uslQX/el4D/vGXGnH/m
CzL9p8ilWxm4jmPXqnYNDfIg9v7qYx+gfuoe9ASFNOUTuwv8R0ImRZFPRuL9
Db6qBPVgl/cW6Ltfi+UPPwH84Jlw9YmFOqjs7+XdB3ov6+fmQjttMrJL/F2E
/f9DT1ln+ltlFG15PDtD5xTN6eloJOYtShkT/+SENdhw///JDH+K5z/xwz5R
+Px18/6i0ME2Cs9zI5KrdXH/XHAT/XODUwvdI4YY/WMsevWYcfZ6dHj3anGR
VGEU/rQ4dfyeJErhzTiZvLOAeOHRt3F6nAe1hXGceBx2nXboVm8c1g/SEuWC
uD63vPSOw98D0ocEY/B8qpN3m3cN1Gt5bhxjPlU0lqbVA3X4xMh9lyro864I
iSA8H8sqs81tB31uOWV5RAvqalJjUxXur8vJyeM3rZTQzz7Z5T+h/op2fg/F
9ei+yMxQFuqMTUev/w/U3U/DNc9vgg5zkeIy3Dkmja5fDOy5w2lCLNdsEvwI
cV29W1fQBM+Ld8cv+wh5ahsVk35kJY0ubD978QrsM3PTgSQTlU/E8a+Ssf8q
g/pOshPP6/wIDY3sGnFtJfTO59GlDT7gw2I/1oprSyMVlcKDU+DvbRQOCWHf
aBkwwfi+FpyNhDCeDxqFcMipqSMekxYu09QqojYqWu036IRFToVc9m4SKLaJ
ayeeT7UstS0qqFdGLscpMunargSXhrDTNdAJAxJ3GPmh7wmcyof8GF9j5ue/
S5/Bnxv8m+8cJ5kzfs/xJrrRmAS+acR6GfCwHcrPLYk4VypJWzYhzfCrrN9/
sH4PsmnPmsH9ZFfCiRTBnA+fn2LMh4Ui5+rfQ52z/LPBvG5k+ef91czvS0vz
99zEuJ8hXuvQk6eAbNiiKZfgfMKjbp7Zl1KIxryarlcbjxDO057rhRtlUBS/
n7/bO1G0POLlkWmIo+Mu9j/N2C9EI2r5lALaxP3ZUQ30y/aDv93C0nUQnwv1
xQYrRbTrSgjjuwlrNeW3Ynw/uXQ85uxeOG/p1E6TFVrSKNLvzCq1c7sIV4qZ
mY2n3D9/H9o+Zoy/J7H8fWcEc/4R+Df8QjPw53L1z4zfH74aYOrv4Xp7hOPD
0jdh8+/L8i8svfM4t2QPnm8+mf+eyJpv3nLJZ/y+hfOxwSlp4JejBpXubFAP
Vgvv1mH9ybpe7RHietE/jThmfSSpNUwY1V9Vj79uJfhvvaXDboH5xvbtp4tH
AT92cbhJJAMf3fXYZo3r/0z5JWtcPxYDZ2+YeKqirxwh3YSWK/HoqcF7X+jz
2q+ScfR3pTQrtbw0jKcbtukw5wMcVKFM6Fc15W5rVwNB5HVqp+1UsygSCd9y
I3NTNJGwYleBSrYC0hyJCTnzt5QW3H1eCOOeV+JmRVzf247tYHxPZv1+Jfww
sz5Yv1/RKGbyeNvRu3WNtfzo9JvLvZvq5NCfjnrrrjezRO+XxCXTx6uJby7J
AZHDdFrfyh0RXvD848HnZt+C7mBdO/Od/onnmVEynNPLof9qSQK3U439iAfS
DrNj8H7r9O52rQF9ttjGnDGPioxl6huRlobTOH/DtnPfnqnAfV9s3NeYDhCs
VfURV7aDGAdqTQpfsQ/wEU13s2HdKomY+PjMaC8b/v2Kxt62Sl5JE6Jbzvw0
xo27gcWn2wBHunptTxsDTymNOHmEZaQRg3Ghx8jFIuiALo1mu0gC7Xq1+USG
ED+SXPTDdwj4xzGw3Rfr5SA3FR/MP520abjWRbX+0bNlgEOHZOhzZfDcipmR
Ctk5ZUJ4x/2/m4EP/h+V4vah
     "], "CountMatrix" -> {{229, 0, 14, 0, 0}, {0, 9, 6, 3, 0}, {0, 2, 70, 1, 
     0}, {0, 3, 1, 8, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwN0tlrDwAAAOAfmW1mW2YH09LMMWZnzTZ2kLCt2Pw2tmWEhlybiMmLoxCh
HCXsiOQFSVmOpslZotxXuUmWI3c8+R6+/+BLnt8UbOwRCATe05MQehNKGOFE
EEkU0fQjhv7EEkc8CQwgkSQGk8JQUhlJGulkkEkW2eSQyxjyyKeAsRRSRAnj
mUgpZZQzjQoqmU6QKqqZQQ211DGLemYzh7nMo4EFLGQRi1nCUpaxnEaaWMFK
VrGaNTSzlnWsZwMb2cRmtrCVbWxnBzvZxW72sJd97OcABzlEC6200c5hjnCU
YxznBCc5xWnO0MFZznGeC3RykS4ucZkrXOUa17nBTW5xmzvc5R73ecBDHvGY
JzzlGc95wUte8Zo3vOUdH/hIN5/4zBe+8o3v/OAnv/jNH/7yj4CsvQghlDDC
6UMEfYkkimhiiCWOeBIYSCKDSCKZIaQwjOGMIJVRpDGadDLIIpsccskjn3EU
UkQxJUxgEpOZQilllDOVCioJUs1Maqiljv+s6GKm
       "], {}, {3, 4, 10, 37, 70, 149, 150, 190, 193, 219, 280, 307, 322, 
       331}, {}, {}}, {{}, {163, 182, 229, 232, 240, 254, 288, 313, 341}, {62,
        116, 123, 235, 248, 310}, {33, 95, 323}, {}}, {{}, {273, 284}, {1, 12,
        16, 28, 30, 34, 38, 39, 42, 44, 51, 52, 65, 66, 68, 69, 71, 75, 76, 
       77, 86, 90, 98, 99, 104, 113, 124, 125, 131, 132, 136, 139, 143, 144, 
       152, 160, 165, 168, 169, 170, 174, 176, 178, 179, 187, 200, 207, 220, 
       230, 251, 252, 253, 255, 257, 258, 262, 272, 275, 286, 287, 292, 297, 
       303, 308, 314, 324, 332, 334, 339, 346}, {203}, {}}, {{}, {25, 59, 
       259}, {32}, {27, 121, 126, 167, 201, 206, 320, 337}, {}}}, 
    "ExtendedClasses" -> {"unacceptable", "good", "acceptable", "very good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0005186734104046243, "SingleEvaluationTime" -> 
    0.003613, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"8b5199d2-ba99-4fe9-a2b5-116a35eea998"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedSoftNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}},
 CellLabel->
  "In[360]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"be", "=", 
   RowBox[{"HardNetBooleanExpression", "[", 
    RowBox[{"hnf", ",", "inputSize"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.86844799400079*^9, 3.8684479976827383`*^9}, {
  3.868448047177867*^9, 3.8684480520874557`*^9}, {3.868498730298581*^9, 
  3.868498732960826*^9}, {3.868498862707155*^9, 3.868498879556279*^9}, {
  3.8684989105950537`*^9, 3.868498917672814*^9}, {3.868499020106044*^9, 
  3.868499029939315*^9}, {3.8684991308340607`*^9, 3.86849913728869*^9}, {
  3.868501712941268*^9, 3.8685017333607197`*^9}},
 CellLabel->
  "In[361]:=",ExpressionUUID->"78237fdf-a58b-42a3-8484-e3e957616053"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bf", "=", 
   RowBox[{"HardNetBooleanFunction", "[", 
    RowBox[{"hnf", ",", "inputSize"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868499404848036*^9, 3.8684994057884827`*^9}, {
   3.868500092317161*^9, 3.868500113104691*^9}, {3.86850053116654*^9, 
   3.8685005343943768`*^9}, 3.868501506751669*^9, {3.868501737242167*^9, 
   3.868501763144616*^9}, 3.868504431554797*^9, 3.8685052369561377`*^9, 
   3.868505462092078*^9, 3.8685111553431253`*^9},
 CellLabel->
  "In[362]:=",ExpressionUUID->"cb00598c-7d10-4c12-aca9-f8d0be5ed6cc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"HardClassPrediction", "[", "m_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"totals", "=", 
      RowBox[{"Total", "/@", 
       RowBox[{"N", "[", 
        RowBox[{"Boole", "[", "m", "]"}], "]"}]}]}], "}"}], ",", 
    RowBox[{"totals", "/", 
     RowBox[{"Total", "[", "totals", "]"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HardNetClassify", "[", 
   RowBox[{"hardNet_Function", ",", "featureLayer_NetGraph", ",", "data_"}], 
   "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"HardClassPrediction", "[", 
     RowBox[{"hardNet", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"featureLayer", "[", "#", "]"}], "]"}], "]"}], "]"}], "&"}], "/@",
    "data"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HardNetClassifyWithTarget", "[", 
   RowBox[{
   "hardNet_Function", ",", "featureLayer_NetGraph", ",", 
    "decoder_NetDecoder", ",", "data_", ",", "targetName_String"}], "]"}], ":=", 
  RowBox[{
   InterpretationBox[
    TagBox[
     DynamicModuleBox[{Typeset`open = False}, 
      FrameBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[GridBox[{
              {
               StyleBox[
                StyleBox[
                 AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                  BoxBaselineShift->-0.25,
                  BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                 
                 FontColor->RGBColor[
                  0.8745098039215686, 0.2784313725490196, 
                   0.03137254901960784]],
                ShowStringCharacters->False,
                FontFamily->"Source Sans Pro Black",
                FontSize->0.6538461538461539 Inherited,
                FontWeight->"Heavy",
                PrivateFontOptions->{"OperatorSubstitution"->False}], 
               StyleBox[
                RowBox[{
                 StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                ShowAutoStyles->False,
                ShowStringCharacters->False,
                FontSize->Rational[12, 13] Inherited,
                FontColor->GrayLevel[0.1]]}
             },
             GridBoxSpacings->{"Columns" -> {{0.25}}}],
            Alignment->Left,
            BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
            BaselinePosition->Baseline,
            FrameMargins->{{3, 0}, {0, 0}}], 
           ItemBox[
            PaneBox[
             TogglerBox[Dynamic[Typeset`open], {True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeCloser"],
               ImageSizeCache->{11., {1., 10.}}], False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeOpener"],
               ImageSizeCache->{11., {1., 10.}}]},
              Appearance->None,
              BaselinePosition->Baseline,
              ContentPadding->False,
              FrameMargins->0],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{1, 1}, {0, 0}}],
            Frame->{{
               RGBColor[
               0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                0.5], False}, {False, False}}]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
        GridBox[{
          {GridBox[{
             {
              PaneBox[GridBox[{
                 {
                  StyleBox[
                   StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                   ShowStringCharacters->False,
                   FontFamily->"Source Sans Pro Black",
                   FontSize->0.6538461538461539 Inherited,
                   FontWeight->"Heavy",
                   PrivateFontOptions->{"OperatorSubstitution"->False}], 
                  StyleBox[
                   RowBox[{
                    StyleBox["DynamicMap", "ResourceFunctionLabel"], " "}],
                   ShowAutoStyles->False,
                   ShowStringCharacters->False,
                   FontSize->Rational[12, 13] Inherited,
                   FontColor->GrayLevel[0.1]]}
                },
                GridBoxSpacings->{"Columns" -> {{0.25}}}],
               Alignment->Left,
               BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
               BaselinePosition->Baseline,
               FrameMargins->{{3, 0}, {0, 0}}], 
              ItemBox[
               PaneBox[
                TogglerBox[Dynamic[Typeset`open], {True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeCloser"]], False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeOpener"]]},
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ContentPadding->False,
                 FrameMargins->0],
                Alignment->Left,
                BaselinePosition->Baseline,
                FrameMargins->{{1, 1}, {0, 0}}],
               Frame->{{
                  RGBColor[
                  0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                   0.5], False}, {False, False}}]}
            },
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
          {
           StyleBox[
            PaneBox[GridBox[{
               {
                RowBox[{
                 TagBox["\<\"Version (latest): \"\>",
                  "IconizedLabel"], " ", 
                 TagBox["\<\"4.0.0\"\>",
                  "IconizedItem"]}]},
               {
                TagBox[
                 
                 TemplateBox[{
                  "\"Documentation \[RightGuillemet]\"", 
                   "https://www.wolframcloud.com/obj/resourcesystem/published/\
FunctionRepository/resources/DynamicMap"},
                  "HyperlinkURL"],
                 "IconizedItem"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
            FontFamily->"Roboto",
            FontSize->11]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
              GrayLevel[0.8]}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open],
        BaselinePosition->Baseline,
        ImageSize->Automatic],
       Background->RGBColor[
        0.9686274509803922, 0.9764705882352941, 0.984313725490196],
       BaselinePosition->Baseline,
       DefaultBaseStyle->{},
       FrameMargins->{{0, 0}, {1, 0}},
       FrameStyle->RGBColor[
        0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
       RoundingRadius->4]],
     {"FunctionResourceBox", 
      RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
      "DynamicMap"},
     TagBoxNote->"FunctionResourceBox"],
    ResourceFunction[
     ResourceObject[<|
      "Name" -> "DynamicMap", "ShortName" -> "DynamicMap", "UUID" -> 
       "962b5001-b624-4bc4-9b1e-401e550f4f2b", "ResourceType" -> "Function", 
       "Version" -> "4.0.0", "Description" -> 
       "Map functions over lists while showing dynamic progress", 
       "RepositoryLocation" -> 
       URL["https://www.wolframcloud.com/objects/resourcesystem/api/1.0"], 
       "SymbolName" -> 
       "FunctionRepository`$f51668a7ac6041a9b46390842a7243d8`DynamicMap", 
       "FunctionLocation" -> 
       CloudObject[
        "https://www.wolframcloud.com/obj/9d55b90e-e3c6-4d27-bdcf-\
8c3ebb4fe19a"]|>, ResourceSystemBase -> Automatic]],
    Selectable->False], "[", 
   RowBox[{
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Prediction\>\"", "->", 
        RowBox[{"First", "[", 
         RowBox[{"decoder", "[", 
          RowBox[{"HardNetClassify", "[", 
           RowBox[{"hardNet", ",", "featureLayer", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"KeyDrop", "[", 
               RowBox[{"{", "targetName", "}"}], "]"}], "@", "#"}], "}"}]}], 
           "]"}], "]"}], "]"}]}], ",", 
       RowBox[{"\"\<Target\>\"", "->", 
        RowBox[{"#", "[", "targetName", "]"}]}]}], "\[RightAssociation]"}], 
     "&"}], ",", "data"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "HardNetClassifyEvaluation", "[", "hardNetClassifyTargetPairs_", "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"counts", "=", 
       RowBox[{"Counts", "[", "hardNetClassifyTargetPairs", "]"}]}], ",", 
      "correctExamples", ",", "accuracy"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"correctExamples", "=", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"Normal", "[", "counts", "]"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"assoc", "=", 
              RowBox[{"First", "[", "#", "]"}]}], "}"}], ",", 
            RowBox[{"Length", "[", 
             RowBox[{"DeleteDuplicates", "[", 
              RowBox[{"Values", "[", "assoc", "]"}], "]"}], "]"}]}], "]"}], "==",
           "1"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"accuracy", "=", 
      RowBox[{"N", "[", 
       RowBox[{
        RowBox[{"Total", "[", 
         RowBox[{"Last", "/@", "correctExamples"}], "]"}], "/", 
        RowBox[{"Total", "[", "counts", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Accuracy\>\"", "->", "accuracy"}], 
      "\[RightAssociation]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.86851120530195*^9, 3.868511272353758*^9}, 
   3.868511305493258*^9, {3.868514954860507*^9, 3.8685151375359507`*^9}, {
   3.868515189184412*^9, 3.868515191052165*^9}, {3.868515222362515*^9, 
   3.868515337315857*^9}, {3.868515403997274*^9, 3.86851540558797*^9}, {
   3.868515489059927*^9, 3.868515500012171*^9}, {3.86851553695434*^9, 
   3.868515569403914*^9}, {3.8685156064432898`*^9, 3.868515691453251*^9}, {
   3.868515735508318*^9, 3.868515834779708*^9}, {3.86851590062788*^9, 
   3.868515921396516*^9}, {3.868515978475855*^9, 3.8685159840924797`*^9}, {
   3.868516145878088*^9, 3.868516156797393*^9}, {3.868516193668167*^9, 
   3.8685162164617977`*^9}, {3.868516249131925*^9, 3.868516291172855*^9}, {
   3.8685163256279583`*^9, 3.868516332332419*^9}, {3.868516464917502*^9, 
   3.868516473709545*^9}, {3.8685166865731983`*^9, 3.8685166889841633`*^9}, {
   3.86851673016532*^9, 3.8685167327261343`*^9}, {3.8685170655574417`*^9, 
   3.868517069175065*^9}, {3.8685171842225018`*^9, 3.868517186862298*^9}, {
   3.868517262504545*^9, 3.868517267183681*^9}, {3.8685172996225843`*^9, 
   3.868517371337047*^9}, {3.868517740350792*^9, 3.868517805909007*^9}, {
   3.868517927100811*^9, 3.868517975013647*^9}, {3.868518027472096*^9, 
   3.8685180774856653`*^9}, {3.868518247302417*^9, 3.868518416656061*^9}},
 CellLabel->
  "In[469]:=",ExpressionUUID->"feba8609-70c4-415a-ba4b-10e70fff6a98"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassifyWithTarget", "[", 
    RowBox[{"bf", ",", "featureLayer", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     "testData", ",", "\"\<Acceptability\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"eval", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}]], "Input",
 CellChangeTimes->{{3.86851514846721*^9, 3.868515162315323*^9}, {
   3.8685152259164333`*^9, 3.868515231696006*^9}, {3.868515347388423*^9, 
   3.868515363754871*^9}, {3.86851541741639*^9, 3.868515431530836*^9}, {
   3.868515509156271*^9, 3.868515511890397*^9}, {3.868515573316112*^9, 
   3.868515579026569*^9}, {3.868515751700666*^9, 3.8685157527942743`*^9}, {
   3.86851583738085*^9, 3.868515839434691*^9}, {3.868515937607679*^9, 
   3.868515939034754*^9}, {3.868516300197514*^9, 3.8685163021781473`*^9}, {
   3.86851635822871*^9, 3.8685163614104424`*^9}, {3.8685174050541363`*^9, 
   3.868517426301255*^9}, {3.86851800475167*^9, 3.868518023027822*^9}, 
   3.8685180968758574`*^9, {3.868518273107486*^9, 3.8685182801196947`*^9}},
 CellLabel->
  "In[473]:=",ExpressionUUID->"0af5386a-45b5-47ea-ad24-ea4b00289a0b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.9132947976878613`"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.868518273502015*^9, 3.868518280489999*^9}, 
   3.868518338565795*^9, {3.868518370785715*^9, 3.868518377800254*^9}, 
   3.8685184189914207`*^9},
 CellLabel->
  "Out[473]=",ExpressionUUID->"f0e8ab26-af58-42f2-b940-365713b1e69a"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 628, 13, 29, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1450, 45, 202, 3, 29, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1655, 50, 25173, 561, 291, "Output",ExpressionUUID->"dd9be02a-3bb0-4b80-9d79-92e39b3e3885"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26865, 616, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[27094, 624, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[27562, 635, 127509, 2371, 652, "Output",ExpressionUUID->"ea390a55-8630-4d7d-b137-afb4c7c2b40f"]
}, Open  ]],
Cell[155086, 3009, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163616, 3216, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[163936, 3223, 2784, 69, 216, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[166723, 3294, 1798, 40, 257, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168558, 3339, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[168916, 3347, 2207, 41, 154, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[171126, 3390, 1441, 26, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[172570, 3418, 1091, 24, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173698, 3447, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[174056, 3455, 1170, 28, 133, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[175263, 3488, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[175722, 3497, 1751, 32, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[177498, 3533, 855, 13, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[178356, 3548, 230566, 4264, 495, "Output",ExpressionUUID->"8b5199d2-ba99-4fe9-a2b5-116a35eea998"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[408971, 7818, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[409481, 7828, 483, 10, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[409967, 7840, 649, 12, 29, "Input",ExpressionUUID->"78237fdf-a58b-42a3-8484-e3e957616053"],
Cell[410619, 7854, 573, 11, 29, "Input",ExpressionUUID->"cb00598c-7d10-4c12-aca9-f8d0be5ed6cc"],
Cell[411195, 7867, 12286, 291, 223, "Input",ExpressionUUID->"feba8609-70c4-415a-ba4b-10e70fff6a98"],
Cell[423484, 8160, 474, 10, 29, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[CellGroupData[{
Cell[423983, 8174, 922, 14, 29, "Input",ExpressionUUID->"0af5386a-45b5-47ea-ad24-ea4b00289a0b"],
Cell[424908, 8190, 399, 8, 56, "Output",ExpressionUUID->"f0e8ab26-af58-42f2-b940-365713b1e69a"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

