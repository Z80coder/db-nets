(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1147345,      20998]
NotebookOptionsPosition[   1142613,      20909]
NotebookOutlinePosition[   1143051,      20926]
CellTagsIndexPosition[   1143008,      20923]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->
  "In[268]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11076311837203559612771654019538047733440425727513536347048], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11076311837203559612771654019538047733440425727513536347048,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9, 3.8685300999400797`*^9, 3.868533465833148*^9, 
  3.868591722379105*^9, 3.868670373439299*^9, 3.868944316441147*^9, 
  3.869023715466254*^9, 3.869041339373542*^9, 3.869119740136602*^9, 
  3.869212283188902*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"742bfa1a-6eda-4c65-ab3c-05c3cdb241be"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "featureValues"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}, {3.868682465592621*^9, 3.868682467103612*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9, {
   3.8686824585003*^9, 3.86868246003918*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"32", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize", ",", 
           RowBox[{
            RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}], ",", 
           RowBox[{
            RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}, {
   3.868520025904859*^9, 3.868520026662962*^9}, {3.868520165374518*^9, 
   3.868520172724663*^9}, {3.868520227657476*^9, 3.8685202280400333`*^9}, {
   3.868520278697311*^9, 3.868520283147401*^9}, {3.8685206145298347`*^9, 
   3.8685206150078983`*^9}, {3.868537004723915*^9, 3.868537005683709*^9}, {
   3.8686716248609867`*^9, 3.86867162498657*^9}, {3.8689423409409943`*^9, 
   3.868942344276237*^9}, {3.868947806296569*^9, 3.868947806625355*^9}, 
   3.868955246204385*^9, {3.868957393208212*^9, 3.8689574013451433`*^9}, {
   3.868957440249872*^9, 3.8689574443738937`*^9}, {3.8689577953130703`*^9, 
   3.868957801168947*^9}, {3.868958026730661*^9, 3.8689580269562798`*^9}, {
   3.868960876079372*^9, 3.8689608783682137`*^9}, {3.868964831153708*^9, 
   3.868964831513155*^9}, {3.868965437993729*^9, 3.868965438129128*^9}, {
   3.868975240520047*^9, 3.868975267560664*^9}, {3.8690319933178453`*^9, 
   3.8690319942928963`*^9}, {3.869034512435259*^9, 3.869034512808312*^9}, {
   3.869034610772094*^9, 3.869034611688615*^9}, {3.86903620618801*^9, 
   3.869036206373323*^9}, {3.8690363476068773`*^9, 3.869036349769408*^9}, {
   3.869036449105991*^9, 3.869036450054133*^9}, {3.8691058271725616`*^9, 
   3.86910585030811*^9}, {3.869106008681794*^9, 3.86910601769174*^9}, {
   3.869106118542383*^9, 3.869106126708026*^9}, {3.869106300198392*^9, 
   3.869106310243504*^9}, {3.869106550008959*^9, 3.8691065502511663`*^9}, {
   3.8691066023696003`*^9, 3.8691066409269953`*^9}, {3.869106728726873*^9, 
   3.869106732707152*^9}, {3.869106781369624*^9, 3.869106781690955*^9}, {
   3.869107221769636*^9, 3.869107224150084*^9}, {3.8691076647349586`*^9, 
   3.8691076791551533`*^9}, 3.869108111159465*^9, {3.869111253542173*^9, 
   3.869111266704829*^9}, 3.8691114531763678`*^9, {3.8691115014501963`*^9, 
   3.8691115024350452`*^9}, {3.8691115775921707`*^9, 
   3.8691115787758913`*^9}, {3.8691116899369087`*^9, 3.869111690538197*^9}, {
   3.8691117691600723`*^9, 3.8691117876982183`*^9}, {3.8691121802378807`*^9, 
   3.8691121836826277`*^9}, 3.869112387993538*^9, {3.8691125616997557`*^9, 
   3.8691125907168922`*^9}, {3.86911270806533*^9, 3.869112723740849*^9}, {
   3.869112956528831*^9, 3.869112966025186*^9}, {3.869113141057391*^9, 
   3.869113142033929*^9}, 3.869115743191606*^9, {3.869117545424532*^9, 
   3.869117552560911*^9}, 3.8691197572896433`*^9, {3.869121698753475*^9, 
   3.8691217122755747`*^9}, 3.86919713699297*^9, {3.869203795640698*^9, 
   3.8692038057553377`*^9}, {3.8692077554756203`*^9, 3.869207760735105*^9}, {
   3.869208079942*^9, 3.869208085087775*^9}, {3.8692088553125353`*^9, 
   3.86920886120012*^9}, {3.869209158678213*^9, 3.869209159292757*^9}, {
   3.8692095136217213`*^9, 3.869209514533951*^9}, {3.869211601191217*^9, 
   3.869211602739736*^9}, {3.8692123062616177`*^9, 3.8692123119646463`*^9}, {
   3.869212438589468*^9, 3.8692124505522203`*^9}, {3.869212552950715*^9, 
   3.8692125532671328`*^9}, {3.8692126127431927`*^9, 3.869212613253107*^9}, {
   3.8692126791033287`*^9, 3.86921268464844*^9}, {3.86921276395127*^9, 
   3.8692127642612867`*^9}, {3.869212861743297*^9, 3.8692128621976557`*^9}, {
   3.869212912650663*^9, 3.8692129131419163`*^9}, {3.869213418442769*^9, 
   3.869213422358157*^9}, {3.86921548420509*^9, 3.869215497105235*^9}, {
   3.869215546879163*^9, 3.8692155519349546`*^9}, {3.8692161044615107`*^9, 
   3.869216107132107*^9}, {3.8692167279588547`*^9, 3.8692167436075907`*^9}, {
   3.869217032457283*^9, 3.8692170459859877`*^9}, {3.869217373494234*^9, 
   3.8692173782740717`*^9}, {3.869217516946954*^9, 3.869217517213879*^9}, {
   3.869217724899954*^9, 3.86921773656007*^9}, {3.86921777789679*^9, 
   3.8692177779781427`*^9}, {3.869217825227951*^9, 3.869217842059514*^9}, {
   3.869218068966909*^9, 3.869218073431982*^9}, {3.8692196032022543`*^9, 
   3.869219604075777*^9}},
 CellLabel->
  "In[282]:=",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->
  "In[283]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->
  "In[284]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}, {
   3.8685364797630873`*^9, 3.868536496883217*^9}, {3.868600076169417*^9, 
   3.868600076637474*^9}, {3.868600134889481*^9, 3.868600135284954*^9}, {
   3.868601255470386*^9, 3.8686012558943872`*^9}, {3.868602902814464*^9, 
   3.868602903232891*^9}, {3.868943377521962*^9, 3.868943381357031*^9}, {
   3.8689434141572866`*^9, 3.868943425164989*^9}, {3.868943586951866*^9, 
   3.8689436089616327`*^9}, {3.868944023717293*^9, 3.8689440271979637`*^9}, {
   3.868944083020088*^9, 3.868944086825481*^9}, {3.868947817163151*^9, 
   3.8689478172894077`*^9}, {3.868949946458611*^9, 3.868949960076432*^9}, {
   3.868977243682851*^9, 3.868977248732733*^9}, {3.868977291844462*^9, 
   3.8689773017254*^9}, {3.868977346389843*^9, 3.868977377673813*^9}, {
   3.868977408389917*^9, 3.868977427933148*^9}, {3.868977539952648*^9, 
   3.868977554029306*^9}, {3.868977819969697*^9, 3.8689778435338573`*^9}, {
   3.869023762591353*^9, 3.8690237633179893`*^9}, {3.869023837158021*^9, 
   3.869023876685935*^9}, {3.869110793308095*^9, 3.86911082542246*^9}, {
   3.869110910640922*^9, 3.869110910806432*^9}, {3.86912172241117*^9, 
   3.8691217224768143`*^9}},
 CellLabel->
  "In[285]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{"\"\<TrainedNet\>\"", "->", 
         RowBox[{"NetDelete", "[", 
          RowBox[{
           RowBox[{"NetFlatten", "[", "#", "]"}], ",", "\"\<Loss/Error\>\""}],
           "]"}]}], "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      RowBox[{"HardenNet", "[", 
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}]}], "}"}]}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}, {3.86912103176339*^9, 3.869121111451393*^9}, 
   3.8691211481142063`*^9},
 CellLabel->
  "In[288]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", 
     RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}, {
   3.868964207787449*^9, 3.868964270803673*^9}, {3.869042816860148*^9, 
   3.869042853385454*^9}, {3.8691211223288383`*^9, 3.869121124951189*^9}},
 CellLabel->
  "In[289]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "952df23c-db65-4f08-bc0e-9f9e028a8f59"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"91.0", "1.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    91.0404624277456662185`3., 1.5376251627780317399`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265192167`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.7938869983755471038`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0172804408776833784`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.7593261166201803469`3.", "\", \"", 
                    "0.8284478801309138607`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.7593261166201803469`3., ", ", 0.8284478801309138607`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.23081414728963498`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0217651588121155343`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.1872838296654039114`3.", "\", \"", 
                    "0.2743444649138660485`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.1872838296654039114`3., ", ", 0.2743444649138660485`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.42`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"3.37`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQ+3KJgLBa1jv737/OhGw489Z+VqVFpVvzK3sGMPhA
NH1D+l3Fu31v7AvTYjwmmz63zzx2dGZY6lV70RuPdC1+vrVnf37N9aviG/tX
NXl3/HWf2Zcsq1RYb/jOnvFj4Nmg72/sHaova3lHvLBXrX7MFM/6xl5DdcdG
Ca4n9l7BOWcSbh+0/1IQkcPc9tbe4eme3fPzXtnLSV9L/3HgIUF3PawSWef+
8BaUz8Dw8dPCuHNMb+0bS7yd0uJe2AfP3sF08stNe1zhMHXRwcoe37f2brcd
TZxmvrTvsnxk9Ev7Pk77cPlrG6eP9cEDb+1570bvm+7z2n5CHWdfCNMTewBv
xZtQ
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["7", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "7", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6363636363636364`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5384615384615384`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5833333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{7, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.6363636363636364}], 
                    Row[{"Recall = ", 0.5384615384615384}], 
                    Row[{"FScore = ", 0.5833333333333333}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.2727272727272727`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.04411764705882353`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.2727272727272727}], 
                    Row[{"Row fraction = ", 0.04411764705882353}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.09090909090909091`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.07142857142857142`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.09090909090909091}], 
                    Row[{"Row fraction = ", 0.07142857142857142}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9916666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9482071713147411`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.969450101832994`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9916666666666667}], 
                    Row[{"Recall = ", 0.9482071713147411}], 
                    Row[{"FScore = ", 0.969450101832994}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    TemplateBox[{
                    "\"Column fraction = \"", "0.008333333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.029411764705882353`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.008333333333333333}], 
                    Row[{"Row fraction = ", 0.029411764705882353`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.028169014084507043`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.15384615384615385`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "very good", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.028169014084507043`}], 
                    Row[{"Row fraction = ", 0.15384615384615385`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.16901408450704225`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.04780876494023904`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.16901408450704225`}], 
                    Row[{"Row fraction = ", 0.04780876494023904}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["57", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "57", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8028169014084507`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8382352941176471`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8201438848920863`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{57, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8028169014084507}], 
                    Row[{"Recall = ", 0.8382352941176471}], 
                    Row[{"FScore = ", 0.8201438848920863}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.16666666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.3076923076923077`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", "very good", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.16666666666666666`}], 
                    Row[{"Row fraction = ", 0.3076923076923077}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.041666666666666664`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.041666666666666664`}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.25`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.08823529411764706`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.25}], 
                    Row[{"Row fraction = ", 0.08823529411764706}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.5416666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9285714285714286`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6842105263157895`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.5416666666666666}], 
                    Row[{"Recall = ", 0.9285714285714286}], 
                    Row[{"FScore = ", 0.6842105263157895}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5384615384615384`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.5384615384615384}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9482071713147411`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9482071713147411}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8382352941176471`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{68, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.8382352941176471}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9285714285714286`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{14, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.9285714285714286}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6363636363636364`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.6363636363636364}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "240", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9916666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{240, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.9916666666666667}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "71", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8028169014084507`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{71, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.8028169014084507}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "24", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.5416666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{24, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.5416666666666666}]}], 
                    "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["13", TraditionalForm]}, {2.5, 
                    FormBox["251", TraditionalForm]}, {1.5, 
                    FormBox["68", TraditionalForm]}, {0.5, 
                    FormBox["14", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["11", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["240", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["71", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["24", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "very good" -> 0.25, "unacceptable" -> 0.25, "acceptable" -> 0.25,
              "good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "very high", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "very high", "medium"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {2, 3, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"large", "medium", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"high", "low", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "very good", "unacceptable", "acceptable", "good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
q2CUqSvqFLUh5gt4K9EAs69MwNRnd/H+7hHUe8AdPfUjMM4mCqUXCPndRkP5
5gMHMfjVWVJduwnHNN2gaTpqJIpRo8i8aPTKPYfN7zVIt0cWG/xv4pKiJegP
Qt5RW0jDMB3PernghuppGMcJMSB6Dn5Xk+A74uQp7KcExWoJ+DdSWjjp8Fva
tCKYyOI+Kxh8d/GWUcQd68H0kjpS7q5jpSuysPTIDfKdaC3a/6UU411W49bE
51i4sIfd2DKc3j24jWd2nEZ9OorHQybxh7+H0GKVjaT5LYI1W5/ERYbqbPnN
Q2Q4IEPj+7ajwUt/dK48QkG509nRlHmUHbkA39y3wnrlOryyLJHkRSa0dNEk
KrLMYUPTVrDCsSoU16ZEdu878ProetyhewvvqjYzGwwiLeWRbAaq06j1CvRV
XJnSqs7hK2dHPsz7JAPjE8x2+1G8oOiEL+yHUcF/EzB6tCpdiAvC77OWkNxL
F5GedCVG7ZWnGaNXk2JyAlqBI25+oUFOFjo068slkN/7H+YN+mu5QzkOVTVH
GQOe716jhXJDS0XR5SoUfH8AOlMP0f2XxfjDMZWFr5bBOb84ZjHaD1/FylDz
2kFV3WlMFflW7OiH4eS+dg77WqbOL/vXik/+PsP07VfRsnoAH37n2e9ZQt7n
9CNK986hXUXizMBZyN/mLrAD+h2DnCfgaxUN6OM7HzpxYWCQkdOoKjsTbzQa
kPVIb9YfWYgmZuexa109nnqzDlfts2Qz/8Syu06mxKJzWKaFkI/4E0ZDfzJm
P0TAD9+Shgn3TqIrRoPsk7H0XtGNNuXZ0da6Tyz/+6OiX2ujsDKhG1Pu38cD
gc3Y6jaS0pS98GzVFVJdHY1K9mK0/eln5lxnSVPCmnHmDCH/6c8oXD1Yq0u/
47FNbSUtOT6GPpuOINt/iii/8Cn+vRHH8o7VYIHhTVZR5IhVe+5QdrUC+l9I
ZxaPSiF/WzIunDaPTvtdxIIGAa9svkjUujmXaWSOYR++DqfZqb1s47liln7V
AtUMQyhOuZ4es0rmrCLkZ0qbYPfAK5ZvmVh8VvItuS0YgZaDezKyDKBRvyTp
hIwSFnRG4ZPKDhjrGUUd+7tgBtjiyP3n2NVCG+LH76W5jUlM2mUdlh74hC67
J1Ja4nrc07cIvxn04rv34ezkthicECzkA0XX8cj2e5j03Apvabuj9PoIfJYu
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
gU7tucSm10yirQuJ9ivuxv8BGa15YA==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {2688}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {2688}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/4" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJwVjmtIE2AUhr8GmkpIZnkjEKuVuCJxGSp1Tl4IhUCYybDQVMigicvZiFTi
M2holqlhiiBJFmQhZbmiczQhk7REwUti1PphE4NWqGDoLl/rx/vwPP/euFKz
oUwjhKgK8sNQciXdYim5mhf4P86XlOuTyrf4Vfr3fkJByFsfpAdHsnN2gb6c
TubuhSHuyQrgiiSBCZdWaPWxg+xdD2l11wzrn+zG4I06Lk7zkN01SM7ZArZF
K9CZT7Cr3wf6Lonx39ZpsFZi1ccgju0V6Op7R8cGNBzbY+fM3EMcLASWuUeh
qX6IJoskuiZN3J5xn7Z5c3k+TuKFFImZp9LY3NbI+ZpR0hsVWLxGqhzYoK+6
Jjg7/RfOJGo54nIkxxokDt+eoBfpAovrJVr7L/KH0mEaT35Er9ZSgI9L9Fki
uSDGTcuOBTo3VsMtzTpuSb3BUSM+2LepYHBrEVf3HuQHzQI/2xXk2w7zyXsK
VkrXKbWnjTa9ChYd/g93pslQ2MDhVoGJOom52mfU0JDDI3v9HdBKllSJnzJ9
0LFUw9/NAqNDBE4dEUgvBdogm37ejOJa9xv6sabg1+txWq5QkGOaYc9cBsdZ
JEavTtKa/EOLc0HgyRFY2SixrluBtT2U654qOGrqhM5sgYYxBZ4DWmxdctJi
dQvPh4Wxe1pLgcbt1LQjnq178lBjUxBz1ws7OwRGXPPB7yEFobc8kPB8PzcW
hvP10Swy1E/RP6PgEGw=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {128}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJwVh3lI0wEcRzdrTlaRmRpaUmLWKnBe6QSDzPCPFZN0rdpC00whN2ZbeCW6
2XQNbOZvc5FG5rTCNDXtcN/P6EAyHZWZ2iHWpkkR2aVdUFn2x3u8F5ypSsn2
YLFYGq95pWQUJKjVGUWpnv/nUIYiKlLBnk/tPGNpp6B2/CYxcx2P1/GwezYT
8q2xqB7KwvTPLjo4XEODXBfp1x5Ad3oXeN4+KPMqQ8dMLCJPz9Cf5HrqvdxP
1mgO2kPNMNUZ0HzmHCUytRB/9sbKu62QDBehhGlAoJDB+fwJUhTew6U5Hfwr
jmOwrRKz6TvAE/vBEqPDoNxJTdv0dn+LBPKpjQj++IVqX3Sg2BaA5Q23KTRK
irS+BYifq8aVql+00OXCse2J+KB4iNxXVuItkeEwawtKNWeRPGmDzGCCc2ku
zJIISPmVeB5ch1V5NrRIA1FqFONatQE3nhXColtM4ZwmmJTRGFdxHHyNL9LG
uEhni6ANOoG29w1w31SjpTEJb5TNsPsNwO6WQZ3NYFzAYMMiG+58bcT9gRwq
CRHiQkwvQr5X4ak8AIl7+0mYNEKe+/aT89EoPQhahiObdFTuoULYngj4hHXS
SGQFer5xURyXCv6tdoSbTuJlXx6GfiixuXMN4uPqkedvh2/WW7qaZaW/77qx
ulmA/IIE+B0VQWNkO9zMFAn40/T6YjkmW7UI6DEj35iD+ppdGF0vR+hEKfRe
n8hXtxOpjSvAfyLCP7GcH7w=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {128}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    NormalDistribution[0, 1]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Max[#, 0]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{2688}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{2688}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/12" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Slot["Mu"] + 
                    Slot["Sigma"] Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #2 #3& ], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[-1]|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>|>,
                     "Inputs" -> <|
                    "Mu" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`AtomT], "Sigma" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/13" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/14" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/15" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{128, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/16" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/17" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/18" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/19" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/20" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/21" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 32}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Mu"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Sigma"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 241464, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 11, 16, 15, 9.533874`7.7318443946836215}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "medium", 4, 2, "medium", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "very high", "medium", 2, 4, "medium", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "medium", 2, 2, "small", "low"}, {
          "very high", "high", 2, 4, "medium", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 2, 4, "small", "low"}, {
          "high", "medium", 2, 2, "medium", "high"}, {
          "low", "very high", 3, 4, "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "medium", 4, 4, "medium", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "high", 3, 4, "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 3, 4, "large", "low"}, {
          "low", "high", 4, 2, "small", "low"}, {
          "very high", "medium", 2, 2, "medium", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "very high", 2, 2, "large", "high"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "medium", 3, 4, "large", "low"}, {
          "very high", "low", 3, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 3, 2, "medium", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "low", 3, 4, "small", "low"}, {
          "medium", "low", 2, 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "high", 2, 2, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "very high", 4, 4, "small", "medium"}, {
          "high", "high", 2, 2, "small", "high"}, {
          "medium", "low", 2, 4, "large", "low"}, {"medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 4, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 2, "small", "high"}, {
          "very high", "low", 3, 2, "large", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "high", 3, 2, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "medium", 3, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "large", "medium"}, {
          "high", "medium", 2, 2, "small", "medium"}, {
          "very high", "low", 4, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "high", "medium", 4, 2, "medium", "high"}, {
          "very high", "low", 2, 4, "small", "high"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 4, 4, "large", "medium"}, {
          "high", "low", 3, 2, "large", "high"}, {
          "low", "low", 2, 2, "medium", "high"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 2, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "low", 2, 2, "medium", "high"}, {
          "high", "low", 3, 4, "medium", "medium"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "medium", 4, 2, "medium", "low"}, {
          "high", "low", 4, 2, "large", "low"}, {
          "medium", "medium", 2, 4, "medium", "low"}, {
          "high", "high", 4, 4, "large", "low"}, {
          "low", "very high", 3, 4, "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "low", 2, 2, "medium", "medium"}, {
          "low", "medium", 2, 4, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "high", 3, 2, "medium", "low"}, {
          "low", "low", 3, 4, "small", "high"}, {
          "high", "high", 4, 2, "medium", "high"}, {
          "very high", "high", 4, 4, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "very high", 4, 2, "medium", "high"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "high", "very high", 2, 4, "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "medium", "high"}, {
          "medium", "medium", 4, 4, "medium", "low"}, {
          "high", "very high", 2, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "very high", 3, 2, "small", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 4, 2, "large", "medium"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {
          "low", "very high", 4, 4, "medium", "low"}, {
          "medium", "high", 2, 2, "large", "high"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "high", 2, 4, "large", "medium"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 4, "medium", "high"}, {
          "high", "medium", 3, 4, "large", "low"}, {
          "high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 3, 2, "large", "low"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "very high", "high", 3, 4, "small", "medium"}, {
          "very high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "low"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 4, 2, "small", "high"}, {"very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "high", 3, 4, "large", "medium"}, {"very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "low", 4, 2, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "medium", 2, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "low", 3, 4, "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 4, 2, "small", "medium"}, {
          "medium", "very high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 4, "small", "medium"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 4, 4, "medium", "medium"}, {
          "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 3, 2, "large", "high"}, {
          "medium", "very high", 4, 2, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "very high", 4, 4, "medium", "high"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "very high", 3, 2, "large", "medium"}, {
          "very high", "high", 2, 2, "medium", "high"}, {
          "very high", "low", 4, 2, "large", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 4, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 4, 4, "small", "high"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "medium", "high", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 4, 2, "small", "medium"}, {
          "medium", "medium", 2, 2, "large", "low"}, {
          "medium", "medium", 3, 2, "large", "medium"}, {
          "high", "very high", 4, 4, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 2, 2, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "low", 4, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "medium"}, {
          "high", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 2, 2, "small", "low"}, {
          "high", "very high", 2, 2, "small", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 2, 2, "large", "low"}, {
          "high", "very high", 2, 2, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "very high", 2, 4, "medium", "low"}, {
          "high", "medium", 2, 4, "medium", "medium"}, {
          "medium", "low", 4, 4, "small", "medium"}, {
          "high", "low", 3, 4, "medium", "low"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "very high", 3, 4, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 4, 4, "small", "high"}, {
          "very high", "medium", 4, 2, "large", "low"}, {
          "very high", "high", 3, 4, "small", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 4, 2, "small", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 4, "large", "low"}, {
          "very high", "high", 4, 4, "large", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 2, "medium", "high"}, {
          "medium", "very high", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 4, "medium", "medium"}, {
          "very high", "very high", 4, 2, "large", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "medium", 2, 4, "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "high", 3, 2, "large", "high"}, {
          "very high", "medium", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "medium", "high"}, {
          "medium", "high", 4, 2, "small", "medium"}, {
          "very high", "medium", 2, 2, "large", "high"}, {
          "medium", "high", 3, 4, "large", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "low", "high", 4, 2, "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 3, 4, "medium", "low"}, {
          "medium", "high", 4, 4, "small", "medium"}, {
          "low", "high", 4, 4, "large", "low"}, {
          "high", "medium", 3, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 4, "small", "high"}, {
          "low", "medium", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 3, 2, "small", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "low", 4, 2, "medium", "medium"}, {
          "medium", "medium", 2, 4, "small", "low"}, {
          "low", "high", 4, 4, "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "high", 4, 4, "large", "medium"}, {
          "very high", "high", 4, 2, "medium", "high"}, {
          "high", "high", 4, 4, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 4, 2, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 3, 4, "medium", "medium"}, {
          "low", "high", 2, 4, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "high", 2, 4, "large", "low"}, {
          "medium", "medium", 4, 4, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "medium", "high", 3, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "high", "low", 2, 2, "small", "low"}, {"very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "medium", "low"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 4, "large", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 2, 4, "large", "low"}, {
          "high", "high", 2, 2, "small", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "very high", 4, 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "medium"}, {
          "low", "medium", 4, 4, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "high", "high", 2, 4, "medium", "low"}, {
          "low", "low", 4, 4, "small", "high"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 2, "large", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 3, 4, "small", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}}, 
        "Output" -> {
         "very good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "acceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "good", "unacceptable", "very good",
           "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "very good", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "very good", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable"}|>, 
      "Predictions" -> {
       "good", "unacceptable", "unacceptable", "unacceptable", "unacceptable",
         "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "good", "good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "good", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", "very good",
         "unacceptable", "unacceptable", "unacceptable", "acceptable", "good",
         "acceptable", "unacceptable", "good", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", "good", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "good", "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", "good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable"}, "LogProbabilities" -> CompressedData["
1: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
ET3p/wAet1SU
       "], 
      "CountMatrix" -> {{7, 0, 2, 4, 0}, {0, 238, 12, 1, 0}, {3, 2, 57, 6, 
       0}, {1, 0, 0, 13, 0}}, 
      "IndicesMatrix" -> {{{56, 63, 114, 119, 178, 187, 233}, {}, {177, 
         318}, {1, 44, 151, 186}, {}}, {{}, CompressedData["
1:eJwl0tlrzwEAAPDvbDNmtpkZttn22+aYxcwuN5tjw2Y2NjcZotSmSMhR5Mg1
JOWKkFzlAQ/K8UaOkivKlZwpx4MjFD7l4fMffEINTbWNYUEQfKIF4UQQSUui
aE00bYghljjiSaA9iXQgiU4kk0IqaaSTQYhMssimK93oTg659KI3efQhn74U
UEgRxZTQnwEMZBBDGEYpZZRTQSVVjKOaGiZSRz1TmMo0pjODmcxiNg3MYS7z
mM8CFtJIE4tYzBKWsozlrGAlq1jNGtayjvVsYCOb2MwWtrKN7TSzg53sYjd7
2Ms+9nOAgxziMEc4yjGOc4KTnOI0ZzjLOc5zgYtc4jJXuMo1rnODm9ziNne4
yz3u84CHPOIxT3jKM57zgpe84jVveMs73vOBj8H/h5/5wle+8Z0f/OQXv/nD
XwJ5wwgngkiiaEU0MbQllnjakUAiSXSkM8mkkEoX0kgngxCZZJFND3LoSS55
5FNAIUUUU0I/BjOUUsoYzghGMopyKhjNGMZSSRXVjKeGWiZQRz2TmMw/nY1h
XQ==
         "], {132, 165, 184, 193, 195, 217, 235, 248, 253, 293, 295, 345}, {
         206}, {}}, {{123, 241, 277}, {108, 271}, {8, 13, 17, 23, 25, 29, 40, 
         42, 61, 67, 68, 70, 73, 75, 80, 83, 87, 109, 113, 128, 129, 137, 147,
          149, 152, 158, 161, 173, 174, 176, 182, 192, 194, 196, 197, 200, 
         214, 226, 243, 252, 258, 262, 265, 267, 275, 280, 300, 301, 302, 304,
          306, 313, 315, 316, 320, 334, 346}, {69, 82, 105, 183, 236, 
         314}, {}}, {{88}, {}, {}, {74, 96, 102, 106, 117, 167, 205, 208, 218,
          224, 242, 294, 340}, {}}}, 
      "ExtendedClasses" -> {
       "very good", "unacceptable", "acceptable", "good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.00029616184971098265`, 
      "SingleEvaluationTime" -> 0.004421625, "Version" -> {13.1, 0}|>]], ",", 
   
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "f7b1a4d1-a7c6-413c-b6e1-11a437ac5093"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"91.0", "1.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    91.0404624277456662185`3., 1.5376251627780317399`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265192167`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.7938891490171322562`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0172805611847277607`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.7593280266476767348`3.", "\", \"", 
                    "0.8284502713865877777`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.7593280266476767348`3., ", ", 0.8284502713865877777`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.2308114382911547191`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0217652513651985374`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.1872809355607576443`3.", "\", \"", 
                    "0.274341941021551794`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.1872809355607576443`3., ", ", 0.274341941021551794`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.3`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"4.38`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQ+3KJgLBa1jv737/OhGw489Z+VqVFpVvzK3sGMPhA
NH1D+l3Fu31v7AvTYjwmmz63zzx2dGZY6lV70RuPdC1+vrVnf37N9aviG/tX
NXl3/HWf2Zcsq1RYb/jOnvFj4Nmg72/sHaova3lHvLBXrX7MFM/6xl5DdcdG
Ca4n9l7BOWcSbh+0/1IQkcPc9tbe4eme3fPzXtnLSV9L/3HgIUF3PawSWef+
8BaUz8Dw8dPCuHNMb+0bS7yd0uJe2AfP3sF08stNe1zhMHXRwcoe37f2brcd
TZxmvrTvsnxk9Ev7Pk77cPlrG6eP9cEDb+1570bvm+7z2n5CHWdfCNMTewBv
xZtQ
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["7", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "7", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6363636363636364`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.5384615384615384`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5833333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{7, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.6363636363636364}], 
                    Row[{"Recall = ", 0.5384615384615384}], 
                    Row[{"FScore = ", 0.5833333333333333}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.2727272727272727`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.04411764705882353`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.2727272727272727}], 
                    Row[{"Row fraction = ", 0.04411764705882353}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.09090909090909091`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.07142857142857142`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.09090909090909091}], 
                    Row[{"Row fraction = ", 0.07142857142857142}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9916666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9482071713147411`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.969450101832994`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9916666666666667}], 
                    Row[{"Recall = ", 0.9482071713147411}], 
                    Row[{"FScore = ", 0.969450101832994}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.008333333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.029411764705882353`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.008333333333333333}], 
                    Row[{"Row fraction = ", 0.029411764705882353`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.028169014084507043`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.15384615384615385`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "very good", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.028169014084507043`}], 
                    Row[{"Row fraction = ", 0.15384615384615385`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.16901408450704225`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.04780876494023904`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.16901408450704225`}], 
                    Row[{"Row fraction = ", 0.04780876494023904}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["57", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "57", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8028169014084507`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8382352941176471`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8201438848920863`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{57, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8028169014084507}], 
                    Row[{"Recall = ", 0.8382352941176471}], 
                    Row[{"FScore = ", 0.8201438848920863}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.16666666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.3076923076923077`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", "very good", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.16666666666666666`}], 
                    Row[{"Row fraction = ", 0.3076923076923077}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.041666666666666664`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.041666666666666664`}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.25`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.08823529411764706`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.25}], 
                    Row[{"Row fraction = ", 0.08823529411764706}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.5416666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9285714285714286`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.6842105263157895`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.5416666666666666}], 
                    Row[{"Recall = ", 0.9285714285714286}], 
                    Row[{"FScore = ", 0.6842105263157895}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5384615384615384`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.5384615384615384}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9482071713147411`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9482071713147411}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8382352941176471`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{68, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.8382352941176471}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9285714285714286`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{14, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.9285714285714286}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.6363636363636364`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.6363636363636364}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "240", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9916666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{240, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.9916666666666667}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "71", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8028169014084507`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{71, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.8028169014084507}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "24", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.5416666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{24, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.5416666666666666}]}], 
                    "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["13", TraditionalForm]}, {2.5, 
                    FormBox["251", TraditionalForm]}, {1.5, 
                    FormBox["68", TraditionalForm]}, {0.5, 
                    FormBox["14", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["11", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["240", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["71", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["24", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "very good" -> 0.25, "unacceptable" -> 0.25, "acceptable" -> 0.25,
              "good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "very high", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "very high", "medium"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {2, 3, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"large", "medium", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"high", "low", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "very good", "unacceptable", "acceptable", "good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJzdmU0OgkAMhdGFMd7CK+gBjFfAE2CiKxITXBh3HF1cuCEROp2+1w7fwkCE
15nOTztlf33U93VVVc/t8FM3r3PXNe/L5ntza9rjoV0Nl/2uItOf2BZ5MPq2
ZP9JQPffw785NufeRfXnq/vTtrZhqWelJdWJsj7H7WC3Czmn2Toa7ZT/I68f
Fkh/5LKEmBPNp2hS+ytZrxofTr0zN+dzxyzCmCP3NgvtfxpT8dNyXBBjZJ2X
pehI/WmBZ3yXPI/MwZBzH2UPoeVpQ2oXETtyyYk3Fv3xjk2stWmdh2hB5BfW
2szYURJLyAMlsNqJqluN9ZE2tERpDzO25ZzBosLOJzT1z9Jq6Vo7yNiagnSe
W+pGwes7SCpe52Dv7wFeNsd2S6m1R9RF7S+laDG1c/COwVNE2IcYaPbkKFjW
e5k16JL8GbWt1qDP2hpKnkvelHyOiFaDj8EHSLx29g==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {2688}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DZwEAINNgTJ4ZN
Hp3GZQa6PIhPyA5c9pHjXnLUotuFza8wNcT6h9hwwBeu2MzCbzcAfjEeIw==

                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {128}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {2688}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {128}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{128, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2688}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/8" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_6bb49c78_bea2_4326_97f4_8e3bbb8726fd", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
J61eG1XfOF2WfwqHeS+Rlmi5OS6tcY7yZj1hepyR5zTWLaxUlIlXIwKuNe3x
q46/XJ0ImDtq+3jwPuPT18Xbb5K1SniuZn4Xzzkq0BB6F7U7XK1WdvLmFihk
i3QRybeXKmTGeqg0f4NCFkyD0p/53grZOJxncxMVMjPU1jKQD1PSPdCckf0f
K9sTD7U6B0qpgFtuWJ1z4BAFlbzbnaN+I7Fhosj+T4c7EpcC/v+QR/LN4JRC
tkR7FN/s5LwpLquEq+pqs+cXNs8+3MMyEnwsG0dzQ3NJO24kyBemAXG6/iM7
3Uh7tkDOe+6E2Cof7OIZrcE5f7ppb6MS3g128l7PH8XotzfSThgRfL5SM3C6
xzlwt6eW260Nrc6dvH5jXNM+Hu5wHKrJ6eQZTcA1bd+V/jsblHMPKcruEYRL
O+yW9See7HAOLEPkOvpVOwd+TQHt213R4byi/2Ya55xwJWl5RfWdJofv0jhr
QAETem6kcc4inbxbnZd2Ilg418wt2TD+dH/cEPCv+nqa7xA2l+XixnebM8Re
zqjIqXEOfI8G33Wq2jnqe9KTGJbOiua8y60fm4C35ni1TXFSrvDrd446R/oT
1d/sbqr5GA5aCohdQujsgpeBNTlpvlEIHe/WXKVbShqnCZDY2HoD7CHfEQT6
YakiR2nqHPUYl5e0o/9udaK4zjnqAekpMUl+x0e/uttpvrsR9lfar6fV7sRL
TbfSfGPwUs3tNE4ilJZv7IDSZVSqqMtPW/+VLSJyZ5g8drjjVlr9Srx6K6wj
Zrg1P833GoILa72TVl/ctoH83ktWfanUbVHFaYVs32jFiJPztsweJcSWvDTT
b92t9aWGH0I7xIfrYk+2Khr751YqBzp5fXNHQv7pHHgBZ8WydmAzICHG7jmP
FYRKUhh1LxkPQ1sLQhfB6+t3e3JnL5emcd5i+2w/S+EoyOYh2fDpZ72tBvVf
ThO6zQHrblJUKBd08cbPAONKqZvbBabZpWZaRfVHv3ZgkIUIOH+lKR9xvlbl
k26k+Qaj0qmOG2kZQXipNTfNtwvx43ANcKYHL7XfTKv9cSX4rqY7yxSPW3h0
Uxat1JLtsbzpRmP7rQ01jhvrdolbYxOU18Fgr+Om+/EQ+C28NHBZIbunO4qN
u7p4D8arPGfeBmVeF++59SiuNtxJqw3EUezJTzPdht0fwShxe+LSJuco66cj
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
NVKdCL/xfwCNWtom
                    "]]|>, "orcInstance" -> 84061216, "orcModuleId" -> 
                    84452688, "targetMachineId" -> 83799344|>, 
                    140650917967680, 140650917967536, 140650917967616, 
                    140650917961728, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_e6dc238e_e026_4162_b42d_341a86dc876c", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
U9QoLPw7xZy/1A==
                    "]]|>, "orcInstance" -> 84147248, "orcModuleId" -> 
                    44951984, "targetMachineId" -> 84302016|>, 
                    140650917954080, 140650917953680, 140650917953760, 
                    140650917953536, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {128}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "1190b3e1a1303219", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 32}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 192952, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 11, 16, 15, 9.74616`7.741408523500783}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "medium", 4, 2, "medium", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "very high", "medium", 2, 4, "medium", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "medium", 2, 2, "small", "low"}, {
          "very high", "high", 2, 4, "medium", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 2, 4, "small", "low"}, {
          "high", "medium", 2, 2, "medium", "high"}, {
          "low", "very high", 3, 4, "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "medium", 4, 4, "medium", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "high", 3, 4, "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 3, 4, "large", "low"}, {
          "low", "high", 4, 2, "small", "low"}, {
          "very high", "medium", 2, 2, "medium", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "very high", 2, 2, "large", "high"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "medium", 3, 4, "large", "low"}, {
          "very high", "low", 3, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 3, 2, "medium", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "low", 3, 4, "small", "low"}, {
          "medium", "low", 2, 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "high", 2, 2, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "very high", 4, 4, "small", "medium"}, {
          "high", "high", 2, 2, "small", "high"}, {
          "medium", "low", 2, 4, "large", "low"}, {"medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 4, 2, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 2, "small", "high"}, {
          "very high", "low", 3, 2, "large", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "low", "high", 3, 2, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "medium", 3, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "large", "medium"}, {
          "high", "medium", 2, 2, "small", "medium"}, {
          "very high", "low", 4, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "high", "medium", 4, 2, "medium", "high"}, {
          "very high", "low", 2, 4, "small", "high"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 4, 4, "large", "medium"}, {
          "high", "low", 3, 2, "large", "high"}, {
          "low", "low", 2, 2, "medium", "high"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 2, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "low", 2, 2, "medium", "high"}, {
          "high", "low", 3, 4, "medium", "medium"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "medium", 4, 2, "medium", "low"}, {
          "high", "low", 4, 2, "large", "low"}, {
          "medium", "medium", 2, 4, "medium", "low"}, {
          "high", "high", 4, 4, "large", "low"}, {
          "low", "very high", 3, 4, "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "low", 2, 2, "medium", "medium"}, {
          "low", "medium", 2, 4, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "high", 3, 2, "medium", "low"}, {
          "low", "low", 3, 4, "small", "high"}, {
          "high", "high", 4, 2, "medium", "high"}, {
          "very high", "high", 4, 4, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "very high", 4, 2, "medium", "high"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "high", "very high", 2, 4, "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "medium", "high"}, {
          "medium", "medium", 4, 4, "medium", "low"}, {
          "high", "very high", 2, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "very high", 3, 2, "small", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 4, 2, "large", "medium"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {
          "low", "very high", 4, 4, "medium", "low"}, {
          "medium", "high", 2, 2, "large", "high"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "high", 2, 4, "large", "medium"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 4, "medium", "high"}, {
          "high", "medium", 3, 4, "large", "low"}, {
          "high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 3, 2, "large", "low"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "very high", "high", 3, 4, "small", "medium"}, {
          "very high", "medium", 3, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "low"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 4, 2, "small", "high"}, {"very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "high", 3, 4, "large", "medium"}, {"very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "low", 4, 2, "small", "high"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "medium", 2, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "low", 3, 4, "large", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 4, 2, "small", "medium"}, {
          "medium", "very high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 4, "small", "medium"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 4, 4, "medium", "medium"}, {
          "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 3, 2, "large", "high"}, {
          "medium", "very high", 4, 2, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "low", "very high", 4, 4, "medium", "high"}, {"medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "very high", 3, 2, "large", "medium"}, {
          "very high", "high", 2, 2, "medium", "high"}, {
          "very high", "low", 4, 2, "large", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 4, "large", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 4, 4, "small", "high"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "medium", "high", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 4, 2, "small", "medium"}, {
          "medium", "medium", 2, 2, "large", "low"}, {
          "medium", "medium", 3, 2, "large", "medium"}, {
          "high", "very high", 4, 4, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 2, 2, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "low", 4, 4, "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "medium"}, {
          "high", "medium", 4, 4, "small", "low"}, {
          "medium", "high", 2, 2, "small", "low"}, {
          "high", "very high", 2, 2, "small", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 2, 2, "large", "low"}, {
          "high", "very high", 2, 2, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "very high", 2, 4, "medium", "low"}, {
          "high", "medium", 2, 4, "medium", "medium"}, {
          "medium", "low", 4, 4, "small", "medium"}, {
          "high", "low", 3, 4, "medium", "low"}, {"very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "very high", 3, 4, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 4, 4, "small", "high"}, {
          "very high", "medium", 4, 2, "large", "low"}, {
          "very high", "high", 3, 4, "small", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 4, 2, "small", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 4, "large", "low"}, {
          "very high", "high", 4, 4, "large", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 2, "medium", "high"}, {
          "medium", "very high", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 4, "medium", "medium"}, {
          "very high", "very high", 4, 2, "large", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "medium", 2, 4, "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "high", 3, 2, "large", "high"}, {
          "very high", "medium", 2, 4, "large", "medium"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "medium", "high"}, {
          "medium", "high", 4, 2, "small", "medium"}, {
          "very high", "medium", 2, 2, "large", "high"}, {
          "medium", "high", 3, 4, "large", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "low", "high", 4, 2, "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "high", 4, 2, "medium", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 3, 4, "medium", "low"}, {
          "medium", "high", 4, 4, "small", "medium"}, {
          "low", "high", 4, 4, "large", "low"}, {
          "high", "medium", 3, 2, "medium", "medium"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 2, 2, "medium", "medium"}, {
          "high", "very high", 3, 4, "small", "high"}, {
          "low", "medium", 4, 4, "medium", "medium"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 3, 2, "small", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "low", 4, 2, "medium", "medium"}, {
          "medium", "medium", 2, 4, "small", "low"}, {
          "low", "high", 4, 4, "medium", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "high", 4, 4, "large", "medium"}, {
          "very high", "high", 4, 2, "medium", "high"}, {
          "high", "high", 4, 4, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 2, 2, "small", "medium"}, {
          "low", "very high", 4, 2, "small", "high"}, {
          "very high", "very high", 4, 4, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 4, 2, "large", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 3, 4, "medium", "medium"}, {
          "low", "high", 2, 4, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "high", 2, 4, "large", "low"}, {
          "medium", "medium", 4, 4, "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "medium", "high", 3, 4, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "high", "low", 2, 2, "small", "low"}, {"very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "medium", "low"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 4, "large", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 2, 4, "large", "low"}, {
          "high", "high", 2, 2, "small", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "very high", 4, 2, "large", "medium"}, {
          "very high", "medium", 4, 2, "medium", "medium"}, {
          "low", "medium", 4, 4, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "high", "high", 2, 4, "medium", "low"}, {
          "low", "low", 4, 4, "small", "high"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 2, "large", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 3, 4, "small", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}}, 
        "Output" -> {
         "very good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "acceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "good", "unacceptable", "very good",
           "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "very good", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "very good", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable"}|>, 
      "Predictions" -> {
       "good", "unacceptable", "unacceptable", "unacceptable", "unacceptable",
         "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "good", "good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "good", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", "very good",
         "unacceptable", "unacceptable", "unacceptable", "acceptable", "good",
         "acceptable", "unacceptable", "good", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", "good", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "good", "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", "good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable"}, "LogProbabilities" -> CompressedData["
1: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
IkkpKAERn4r/OibvFOX7MaWSVVFCxmjHe21R/t+v0j0iMh2fy/rZj8MTGtTg
UtMaw8zAd4jY6uHawwkNcrD0L/8lfNfrL//N/MuHqernBSdH618KOL82D3Tb
/kpE2j162MfnwW7GlkvJ76V3Le/qrmeA3JXIbz6b2aO+6ZNUE5P2m2iCQw6X
gev7h43en/cZ8pBozfFZ/PzKbbUx4vPXub9ePFY+9gatjQkMsMyQBPaM6M5o
y2FELKmzpP6SekzqMOlHSX9K+lXSnzYUphY1L2SB1UqDDbl789HiHIuS5oUc
OFkY6p1zlAHhWbnLi7Z/Q4J2T26uZusNOlQ+VErMiWRAqZzD9XyFfFTtP7d6
pQUXXurNwZYFGpMaM9fj/vW/hTbFGeuvoIfLDyaGezDgpuI5mzvTuSCzRTw5
FePDDbZUaXj3GhT/VHVRAz5vYstrah6cr2RAa9j8FuPlJYj48Q2/91zW14Dw
eX2cS+8GkeaulqRl34RB6W7V2pTTL0f9usW+znNFR9C3T7dK1YTHwNl2N/CX
7EAkTtYhuD6ybqr+vdcm/UHEYzmQGWe9eV7CO0RscKFJXcRjRUgtgIIAvN9D
uz8wj7dvQztOXcoPwOex2zP3v9uY/34or852w/xSMnSj+JqKOJRes25lBeaX
ziMTcVyTsv5RPZ/wXUEeTPgv79qbr45MbSgbdzb49YU49MJO9u0F/HxLxz9f
HPHzFxxdSw9n8kBx1Yua3xLx6O2yHb8kMP9eoVxGC8fr9k29tZOB8XKCTkeI
2ksWepxbsZ2B72fbmKU4rjtaZ0n9JfWY1OH4tJyRtfj5xlUrZQduxqGmNqlv
N/Hzq7z8f6zF3z+1fLv0ZSsFqNfd2Bfs34Q4RQpmaWr96E3PW/HLVspQc8V0
4kMhLkhpDHnOWb8JEZ/YivS2FbG4j9/QmDDvVEggQlkfL/Iw/yZxqv6X1HnB
+k94wZ7Y3F3LbXgQtNdnKXdFJeq4ePDuUi3chwmPe3U5jkXJv7oO3wqrxv2B
je6eOp5JEPI7Hy4Wg9dH4oQnEh4pyB/rQndrv1rOgqholZVwhQF7nGv3ihtd
H41LatUY7WNOhiMlIXV7euJQ2eVO7x68vzmz3+M4D07pOKYUytKh0fVGhfHY
CvTToqemJZIL2QdlalswvittjWy3wf3o+41hSl80ryL2q6GqeNyvOsuH9Wqq
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
       "], 
      "CountMatrix" -> {{7, 0, 2, 4, 0}, {0, 238, 12, 1, 0}, {3, 2, 57, 6, 
       0}, {1, 0, 0, 13, 0}}, 
      "IndicesMatrix" -> {{{56, 63, 114, 119, 178, 187, 233}, {}, {177, 
         318}, {1, 44, 151, 186}, {}}, {{}, CompressedData["
1:eJwl0tlrzwEAAPDvbDNmtpkZttn22+aYxcwuN5tjw2Y2NjcZotSmSMhR5Mg1
JOWKkFzlAQ/K8UaOkivKlZwpx4MjFD7l4fMffEINTbWNYUEQfKIF4UQQSUui
aE00bYghljjiSaA9iXQgiU4kk0IqaaSTQYhMssimK93oTg659KI3efQhn74U
UEgRxZTQnwEMZBBDGEYpZZRTQSVVjKOaGiZSRz1TmMo0pjODmcxiNg3MYS7z
mM8CFtJIE4tYzBKWsozlrGAlq1jNGtayjvVsYCOb2MwWtrKN7TSzg53sYjd7
2Ms+9nOAgxziMEc4yjGOc4KTnOI0ZzjLOc5zgYtc4jJXuMo1rnODm9ziNne4
yz3u84CHPOIxT3jKM57zgpe84jVveMs73vOBj8H/h5/5wle+8Z0f/OQXv/nD
XwJ5wwgngkiiaEU0MbQllnjakUAiSXSkM8mkkEoX0kgngxCZZJFND3LoSS55
5FNAIUUUU0I/BjOUUsoYzghGMopyKhjNGMZSSRXVjKeGWiZQRz2TmMw/nY1h
XQ==
         "], {132, 165, 184, 193, 195, 217, 235, 248, 253, 293, 295, 345}, {
         206}, {}}, {{123, 241, 277}, {108, 271}, {8, 13, 17, 23, 25, 29, 40, 
         42, 61, 67, 68, 70, 73, 75, 80, 83, 87, 109, 113, 128, 129, 137, 147,
          149, 152, 158, 161, 173, 174, 176, 182, 192, 194, 196, 197, 200, 
         214, 226, 243, 252, 258, 262, 265, 267, 275, 280, 300, 301, 302, 304,
          306, 313, 315, 316, 320, 334, 346}, {69, 82, 105, 183, 236, 
         314}, {}}, {{88}, {}, {}, {74, 96, 102, 106, 117, 167, 205, 208, 218,
          224, 242, 294, 340}, {}}}, 
      "ExtendedClasses" -> {
       "very good", "unacceptable", "acceptable", "good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.00022808670520231214`, 
      "SingleEvaluationTime" -> 0.004303, "Version" -> {13.1, 0}|>]]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9, 
   3.8685204529294043`*^9, 3.8685215146011333`*^9, 3.8685301612497177`*^9, 
   3.868530590591856*^9, 3.86853261496434*^9, 3.8685338436228123`*^9, {
   3.868535643570589*^9, 3.868535653266458*^9}, 3.86853620504729*^9, 
   3.868536647435892*^9, 3.8685368910591183`*^9, 3.868536956624065*^9, 
   3.868537492992119*^9, {3.8685379158969793`*^9, 3.868537942476584*^9}, 
   3.8685921415849247`*^9, 3.868599486276321*^9, 3.86860013955028*^9, 
   3.8686009455378437`*^9, 3.868601165154408*^9, 3.868602872755411*^9, 
   3.868604168888167*^9, 3.8686705600345984`*^9, 3.868672040003127*^9, 
   3.868681397928339*^9, 3.868938938636381*^9, 3.8689425626275787`*^9, 
   3.868943546605094*^9, 3.86894388526086*^9, 3.868944114037065*^9, 
   3.868944544993232*^9, 3.868945583119274*^9, 3.868945795964314*^9, 
   3.868946090455439*^9, 3.868946301277932*^9, 3.868946812077159*^9, 
   3.868947529554852*^9, 3.868948234247651*^9, 3.868949916263268*^9, 
   3.86895035411582*^9, 3.868950591820963*^9, 3.868955715946851*^9, 
   3.8689590912506847`*^9, 3.868961292873067*^9, {3.868964211642971*^9, 
   3.868964271971294*^9}, 3.8689658659417048`*^9, 3.868975187773774*^9, 
   3.868975807387333*^9, 3.869030236615261*^9, 3.869030576485284*^9, 
   3.8690318983554163`*^9, 3.8690322955085077`*^9, 3.8690328949105043`*^9, 
   3.869033235901104*^9, 3.869033495671227*^9, 3.869034576712833*^9, 
   3.869035610130576*^9, 3.8690361433581657`*^9, 3.869036324430427*^9, 
   3.869036425981944*^9, 3.8690403482379503`*^9, 3.869040564944063*^9, 
   3.869041421524418*^9, 3.869041561340787*^9, 3.869041673839971*^9, 
   3.8690421991522627`*^9, 3.869042855424157*^9, 3.86904326803651*^9, 
   3.869043554339016*^9, 3.869043746795423*^9, 3.869105420473537*^9, 
   3.869105653283306*^9, 3.869105982326734*^9, 3.869107184493881*^9, 
   3.869108234728773*^9, 3.869111749761622*^9, {3.869111919016803*^9, 
   3.8691119399060993`*^9}, 3.869112356812172*^9, 3.869112702187408*^9, {
   3.869112904171596*^9, 3.869112930067875*^9}, {3.8691133852077427`*^9, 
   3.869113414126828*^9}, {3.869121126953014*^9, 3.8691211520853*^9}, {
   3.869121847143949*^9, 3.86912185561662*^9}, 3.869203188780602*^9, {
   3.8692071057867537`*^9, 3.86920713930786*^9}, 3.869207400202592*^9, {
   3.869207739721821*^9, 3.8692077456111937`*^9}, {3.869207952002699*^9, 
   3.869207963437224*^9}, 3.8692080125106792`*^9, {3.869208714713435*^9, 
   3.869208729773431*^9}, 3.869209077756652*^9, 3.8692094954446297`*^9, {
   3.869210938078933*^9, 3.8692109446365433`*^9}, 3.869211902166511*^9, {
   3.869213234631062*^9, 3.8692133334937763`*^9}, {3.869214218655706*^9, 
   3.869214223564402*^9}, 3.869215458371559*^9, {3.869215992069166*^9, 
   3.869216010528124*^9}, 3.869216652211252*^9, 3.8692170070767508`*^9, 
   3.8692173280534887`*^9, {3.869217675130456*^9, 3.869217685513886*^9}, {
   3.8692180388130713`*^9, 3.8692180459383907`*^9}, {3.869219076882539*^9, 
   3.8692191672841787`*^9}, 3.869219428759843*^9, {3.869219704836887*^9, 
   3.869219710189546*^9}},
 CellLabel->
  "Out[289]=",ExpressionUUID->"8c9ffbb7-d099-4c98-bbaa-9c74b597e134"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedHardNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}, {3.869121279126927*^9, 
   3.869121279479135*^9}},
 CellLabel->
  "In[290]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "featureLayer", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     "testData", ",", "\"\<Acceptability\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eval", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}, {
   3.868530047989657*^9, 3.868530063111247*^9}, {3.868530190826717*^9, 
   3.868530196600292*^9}, {3.86853144384466*^9, 3.868531451560924*^9}, {
   3.868532766824644*^9, 3.8685327949413958`*^9}, 3.868532945602283*^9, {
   3.868533874444491*^9, 3.8685338747929583`*^9}, {3.868604441984084*^9, 
   3.8686044511364*^9}, {3.8689602387396393`*^9, 3.8689602481032057`*^9}, {
   3.868960681250607*^9, 3.8689606824317408`*^9}, {3.868963143100669*^9, 
   3.868963145210929*^9}, 3.86896321844506*^9, {3.868976255892177*^9, 
   3.868976256410039*^9}, 3.8689764091880903`*^9, {3.869034393625832*^9, 
   3.86903439400725*^9}, {3.869043275878063*^9, 3.8690432774187603`*^9}, {
   3.86921972941183*^9, 3.869219743506506*^9}},
 CellLabel->
  "In[293]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[BoxData["0.884393063583815`"], "Output",
 CellChangeTimes->{
  3.8690345877152042`*^9, 3.869035626521063*^9, 3.869036152783195*^9, 
   3.8690363341385193`*^9, 3.869036436421172*^9, 3.869040357729239*^9, 
   3.869040576634907*^9, 3.869041433742779*^9, 3.8690415722677*^9, 
   3.8690416867128763`*^9, 3.86904220858243*^9, 3.8690432824600554`*^9, 
   3.869043562445753*^9, 3.869043754721044*^9, {3.869047065454893*^9, 
   3.869047090738934*^9}, 3.8690471518063593`*^9, 3.869047184930591*^9, 
   3.8690472207124777`*^9, 3.8690472595671577`*^9, 3.8690473069192467`*^9, 
   3.869047356173808*^9, 3.869104541974283*^9, 3.8691049803090754`*^9, 
   3.869105042273468*^9, 3.869105162486998*^9, 3.8691054315005198`*^9, 
   3.8691056671929417`*^9, 3.869105994037698*^9, 3.869107195753681*^9, 
   3.8691117585270443`*^9, 3.8691119669156637`*^9, 3.869121285329372*^9, 
   3.869208833562628*^9, 3.869209098161392*^9, 3.8692095035118723`*^9, 
   3.869210954522581*^9, 3.869211920142223*^9, 3.869213356256194*^9, 
   3.869214236948101*^9, 3.869215471853537*^9, 3.869216022517696*^9, 
   3.86921666275205*^9, 3.869217020007245*^9, 3.8692173416096373`*^9, 
   3.869217703374105*^9, 3.869218056194668*^9, 3.8692194468167562`*^9, {
   3.869219736012184*^9, 3.869219746378594*^9}},
 CellLabel->
  "Out[295]=",ExpressionUUID->"3e9cc028-cd3b-4c90-9019-cb9675d42775"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Association", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Prediction\>\"", "->", 
         RowBox[{"trainedHardNet", "[", 
          RowBox[{
           RowBox[{"KeyDrop", "[", 
            RowBox[{"{", "\"\<Acceptability\>\"", "}"}], "]"}], "@", "#"}], 
          "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "->", 
         RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}]}]}], "}"}], "]"}], 
     "&"}], "/@", 
    RowBox[{"Normal", "[", "testData", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eval2", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}, {3.869121310826304*^9, 3.869121313255774*^9}, {
  3.869219749034794*^9, 3.869219752143724*^9}},
 CellLabel->
  "In[296]:=",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],

Cell[BoxData["0.884393063583815`"], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9, 
   3.869105434085964*^9, 3.869105669300963*^9, 3.869105996859831*^9, 
   3.869107199042075*^9, 3.869111759364867*^9, 3.869111970506278*^9, {
   3.869121299804845*^9, 3.869121316611709*^9}, 3.8692088360902042`*^9, 
   3.86920910005622*^9, 3.869209505631686*^9, 3.869210957184381*^9, 
   3.869211922653748*^9, 3.869213358735955*^9, 3.869214238649056*^9, 
   3.8692154737290087`*^9, 3.869216025505147*^9, 3.8692166649342213`*^9, 
   3.8692170219382353`*^9, 3.869217343847763*^9, 3.8692177067848663`*^9, 
   3.869218058215096*^9, 3.869219448602796*^9, 3.869219753147689*^9},
 CellLabel->
  "Out[298]=",ExpressionUUID->"dfa62139-4cc3-40b9-9bd1-17cdbfb4dbf4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->
  "In[299]:=",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],

Cell[BoxData[
 TemplateBox[{"0.6875`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9, 
   3.869105674742872*^9, 3.8692091039680862`*^9, 3.869210963050486*^9, 
   3.8692119248338833`*^9, 3.869213361375114*^9, 3.869215475324996*^9, 
   3.869219517507464*^9, 3.869219756735735*^9},
 CellLabel->
  "Out[299]=",ExpressionUUID->"b5bd4fa2-a278-4fbb-a5ef-0f0839c74b23"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNetBooleanExpression", "[", 
   RowBox[{"hnf", ",", "inputSize"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
   3.869031937904567*^9, 3.869031943129614*^9}, {3.869121341559927*^9, 
   3.869121348104578*^9}, {3.869210965421191*^9, 3.869210971914925*^9}, 
   3.869219529425714*^9, 3.869219571948317*^9},
 CellLabel->
  "In[279]:=",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"85881d34-aa2c-47a4-9cef-\
231d0c092462"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Acceptability\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Memory\>\"", ",", "\"\<Quality\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}, {
  3.8692109926431*^9, 3.869210996642137*^9}},
 CellLabel->
  "In[421]:=",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1382", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
           "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
           "Doors" -> <|"Type" -> "Nominal"|>, 
           "Passengers" -> <|"Type" -> "Nominal"|>, 
           "Cargo" -> <|"Type" -> "Nominal"|>, 
           "Safety" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
                  "Cargo", "Safety"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1382, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                   0.5381047338323698, 0.31349173058168534`}, {
                   0.2878959194482099, 
                   0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                   0.2578066194971254, 
                   0.4093083635172316, -0.7050063333319737, 
                   0.08206678121922453, -0.2152687718915405, 
                   0.46464274419035045`}, {
                   0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                   0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                   0.3669612074237795, -0.03875817355088801, 
                   0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                   0.5767907589006783, 0.1852877321886701, 
                   0.21134659605041434`, 0.33089384854127}}, 
                  "Precisions" -> {11.396708918937332`, 11.702295237769018`, 
                   11.751709980827822`, 12.269447018561033`, 
                   12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                  None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Mean" -> {-0.0027242377292722524`, -0.0004734344948340772,
                     0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                   "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 6, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   7052420854593502203|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 1301520, 
                  "DataMemory" -> 446480, "FunctionMemory" -> 62320, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.5374646114340518`, -1.5374646114340518`, \
-1.4481495799387802`, -1.3901532053842829`, -1.3900959198753926`, \
-1.3059537438182822`, -1.239089852169043, -1.2261733685503937`, \
-1.2132739652746585`, -1.169323039076807, -1.1079994773194297`}, 
                   "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                   0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[7.816606057704673, 0.25703225729782303`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Index" -> {<|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                   DirectedInfinity[1]}] -> 4|>, <|
               2 -> 1, 4 -> 2, Interval[{5, 
                   DirectedInfinity[1]}] -> 3|>, <|
               "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.12314196676015854`, -0.861851692199707, 
                0.10532767325639725`}, {
                0.8298183679580688, -0.28949323296546936`, 
                0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                0.38437455892562866`, -0.8375512361526489, 
                0.1422276645898819}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                0.4795919358730316}, {
                0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                0.2534555494785309, -0.4526385962963104}, {
                0.3543681204319, -0.37547722458839417`, 
                0.5876661539077759}, {-1.1276206970214844`, 
                0.17602579295635223`, -1.0098364353179932`}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.24657385051250458`, -0.8256815671920776, 
                0.8846340179443359}, {0.6182233691215515, 
                0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.34666627645492554`, -0.5679200291633606, 
                0.10750995576381683`}, {
                0.6412044167518616, -0.1759643256664276, 
                0.6604856848716736}, {-0.8092290163040161, 
                0.12987354397773743`, -1.1753407716751099`}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                0.12715618312358856`, 0.1291729062795639}, {
                0.21379514038562775`, -0.6005780100822449, 
                0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
             272386066020895428|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                "very good" -> 4|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113, 
        "unacceptable" -> 0.7012987012987013, "very good" -> 
        0.03896103896103896|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Acceptability", 
          "Order" -> {
           "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", "Cargo",
             "Safety", "Acceptability"}|>], "PreferLabeled" -> True, 
       "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> None, 
    "ImputationStrategy" -> Automatic, "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
    Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                 0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                 0.09347633272409439, 0.20684024691581726`, 
                 0.00729140592738986, -0.3824177384376526, 
                 0.2153223156929016, -0.46700865030288696`, 
                 0.21194063127040863`, 
                 0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                 0.07883942127227783, -0.375686913728714, 
                 0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                 0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                 0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                 0.1690395474433899, -0.28660914301872253`, 
                 0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                 0.17016777396202087`, -0.32100844383239746`, 
                 0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               18, "$InputDimensions" -> {18}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                "], "Biases" -> 
               RawArray["Real32",{-0.23329688608646393`, 0.1376294195652008, 
                 0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                 0.1361909657716751, -0.07115011662244797, 
                 0.0030301439110189676`, 0.04029219597578049, 
                 0.05379099026322365, 
                 0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                 0.0140318488702178, 
                 0.18612468242645264`, -0.17168177664279938`, 
                 0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                 0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                 0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                 0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                 0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                 0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "7" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                "], "Biases" -> 
               RawArray["Real32",{-0.30062639713287354`, 0.12008462101221085`,
                  0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                 0.09417349845170975, -0.10099706798791885`, 
                 0.08236243575811386, -0.2349618673324585, 0.1114811822772026,
                  0.2365228235721588, -0.1581137776374817, 
                 0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                 0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                 0.08413115888834, -0.2386404424905777, 
                 0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                 0.017599068582057953`, -0.16277392208576202`, 
                 0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                 0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                 0.048794329166412354`, -0.2748609185218811, 
                 0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                 0.15255072712898254`, -0.054961107671260834`, 
                 0.12484297901391983`, -0.013735197484493256`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "10" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{-0.18632154166698456`, -0.05518893152475357,
                  0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                 0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                 0.12943300604820251`, 
                 0.21619535982608795`, -0.12615013122558594`, 
                 0.12520363926887512`, 0.1943180412054062, 
                 0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                 0.12467250972986221`, -0.3208949565887451, 
                 0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                 0.16070689260959625`, -0.07001221925020218, 
                 0.07522184401750565, 
                 0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                 0.24120552837848663`, -0.04254811629652977, 
                 0.19626277685165405`, 0.04852093756198883}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "11" -> <|
            "Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "12" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                "], "Biases" -> 
               RawArray["Real32",{0.18740198016166687`, -0.1249600350856781, 
                 0.03215433284640312, -0.2378043681383133}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
        19653.548073458904`|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "Mean" -> {0.23124615267859935`, -0.72822837729203, 
              0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
              0.10517240908924025`, -0.24024309043728495`, 0.3074998656424723,
               0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
              0.3879769949206493}, 
             "StandardDeviation" -> {0.42336656209659007`, 0.2672799034098392,
               0.07124798075524297, 0.36989547912470067`, 
              0.17138659393602926`, 0.5155818183543911, 0.688893371869374, 
              0.24977193740899778`, 0.6403849334448501, 0.4897664046907167, 
              0.46819109868519837`, 0.43423173863577835`, 0.6276718952348702, 
              0.28383206529853633`, 0.7719651260033509, 0.09756213850198994, 
              0.2950767752080472, 0.22147755480753964`}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, "Key" -> 
             "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
         Around[0.9926698116140742, 0.007247173785702781], "EvaluationTime" -> 
         0.0002390132437947042, "TestSize" -> 276, "ModelMemory" -> 101904, 
         "ModelUtility" -> 5.3529526868256205`, "TrainingSize" -> 1106, 
         "TrainingTime" -> 50.11872336272725, "TrainingMemory" -> 1025056, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.021350027675851042`, 0.008527240234488089]}, 
         "AccuracyHistory" -> {
           Around[0.9926698116140742, 0.005124525728307819]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           4, "NumberOfParameters" -> 8600, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
              Around[0.5039356498747214, 0.011280914837970198`], 
              "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 2744, 
              "ModelMemory" -> 101904., "ModelUtility" -> -5.255034068743364, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 474568., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[3.3682246428941447`, 0.11709052181782027`], 
                Around[5.718797544659934, 0.1974406032409913]}, 
              "AccuracyHistory" -> {
                Around[0.4977980114632854, 0.013422541870627485`], 
                Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
              Around[0.7731731038259634, 0.010538572727576656`], 
              "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 2532, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
              461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.0207920682675256`, 0.13567904919872614`], 
                Around[1.989358115693642, 0.12729332292504641`]}, 
              "AccuracyHistory" -> {
                Around[0.7666435334598815, 0.01212548962300386], 
                Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
              Around[0.8754721532521594, 0.013799020363039234`], 
              "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.6640374106578726`,
               "TrainingSize" -> 250, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 580856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7727930479153965, 0.07355983104423623]}, 
              "AccuracyHistory" -> {
                Around[0.8754721532521594, 0.009757380872436296]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.021350027675851042`, 0.012059338789226588`], 
              "Accuracy" -> Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.021350027675851042`, 0.008527240234488089]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
             Around[0.021350027675851042`, 0.012059338789226588`], 
             "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
             "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1638549337103177`, 0.10037145501929841`], "Accuracy" -> 
              Around[0.5492390926678674, 0.023756280779855192`], 
              "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 1300, 
              "ModelMemory" -> 62416., "ModelUtility" -> -2.4356505013181984`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 315949.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0659744269130655`, 0.06346538833801657], 
                Around[1.2617354405075698`, 0.023724306617050557`]}, 
              "AccuracyHistory" -> {
                Around[0.5686355009414037, 0.0494049938117882], 
                Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
              Around[0.34906013350595955`, 0.01773043247078872], 
              "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 2744,
               "ModelMemory" -> 62416., 
              "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
              288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.7284854644248697`, 0.024470278570364008`], 
                Around[1.7449836721317225`, 0.02985267016659267]}, 
              "AccuracyHistory" -> {
                Around[0.333797137166834, 0.012654176408351573`], 
                Around[0.364323129845085, 0.01286858453924453]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7297176649588678, 0.030635251566725513`], "Accuracy" -> 
              Around[0.7731352673792209, 0.01749760840751051], 
              "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.4608603411176038`,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 430312, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7297176649588678, 0.021662394126187413`]}, 
              "AccuracyHistory" -> {
                Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
              Around[0.8462070332421717, 0.03062402709723611], 
              "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> -0.1999951890132391, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 882408, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.38327177587574507`, 0.029923508235575796`]}, 
              "AccuracyHistory" -> {
                Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020558565549557822`, "MeanCrossEntropy" -> 
             Around[0.38327177587574507`, 0.0423182311805343], "ModelMemory" -> 
             62416, "TrainingMemory" -> 882408, "TrainingTime" -> 
             1.2870992522366111`|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.35435313401532587`, 0.026162924108051638`], "Accuracy" -> 
              Around[0.8602959769418544, 0.016276096618821716`], 
              "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900, 
              "ModelMemory" -> 58320, 
              "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 250,
               "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35435313401532587`, 0.018499981052472317`]}, 
              "AccuracyHistory" -> {
                Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
              Around[0.4905470789487266, 0.05942169230008629], 
              "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 2672,
               "ModelMemory" -> 58320., "ModelUtility" -> -4.197660943845806, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 273552., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5949653673903932`, 0.05337852556796832], 
                Around[3.769761211170389, 0.12190065068836999`]}, 
              "AccuracyHistory" -> {
                Around[0.549197732950539, 0.013394029354165352`], 
                Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
              Around[0.7442585992282589, 0.013337895880245353`], 
              "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 2632,
               "ModelMemory" -> 58320., 
              "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              308650.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7090566921048821, 0.029587871638874982`], 
                Around[0.9267562156706394, 0.048804806717094945`]}, 
              "AccuracyHistory" -> {
                Around[0.7339496000489554, 0.012070557593356287`], 
                Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
              Around[0.9791671208169963, 0.012128533944401654`], 
              "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07118410180594256, 0.013542997191503502`]}, 
              "AccuracyHistory" -> {
                Around[0.9791671208169963, 0.008576168597937634]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
             Around[0.07118410180594256, 0.01915269030340499], "ModelMemory" -> 
             58320, "TrainingMemory" -> 945064, "TrainingTime" -> 
             6.2334652825440156`|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
              Around[0.838474265252356, 0.01562338483938151], 
              "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 1100, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 250, 
              "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 845536, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4150311982338223, 0.022874520429674614`]}, 
              "AccuracyHistory" -> {
                Around[0.838474265252356, 0.011047401365013764`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.9363303357963932`, 0.22063573174865092`], "Accuracy" -> 
              Around[0.6016657435215405, 0.009931734042792198], 
              "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 2400, 
              "ModelMemory" -> 187664., "ModelUtility" -> -4.394526005243066, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.8628854898161876, 
              "TrainingMemory" -> 768069.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7328302955198254`, 0.11030764480200886`], 
                Around[3.1398303760729616`, 0.1343428411885501]}, 
              "AccuracyHistory" -> {
                Around[0.6013282055836575, 0.014050468348716146`], 
                Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
              Around[0.7771993076355267, 0.016090257916624478`], 
              "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.4133613417100643`,
               "TrainingSize" -> 50, "TrainingTime" -> 1., "TrainingMemory" -> 
              768752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0883077850611167`, 0.06546404015990553]}, 
              "AccuracyHistory" -> {
                Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
             Around[1.0883077850611167`, 0.09258013344187536], "ModelMemory" -> 
             187664, "TrainingMemory" -> 768752, "TrainingTime" -> 
             16.33188643150958|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.06349687324568681, 0.020314194118190455`], "Accuracy" -> 
              Around[0.9752187821898789, 0.013178658637319573`], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.1990832337140014`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 1031984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06349687324568681, 0.014364304415312347`]}, 
              "AccuracyHistory" -> {
                Around[0.9752187821898789, 0.009318718889391335]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
              Around[0.5614696628952743, 0.02316984504064622], 
              "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 1900, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.375448364812931, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 588357.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2425860137311924`, 0.09670887865815357], 
                Around[3.472752094517207, 0.15761956845763322`]}, 
              "AccuracyHistory" -> {
                Around[0.5412325518696653, 0.01645230430382249], 
                Around[0.5817067739208833, 0.01550253065862414]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
              Around[0.7822399753364762, 0.011053793618809461`], 
              "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 2632, 
              "ModelMemory" -> 164368., "ModelUtility" -> -3.09292339195906, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.9314427449080938, 
              "TrainingMemory" -> 599973.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1299535489778723`, 0.07202244880796001], 
                Around[1.862147339889153, 0.11678580277280175`]}, 
              "AccuracyHistory" -> {
                Around[0.7898676324542127, 0.011253506706433129`], 
                Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.42705750837440937`, 0.035076829136806445`], "Accuracy" -> 
              Around[0.8446730233225903, 0.015135382766381485`], 
              "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 1132, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.5213181632194831, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 668632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.42705750837440937`, 0.024803063745157707`]}, 
              "AccuracyHistory" -> {
                Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
             Around[0.42705750837440937`, 0.035076829136806445`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
             "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.29713763668876286`, 0.029783149124946628`], "Accuracy" -> 
              Around[0.8857231716276136, 0.013316951171936615`], 
              "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.27080207566416914`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 518544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.29713763668876286`, 0.02105986671133995]}, 
              "AccuracyHistory" -> {
                Around[0.8857231716276136, 0.00941650647840652]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
              Around[0.4534728434064575, 0.03657154854139636], 
              "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 2200, 
              "ModelMemory" -> 93800., "ModelUtility" -> -4.7036563931676705`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.5848931924611134`, 
              "TrainingMemory" -> 372712., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.8582879282812748`, 0.09593272842945073], 
                Around[4.168810776492888, 0.14832220789749126`]}, 
              "AccuracyHistory" -> {
                Around[0.4184413958301533, 0.015453697183599058`], 
                Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
              Around[0.769971120234303, 0.0162893024591907], "EvaluationTime" -> 
              0.00006291890573589659, "TestSize" -> 1332, "ModelMemory" -> 
              93800, "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 
              50, "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2977572298050588`, 0.07725242580096887]}, 
              "AccuracyHistory" -> {
                Around[0.769971120234303, 0.01151827622969245]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
             Around[1.2977572298050588`, 0.1092514282939514], "ModelMemory" -> 
             93800, "TrainingMemory" -> 386192, "TrainingTime" -> 
             25.884295625347566`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5879853515835944`, 0.14718023198397873`], "Accuracy" -> 
              Around[0.7939162815913106, 0.015646642549432373`], 
              "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -3.152069743372218, 
              "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 600288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5879853515835944`, 0.10407214009248054`]}, 
              "AccuracyHistory" -> {
                Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
              Around[0.5705716928210636, 0.02387696402198573], 
              "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 2100, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.803632164263322, 
              "TrainingSize" -> 10, "TrainingTime" -> 5.444439372449127, 
              "TrainingMemory" -> 583613.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.6845044721043254`, 0.10447663667270932`], 
                Around[4.364677185562806, 0.2100094842353753]}, 
              "AccuracyHistory" -> {
                Around[0.5492372585429602, 0.014247131834686502`], 
                Around[0.591906127099167, 0.01628060211969826]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38151664752165954`, 0.03977608365046414], "Accuracy" -> 
              Around[0.8740940349402928, 0.013875001085229821`], 
              "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 250, 
              "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
              683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.38151664752165954`, 0.028125938478286556`]}, 
              "AccuracyHistory" -> {
                Around[0.8740940349402928, 0.009811107356336711]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00037881779653037317`, "MeanCrossEntropy" -> 
             Around[0.38151664752165954`, 0.03977608365046414], "ModelMemory" -> 
             164368, "TrainingMemory" -> 683480, "TrainingTime" -> 
             92.6247680155231|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2846789544300572`, 0.10135837559026044`], "Accuracy" -> 
              Around[0.7374636238433064, 0.017014953179959547`], 
              "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.6005267903937916`,
               "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 341168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2846789544300572`, 0.07167119470992618]}, 
              "AccuracyHistory" -> {
                Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
              Around[0.5152833374237896, 0.07249298936486862], 
              "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 2744,
               "ModelMemory" -> 58320., "ModelUtility" -> -5.074385087421649, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 295925.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.5190643035821725`, 0.1028129894230038], 
                Around[5.812425858174743, 0.191466359358563]}, 
              "AccuracyHistory" -> {
                Around[0.5871646538577457, 0.013267469359568705`], 
                Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020244886234998508`, "MeanCrossEntropy" -> 
             Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
             58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
              Around[0.8717062863197803, 0.01777595950885693], 
              "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.10702789819239966`, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 374688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3301382275974658, 0.02068135393911543]}, 
              "AccuracyHistory" -> {
                Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
              Around[0.7363490438369396, 0.017031507261842195`], 
              "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.3231968082428875`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 338064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6791528095168373, 0.027387263849560993`]}, 
              "AccuracyHistory" -> {
                Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
              Around[0.4863596829810406, 0.04278093185210315], 
              "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 2744, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.180492238404206, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5444439372449126, 
              "TrainingMemory" -> 322133.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.508549842629893, 0.04605766705211905], 
                Around[3.771470810362135, 0.12018564135103059`]}, 
              "AccuracyHistory" -> {
                Around[0.5280828090172973, 0.013434097226343747`], 
                Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
             Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
             9.109108405185806|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5038386117534089, 0.041784890614198204`], "Accuracy" -> 
              Around[0.828465928965194, 0.02654031530216917], 
              "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 400, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.7882946404845459, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 528184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5038386117534089, 0.029546379504437673`]}, 
              "AccuracyHistory" -> {
                Around[0.828465928965194, 0.018766836924992914`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
              Around[0.3679296647759494, 0.07392752974250799], 
              "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 2744,
               "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
              449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.148424842980697, 0.03780978285236538], 
                Around[1.4568966776552688`, 0.026077841742531138`]}, 
              "AccuracyHistory" -> {
                Around[0.2945557228909562, 0.012245543527860529`], 
                Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
              Around[0.6180757845356775, 0.05382602805907864], 
              "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 2632, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
              461714.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.155425119141791, 0.02396130422338247], 
                Around[1.0610392976248695`, 0.02621811203957636]}, 
              "AccuracyHistory" -> {
                Around[0.5650696245779578, 0.013556795434539574`], 
                Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23257721592841687`, 0.03163453421313113], "Accuracy" -> 
              Around[0.908886547057971, 0.024356212382520913`], 
              "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 0.7369941836531197, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1045880, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23257721592841687`, 0.022368993661782865`]}, 
              "AccuracyHistory" -> {
                Around[0.908886547057971, 0.017222442939700294`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
             Around[0.23257721592841687`, 0.03163453421313113], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1045880, "TrainingTime" -> 
             1.4937384274690055`|>, "Index" -> 10|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
              Around[0.7457728338345587, 0.018472683364634448`], 
              "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.7509502414499094`, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 309112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8371599125387441, 0.047884777618598134`]}, 
              "AccuracyHistory" -> {
                Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
              Around[0.8882989940963734, 0.013145309817848845`], 
              "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.48100284988718467`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 469432, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2722926005782066, 0.022605846381320353`]}, 
              "AccuracyHistory" -> {
                Around[0.8882989940963734, 0.009295137712999018]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04678344173247784, 0.020786249475512084`], "Accuracy" -> 
              Around[0.9851396376350638, 0.010281268792086398`], 
              "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 3.8798539588000582`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 972672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04678344173247784, 0.014698097959569912`]}, 
              "AccuracyHistory" -> {
                Around[0.9851396376350638, 0.007269954882085916]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
              Around[0.502464111857925, 0.07130486561817233], 
              "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 2200, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.6637320197127625`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299269.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8332223163074313`, 0.08054167103388306], 
                Around[4.86043648706169, 0.16818929238262642`]}, 
              "AccuracyHistory" -> {
                Around[0.572995990979411, 0.015538960918031978`], 
                Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
             Around[3.3468294016845603`, 1.5153492244478233`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 299269.3333333333, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 11|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
              Around[0.762381947001795, 0.01642868812328819], 
              "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -1.7030510878983651`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 600016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7752070403907262, 0.03017334558439825]}, 
              "AccuracyHistory" -> {
                Around[0.762381947001795, 0.011616836777975974`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.39447704061745437`, 0.03234768531334908], "Accuracy" -> 
              Around[0.8594906763316973, 0.01476170763807768], 
              "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 1100, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.3625496870271967, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 675000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.39447704061745437`, 0.02287326764075762]}, 
              "AccuracyHistory" -> {
                Around[0.8594906763316973, 0.01043810357277798]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
              Around[0.9455603955460657, 0.019279136977717354`], 
              "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 1.404009915150804, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1142080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15855325263059325`, 0.025484079405049796`]}, 
              "AccuracyHistory" -> {
                Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
              Around[0.5116939418989973, 0.07010685788967808], 
              "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 2400, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              586421.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.521906370483909, 0.03515613181787799], 
                Around[1.5882755791735657`, 0.05563504596868172]}, 
              "AccuracyHistory" -> {
                Around[0.442311083421225, 0.014256465737770922`], 
                Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
             Around[1.5550909748287374`, 0.04454750436345691], "ModelMemory" -> 
             164368., "TrainingMemory" -> 586421.3333333333, "TrainingTime" -> 
             5.818068863066169|>, "Index" -> 12|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9007091827219887, 0.030008702121127984`], "Accuracy" -> 
              Around[0.6760965348587569, 0.018079481767156038`], 
              "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.8723329888169609`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9007091827219887, 0.02121935676445673]}, 
              "AccuracyHistory" -> {
                Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.43111245312757496`, 0.025345577264303743`], "Accuracy" -> 
              Around[0.8330426045067885, 0.015571490015669136`], 
              "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 1132,
               "ModelMemory" -> 58320, "ModelUtility" -> -0.4088030140985044, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 364536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.43111245312757496`, 0.01792202955667676]}, 
              "AccuracyHistory" -> {
                Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.1842923793671783, 0.025304164192749383`], "Accuracy" -> 
              Around[0.9457395297710746, 0.019169568233064083`], 
              "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 891920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1842923793671783, 0.01789274609295091]}, 
              "AccuracyHistory" -> {
                Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
              Around[0.43385363675367183`, 0.011415114317526467`], 
              "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 2472, 
              "ModelMemory" -> 58320., "ModelUtility" -> -3.5149737403880033`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 273418.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4396046101139186`, 0.029031135765925187`], 
                Around[2.475712680707863, 0.06775654619883521]}, 
              "AccuracyHistory" -> {
                Around[0.439498971976867, 0.014905537896345295`], 
                Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
             Around[1.9576586454108909`, 0.5187408468073508], "ModelMemory" -> 
             58320., "TrainingMemory" -> 273418.6666666666, "TrainingTime" -> 
             4.386881933034051|>, "Index" -> 13|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8419793893936219, 0.040743862542620725`], "Accuracy" -> 
              Around[0.7373831716775224, 0.01693418574125903], 
              "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.8856361050895067`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 782064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8419793893936219, 0.02881026149561968]}, 
              "AccuracyHistory" -> {
                Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
              Around[0.8250320562814308, 0.01594299951984108], 
              "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, "ModelUtility" -> -0.6112985333219293,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 848080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4432056724888078, 0.02238507759095115]}, 
              "AccuracyHistory" -> {
                Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.16858329728652338`, 0.029069351611494675`], "Accuracy" -> 
              Around[0.945560395546066, 0.01927913697771735], 
              "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 1.2824675838731772`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 1207096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.16858329728652338`, 0.020555135649183976`]}, 
              "AccuracyHistory" -> {
                Around[0.945560395546066, 0.013632408492368258`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
             Around[0.16858329728652338`, 0.029069351611494675`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
             "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3249962292171797`, 0.12170206901231112`], "Accuracy" -> 
              Around[0.793195580192614, 0.015828005629622638`], 
              "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300, 
              "ModelMemory" -> 164368, "ModelUtility" -> -2.7896299497840076`,
               "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 589096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3249962292171797`, 0.08605635828303838]}, 
              "AccuracyHistory" -> {
                Around[0.793195580192614, 0.011192090113365015`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 250, 
              "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 686536,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00044256629018744604`, "MeanCrossEntropy" -> 
             Around[0.3701221449474526, 0.03366489354688038], "ModelMemory" -> 
             164368, "TrainingMemory" -> 686536, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 15|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1227673790868702`, 0.10368611279141937`], "Accuracy" -> 
              Around[0.757173277714323, 0.018196954510351714`], 
              "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.342528378471589, 
              "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 309656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1227673790868702`, 0.07331715346968586]}, 
              "AccuracyHistory" -> {
                Around[0.757173277714323, 0.012867189931212827`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33220140414624993`, 0.047853257302163214`], "Accuracy" -> 
              Around[0.8965085805171233, 0.012697194170323252`], 
              "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.07288974716187491, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 510104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33220140414624993`, 0.03383736274022428]}, 
              "AccuracyHistory" -> {
                Around[0.8965085805171233, 0.00897827209987787]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.029497520149122013`, 0.01667491875741592], "Accuracy" -> 
              Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 4.7583398302297795`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 39.810717055349734`, 
              "TrainingMemory" -> 948200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.029497520149122013`, 0.011790948129103553`]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.2949671588281193`, 0.14749235577106196`], "Accuracy" -> 
              Around[0.5835796437000327, 0.02088503617561304], 
              "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -3.761313256061099, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 297120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2949671588281193`, 0.10429284493889672`]}, 
              "AccuracyHistory" -> {
                Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
             Around[2.2949671588281193`, 0.14749235577106196`], "ModelMemory" -> 
             62416, "TrainingMemory" -> 297120, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 16|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
              Around[0.7677501064780398, 0.00816276162917491], 
              "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 2664,
               "ModelMemory" -> 93800., 
              "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 386088.,
               "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.5973296386447973`, 0.09710009617968923], 
                Around[1.6944960008299512`, 0.10490120341267964`]}, 
              "AccuracyHistory" -> {
                Around[0.7682281016221508, 0.011537187632355594`], 
                Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33249143642424983`, 0.02780494761566639], "Accuracy" -> 
              Around[0.8613277396783116, 0.014507674452371017`], 
              "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 1132,
               "ModelMemory" -> 93800, "ModelUtility" -> 0.05248807658590138, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 502672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33249143642424983`, 0.01966106700957443]}, 
              "AccuracyHistory" -> {
                Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04443140001711353, 0.021314953380441544`], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.92776201569796, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 970336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04443140001711353, 0.01507194807598534]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00046938966244621503`, "MeanCrossEntropy" -> 
             Around[0.04443140001711353, 0.021314953380441544`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
             "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
              Around[0.7384665234825579, 0.010719276135332273`], 
              "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 2432, 
              "ModelMemory" -> 93800., "ModelUtility" -> -1.9350890275488193`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.37788092188698263`, 
              "TrainingMemory" -> 378786.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7726332524190396, 0.028941631998749596`], 
                Around[1.0060756456836646`, 0.05024424270156515]}, 
              "AccuracyHistory" -> {
                Around[0.7324400373766513, 0.0120571885743892], 
                Around[0.7444930095884645, 0.01307837056160318]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.34782344779765667`, 0.025712507033831242`], "Accuracy" -> 
              Around[0.8557374599745653, 0.014686070676875251`], 
              "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, 
              "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 250,
               "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.34782344779765667`, 0.018181488084928872`]}, 
              "AccuracyHistory" -> {
                Around[0.8557374599745653, 0.0103846201646034]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15276622770087278`, 0.028666652684449675`], "Accuracy" -> 
              Around[0.9498135082589592, 0.018508440411731872`], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 1.5673860415737628`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 907872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15276622770087278`, 0.02027038450709391]}, 
              "AccuracyHistory" -> {
                Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.15276622770087278`, 0.028666652684449675`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
             "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7753042739299817, 0.039969593621796584`], "Accuracy" -> 
              Around[0.7375401740439216, 0.01714466436223822], 
              "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 1300, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.637907986699601, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 461800, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7753042739299817, 0.02826277069124294]}, 
              "AccuracyHistory" -> {
                Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35554695739060116`, 0.027033696117590978`], "Accuracy" -> 
              Around[0.8470897173852533, 0.01508748965454944], 
              "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.08838018962147687,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 567400, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.35554695739060116`, 0.01911570984528502]}, 
              "AccuracyHistory" -> {
                Around[0.8470897173852533, 0.01066846624581379]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15410934185340477`, 0.03040532289461026], "Accuracy" -> 
              Around[0.9596068784743268, 0.016667152171683092`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 1.5363925902488362`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1024944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15410934185340477`, 0.0214998100029455]}, 
              "AccuracyHistory" -> {
                Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.15410934185340477`, 0.03040532289461026], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1024944, "TrainingTime" -> 
             2.891283046943182|>, "Index" -> 19|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.9025240498596048`, 0.17368396265702707`], "Accuracy" -> 
              Around[0.7888324315844696, 0.015739599038312638`], 
              "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -3.5329225623661613`,
               "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 780096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9025240498596048`, 0.12281310777813492`]}, 
              "AccuracyHistory" -> {
                Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
              Around[0.8854786750958584, 0.013351117434256547`], 
              "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, 
              "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 250, 
              "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
              837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6454807954277998, 0.062000766216747265`]}, 
              "AccuracyHistory" -> {
                Around[0.8854786750958584, 0.009440665674180743]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00022514047861176898`, "MeanCrossEntropy" -> 
             Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
             187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
             115.3099731077524|>, "Index" -> 20|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
              Around[0.5296860458536663, 0.019284927181766578`], 
              "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -2.44789502640578, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2036312536280331`, 0.01921988365429954]}, 
              "AccuracyHistory" -> {
                Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8399174549925484, 0.024903779896598206`], "Accuracy" -> 
              Around[0.7369045920343117, 0.018395727422659554`], 
              "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.7311181711686499`, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 351208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8399174549925484, 0.017609631642061807`]}, 
              "AccuracyHistory" -> {
                Around[0.7369045920343117, 0.0130077436054219]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
             Around[0.8399174549925484, 0.024903779896598206`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 351208, "TrainingTime" -> 
             2.4002626703166206`|>, "Index" -> 21|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
              Around[0.7313061583954904, 0.017144680944532857`], 
              "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.028995426006972, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 313112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9663976578750052, 0.05017890964418109]}, 
              "AccuracyHistory" -> {
                Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35008419981942934`, 0.024708646909891732`], "Accuracy" -> 
              Around[0.8568009346457361, 0.014673031432912107`], 
              "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> 
              0.0029327369312612817`, "TrainingSize" -> 250, "TrainingTime" -> 
              3.981071705534973, "TrainingMemory" -> 398384, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35008419981942934`, 0.017471651783928475`]}, 
              "AccuracyHistory" -> {
                Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.042170347467092334`, 0.016000630897312476`], 
              "Accuracy" -> Around[0.9907604816520923, 0.008121627376877738], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 825792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.042170347467092334`, 0.011314154610752645`]}, 
              "AccuracyHistory" -> {
                Around[0.9907604816520923, 0.00574285779246056]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
              Around[0.5804592460589959, 0.018783072828788897`], 
              "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
              "ModelMemory" -> 58320, "ModelUtility" -> -3.4638943660534287`, 
              "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.987919142262011, 0.07603787179768637]}, 
              "AccuracyHistory" -> {
                Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
             Around[1.987919142262011, 0.10753378955027475`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 299984, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 22|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9403941167153582, 0.030071559648660914`], "Accuracy" -> 
              Around[0.6590202792143492, 0.018327916017389055`], 
              "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.9641702588327155`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 318200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9403941167153582, 0.021263803748423883`]}, 
              "AccuracyHistory" -> {
                Around[0.6590202792143492, 0.01295979370091334]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.45576172147997035`, 0.02603166210338864], "Accuracy" -> 
              Around[0.8256280537105091, 0.015920374420882354`], 
              "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -0.525479429825631, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 420072, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45576172147997035`, 0.01840716479886297]}, 
              "AccuracyHistory" -> {
                Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
              Around[0.9385178062088241, 0.020368186136795634`], 
              "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 1.0349935743091963`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 933232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.20578142008052, 0.019371630008387233`]}, 
              "AccuracyHistory" -> {
                Around[0.9385178062088241, 0.01440248253779802]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041974250697322877`, "MeanCrossEntropy" -> 
             Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
             62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
             2.29662775876662|>, "Index" -> 23|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5041540185761222`, 0.12792697018320168`], "Accuracy" -> 
              Around[0.7491330451581357, 0.01676873732368961], 
              "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 1332,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5041540185761222`, 0.09045802811319117]}, 
              "AccuracyHistory" -> {
                Around[0.7491330451581357, 0.01185728787351688]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3551338319540449, 0.027278187743878263`], "Accuracy" -> 
              Around[0.8473263359267194, 0.015089820198610777`], 
              "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 1132,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 250, 
              "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 527408,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3551338319540449, 0.01928859153217609]}, 
              "AccuracyHistory" -> {
                Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
              Around[0.9895518014074794, 0.008620653342748424], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 4.258968427388813, 
              "TrainingSize" -> 1106, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 932288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.03734914821299343, 0.013125775259394882`]}, 
              "AccuracyHistory" -> {
                Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
              Around[0.46102332820255726`, 0.018987327336901637`], 
              "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 1372,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10, 
              "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.678346364097339, 0.08174114510413875]}, 
              "AccuracyHistory" -> {
                Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00029572208708069134`, "MeanCrossEntropy" -> 
             Around[2.678346364097339, 0.11559943601018015`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 449640, "TrainingTime" -> 
             18.983242383456506`|>, "Index" -> 24|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
              Around[0.7762423210420635, 0.014329340894644918`], 
              "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 2432, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              605098.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8208265202024376, 0.05283642239438791], 
                Around[1.4514603795294685`, 0.08835215155478726]}, 
              "AccuracyHistory" -> {
                Around[0.7878452988653784, 0.012263467049955281`], 
                Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, "ModelUtility" -> -0.2386147056327178,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 680424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.06082621292123911, 0.019650473295384628`], "Accuracy" -> 
              Around[0.9770146234585061, 0.012716008303818851`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.2838445796528624`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1099664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06082621292123911, 0.013894982920691632`]}, 
              "AccuracyHistory" -> {
                Around[0.9770146234585061, 0.008991575701254757]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.06082621292123911, 0.019650473295384628`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
             "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
              Around[0.7627369072147341, 0.011750893611347561`], 
              "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 2664, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              468021.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0095607638414457`, 0.05525446612282441], 
                Around[1.1842784010456864`, 0.07075909436910463]}, 
              "AccuracyHistory" -> {
                Around[0.7543389604118015, 0.011774622135660197`], 
                Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35804951443350097`, 0.026655439166062223`], "Accuracy" -> 
              Around[0.8488505284229317, 0.014960827173881168`], 
              "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
              527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35804951443350097`, 0.018848241789828087`]}, 
              "AccuracyHistory" -> {
                Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 3.3814381242084908`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 959184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.05985945373078884, 0.01350088664315196]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.05985945373078884, 0.01909313699480727], "ModelMemory" -> 
             101904, "TrainingMemory" -> 959184, "TrainingTime" -> 
             6.89353199975045|>, "Index" -> 26|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3358149900117273`, 0.12222648201044096`], "Accuracy" -> 
              Around[0.7862467400481814, 0.01602150238466662], 
              "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 1300, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.825724619026342, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 781952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3358149900117273`, 0.08642717427015836]}, 
              "AccuracyHistory" -> {
                Around[0.7862467400481814, 0.01132891298099421]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
              Around[0.8858609662855659, 0.013283721779471411`], 
              "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.3445805711537584`,
               "TrainingSize" -> 250, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 845640, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6317653258849528, 0.05961837551263815]}, 
              "AccuracyHistory" -> {
                Around[0.8858609662855659, 0.009393009749659667]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
             Around[0.6317653258849528, 0.08431311521662489], "ModelMemory" -> 
             187664, "TrainingMemory" -> 845640, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 27|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1154980744941485`, 0.034353683515180075`], "Accuracy" -> 
              Around[0.5814498430933545, 0.019088672339769665`], 
              "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 1332, 
              "ModelMemory" -> 93800, "ModelUtility" -> -2.347503593111097, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 386152, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1154980744941485`, 0.02429172257232034]}, 
              "AccuracyHistory" -> {
                Around[0.5814498430933545, 0.01349772965529921]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5546183182382579, 0.026395794652472045`], "Accuracy" -> 
              Around[0.8135685469111952, 0.016337844310188795`], 
              "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> -0.9566176476083332, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 451760, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5546183182382579, 0.01866464539357059]}, 
              "AccuracyHistory" -> {
                Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
              Around[0.9299868058195125, 0.021652291921408842`], 
              "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.7601699845170374, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 918608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23091679939394155`, 0.02259715579830503]}, 
              "AccuracyHistory" -> {
                Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041019731090850185`, "MeanCrossEntropy" -> 
             Around[0.23091679939394155`, 0.0319572042010208], "ModelMemory" -> 
             93800, "TrainingMemory" -> 918608, "TrainingTime" -> 
             1.3087789598585713`|>, "Index" -> 28|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
              Around[0.7681507374150377, 0.016318407378901893`], 
              "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 1332,
               "ModelMemory" -> 93800, "ModelUtility" -> -2.137795388853302, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 386256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9948450772059008, 0.05585599851339633]}, 
              "AccuracyHistory" -> {
                Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
              Around[0.8617176768356566, 0.014429545856984168`], 
              "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.052922354317971765`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 497976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3326799470819294, 0.018734832919486785`]}, 
              "AccuracyHistory" -> {
                Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07021180454193646, 0.026976812427827776`], "Accuracy" -> 
              Around[0.9710277520559213, 0.014250347362805026`], 
              "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.0477874334351047`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 966920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07021180454193646, 0.01907548700251455]}, 
              "AccuracyHistory" -> {
                Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
             Around[0.07021180454193646, 0.026976812427827776`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
             "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
              Around[0.7911413261337976, 0.015627505897240296`], 
              "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 2332,
               "ModelMemory" -> 187664., 
              "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
              774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.7558990910227044, 0.037970217663081576`], 
                Around[0.9594474328704059, 0.07043483754789011]}, 
              "AccuracyHistory" -> {
                Around[0.7779594452749371, 0.011355683387275856`], 
                Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
              Around[0.8389781853611775, 0.015335274506302916`], 
              "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4042669758821077, 0.022272205006115358`]}, 
              "AccuracyHistory" -> {
                Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.10406413363415194`, 0.020899367441681686`], "Accuracy" -> 
              Around[0.9736914348517792, 0.013553043838557063`], 
              "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 2.2363622110324752`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 1218600, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.10406413363415194`, 0.014778084440522468`]}, 
              "AccuracyHistory" -> {
                Around[0.9736914348517792, 0.009583449203962254]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
             Around[0.10406413363415194`, 0.020899367441681686`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
             "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 1382, 
      "PreprocessorEvaluationTime" -> 3.9375*^-6, "PreprocessorMemory" -> 
      94088, "InputDimension" -> 18, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.869215141896656`16.340197867844974*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
          "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
          "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 40|>, <|
         "TrainingSizes" -> 250, "TimeBudgets" -> 138.0795097872658, 
          "ElapsedTimes" -> 151.156252, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
          "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 21|>}, 
        
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
             Interval[{5, 
               DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
           5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
           8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
      "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
      "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, "Instant",
         "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9, 3.869210988494907*^9, 3.869211542035791*^9},
 CellLabel->
  "Out[421]=",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}},
 CellLabel->
  "In[422]:=",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "19034f41-be4d-4eaa-9650-6c15422c87b6"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"99.1", "0.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.1329479768786114846`3., 0.4991396165558288911`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"69.1", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.0751445086705189169`3., 2.4883140570071944353`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9564305105930941409`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0303164048540168762`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8957977008850603884`3.", "\", \"", 
                   "1.0170633203011278933`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8957977008850603884`3., 
                   ", ", 1.0170633203011278933`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0445471424083839287`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0316921409220950537`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "0.0188371394358061786`3."}], "\", \"", 
                   "0.107931424252574043`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -0.0188371394358061786`3.,
                    ", ", 0.107931424252574043`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"7.04`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.43`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKL96k7RRV8dY+KOjpDQbrV/Z9e/5HbLZ6
aH9Nxp6Fze2dvdmLST56Lm/tC4SvXDFReEnQvIdVIuvcH96yZ0ABxLvnafFu
1ROib+2tl7O8S9z4wr5rUTe/tvVtkv11gumH1M2Pr+13x6+w3LHlsb2OQUn3
hPJ9JJtT+e0aU/7Lt/Zlp+/u8Xv22v7VOq5H6pOe2gMAbTJnmQ==
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.9815950920245398`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9876543209876543}], 
                    Row[{"Recall = ", 0.975609756097561}], 
                    Row[{"FScore = ", 0.9815950920245398}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.012345679012345678`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0041841004184100415`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.012345679012345678`}], 
                    Row[{"Row fraction = ", 0.0041841004184100415`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9979035639412998`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.99581589958159}], 
                    Row[{"FScore = ", 0.9979035639412998}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.024390243902439025`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.024390243902439025`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.923076923076923`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8571428571428571}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.923076923076923}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{82, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.975609756097561}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{239, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.99581589958159}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9876543209876543}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{14, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8571428571428571}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["82", TraditionalForm]}, {2.5, 
                    FormBox["13", TraditionalForm]}, {1.5, 
                    FormBox["239", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["81", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["13", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["238", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["14", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
              "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
              "Doors" -> <|"Type" -> "Nominal"|>, 
              "Passengers" -> <|"Type" -> "Nominal"|>, 
              "Cargo" -> <|"Type" -> "Nominal"|>, 
              "Safety" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|
                  "FeatureNames" -> {
                    "PurchasePrice", "MaintenanceCost", "Doors", "Passengers",
                     "Cargo", "Safety"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 6|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 1382, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                    0.5381047338323698, 0.31349173058168534`}, {
                    0.2878959194482099, 
                    0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                    0.2578066194971254, 
                    0.4093083635172316, -0.7050063333319737, 
                    0.08206678121922453, -0.2152687718915405, 
                    0.46464274419035045`}, {
                    0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                    0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                    0.3669612074237795, -0.03875817355088801, 
                    0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                    0.5767907589006783, 0.1852877321886701, 
                    0.21134659605041434`, 0.33089384854127}}, 
                    "Precisions" -> {11.396708918937332`, 11.702295237769018`,
                     11.751709980827822`, 12.269447018561033`, 
                    12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                    None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 6, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 
                    1301520, "DataMemory" -> 446480, "FunctionMemory" -> 
                    62320, "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-1.5374646114340518`, \
-1.5374646114340518`, -1.4481495799387802`, -1.3901532053842829`, \
-1.3900959198753926`, -1.3059537438182822`, -1.239089852169043, \
-1.2261733685503937`, -1.2132739652746585`, -1.169323039076807, \
-1.1079994773194297`}, "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                    0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[7.816606057704673, 0.25703225729782303`], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5495059474424677337|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Index" -> {<|
                  "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                  2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                  "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                  "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.12314196676015854`, -0.861851692199707, 
                   0.10532767325639725`}, {
                   0.8298183679580688, -0.28949323296546936`, 
                   0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                   0.38437455892562866`, -0.8375512361526489, 
                   0.1422276645898819}}], 
                  RawArray["Real32",{{0., 0., 
                   0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                   0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                   0.4795919358730316}, {
                   0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                   0.2534555494785309, -0.4526385962963104}, {
                   0.3543681204319, -0.37547722458839417`, 
                   0.5876661539077759}, {-1.1276206970214844`, 
                   0.17602579295635223`, -1.0098364353179932`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.24657385051250458`, -0.8256815671920776, 
                   0.8846340179443359}, {0.6182233691215515, 
                   0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.34666627645492554`, -0.5679200291633606, 
                   0.10750995576381683`}, {
                   0.6412044167518616, -0.1759643256664276, 
                   0.6604856848716736}, {-0.8092290163040161, 
                   0.12987354397773743`, -1.1753407716751099`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                   0.12715618312358856`, 0.1291729062795639}, {
                   0.21379514038562775`, -0.6005780100822449, 
                   0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
                272386066020895428|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                   "very good" -> 4|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {4}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113,
            "unacceptable" -> 0.7012987012987013, "very good" -> 
           0.03896103896103896|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Acceptability", 
             "Order" -> {
              "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
               "Cargo", "Safety", "Acceptability"}|>], "PreferLabeled" -> 
          True, "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> 
       None, "ImputationStrategy" -> Automatic, "Prior" -> Automatic, 
       "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
       "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
       Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                    0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                    0.09347633272409439, 0.20684024691581726`, 
                    0.00729140592738986, -0.3824177384376526, 
                    0.2153223156929016, -0.46700865030288696`, 
                    0.21194063127040863`, 
                    0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                    0.07883942127227783, -0.375686913728714, 
                    0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                    0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                    0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                    0.1690395474433899, -0.28660914301872253`, 
                    0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                    0.17016777396202087`, -0.32100844383239746`, 
                    0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 18, "$InputDimensions" -> {18}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                   "], "Biases" -> 
                  RawArray["Real32",{-0.23329688608646393`, 
                    0.1376294195652008, 
                    0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                    0.1361909657716751, -0.07115011662244797, 
                    0.0030301439110189676`, 0.04029219597578049, 
                    0.05379099026322365, 
                    
                    0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                    0.0140318488702178, 
                    0.18612468242645264`, -0.17168177664279938`, 
                    0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                    0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                    0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                    0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                    0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                    0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "7" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                   "], "Biases" -> 
                  RawArray["Real32",{-0.30062639713287354`, 
                    0.12008462101221085`, 
                    0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                    0.09417349845170975, -0.10099706798791885`, 
                    0.08236243575811386, -0.2349618673324585, 
                    0.1114811822772026, 
                    0.2365228235721588, -0.1581137776374817, 
                    0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                    0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                    0.08413115888834, -0.2386404424905777, 
                    0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                    0.017599068582057953`, -0.16277392208576202`, 
                    0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                    0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                    0.048794329166412354`, -0.2748609185218811, 
                    0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                    0.15255072712898254`, -0.054961107671260834`, 
                    0.12484297901391983`, -0.013735197484493256`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "10" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1: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
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.18632154166698456`, -0.05518893152475357, 
                    0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                    0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                    0.12943300604820251`, 
                    0.21619535982608795`, -0.12615013122558594`, 
                    0.12520363926887512`, 0.1943180412054062, 
                    0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                    0.12467250972986221`, -0.3208949565887451, 
                    0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                    0.16070689260959625`, -0.07001221925020218, 
                    0.07522184401750565, 
                    0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                    0.24120552837848663`, -0.04254811629652977, 
                    0.19626277685165405`, 0.04852093756198883}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "11" -> <|
               "Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "12" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.18740198016166687`, -0.1249600350856781, 
                    0.03215433284640312, -0.2378043681383133}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
           19653.548073458904`|>, "InputType" -> "NumericalVector", 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "Mean" -> {0.23124615267859935`, -0.72822837729203, 
                 0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
                 0.10517240908924025`, -0.24024309043728495`, 
                 0.3074998656424723, 
                 0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
                 0.3879769949206493}, 
                "StandardDeviation" -> {0.42336656209659007`, 
                 0.2672799034098392, 0.07124798075524297, 
                 0.36989547912470067`, 0.17138659393602926`, 
                 0.5155818183543911, 0.688893371869374, 0.24977193740899778`, 
                 0.6403849334448501, 0.4897664046907167, 0.46819109868519837`,
                  0.43423173863577835`, 0.6276718952348702, 
                 0.28383206529853633`, 0.7719651260033509, 
                 0.09756213850198994, 0.2950767752080472, 
                 0.22147755480753964`}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
            Around[0.9926698116140742, 0.007247173785702781], 
            "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
            "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
            "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
            "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.021350027675851042`, 0.008527240234488089]}, 
            "AccuracyHistory" -> {
              Around[0.9926698116140742, 0.005124525728307819]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 4, "NumberOfParameters" -> 8600, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
                 Around[0.5039356498747214, 0.011280914837970198`], 
                 "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -5.255034068743364, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 474568., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[3.3682246428941447`, 0.11709052181782027`], 
                   Around[5.718797544659934, 0.1974406032409913]}, 
                 "AccuracyHistory" -> {
                   Around[0.4977980114632854, 0.013422541870627485`], 
                   Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
                 Around[0.7731731038259634, 0.010538572727576656`], 
                 "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 
                 2532, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
                 461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.0207920682675256`, 0.13567904919872614`], 
                   Around[1.989358115693642, 0.12729332292504641`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7666435334598815, 0.01212548962300386], 
                   Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
                 Around[0.8754721532521594, 0.013799020363039234`], 
                 "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.6640374106578726`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 580856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7727930479153965, 0.07355983104423623]}, 
                 "AccuracyHistory" -> {
                   Around[0.8754721532521594, 0.009757380872436296]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.021350027675851042`, 0.012059338789226588`], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 5.3529526868256205`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 1025056, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.021350027675851042`, 0.008527240234488089]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
                Around[0.021350027675851042`, 0.012059338789226588`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
                "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1638549337103177`, 0.10037145501929841`], 
                 "Accuracy" -> 
                 Around[0.5492390926678674, 0.023756280779855192`], 
                 "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 
                 1300, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -2.4356505013181984`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 315949.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0659744269130655`, 0.06346538833801657], 
                   Around[1.2617354405075698`, 0.023724306617050557`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5686355009414037, 0.0494049938117882], 
                   Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
                 Around[0.34906013350595955`, 0.01773043247078872], 
                 "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
                 288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.7284854644248697`, 0.024470278570364008`], 
                   Around[1.7449836721317225`, 0.02985267016659267]}, 
                 "AccuracyHistory" -> {
                   Around[0.333797137166834, 0.012654176408351573`], 
                   Around[0.364323129845085, 0.01286858453924453]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7297176649588678, 0.030635251566725513`], 
                 "Accuracy" -> 
                 Around[0.7731352673792209, 0.01749760840751051], 
                 "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.4608603411176038`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 430312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7297176649588678, 0.021662394126187413`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
                 Around[0.8462070332421717, 0.03062402709723611], 
                 "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.1999951890132391, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 882408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38327177587574507`, 0.029923508235575796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020558565549557822`, 
                "MeanCrossEntropy" -> 
                Around[0.38327177587574507`, 0.0423182311805343], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 882408, 
                "TrainingTime" -> 1.2870992522366111`|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.35435313401532587`, 0.026162924108051638`], 
                 "Accuracy" -> 
                 Around[0.8602959769418544, 0.016276096618821716`], 
                 "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35435313401532587`, 0.018499981052472317`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
                 Around[0.4905470789487266, 0.05942169230008629], 
                 "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 
                 2672, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -4.197660943845806, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 273552., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5949653673903932`, 0.05337852556796832], 
                   Around[3.769761211170389, 0.12190065068836999`]}, 
                 "AccuracyHistory" -> {
                   Around[0.549197732950539, 0.013394029354165352`], 
                   Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
                 Around[0.7442585992282589, 0.013337895880245353`], 
                 "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 
                 2632, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 308650.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7090566921048821, 0.029587871638874982`], 
                   Around[0.9267562156706394, 0.048804806717094945`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7339496000489554, 0.012070557593356287`], 
                   Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
                 Around[0.9791671208169963, 0.012128533944401654`], 
                 "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
                 "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
                 "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
                 "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.07118410180594256, 0.013542997191503502`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9791671208169963, 0.008576168597937634]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
                Around[0.07118410180594256, 0.01915269030340499], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 945064, 
                "TrainingTime" -> 6.2334652825440156`|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
                 Around[0.838474265252356, 0.01562338483938151], 
                 "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 
                 1100, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 
                 250, "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 845536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4150311982338223, 0.022874520429674614`]}, 
                 "AccuracyHistory" -> {
                   Around[0.838474265252356, 0.011047401365013764`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.9363303357963932`, 0.22063573174865092`], 
                 "Accuracy" -> 
                 Around[0.6016657435215405, 0.009931734042792198], 
                 "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 
                 2400, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -4.394526005243066, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.8628854898161876, "TrainingMemory" -> 
                 768069.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.7328302955198254`, 0.11030764480200886`], 
                   Around[3.1398303760729616`, 0.1343428411885501]}, 
                 "AccuracyHistory" -> {
                   Around[0.6013282055836575, 0.014050468348716146`], 
                   Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
                 Around[0.7771993076355267, 0.016090257916624478`], 
                 "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.4133613417100643`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1., "TrainingMemory" -> 768752, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0883077850611167`, 0.06546404015990553]}, 
                 "AccuracyHistory" -> {
                   Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
                Around[1.0883077850611167`, 0.09258013344187536], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 768752, 
                "TrainingTime" -> 16.33188643150958|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.06349687324568681, 0.020314194118190455`], 
                 "Accuracy" -> 
                 Around[0.9752187821898789, 0.013178658637319573`], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.1990832337140014`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 6.309573444801933, "TrainingMemory" -> 1031984, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06349687324568681, 0.014364304415312347`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9752187821898789, 0.009318718889391335]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
                 Around[0.5614696628952743, 0.02316984504064622], 
                 "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 
                 1900, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.375448364812931, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 588357.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.2425860137311924`, 0.09670887865815357], 
                   Around[3.472752094517207, 0.15761956845763322`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5412325518696653, 0.01645230430382249], 
                   Around[0.5817067739208833, 0.01550253065862414]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
                 Around[0.7822399753364762, 0.011053793618809461`], 
                 "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 
                 2632, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.09292339195906, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.9314427449080938, "TrainingMemory" -> 
                 599973.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.1299535489778723`, 0.07202244880796001], 
                   Around[1.862147339889153, 0.11678580277280175`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7898676324542127, 0.011253506706433129`], 
                   Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.42705750837440937`, 0.035076829136806445`], 
                 "Accuracy" -> 
                 Around[0.8446730233225903, 0.015135382766381485`], 
                 "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.5213181632194831, "TrainingSize" -> 250,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 668632, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.42705750837440937`, 0.024803063745157707`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
                Around[0.42705750837440937`, 0.035076829136806445`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
                "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.29713763668876286`, 0.029783149124946628`], 
                 "Accuracy" -> 
                 Around[0.8857231716276136, 0.013316951171936615`], 
                 "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.27080207566416914`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 518544, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.29713763668876286`, 0.02105986671133995]}, 
                 "AccuracyHistory" -> {
                   Around[0.8857231716276136, 0.00941650647840652]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
                 Around[0.4534728434064575, 0.03657154854139636], 
                 "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 
                 2200, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -4.7036563931676705`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.5848931924611134`, "TrainingMemory" -> 
                 372712., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.8582879282812748`, 0.09593272842945073], 
                   Around[4.168810776492888, 0.14832220789749126`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4184413958301533, 0.015453697183599058`], 
                   Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
                 Around[0.769971120234303, 0.0162893024591907], 
                 "EvaluationTime" -> 0.00006291890573589659, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2977572298050588`, 0.07725242580096887]}, 
                 "AccuracyHistory" -> {
                   Around[0.769971120234303, 0.01151827622969245]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
                Around[1.2977572298050588`, 0.1092514282939514], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 386192, 
                "TrainingTime" -> 25.884295625347566`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5879853515835944`, 0.14718023198397873`], 
                 "Accuracy" -> 
                 Around[0.7939162815913106, 0.015646642549432373`], 
                 "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -3.152069743372218, "TrainingSize" -> 50, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 600288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5879853515835944`, 0.10407214009248054`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
                 Around[0.5705716928210636, 0.02387696402198573], 
                 "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 
                 2100, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.803632164263322, "TrainingSize" -> 10, 
                 "TrainingTime" -> 5.444439372449127, "TrainingMemory" -> 
                 583613.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.6845044721043254`, 0.10447663667270932`], 
                   Around[4.364677185562806, 0.2100094842353753]}, 
                 "AccuracyHistory" -> {
                   Around[0.5492372585429602, 0.014247131834686502`], 
                   Around[0.591906127099167, 0.01628060211969826]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38151664752165954`, 0.03977608365046414], 
                 "Accuracy" -> 
                 Around[0.8740940349402928, 0.013875001085229821`], 
                 "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38151664752165954`, 0.028125938478286556`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8740940349402928, 0.009811107356336711]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00037881779653037317`, 
                "MeanCrossEntropy" -> 
                Around[0.38151664752165954`, 0.03977608365046414], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 683480, 
                "TrainingTime" -> 92.6247680155231|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2846789544300572`, 0.10135837559026044`], 
                 "Accuracy" -> 
                 Around[0.7374636238433064, 0.017014953179959547`], 
                 "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.6005267903937916`, "TrainingSize" -> 50,
                  "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 341168, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2846789544300572`, 0.07167119470992618]}, 
                 "AccuracyHistory" -> {
                   Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
                 Around[0.5152833374237896, 0.07249298936486862], 
                 "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 
                 2744, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -5.074385087421649, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 295925.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.5190643035821725`, 0.1028129894230038], 
                   Around[5.812425858174743, 0.191466359358563]}, 
                 "AccuracyHistory" -> {
                   Around[0.5871646538577457, 0.013267469359568705`], 
                   Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020244886234998508`, 
                "MeanCrossEntropy" -> 
                Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
                58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
                58.99948267602831|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
                 Around[0.8717062863197803, 0.01777595950885693], 
                 "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.10702789819239966`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 374688, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3301382275974658, 0.02068135393911543]}, 
                 "AccuracyHistory" -> {
                   Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
                 Around[0.7363490438369396, 0.017031507261842195`], 
                 "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.3231968082428875`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 338064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6791528095168373, 0.027387263849560993`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
                 Around[0.4863596829810406, 0.04278093185210315], 
                 "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.180492238404206, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5444439372449126, "TrainingMemory" -> 
                 322133.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.508549842629893, 0.04605766705211905], 
                   Around[3.771470810362135, 0.12018564135103059`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5280828090172973, 0.013434097226343747`], 
                   Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
                Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
                62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
                9.109108405185806|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5038386117534089, 0.041784890614198204`], 
                 "Accuracy" -> Around[0.828465928965194, 0.02654031530216917],
                  "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 
                 400, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.7882946404845459, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 528184, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5038386117534089, 0.029546379504437673`]}, 
                 "AccuracyHistory" -> {
                   Around[0.828465928965194, 0.018766836924992914`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
                 Around[0.3679296647759494, 0.07392752974250799], 
                 "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
                 449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.148424842980697, 0.03780978285236538], 
                   Around[1.4568966776552688`, 0.026077841742531138`]}, 
                 "AccuracyHistory" -> {
                   Around[0.2945557228909562, 0.012245543527860529`], 
                   Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
                 Around[0.6180757845356775, 0.05382602805907864], 
                 "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 
                 2632, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
                 461714.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.155425119141791, 0.02396130422338247], 
                   Around[1.0610392976248695`, 0.02621811203957636]}, 
                 "AccuracyHistory" -> {
                   Around[0.5650696245779578, 0.013556795434539574`], 
                   Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23257721592841687`, 0.03163453421313113], 
                 "Accuracy" -> 
                 Around[0.908886547057971, 0.024356212382520913`], 
                 "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 0.7369941836531197, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1045880, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23257721592841687`, 0.022368993661782865`]}, 
                 "AccuracyHistory" -> {
                   Around[0.908886547057971, 0.017222442939700294`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
                Around[0.23257721592841687`, 0.03163453421313113], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1045880, 
                "TrainingTime" -> 1.4937384274690055`|>, "Index" -> 10|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
                 Around[0.7457728338345587, 0.018472683364634448`], 
                 "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.7509502414499094`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 309112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8371599125387441, 0.047884777618598134`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
                 Around[0.8882989940963734, 0.013145309817848845`], 
                 "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.48100284988718467`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 469432, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2722926005782066, 0.022605846381320353`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8882989940963734, 0.009295137712999018]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04678344173247784, 0.020786249475512084`], 
                 "Accuracy" -> 
                 Around[0.9851396376350638, 0.010281268792086398`], 
                 "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 3.8798539588000582`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 972672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04678344173247784, 0.014698097959569912`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9851396376350638, 0.007269954882085916]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
                 Around[0.502464111857925, 0.07130486561817233], 
                 "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 
                 2200, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.6637320197127625`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299269.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.8332223163074313`, 0.08054167103388306], 
                   Around[4.86043648706169, 0.16818929238262642`]}, 
                 "AccuracyHistory" -> {
                   Around[0.572995990979411, 0.015538960918031978`], 
                   Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
                Around[3.3468294016845603`, 1.5153492244478233`], 
                "ModelMemory" -> 62416., "TrainingMemory" -> 
                299269.3333333333, "TrainingTime" -> 18.65727460278956|>, 
              "Index" -> 11|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
                 Around[0.762381947001795, 0.01642868812328819], 
                 "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -1.7030510878983651`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 600016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7752070403907262, 0.03017334558439825]}, 
                 "AccuracyHistory" -> {
                   Around[0.762381947001795, 0.011616836777975974`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.39447704061745437`, 0.03234768531334908], 
                 "Accuracy" -> 
                 Around[0.8594906763316973, 0.01476170763807768], 
                 "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 
                 1100, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.3625496870271967, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 675000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.39447704061745437`, 0.02287326764075762]}, 
                 "AccuracyHistory" -> {
                   Around[0.8594906763316973, 0.01043810357277798]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
                 Around[0.9455603955460657, 0.019279136977717354`], 
                 "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 1.404009915150804, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1142080, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15855325263059325`, 0.025484079405049796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
                 Around[0.5116939418989973, 0.07010685788967808], 
                 "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 
                 2400, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 586421.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.521906370483909, 0.03515613181787799], 
                   Around[1.5882755791735657`, 0.05563504596868172]}, 
                 "AccuracyHistory" -> {
                   Around[0.442311083421225, 0.014256465737770922`], 
                   Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
                Around[1.5550909748287374`, 0.04454750436345691], 
                "ModelMemory" -> 164368., "TrainingMemory" -> 
                586421.3333333333, "TrainingTime" -> 5.818068863066169|>, 
              "Index" -> 12|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9007091827219887, 0.030008702121127984`], 
                 "Accuracy" -> 
                 Around[0.6760965348587569, 0.018079481767156038`], 
                 "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.8723329888169609`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9007091827219887, 0.02121935676445673]}, 
                 "AccuracyHistory" -> {
                   Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.43111245312757496`, 0.025345577264303743`], 
                 "Accuracy" -> 
                 Around[0.8330426045067885, 0.015571490015669136`], 
                 "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.4088030140985044, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 364536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.43111245312757496`, 0.01792202955667676]}, 
                 "AccuracyHistory" -> {
                   Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.1842923793671783, 0.025304164192749383`], 
                 "Accuracy" -> 
                 Around[0.9457395297710746, 0.019169568233064083`], 
                 "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 891920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.1842923793671783, 0.01789274609295091]}, 
                 "AccuracyHistory" -> {
                   Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
                 Around[0.43385363675367183`, 0.011415114317526467`], 
                 "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 
                 2472, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -3.5149737403880033`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 273418.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.4396046101139186`, 0.029031135765925187`], 
                   Around[2.475712680707863, 0.06775654619883521]}, 
                 "AccuracyHistory" -> {
                   Around[0.439498971976867, 0.014905537896345295`], 
                   Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
                Around[1.9576586454108909`, 0.5187408468073508], 
                "ModelMemory" -> 58320., "TrainingMemory" -> 
                273418.6666666666, "TrainingTime" -> 4.386881933034051|>, 
              "Index" -> 13|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8419793893936219, 0.040743862542620725`], 
                 "Accuracy" -> 
                 Around[0.7373831716775224, 0.01693418574125903], 
                 "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.8856361050895067`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 782064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8419793893936219, 0.02881026149561968]}, 
                 "AccuracyHistory" -> {
                   Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
                 Around[0.8250320562814308, 0.01594299951984108], 
                 "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.6112985333219293, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 848080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4432056724888078, 0.02238507759095115]}, 
                 "AccuracyHistory" -> {
                   Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.16858329728652338`, 0.029069351611494675`], 
                 "Accuracy" -> Around[0.945560395546066, 0.01927913697771735],
                  "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 
                 276, "ModelMemory" -> 187664, "ModelUtility" -> 
                 1.2824675838731772`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.2589254117941673`, "TrainingMemory" -> 1207096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.16858329728652338`, 0.020555135649183976`]}, 
                 "AccuracyHistory" -> {
                   Around[0.945560395546066, 0.013632408492368258`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
                Around[0.16858329728652338`, 0.029069351611494675`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
                "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3249962292171797`, 0.12170206901231112`], 
                 "Accuracy" -> 
                 Around[0.793195580192614, 0.015828005629622638`], 
                 "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -2.7896299497840076`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 589096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3249962292171797`, 0.08605635828303838]}, 
                 "AccuracyHistory" -> {
                   Around[0.793195580192614, 0.011192090113365015`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 686536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00044256629018744604`, 
                "MeanCrossEntropy" -> 
                Around[0.3701221449474526, 0.03366489354688038], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 686536, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 15|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1227673790868702`, 0.10368611279141937`], 
                 "Accuracy" -> 
                 Around[0.757173277714323, 0.018196954510351714`], 
                 "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.342528378471589, "TrainingSize" -> 50, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 309656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1227673790868702`, 0.07331715346968586]}, 
                 "AccuracyHistory" -> {
                   Around[0.757173277714323, 0.012867189931212827`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33220140414624993`, 0.047853257302163214`], 
                 "Accuracy" -> 
                 Around[0.8965085805171233, 0.012697194170323252`], 
                 "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.07288974716187491, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 510104, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33220140414624993`, 0.03383736274022428]}, 
                 "AccuracyHistory" -> {
                   Around[0.8965085805171233, 0.00897827209987787]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.029497520149122013`, 0.01667491875741592], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 4.7583398302297795`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 39.810717055349734`, "TrainingMemory" -> 948200, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.029497520149122013`, 0.011790948129103553`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.2949671588281193`, 0.14749235577106196`], 
                 "Accuracy" -> 
                 Around[0.5835796437000327, 0.02088503617561304], 
                 "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -3.761313256061099, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 297120, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.2949671588281193`, 0.10429284493889672`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
                Around[2.2949671588281193`, 0.14749235577106196`], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 297120, 
                "TrainingTime" -> 58.99948267602831|>, "Index" -> 16|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
                 Around[0.7677501064780398, 0.00816276162917491], 
                 "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 
                 2664, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 
                 386088., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5973296386447973`, 0.09710009617968923], 
                   Around[1.6944960008299512`, 0.10490120341267964`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7682281016221508, 0.011537187632355594`], 
                   Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33249143642424983`, 0.02780494761566639], 
                 "Accuracy" -> 
                 Around[0.8613277396783116, 0.014507674452371017`], 
                 "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.05248807658590138, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 502672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33249143642424983`, 0.01966106700957443]}, 
                 "AccuracyHistory" -> {
                   Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04443140001711353, 0.021314953380441544`], 
                 "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.92776201569796, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 970336, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04443140001711353, 0.01507194807598534]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00046938966244621503`, 
                "MeanCrossEntropy" -> 
                Around[0.04443140001711353, 0.021314953380441544`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
                "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
                 Around[0.7384665234825579, 0.010719276135332273`], 
                 "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 
                 2432, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -1.9350890275488193`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.37788092188698263`, "TrainingMemory" -> 
                 378786.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7726332524190396, 0.028941631998749596`], 
                   Around[1.0060756456836646`, 0.05024424270156515]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324400373766513, 0.0120571885743892], 
                   Around[0.7444930095884645, 0.01307837056160318]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.34782344779765667`, 0.025712507033831242`], 
                 "Accuracy" -> 
                 Around[0.8557374599745653, 0.014686070676875251`], 
                 "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.34782344779765667`, 0.018181488084928872`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8557374599745653, 0.0103846201646034]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15276622770087278`, 0.028666652684449675`], 
                 "Accuracy" -> 
                 Around[0.9498135082589592, 0.018508440411731872`], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 93800, "ModelUtility" -> 
                 1.5673860415737628`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 907872, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15276622770087278`, 0.02027038450709391]}, 
                 "AccuracyHistory" -> {
                   Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.15276622770087278`, 0.028666652684449675`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
                "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7753042739299817, 0.039969593621796584`], 
                 "Accuracy" -> 
                 Around[0.7375401740439216, 0.01714466436223822], 
                 "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 
                 1300, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.637907986699601, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 461800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7753042739299817, 0.02826277069124294]}, 
                 "AccuracyHistory" -> {
                   Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35554695739060116`, 0.027033696117590978`], 
                 "Accuracy" -> 
                 Around[0.8470897173852533, 0.01508748965454944], 
                 "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08838018962147687, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 567400, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35554695739060116`, 0.01911570984528502]}, 
                 "AccuracyHistory" -> {
                   Around[0.8470897173852533, 0.01066846624581379]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15410934185340477`, 0.03040532289461026], 
                 "Accuracy" -> 
                 Around[0.9596068784743268, 0.016667152171683092`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 1.5363925902488362`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1024944, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15410934185340477`, 0.0214998100029455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.15410934185340477`, 0.03040532289461026], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1024944, 
                "TrainingTime" -> 2.891283046943182|>, "Index" -> 19|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.9025240498596048`, 0.17368396265702707`], 
                 "Accuracy" -> 
                 Around[0.7888324315844696, 0.015739599038312638`], 
                 "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -3.5329225623661613`, "TrainingSize" -> 50,
                  "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 780096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.9025240498596048`, 0.12281310777813492`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
                 Around[0.8854786750958584, 0.013351117434256547`], 
                 "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 
                 250, "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
                 837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6454807954277998, 0.062000766216747265`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8854786750958584, 0.009440665674180743]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00022514047861176898`, 
                "MeanCrossEntropy" -> 
                Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
                187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
                115.3099731077524|>, "Index" -> 20|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
                 Around[0.5296860458536663, 0.019284927181766578`], 
                 "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.44789502640578, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2036312536280331`, 0.01921988365429954]}, 
                 "AccuracyHistory" -> {
                   Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8399174549925484, 0.024903779896598206`], 
                 "Accuracy" -> 
                 Around[0.7369045920343117, 0.018395727422659554`], 
                 "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.7311181711686499`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 351208, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8399174549925484, 0.017609631642061807`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7369045920343117, 0.0130077436054219]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
                Around[0.8399174549925484, 0.024903779896598206`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 351208, 
                "TrainingTime" -> 2.4002626703166206`|>, "Index" -> 21|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
                 Around[0.7313061583954904, 0.017144680944532857`], 
                 "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.028995426006972, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 313112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9663976578750052, 0.05017890964418109]}, 
                 "AccuracyHistory" -> {
                   Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35008419981942934`, 0.024708646909891732`], 
                 "Accuracy" -> 
                 Around[0.8568009346457361, 0.014673031432912107`], 
                 "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, "ModelUtility" -> 
                 0.0029327369312612817`, "TrainingSize" -> 250, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 398384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35008419981942934`, 0.017471651783928475`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.042170347467092334`, 0.016000630897312476`], 
                 "Accuracy" -> 
                 Around[0.9907604816520923, 0.008121627376877738], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 825792, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.042170347467092334`, 0.011314154610752645`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9907604816520923, 0.00574285779246056]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
                 Around[0.5804592460589959, 0.018783072828788897`], 
                 "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
                 "ModelMemory" -> 58320, 
                 "ModelUtility" -> -3.4638943660534287`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.987919142262011, 0.07603787179768637]}, 
                 "AccuracyHistory" -> {
                   Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
                Around[1.987919142262011, 0.10753378955027475`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 299984, 
                "TrainingTime" -> 18.65727460278956|>, "Index" -> 22|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9403941167153582, 0.030071559648660914`], 
                 "Accuracy" -> 
                 Around[0.6590202792143492, 0.018327916017389055`], 
                 "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.9641702588327155`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 318200, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9403941167153582, 0.021263803748423883`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6590202792143492, 0.01295979370091334]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.45576172147997035`, 0.02603166210338864], 
                 "Accuracy" -> 
                 Around[0.8256280537105091, 0.015920374420882354`], 
                 "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.525479429825631, "TrainingSize" -> 250, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 420072, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.45576172147997035`, 0.01840716479886297]}, 
                 "AccuracyHistory" -> {
                   Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
                 Around[0.9385178062088241, 0.020368186136795634`], 
                 "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, "ModelUtility" -> 
                 1.0349935743091963`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 933232, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.20578142008052, 0.019371630008387233`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9385178062088241, 0.01440248253779802]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041974250697322877`, 
                "MeanCrossEntropy" -> 
                Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
                62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
                2.29662775876662|>, "Index" -> 23|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5041540185761222`, 0.12792697018320168`], 
                 "Accuracy" -> 
                 Around[0.7491330451581357, 0.01676873732368961], 
                 "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 
                 1332, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5041540185761222`, 0.09045802811319117]}, 
                 "AccuracyHistory" -> {
                   Around[0.7491330451581357, 0.01185728787351688]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3551338319540449, 0.027278187743878263`], 
                 "Accuracy" -> 
                 Around[0.8473263359267194, 0.015089820198610777`], 
                 "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 
                 250, "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3551338319540449, 0.01928859153217609]}, 
                 "AccuracyHistory" -> {
                   Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
                 Around[0.9895518014074794, 0.008620653342748424], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 101904, "ModelUtility" -> 
                 4.258968427388813, "TrainingSize" -> 1106, "TrainingTime" -> 
                 15.848931924611142`, "TrainingMemory" -> 932288, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.03734914821299343, 0.013125775259394882`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
                 Around[0.46102332820255726`, 0.018987327336901637`], 
                 "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.678346364097339, 0.08174114510413875]}, 
                 "AccuracyHistory" -> {
                   Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00029572208708069134`, 
                "MeanCrossEntropy" -> 
                Around[2.678346364097339, 0.11559943601018015`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 449640, 
                "TrainingTime" -> 18.983242383456506`|>, "Index" -> 24|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
                 Around[0.7762423210420635, 0.014329340894644918`], 
                 "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 
                 2432, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 605098.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8208265202024376, 0.05283642239438791], 
                   Around[1.4514603795294685`, 0.08835215155478726]}, 
                 "AccuracyHistory" -> {
                   Around[0.7878452988653784, 0.012263467049955281`], 
                   Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.2386147056327178, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 680424, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.06082621292123911, 0.019650473295384628`], 
                 "Accuracy" -> 
                 Around[0.9770146234585061, 0.012716008303818851`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.2838445796528624`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1099664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06082621292123911, 0.013894982920691632`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9770146234585061, 0.008991575701254757]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.06082621292123911, 0.019650473295384628`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
                "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
                 Around[0.7627369072147341, 0.011750893611347561`], 
                 "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 
                 2664, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 468021.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0095607638414457`, 0.05525446612282441], 
                   Around[1.1842784010456864`, 0.07075909436910463]}, 
                 "AccuracyHistory" -> {
                   Around[0.7543389604118015, 0.011774622135660197`], 
                   Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35804951443350097`, 0.026655439166062223`], 
                 "Accuracy" -> 
                 Around[0.8488505284229317, 0.014960827173881168`], 
                 "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35804951443350097`, 0.018848241789828087`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 3.3814381242084908`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 959184, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.05985945373078884, 0.01350088664315196]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.05985945373078884, 0.01909313699480727], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 959184, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 26|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3358149900117273`, 0.12222648201044096`], 
                 "Accuracy" -> 
                 Around[0.7862467400481814, 0.01602150238466662], 
                 "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 
                 1300, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.825724619026342, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 781952, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3358149900117273`, 0.08642717427015836]}, 
                 "AccuracyHistory" -> {
                   Around[0.7862467400481814, 0.01132891298099421]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
                 Around[0.8858609662855659, 0.013283721779471411`], 
                 "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3445805711537584`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 845640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6317653258849528, 0.05961837551263815]}, 
                 "AccuracyHistory" -> {
                   Around[0.8858609662855659, 0.009393009749659667]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
                Around[0.6317653258849528, 0.08431311521662489], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 845640, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 27|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1154980744941485`, 0.034353683515180075`], 
                 "Accuracy" -> 
                 Around[0.5814498430933545, 0.019088672339769665`], 
                 "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.347503593111097, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 386152, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1154980744941485`, 0.02429172257232034]}, 
                 "AccuracyHistory" -> {
                   Around[0.5814498430933545, 0.01349772965529921]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5546183182382579, 0.026395794652472045`], 
                 "Accuracy" -> 
                 Around[0.8135685469111952, 0.016337844310188795`], 
                 "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.9566176476083332, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 451760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5546183182382579, 0.01866464539357059]}, 
                 "AccuracyHistory" -> {
                   Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
                 Around[0.9299868058195125, 0.021652291921408842`], 
                 "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.7601699845170374, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 918608, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23091679939394155`, 0.02259715579830503]}, 
                 "AccuracyHistory" -> {
                   Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041019731090850185`, 
                "MeanCrossEntropy" -> 
                Around[0.23091679939394155`, 0.0319572042010208], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 918608, 
                "TrainingTime" -> 1.3087789598585713`|>, "Index" -> 28|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
                 Around[0.7681507374150377, 0.016318407378901893`], 
                 "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.137795388853302, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 386256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9948450772059008, 0.05585599851339633]}, 
                 "AccuracyHistory" -> {
                   Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
                 Around[0.8617176768356566, 0.014429545856984168`], 
                 "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.052922354317971765`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 497976, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3326799470819294, 0.018734832919486785`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07021180454193646, 0.026976812427827776`], 
                 "Accuracy" -> 
                 Around[0.9710277520559213, 0.014250347362805026`], 
                 "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
                 "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.0477874334351047`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 966920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.07021180454193646, 0.01907548700251455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
                Around[0.07021180454193646, 0.026976812427827776`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
                 Around[0.7911413261337976, 0.015627505897240296`], 
                 "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 
                 2332, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
                 774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.7558990910227044, 0.037970217663081576`], 
                   Around[0.9594474328704059, 0.07043483754789011]}, 
                 "AccuracyHistory" -> {
                   Around[0.7779594452749371, 0.011355683387275856`], 
                   Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
                 Around[0.8389781853611775, 0.015335274506302916`], 
                 "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4042669758821077, 0.022272205006115358`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.10406413363415194`, 0.020899367441681686`], 
                 "Accuracy" -> 
                 Around[0.9736914348517792, 0.013553043838557063`], 
                 "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276,
                  "ModelMemory" -> 187664, "ModelUtility" -> 
                 2.2363622110324752`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 2.51188643150958, "TrainingMemory" -> 1218600, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.10406413363415194`, 0.014778084440522468`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9736914348517792, 0.009583449203962254]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
                Around[0.10406413363415194`, 0.020899367441681686`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
                "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 
         1382, "PreprocessorEvaluationTime" -> 3.9375*^-6, 
         "PreprocessorMemory" -> 94088, "InputDimension" -> 18, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.869215141896656`16.340197867844974*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
             "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
             "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 
             40|>, <|"TrainingSizes" -> 250, "TimeBudgets" -> 
             138.0795097872658, "ElapsedTimes" -> 151.156252, 
             "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
             "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 
             21|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, 
       "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              2846111867015398573|>, 
            "f2" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, 
              "ID" -> 41728420326286313|>, 
            "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                Interval[{5, 
                  DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
            "f4" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
              536027689597629633|>, 
            "f5" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
              5753609278033805624|>, 
            "f6" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
              8080186329754682489|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
         "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
         "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|"Input" -> {{"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "high", 4, 4, "medium", "low"}, {
        "medium", "medium", 2, 2, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "high", "very high", 2, 4, "large", "low"}, {
        "high", "high", 4, 2, "small", "medium"}, {
        "low", "high", 3, 4, "large", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 4, "small", "medium"}, {
        "medium", "high", 4, 2, "medium", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "high", 3, 4, "small", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "high", 2, 2, "large", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "low", 4, 4, "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "medium"}, {
        "very high", "very high", 3, 4, "small", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "low", 4, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "medium", "very high", 3, 2, "small", "medium"}, {
        "high", "very high", 2, 2, "medium", "high"}, {
        "high", "medium", 4, 2, "large", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 4, "medium", "high"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "medium", "high", 4, 4, "medium", "medium"}, {
        "low", "high", 3, 2, "medium", "high"}, {
        "medium", "high", 2, 4, "large", "low"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "medium", 2, 2, "small", "medium"}, {
        "low", "very high", 2, 2, "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "low", 4, 2, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "medium", 4, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "high", 2, 4, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "very high", "low", 3, 4, "small", "high"}, {
        "low", "high", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "medium", "very high", 2, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "medium", 3, 2, "medium", "low"}, {
        "high", "high", 2, 4, "large", "high"}, {
        "high", "medium", 2, 4, "medium", "high"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "medium", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "high", 4, 4, "large", "medium"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "very high", 4, 4, "large", "low"}, {
        "low", "very high", 2, 2, "medium", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "medium", 2, 4, "small", "high"}, {"low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "medium", 3, 4, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "very high", "medium", 4, 4, "large", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {
        "low", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 4, "large", "high"}, {
        "high", "low", 3, 4, "medium", "high"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 2, 4, "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "low", "medium", 4, 4, "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 3, 4, "small", "medium"}, {
        "high", "medium", 2, 2, "large", "medium"}, {
        "medium", "high", 4, 2, "medium", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 2, 2, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "medium", 3, 4, "small", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "medium", "medium", 3, 4, "medium", "medium"}, {
        "high", "low", 2, 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "low", "medium", 3, 4, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 4, 2, "small", "high"}, {
        "very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "very high", 2, 2, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "low", 2, 4, "large", "medium"}, {
        "low", "medium", 4, 4, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {
        "high", "very high", 3, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "high", 4, 2, "medium", "low"}, {
        "high", "medium", 4, 4, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "medium", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "low", 4, 2, "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 3, 4, "large", "medium"}, {
        "very high", "medium", 4, 2, "large", "high"}, {
        "high", "high", 4, 2, "large", "medium"}, {
        "high", "medium", 2, 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "high", 4, 4, "small", "low"}, {
        "low", "low", 2, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "medium", 2, 4, "medium", "medium"}, {
        "medium", "medium", 3, 2, "large", "low"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "very high", 3, 2, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 4, "small", "high"}, {
        "low", "medium", 4, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "low", 4, 2, "small", "medium"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "very high", 3, 4, "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "large", "low"}, {
        "very high", "low", 4, 4, "large", "high"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 4, "medium", "high"}, {
        "medium", "very high", 4, 4, "small", "high"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "low", 3, 2, "large", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "very high", 4, 4, "large", "medium"}, {
        "high", "high", 3, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 2, 2, "large", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "medium", 4, 4, "large", "medium"}, {
        "medium", "very high", 2, 4, "medium", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 2, 2, "small", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 2, 2, "medium", "medium"}, {
        "medium", "low", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 2, "large", "high"}, {
        "very high", "very high", 4, 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 4, "small", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "medium", "medium", 2, 2, "medium", "high"}, {
        "very high", "very high", 4, 4, "medium", "high"}, {
        "medium", "very high", 4, 2, "large", "high"}, {
        "medium", "very high", 4, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "large", "medium"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 2, "large", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {
        "low", "high", 2, 4, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 4, "small", "medium"}, {
        "high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "high", "low", 2, 4, "large", "low"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 4, "medium", "medium"}, {
        "high", "high", 2, 4, "small", "medium"}, {
        "very high", "medium", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "medium", "low"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "medium", "low"}, {
        "low", "low", 4, 4, "small", "low"}, {
        "very high", "low", 3, 4, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 3, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 2, 2, "medium", "high"}, {
        "very high", "very high", 3, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "high", 4, 2, "medium", "high"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 4, 2, "medium", "low"}, {
        "medium", "very high", 4, 2, "small", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 4, 2, "small", "low"}, {
        "medium", "high", 3, 2, "medium", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "high", 3, 2, "large", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "very high", 2, 2, "medium", "medium"}, {
        "very high", "low", 2, 2, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "very high", "low", 2, 4, "small", "low"}, {
        "low", "low", 2, 2, "medium", "high"}, {
        "medium", "medium", 4, 4, "small", "low"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "high", 3, 2, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "very high", "very high", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 2, "medium", "low"}, {
        "medium", "high", 2, 2, "small", "medium"}, {
        "medium", "medium", 2, 4, "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "low", "very high", 3, 4, "medium", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "very high", "very high", 3, 4, "large", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "high", "low", 3, 2, "medium", "high"}, {
        "low", "high", 2, 4, "large", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "low", 2, 4, "small", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 3, 2, "large", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 4, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "low"}, {
        "high", "medium", 4, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "medium"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "low", 3, 2, "large", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "high"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}}, 
      "Output" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}|>, 
    "Predictions" -> {
     "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
      "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", "very good",
       "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", "very good", 
      "very good", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "very good", "good", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", "good", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable"}, 
    "LogProbabilities" -> CompressedData["
1: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
9XRNEKE4i9l9otgfv2sXmh9tWi3aJ2iuwyjz1xX9GQr7/Y8edMqmSY9Xb74y
Qe4LifGmRe9TrIDgYwevMsn2jZP+Q/KV79WkyLdrV4lq/6iarrqf+dxG2X+w
rwvQvjA9aCaan8LjBmX/bC8eTeyfn95/Sii1h9v9lwQ2JSzYk7ls64/lZ3GC
ywp2I/nwX55D+4eQfmc+Zfylrmh/hMLlKG+VrxycQ5Ff6RWUl9eNWaGKY2uW
UOJX178abAg/srQ/e/1k2Lbwn31rroaDb22EVStTghM84N0KZDe0bSbo/Mi9
d49yPhKm8NJhx+Ix7R3fXEnETgn8QefC1dPbF3vjd2oNFK1fgqHvR7X5Cz07
yPc/HhttFA7HTRR5/sebcIIb7roeCpn6hdmm+SG484C1LLbNFUgcbHED0/xR
dTabkV8rpt9HcUDuFknZ//sORiG5gkkIqmdNMqHEf/EKrUhYRNjprko/8CT4
2tRwmN1P2PeDFAnBBexGdP8mZ2HIPoTfmin6eR62NxQYPVr9k+g38a6dAobB
BkcgEHviOxm+R7HMuM984MXAXumze1Z49js9zpS3bkAgI221N4kyzi3V/UmW
yj/prnkU/5exytD85ZdxFF/5qwLU9QvSEnwGvH82qPxaKpOMm4CxLmWHAzMY
M3601YtEr29PfeAeuSGUBUmMCPszmBkGVhh2fohNAIm/luEBwDX9eGtF9VPc
+UjI+otfbMCs9cAbZaAHicebP/mAR1VHTNCaSbCn5Vus2UwmiUazA91BcLna
bvySf3G6s7whU28SEBg+bZcdCE0VY2PnuEOyr0auRqASf629RjjXZiq+bW8i
M/gWEUf3JooOTfUgkX9RjPJ/2qETyG7kzRaU/I7uvxHZLytyEpK/YkIUxb+x
NtdY8HOHiSbdDPjDnCdeVxAOZ8f8WluknYET5e0p3T4w85/K3NcXVuBmaVG5
wGMAgcmuo70RytYj/82pK0FxgtHwmaJf2dgJaNy6hyr9CJ7Pptz/iHz4CXBm
FNalxJnQrodxb5qHAztAqRxxpkZCcFpys+r++nUDiiv0BO8U9efvvfBG66lc
4o5QXH9cPT4JTCreciCK91W5kvafRGepBuOS1BsI7JJN8yMxy+SRB9meM1Ib
+a186GFKfBO1rUfxJYNvi/yUwVgXrb7/idrdUfwWrKlX7Q8nqfdPhzcZRkPD
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
     "], "CountMatrix" -> {{80, 0, 0, 2, 0}, {0, 13, 0, 0, 0}, {1, 0, 238, 0, 
     0}, {0, 0, 0, 12, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwt0KFOAgEAgOETvHndYnAyt2MGNpkkZYZjYzNoACYEIDhnMEExa3Qjsjkf
gAew6IZuBhPB4pwmghQ3SRJsBv0C4at/+NePu7XOQhAEFUKWiFhljZgsG+TY
pMA2O+ySUKLMPgfzXpU6TVq0OeKEU84454JLevS54poBN9xyx5B7HnjkiRHP
vPDKG++M+WDCJ19M+WbGD7/8kTIgzSIhEcuskCEmS54tChRJ2OOQBv+qkSTf

       "], {}, {}, {142, 188}, {}}, {{}, {19, 21, 27, 49, 62, 66, 70, 99, 109,
        207, 235, 250, 266}, {}, {}, {}}, {{107}, {}, CompressedData["
1:eJwl0ulrDgAAwOF3aBq7rNlsjL1b7bKx2oWZxRqzmc07bFOUFUXaHLkpdxQh
Uu4jc5Oj+IZcIZSUK5QjvqCQUMizfHj6/QO/YEtbqDUsEAh8pqOd6EwXwomg
G5FEEU0MsfQgjngSSKQXSSSTQj9SCZJGOhlkkU0OueQxkHwKKKSIYkoYQill
lFNBJaOooppaxlJHiAbGM5FGmmhmMlOYSgvTmM4MZjKLVtqYzRzmMo/5LGAh
i1jMEpayjOWsYCWrWM0a1rKO9WxgI5vYzBa2so3t7GAnu9jNHvayj/0c4CCH
OEw7RzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7zgIc8
4jFPeMoznvOCl7ziNW94yzve84GPfAr8f+8LX/nGd37wk1/85g9/6Zg0jHC6
EkF3IokimhhiiSOeniSQSBLJ9KYPKfQllSBppJNBJllkk0N/csljAPkUUEgR
xZQwiMGUMpQyhlHOcEZQQSUjqWI01dQwhlrqqGccIRqYQCNNNDOJf4h0Y6U=

       "], {}, {}}, {{}, {}, {}, {11, 73, 95, 103, 139, 152, 187, 234, 246, 
       273, 324, 334}, {}}}, 
    "ExtendedClasses" -> {"acceptable", "good", "unacceptable", "very good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006979190751445086, "SingleEvaluationTime" -> 
    0.00704475, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{3.86896617348654*^9, 3.868966311492532*^9, 
  3.8689668453138514`*^9, 3.869211547634626*^9},
 CellLabel->
  "Out[422]=",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],

Cell[BoxData[
 TemplateBox[{"753.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.868966455151699*^9, 3.868966522419289*^9, {3.868966572943582*^9, 
   3.868966625736467*^9}, 3.868966851157722*^9, 3.8692115560464487`*^9, 
   3.8692119399774446`*^9},
 CellLabel->
  "Out[438]=",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 3.868447512030362*^9}, {3.868964810263049*^9, 
  3.868964810772952*^9}},ExpressionUUID->"d293971e-29a8-48c6-9378-\
634a3d38a3fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"softWeights", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.868598558993527*^9, 3.8685985805202436`*^9}},
 CellLabel->
  "In[280]:=",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"softWeights", ",", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.868598583187772*^9, 3.8685985949050713`*^9}},
 CellLabel->
  "In[281]:=",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[
    Opacity[0.]], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[
     Opacity[0.]], RectangleBox[{-0.04, 0}, {-0.03, 64.},
      RoundingRadius->0], RectangleBox[{-0.03, 0}, {-0.02, 3256.},
      RoundingRadius->0], RectangleBox[{-0.02, 0}, {-0.01, 8446.},
      RoundingRadius->0], RectangleBox[{-0.01, 0}, {0., 22934.},
      RoundingRadius->0], RectangleBox[{0., 0}, {0.01, 565.},
      RoundingRadius->0], RectangleBox[{0.01, 0}, {0.02, 634.},
      RoundingRadius->0], RectangleBox[{0.02, 0}, {0.03, 568.},
      RoundingRadius->0], RectangleBox[{0.03, 0}, {0.04, 582.},
      RoundingRadius->0], RectangleBox[{0.04, 0}, {0.05, 521.},
      RoundingRadius->0], RectangleBox[{0.05, 0}, {0.06, 474.},
      RoundingRadius->0], RectangleBox[{0.06, 0}, {0.07, 410.},
      RoundingRadius->0], RectangleBox[{0.07, 0}, {0.08, 333.},
      RoundingRadius->0], RectangleBox[{0.08, 0}, {0.09, 314.},
      RoundingRadius->0], RectangleBox[{0.09, 0}, {0.1, 202.},
      RoundingRadius->0], RectangleBox[{0.1, 0}, {0.11, 134.},
      RoundingRadius->0], RectangleBox[{0.11, 0}, {0.12, 108.},
      RoundingRadius->0], RectangleBox[{0.12, 0}, {0.13, 140.},
      RoundingRadius->0], RectangleBox[{0.13, 0}, {0.14, 114.},
      RoundingRadius->0], RectangleBox[{0.14, 0}, {0.15, 107.},
      RoundingRadius->0], RectangleBox[{0.15, 0}, {0.16, 129.},
      RoundingRadius->0], RectangleBox[{0.16, 0}, {0.17, 140.},
      RoundingRadius->0], RectangleBox[{0.17, 0}, {0.18, 142.},
      RoundingRadius->0], RectangleBox[{0.18, 0}, {0.19, 123.},
      RoundingRadius->0], RectangleBox[{0.19, 0}, {0.2, 114.},
      RoundingRadius->0], RectangleBox[{0.2, 0}, {0.21, 131.},
      RoundingRadius->0], RectangleBox[{0.21, 0}, {0.22, 117.},
      RoundingRadius->0], RectangleBox[{0.22, 0}, {0.23, 128.},
      RoundingRadius->0], RectangleBox[{0.23, 0}, {0.24, 101.},
      RoundingRadius->0], RectangleBox[{0.24, 0}, {0.25, 116.},
      RoundingRadius->0], RectangleBox[{0.25, 0}, {0.26, 106.},
      RoundingRadius->0], RectangleBox[{0.26, 0}, {0.27, 125.},
      RoundingRadius->0], RectangleBox[{0.27, 0}, {0.28, 107.},
      RoundingRadius->0], RectangleBox[{0.28, 0}, {0.29, 114.},
      RoundingRadius->0], RectangleBox[{0.29, 0}, {0.3, 94.},
      RoundingRadius->0], RectangleBox[{0.3, 0}, {0.31, 138.},
      RoundingRadius->0], RectangleBox[{0.31, 0}, {0.32, 100.},
      RoundingRadius->0], RectangleBox[{0.32, 0}, {0.33, 94.},
      RoundingRadius->0], RectangleBox[{0.33, 0}, {0.34, 102.},
      RoundingRadius->0], RectangleBox[{0.34, 0}, {0.35, 87.},
      RoundingRadius->0], RectangleBox[{0.35, 0}, {0.36, 74.},
      RoundingRadius->0], RectangleBox[{0.36, 0}, {0.37, 66.},
      RoundingRadius->0], RectangleBox[{0.37, 0}, {0.38, 90.},
      RoundingRadius->0], RectangleBox[{0.38, 0}, {0.39, 73.},
      RoundingRadius->0], RectangleBox[{0.39, 0}, {0.4, 53.},
      RoundingRadius->0], RectangleBox[{0.4, 0}, {0.41, 56.},
      RoundingRadius->0], RectangleBox[{0.41, 0}, {0.42, 37.},
      RoundingRadius->0], RectangleBox[{0.42, 0}, {0.43, 54.},
      RoundingRadius->0], RectangleBox[{0.43, 0}, {0.44, 55.},
      RoundingRadius->0], RectangleBox[{0.44, 0}, {0.45, 31.},
      RoundingRadius->0], RectangleBox[{0.45, 0}, {0.46, 27.},
      RoundingRadius->0], RectangleBox[{0.46, 0}, {0.47, 24.},
      RoundingRadius->0], RectangleBox[{0.47, 0}, {0.48, 45.},
      RoundingRadius->0], RectangleBox[{0.48, 0}, {0.49, 57.},
      RoundingRadius->0], RectangleBox[{0.49, 0}, {0.5, 308.},
      RoundingRadius->0], RectangleBox[{0.5, 0}, {0.51, 258.},
      RoundingRadius->0], RectangleBox[{0.51, 0}, {0.52, 27.},
      RoundingRadius->0], RectangleBox[{0.52, 0}, {0.53, 29.},
      RoundingRadius->0], RectangleBox[{0.53, 0}, {0.54, 12.},
      RoundingRadius->0], RectangleBox[{0.54, 0}, {0.55, 20.},
      RoundingRadius->0], RectangleBox[{0.55, 0}, {0.56, 14.},
      RoundingRadius->0], RectangleBox[{0.56, 0}, {0.57, 13.},
      RoundingRadius->0], RectangleBox[{0.57, 0}, {0.58, 15.},
      RoundingRadius->0], RectangleBox[{0.58, 0}, {0.59, 13.},
      RoundingRadius->0], RectangleBox[{0.59, 0}, {0.6, 17.},
      RoundingRadius->0], RectangleBox[{0.6, 0}, {0.61, 16.},
      RoundingRadius->0], RectangleBox[{0.61, 0}, {0.62, 11.},
      RoundingRadius->0], RectangleBox[{0.62, 0}, {0.63, 25.},
      RoundingRadius->0], RectangleBox[{0.63, 0}, {0.64, 27.},
      RoundingRadius->0], RectangleBox[{0.64, 0}, {0.65, 29.},
      RoundingRadius->0], RectangleBox[{0.65, 0}, {0.66, 27.},
      RoundingRadius->0], RectangleBox[{0.66, 0}, {0.67, 23.},
      RoundingRadius->0], RectangleBox[{0.67, 0}, {0.68, 22.},
      RoundingRadius->0], RectangleBox[{0.68, 0}, {0.69, 23.},
      RoundingRadius->0], RectangleBox[{0.69, 0}, {0.7, 19.},
      RoundingRadius->0], RectangleBox[{0.7, 0}, {0.71, 19.},
      RoundingRadius->0], RectangleBox[{0.71, 0}, {0.72, 15.},
      RoundingRadius->0], RectangleBox[{0.72, 0}, {0.73, 15.},
      RoundingRadius->0], RectangleBox[{0.73, 0}, {0.74, 19.},
      RoundingRadius->0], RectangleBox[{0.74, 0}, {0.75, 12.},
      RoundingRadius->0], RectangleBox[{0.75, 0}, {0.76, 17.},
      RoundingRadius->0], RectangleBox[{0.76, 0}, {0.77, 22.},
      RoundingRadius->0], RectangleBox[{0.77, 0}, {0.78, 20.},
      RoundingRadius->0], RectangleBox[{0.78, 0}, {0.79, 28.},
      RoundingRadius->0], RectangleBox[{0.79, 0}, {0.8, 21.},
      RoundingRadius->0], RectangleBox[{0.8, 0}, {0.81, 14.},
      RoundingRadius->0], RectangleBox[{0.81, 0}, {0.82, 18.},
      RoundingRadius->0], RectangleBox[{0.82, 0}, {0.83, 7.},
      RoundingRadius->0], RectangleBox[{0.83, 0}, {0.84, 9.},
      RoundingRadius->0], RectangleBox[{0.84, 0}, {0.85, 9.},
      RoundingRadius->0], RectangleBox[{0.85, 0}, {0.86, 8.},
      RoundingRadius->0], RectangleBox[{0.86, 0}, {0.87, 8.},
      RoundingRadius->0], RectangleBox[{0.87, 0}, {0.88, 12.},
      RoundingRadius->0], RectangleBox[{0.88, 0}, {0.89, 12.},
      RoundingRadius->0], RectangleBox[{0.89, 0}, {0.9, 13.},
      RoundingRadius->0], RectangleBox[{0.9, 0}, {0.91, 9.},
      RoundingRadius->0], RectangleBox[{0.91, 0}, {0.92, 12.},
      RoundingRadius->0], RectangleBox[{0.92, 0}, {0.93, 14.},
      RoundingRadius->0], RectangleBox[{0.93, 0}, {0.94, 10.},
      RoundingRadius->0], RectangleBox[{0.94, 0}, {0.95, 10.},
      RoundingRadius->0], RectangleBox[{0.95, 0}, {0.96, 11.},
      RoundingRadius->0], RectangleBox[{0.96, 0}, {0.97, 4.},
      RoundingRadius->0], RectangleBox[{0.97, 0}, {0.98, 8.},
      RoundingRadius->0], RectangleBox[{0.98, 0}, {0.99, 7.},
      RoundingRadius->0], RectangleBox[{0.99, 0}, {1., 8.},
      RoundingRadius->0], RectangleBox[{1., 0}, {1.01, 757.},
      RoundingRadius->0], RectangleBox[{1.01, 0}, {1.02, 4.},
      RoundingRadius->
       0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.061200000000000004`, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-0.04, 1.02}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.868598587213368*^9, 3.868598595534347*^9}, 
   3.8685995277293787`*^9, 3.868600221413623*^9, 3.868602949041443*^9, 
   3.868604296907655*^9, 3.8686706335951767`*^9, 3.868672097574623*^9, 
   3.868681481840914*^9, 3.868947735099625*^9, 3.868948276385453*^9, 
   3.868959188370422*^9, 3.868961360146255*^9, 3.868963094406687*^9, 
   3.868965910434655*^9, 3.8690319681917677`*^9, 3.869034213800087*^9, 
   3.8690403778000517`*^9, 3.869042975607337*^9, 3.869043303143322*^9, 
   3.8691056830996943`*^9, 3.869107210252901*^9, 3.8692115670096397`*^9, 
   3.869219578998919*^9},
 CellLabel->
  "Out[281]=",ExpressionUUID->"14136e67-aec9-4e6f-98c4-59f2e2c8c8f2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 779, 16, 29, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1601, 48, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[1830, 56, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[2298, 67, 127718, 2374, 652, "Output",ExpressionUUID->"742bfa1a-6eda-4c65-ab3c-05c3cdb241be"]
}, Open  ]],
Cell[130031, 2444, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138561, 2651, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[138881, 2658, 2756, 68, 154, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[141640, 2728, 1775, 41, 195, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143452, 2774, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[143810, 2782, 6045, 95, 133, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[149858, 2879, 1445, 27, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[151306, 2908, 1095, 25, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[152438, 2938, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[152796, 2946, 2088, 38, 133, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[154921, 2989, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[155380, 2998, 2099, 42, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[157504, 3044, 1078, 19, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[158585, 3065, 434138, 8100, 495, "Output",ExpressionUUID->"8c9ffbb7-d099-4c98-bbaa-9c74b597e134"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[592772, 11171, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[593282, 11181, 923, 16, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[CellGroupData[{
Cell[594230, 11201, 1386, 26, 71, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[595619, 11229, 1347, 20, 33, "Output",ExpressionUUID->"3e9cc028-cd3b-4c90-9019-cb9675d42775"]
}, Open  ]],
Cell[CellGroupData[{
Cell[597003, 11254, 1297, 31, 71, "Input",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],
Cell[598303, 11287, 1147, 17, 33, "Output",ExpressionUUID->"dfa62139-4cc3-40b9-9bd1-17cdbfb4dbf4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[599487, 11309, 574, 15, 32, "Input",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],
Cell[600064, 11326, 591, 10, 67, "Output",ExpressionUUID->"b5bd4fa2-a278-4fbb-a5ef-0f0839c74b23"]
}, Open  ]],
Cell[600670, 11339, 474, 9, 29, "Input",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[601181, 11353, 412, 6, 69, "Chapter",ExpressionUUID->"85881d34-aa2c-47a4-9cef-231d0c092462"],
Cell[CellGroupData[{
Cell[601618, 11363, 702, 15, 29, "Input",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],
Cell[602323, 11380, 215647, 3688, 68, "Output",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[818007, 15073, 346, 7, 29, "Input",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],
Cell[818356, 15082, 313627, 5620, 495, "Output",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1132020, 20707, 368, 7, 29, "Input",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],
Cell[1132391, 20716, 377, 8, 44, "Output",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1132817, 20730, 541, 8, 69, "Chapter",ExpressionUUID->"d293971e-29a8-48c6-9378-634a3d38a3fe"],
Cell[1133361, 20740, 322, 8, 29, "Input",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],
Cell[CellGroupData[{
Cell[1133708, 20752, 281, 6, 29, "Input",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],
Cell[1133992, 20760, 8581, 144, 254, "Output",ExpressionUUID->"14136e67-aec9-4e6f-98c4-59f2e2c8c8f2"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

