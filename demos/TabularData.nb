(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1187348,      21631]
NotebookOptionsPosition[   1182982,      21549]
NotebookOutlinePosition[   1183420,      21566]
CellTagsIndexPosition[   1183377,      21563]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11077275587066614260483745177290509355418494973251759184424], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11077275587066614260483745177290509355418494973251759184424,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9, 3.8685300999400797`*^9, 3.868533465833148*^9, 
  3.868591722379105*^9, 3.868670373439299*^9, 3.868944316441147*^9, 
  3.869023715466254*^9, 3.869041339373542*^9, 3.869119740136602*^9, 
  3.869212283188902*^9, 3.869281595247718*^9, 3.869292700722034*^9, 
  3.869640816336421*^9, 3.8696453168534527`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"066bf15c-482b-4257-8a89-450dfe0b9b1f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "featureValues"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}, {3.868682465592621*^9, 3.868682467103612*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9, {
   3.8686824585003*^9, 3.86868246003918*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"64", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize"}], 
          RowBox[{"(*", 
           RowBox[{",", 
            RowBox[{
             RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}], ",", 
            RowBox[{
             RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}]}], "*)"}],
           "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"classificationLayerSize", ",", "classificationLayerSize"}], 
          RowBox[{"(*", 
           RowBox[{",", 
            RowBox[{
             RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}], ",", 
            RowBox[{
             RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}]}], "*)"}],
           "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}, {
   3.868520025904859*^9, 3.868520026662962*^9}, {3.868520165374518*^9, 
   3.868520172724663*^9}, {3.868520227657476*^9, 3.8685202280400333`*^9}, {
   3.868520278697311*^9, 3.868520283147401*^9}, {3.8685206145298347`*^9, 
   3.8685206150078983`*^9}, {3.868537004723915*^9, 3.868537005683709*^9}, {
   3.8686716248609867`*^9, 3.86867162498657*^9}, {3.8689423409409943`*^9, 
   3.868942344276237*^9}, {3.868947806296569*^9, 3.868947806625355*^9}, 
   3.868955246204385*^9, {3.868957393208212*^9, 3.8689574013451433`*^9}, {
   3.868957440249872*^9, 3.8689574443738937`*^9}, {3.8689577953130703`*^9, 
   3.868957801168947*^9}, {3.868958026730661*^9, 3.8689580269562798`*^9}, {
   3.868960876079372*^9, 3.8689608783682137`*^9}, {3.868964831153708*^9, 
   3.868964831513155*^9}, {3.868965437993729*^9, 3.868965438129128*^9}, {
   3.868975240520047*^9, 3.868975267560664*^9}, {3.8690319933178453`*^9, 
   3.8690319942928963`*^9}, {3.869034512435259*^9, 3.869034512808312*^9}, {
   3.869034610772094*^9, 3.869034611688615*^9}, {3.86903620618801*^9, 
   3.869036206373323*^9}, {3.8690363476068773`*^9, 3.869036349769408*^9}, {
   3.869036449105991*^9, 3.869036450054133*^9}, {3.8691058271725616`*^9, 
   3.86910585030811*^9}, {3.869106008681794*^9, 3.86910601769174*^9}, {
   3.869106118542383*^9, 3.869106126708026*^9}, {3.869106300198392*^9, 
   3.869106310243504*^9}, {3.869106550008959*^9, 3.8691065502511663`*^9}, {
   3.8691066023696003`*^9, 3.8691066409269953`*^9}, {3.869106728726873*^9, 
   3.869106732707152*^9}, {3.869106781369624*^9, 3.869106781690955*^9}, {
   3.869107221769636*^9, 3.869107224150084*^9}, {3.8691076647349586`*^9, 
   3.8691076791551533`*^9}, 3.869108111159465*^9, {3.869111253542173*^9, 
   3.869111266704829*^9}, 3.8691114531763678`*^9, {3.8691115014501963`*^9, 
   3.8691115024350452`*^9}, {3.8691115775921707`*^9, 
   3.8691115787758913`*^9}, {3.8691116899369087`*^9, 3.869111690538197*^9}, {
   3.8691117691600723`*^9, 3.8691117876982183`*^9}, {3.8691121802378807`*^9, 
   3.8691121836826277`*^9}, 3.869112387993538*^9, {3.8691125616997557`*^9, 
   3.8691125907168922`*^9}, {3.86911270806533*^9, 3.869112723740849*^9}, {
   3.869112956528831*^9, 3.869112966025186*^9}, {3.869113141057391*^9, 
   3.869113142033929*^9}, 3.869115743191606*^9, {3.869117545424532*^9, 
   3.869117552560911*^9}, 3.8691197572896433`*^9, {3.869121698753475*^9, 
   3.8691217122755747`*^9}, 3.86919713699297*^9, {3.869203795640698*^9, 
   3.8692038057553377`*^9}, {3.8692077554756203`*^9, 3.869207760735105*^9}, {
   3.869208079942*^9, 3.869208085087775*^9}, {3.8692088553125353`*^9, 
   3.86920886120012*^9}, {3.869209158678213*^9, 3.869209159292757*^9}, {
   3.8692095136217213`*^9, 3.869209514533951*^9}, {3.869211601191217*^9, 
   3.869211602739736*^9}, {3.8692123062616177`*^9, 3.8692123119646463`*^9}, {
   3.869212438589468*^9, 3.8692124505522203`*^9}, {3.869212552950715*^9, 
   3.8692125532671328`*^9}, {3.8692126127431927`*^9, 3.869212613253107*^9}, {
   3.8692126791033287`*^9, 3.86921268464844*^9}, {3.86921276395127*^9, 
   3.8692127642612867`*^9}, {3.869212861743297*^9, 3.8692128621976557`*^9}, {
   3.869212912650663*^9, 3.8692129131419163`*^9}, {3.869213418442769*^9, 
   3.869213422358157*^9}, {3.86921548420509*^9, 3.869215497105235*^9}, {
   3.869215546879163*^9, 3.8692155519349546`*^9}, {3.8692161044615107`*^9, 
   3.869216107132107*^9}, {3.8692167279588547`*^9, 3.8692167436075907`*^9}, {
   3.869217032457283*^9, 3.8692170459859877`*^9}, {3.869217373494234*^9, 
   3.8692173782740717`*^9}, {3.869217516946954*^9, 3.869217517213879*^9}, {
   3.869217724899954*^9, 3.86921773656007*^9}, {3.86921777789679*^9, 
   3.8692177779781427`*^9}, {3.869217825227951*^9, 3.869217842059514*^9}, {
   3.869218068966909*^9, 3.869218073431982*^9}, {3.8692196032022543`*^9, 
   3.869219604075777*^9}, {3.869640832449705*^9, 3.8696408362063217`*^9}, {
   3.869640916496462*^9, 3.8696409176144342`*^9}, {3.869641135904475*^9, 
   3.8696411391902113`*^9}, {3.869642484224144*^9, 3.869642487904296*^9}, {
   3.869643270826934*^9, 3.86964331035256*^9}, {3.869643840456313*^9, 
   3.869643840835198*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}, {
   3.8685364797630873`*^9, 3.868536496883217*^9}, {3.868600076169417*^9, 
   3.868600076637474*^9}, {3.868600134889481*^9, 3.868600135284954*^9}, {
   3.868601255470386*^9, 3.8686012558943872`*^9}, {3.868602902814464*^9, 
   3.868602903232891*^9}, {3.868943377521962*^9, 3.868943381357031*^9}, {
   3.8689434141572866`*^9, 3.868943425164989*^9}, {3.868943586951866*^9, 
   3.8689436089616327`*^9}, {3.868944023717293*^9, 3.8689440271979637`*^9}, {
   3.868944083020088*^9, 3.868944086825481*^9}, {3.868947817163151*^9, 
   3.8689478172894077`*^9}, {3.868949946458611*^9, 3.868949960076432*^9}, {
   3.868977243682851*^9, 3.868977248732733*^9}, {3.868977291844462*^9, 
   3.8689773017254*^9}, {3.868977346389843*^9, 3.868977377673813*^9}, {
   3.868977408389917*^9, 3.868977427933148*^9}, {3.868977539952648*^9, 
   3.868977554029306*^9}, {3.868977819969697*^9, 3.8689778435338573`*^9}, {
   3.869023762591353*^9, 3.8690237633179893`*^9}, {3.869023837158021*^9, 
   3.869023876685935*^9}, {3.869110793308095*^9, 3.86911082542246*^9}, {
   3.869110910640922*^9, 3.869110910806432*^9}, {3.86912172241117*^9, 
   3.8691217224768143`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{"\"\<TrainedNet\>\"", "->", 
         RowBox[{"NetDelete", "[", 
          RowBox[{
           RowBox[{"NetFlatten", "[", "#", "]"}], ",", "\"\<Loss/Error\>\""}],
           "]"}]}], "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      RowBox[{"HardenNet", "[", 
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}]}], "}"}]}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}, {3.86912103176339*^9, 3.869121111451393*^9}, 
   3.8691211481142063`*^9},
 CellLabel->"In[13]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", 
     RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}, {
   3.868964207787449*^9, 3.868964270803673*^9}, {3.869042816860148*^9, 
   3.869042853385454*^9}, {3.8691211223288383`*^9, 3.869121124951189*^9}, {
   3.869642753255953*^9, 3.869642753983399*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "e0bff2a9-274a-47ea-8802-868dfd28dec3"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"99.4", "0.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.4219653179190743231`3., 0.4081394480165771443`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"67.6", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    67.6300578034682189354`3., 2.5190181327608494044`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.986707887579623133`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0050348567649221021`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.9766381740497789288`3.", "\", \"", 
                    "0.9967776011094673372`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.9766381740497789288`3., ", ", 0.9967776011094673372`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.0133812432524942366`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0051026600470994252`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.0031759231582953861`3.", "\", \"", 
                    "0.0235865633466930888`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.0031759231582953861`3., ", ", 0.0235865633466930888`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"6.36`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"1.4`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKd0VPUf217K19gNbFev3Xr+zdOK9Zf2d5
TLI5+qzT6/ks3toHCeq4uLq/tNdo1knZ1HEXp/ptXLerXhq/s7cv+Mey7/8b
e4aKB0KGeS/smfy/b7nD9Ma+5Bb/Rfn/j+15Zs0sEWw9SLb/HlaJrHN/eMse
FmK47CXVXAB0tmOZ
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["233", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "233", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9957264957264957`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9957264957264957`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9957264957264959`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{233, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9957264957264957}], 
                    Row[{"Recall = ", 0.9957264957264957}], 
                    Row[{"FScore = ", 0.9957264957264959}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.004273504273504274`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.012345679012345678`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.004273504273504274}], 
                    Row[{"Row fraction = ", 0.012345679012345678`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.012345679012345678`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.004273504273504274`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.012345679012345678`}], 
                    Row[{"Row fraction = ", 0.004273504273504274}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9876543209876543}], 
                    Row[{"Recall = ", 0.9876543209876543}], 
                    Row[{"FScore = ", 0.9876543209876543}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["16", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{16, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["15", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "234", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.9957264957264957`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{234, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9957264957264957}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{81, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9876543209876543}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "234", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9957264957264957`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{234, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.9957264957264957}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9876543209876543}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["234", TraditionalForm]}, {2.5, 
                    FormBox["81", TraditionalForm]}, {1.5, 
                    FormBox["16", TraditionalForm]}, {0.5, 
                    FormBox["15", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["234", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["81", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["16", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["15", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "acceptable" -> 0.25, "good" -> 0.25, 
             "very good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "medium", "very high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "very high", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}], 2, 4, 3}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {2, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "small", "large"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "acceptable", "good", "very good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
+rFCFygNvy9mWrXlNka//gST9p3BTlaXkNYDc46i4bvmWOZfTJ4odcXpfvGE
zk6/5S09hwllM5SC/vtxQ8E3s4FH88nV4TFAlaJSoivzlOjwpTVqikdoR5ZN
cLTDX3t1mrYAn895jC+CG6HqZO/I6nf9+uPwq1Ow+8WGsNzjNqYZqGGjWC3c
1G8fhH+5DsZpS7B+wCsirl/RthkeHVYPD+iYgEbLSuz4B+6mVzHlthTWyOl3
Y0T/aLIzJz/fuH/vWselfo2rn5svCdXPiV2KImf3bCTz8wft+E9/k3B/9w58
vTIa2m6YgtRTJpr+IKJvM/g2amz7KIT23gV3J8yFwd/qwlvTVNBq/x4nL5mD
DTNP42KlNkBne25W4KjS292Z//u/H/sTOkkX2bkR1OG5FN2f+9+ekH4s14mf
hQTTCdXBS3mu28RAuJpxDGn9+akFUG0lLMM7AbosE0lpdNBst4MuW5fzcjzO
cg9gs9aXx2LUjEtkyMUreCOtkFEg3e9FT3G1tZZQTcpQg6pNj1g2yHoH093n
rgtNPsTgnQ97q2enFWP5CxfsNUAJzbXN0GjHIninvhze3rhP8k4C9LcJhQ/7
4rFxfBEc0eDB1y8Kiuu0BMc1A3BMpCFmv96GgRv9cdFuf+KgcRHLK/ZCmIGN
oFL/EOq//8DewxQxXrMMN2z9ArJ6uwmGPfRg/vNaZDk9N/Dac12gPVrT84XL
SWdYj77/WbRnPdFZ1wwHTdsJPvk7YcZZL/JcUZepPArFlihfT779w2zyflvy
/kwUBNc5DFS3DvUiX24HkX1DyrBj13JsscENDTaXo0rROaC1SLp9GX5d74Zj
Swtwfo/qufYOZbitJB8VR59gs/dicmXzrTRPYcK0ekar1z4xpfpi+26B6jBP
nqMqYnDemesiKLBszoaJRkHxo4w8w/wHrVE2MIqa0oHQXGJnY/R43Cyjla9t
jGcvycHWQiFGds7B5lK1PHeO1Q2laEvpK62p0l5LKXnhPKf9d+9W3XP4bXB9
VLjWna1JTB4CTaV6f4kf7CoMIgZcOt779Ay413WSqIocbvAe5WuKODvjbxXJ
U9Jidc6wmaRzDyXyln5fMDlZyHoeIAgdBwubliwU7rzsSWY0a4K0LzJVevyn
+mTzCAizSRKwqDvpadBf1v8h3W8K1Zpy3jP+fAy3Lv/zec3NGS6/3af/9Hdn
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
oP1pjnWZOj6wgR55P8zo/P8BmqwRuA==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {5376}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJwVk21Q1FUUxhcTWoFA3pfhLaAt1BCCGEYojiCEJQSDC6hELRsQ0ywvAUKg
yfkbCES2oMkiqaSIOCgD6Qz5v+eaEDo0oEAk0ciLOE6KpEBglIyT3b6cec6X
c8/zO8/11OUmZK5SKBQFSlES0orD8/PTSrab/d9kpOkDA/QmQipE6ewzIec5
hHc2IfSaHmFtr3QyuxsIvoMGNrkZIXc0kJ/vlSDWBSG/SaYHV/xZoR9CeIpE
DU/LqP4xQuNehD9VCEEHK7ly+4pcVI0w7iRBnIeBIvcJbZTYxXUIDYXdtKMH
QfvzW/J0diO7XfgiZeZ68ssD7TTcqqEvPpfAp/h9arn5iOpvbaH4DyQI1e5j
lwwGWnxTzDfY87J3ETrHESTLOrbgpKVGHcJozDeEU9EkzSJr7rpL6ePpLCcO
4cAwQt2AF3msTNJ8KMLNC00UZoNw3y1Y7nVA0Ej21OFyjtJ11Tw4GyFMi5B2
sos9VCN82oXw70tr+HO6E+RyNowimATDjipucy+cHl4OpIVnCElF3cy35klY
ZBZCax7CxEQKyxlKoldlhN2VCFuGVDy16m+qCMngWrNaVp2BMK/yppVbB+Uj
T36na84Ii27NZN2OYEU6FnFawS2iEAqLhcczCFttEbKOfcymxzrpNW+xm5ue
YoX/PHkV7xtFsE835Rt7BplV8q8s0LqG53WW0I1GhBD/MLKPs6WCJjU/ZruL
CpoRLOfeoPJDEtzOMlK/fRJ/6oVQnIkApQjdNnUU8x6Cq7vgOjJLU1MjbE3J
ehYqWPSqnSjZsVx+/rQfNXsgeH4UxPvn75HXXAM7653Ok4XvpmgJOpUINW1q
ijaVqO2B8OmuIk25yIyNkSbWBrGN5RWU4s7IORHhSuoS5bQgXFB+S4t3/2Gf
BSN81fIJbT4ZRHFfI8wITn4gbhcuGLrC91ZCt/5xkRmUPWQqfBsjBQNxzxHB
yewnkduFCErb6kN2TgjT5kRxL/vS4HUJrk440P0NCqrfhRCc+pglBgzIvQHz
LF7kutbsFOuelCByjxkZLA+zmWXB93XBXjtB508tU2KOhroTEHZ+WcqXIxzg
B2cTOjBXK/vrJUg59+hS/34xwxxBqTEyeUM1271JgspDgqcuisYdNfzHDgmm
Vs7Q0p0qfnVvHzMPeUZ64ywdvbODHdfm0Zgynq+N+ot02dP0QtJxOvHhGKtM
Cqdt633pl+gysvZtZ0dFRk1DK3iM4L7aB+GaC6N1IpeHHRHU4r2+t6vIrkNN
S57XqSHEgrZ9N0RzRQix/YJPuTNPYnvIVZaYv1ee/NvO/eAg/rDeooW0Cgm4
qpRqVs/Qf5bo/ZI=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {256}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
O7u8Z6p81ncw8KZJ57hm4bLt+zct+qPstgvK/NUzkH+BfO+rEZ0C1xr4YjuG
aMrz3pj6c9C0PoMtm8/ODO9mtSdcxKGxit+fC/a/zPSIz051SLDfqBs26eEf
/XL9hZUka17UxFR/3/Juu5BqPcLDcYclvHwtfRW2rGleKc1tCKD/RPNnABvv
P01zvOOvnv7r3ND7GPgjQZ3N6ALOG/j9N+lY+W+epwMUcakq4W/LnOWvaFPL
n5/b0tY2/wvs3DlDIeNciYEW86BykodFfXpdTceFPPDV7Hv+BN9cDqZq57me
zmnKzbT4eFaO3xZlFVrhJ9Vt6zH5n+KoBRkr7NKr9cDzmjMXSHWRS7ukOd4f
besp9Gsb3pXQzjirbJPZ3AekakcJh3BJvq2bn6b8Z2/9/ymu/wLPI/V6tY/+
Jr5/wsn5Nu39ixZ/oaTwz/S9G9O52q5OCyQe2dZU+U95dsAuUaFP15ADmvqh
b1ofTn3swYL9o7T9JlTZ5sOHxBf7Zzu+r91npvP4+nKcuLufFPcXlmCnk/w8
PrS6PDYZmU/8p/w91z6Y8Cjc4Mt/yhk8z9d6hnRuc+aqft4spX+Xj9kryTnc
SjkerZgQqi//sBCn9sHojY7/5PeosfT56aKMY83oTfe6msXdNkvax8csbB78
ldu3j5Ps6hX2Q9OX05aYjx/313xjMW5dJ520mOe/jOnSrKvzk+dmMv6l71HD
PlvtecX/mkMA42aHSHlwf3zIf8rNAjYzJXrft58Uvvix4PP/+fjjbyGr65o0
jwXa1OuWZv2n2Bv49ieucx97Jeo3L0p9rA8wOL0P3y/POaLLt7G1tHN6ZGaL
fOx7LPsr3xY/6qzAzx1D10JOO17rfzZOUcPR94//qGOJeJojo5otUOD6TTqm
SVtnvgffcHBfs7ro0jP+GNedEc1JfnaqXl85Zl1dQ5obSVrdj+esKpvNHxpW
rhOtuk2V6k4e+yI+vhqu1/mt0Kvxe/tZ6ct3aW+C803r3woRicoxFNCq+QMP
Lbld7nSX2irWq48AQ3av5+ye3hFrTHbTnAPJMt88J5GvX+B8QnOn9G/F74Nz
V4E7+HKUxO9Vu5s6tb6oQ2p9Xh/fL8LTcW+4mfvuKXTTxQ0QtWzW8s2czHQu
C+KA5V6nc2nKPMbzf+Sp1rnMp48mPIeYqf0L5wFn6otYpxUzdVz89lCfQ7xR
b604Y93XLvQ5IsjAnATcpkt/mZr1rMyxsnd/yEzmzxMP2Ur+v9pGjnGfOAO/
3bBNyk213mxs2HLAg7Jcn8Yocm5q3QbciBYB3LBhZ/VqW7ViqC4DG9iynH7e
+he/volse0BdAG9Vpi5msWXp8z2S5xID8jYS2foJfQ3EN6fGRpN8detSh2N9
cHzTEBFyD+nn3fdS6Mpe57kVRnissHsgAGBdFp38LOJRcEfCf+vUQKlf6baa
zqEeyaBsd8ADaG8WkvtG0BX4bpr+VTw9cbTFduQyeoXA6gf4cMxmT8dWhRN8
+TlTH5rFovOP/hbbw/C9o/ixP+j8KeiG5QlWVO+HpZRr4qpVoOWgA0DeXb4W
25c4+wjhFxX2WAAbv/XpYWLrN7RIENW+19IXcNbrODMdw+ppj9NsF8rP4rCN
H6lUgVf3UXFDssvx6psg0cxJV1PhZzyHmKIel1qO06MP4LrdksN6PGfpDBMy
8hDvAXUjTLMf3tcDD6ivV1TOH7QJ7c4s7jeyvC53vCtu71SAh3KkwXO2DCA8
zkT6cOD5K0uICDmye0hFziel/4S6QQHyWr3WBT5JegAu2AfxwjJT37OauZPH
5q1YelfjekADOmrFjL0GG0Au5JsaB9sKyH1yuyqP5SyumqejV5z0W1RxNY03
1LMxvpT4RKEDxg7iUe3QSUUu7sxovm4F/fWjQ4CiLvvD3i5qvKyXtde3a0HP
pnPk9a4fanGumcZoym7plcOMZ94x2mNFgODdlsfb3Ru8/J+Pxf/lPmdAkIn8
fmQu01OTFnnC8X74Qm5Ymz+PpdWwd+XVNNm64u7mNN0LxNceZxZvhIn+jyze
Y9a5njdV3TOmt/3rmIQU+d/NK7LQr1wnBd8q9QLNdMPYhLSka3APf0ziAjbU
IOceTnP/eY7vbO/Vmn74PjGdovznmyhFHM4O7ijpfK615XslLSgddlKaJywY
eEeSI7SbIBZxoP1JsZMupG/9fWkSv9Qjm2D/zVOqg+ORTuV1eF52xQeyFmra
OHo/DGUAWbrT94F6dxhM6NL1yiAgj06TP0lyCY9v5nMxkbalnBF/8Yqxkmz2
OPiDvOY7bvVtE56jTq5+743qMqtxBqcdGy6EQh3yYe1DvIOB9Lnx7qvlOKxj
7bs1bL5JrTOCfhQdl6wsGKlX8wcYezuHwPoOYH+9Tjyr7yrvkURuvnxDJR3h
mMOpUyjor9YJjiPuymVsOQubKxY1s4e1iy0LL7ePw/JpgR0E9A+La5FHrov1
4Bz1VtOwNu08Q8t3jBzDT/4eTs7zFugt3joxhvOw/sGZ7K5IvtZlKyzw1R34
mR4hkv9Y3sjz0peZ+gHrbh51O96UB5+xOBODI0MfjJbf44tIxgX78j3aLGj5
rvKsYvyQwQapvPS9TcKhTFP1Ji6jCDFj4wb15B3QBwmc94RDnN9dKhdwWH3r
lIiRfFu86myBldl3s4uo5VM2xpADjo62olpXEuMlfRT9B8buUsbvAosbfveS
Ai/p20/J/mZh9Sz2K57d8kl0X4+UVuAdnTdI4uFln5PUZa7ykeCPdi3FVw59
qxj/W5IxZudmem9zyIfnM+wj57UTAoSLGw5xzyY8F3vmLqev6c6TfijKeqGp
QnxukiMFS8j8m/a0UvBft4M+J+I8BqZ5vY8aeg9/bgR9UtMd9ZX8sLYCkdtn
cRkyRj2z/5xRjWPJH3WCXhB/7nWmfUpeh6JGLf1PxORO1SY1b+TB8srdwfxd
Q4AuLfeKdzPelfDyditvAv3vuJbkXZrbSXMU70f9VvSJdqM7KmSm75Z8f3ro
NWkry8cVk8YgrC/Wvs1j1q+y9Shj+ZgdnFuFwcSvOt1qfYcjY8zsh5xI3zGv
1Davf7Ana1/mpTPwF1TvVbL2sTKP+vfjZmbNqWgni3P7OR/rnMQBjjqOmIe9
l0+SbHddJ68l/ximfM60YURbHmm0wDO0O9fzTB8hoHlLBR3EDXyvRVN7ySrh
0uIYCR9tm7ivK3d/TzmL6//UcLC5t+b4pNGAcv/pufKFOnTMMr99Czqe0m1W
yOk1+54m/5ktKV5gc+UzlSWOddI0nnx/r0qax52rnqU+/t767IRCx13Vm2jP
ZZfs85/vPw6WKSnpcqdlMe5zFnmNi76heT99cCrt15u14aSx6Z1ssUTfZjuq
pnm86NRO9rP33Rf/HPOwj+40zisXc81qKP2a9+guTf+sKb1B0r1Rc3mPgWxu
lQm9e8Ijbn1icfl58Er3/+Rn65t50kzfpe5Ri/cICHHbI/TZzxfgx+Vrzem2
HOZCc/79/RwLHpNrKuhtn/38K3v7fY6T8Kv3mqvoNzJuek/6h/bnzdc847tc
wz5/FBqIdL3mgp7mz8qfLLIl+rm+zS7x3uLqrtC5pXsLif9KbqXE41MY5Tul
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
Qvfb9tmj3H9p96GZHMhZnawr5tGrvvv06FeA23lXcBlLZhM6TqR9L+of15fu
zbtgkovkl+adOMGzbDNTp2fys8vc9zbpWTqAEik2AC4bfyl2Kedoq3CfztsO
1/hOitpPw7rK889RUdU146+Ww8LJfVP1UO6+Ry/hABxsRNc/sTLxCPbkjW5L
8k1vQ8d635LHAmCXyDsRnOv5dih+F9W5qW5TyB/K35WryLO+UvNb+rkSvzqQ
vi8a6LPVpLZrovd2khvnNrT949qB72Uy/xHnmejDGzPFmeF97q79/Plf1uAU
biLfuz8rs5vrY1qrz8R8I6LirM6aPEMyu/xP1lmUj019b6i0wqW9ouSTZp/p
tzU21RlmcZ1tfE8rUrdrl3JfnXw1dko0Yae2Kuq+TVusX7Rt/D+t3Z0385RZ
zC416MRnzRf0V/zsK9mb8dlTNh3XwvpNmtarDHJep/daWS3NPr/7nK6Pbsys
Z7uVJW17mhx4vtgM7/uZbWleZ9Rq8Tpu36wK/MGOuQlN33OFNPV+23J+mnkG
hbUyw514h659+lm0fpr5IHxkxqwNu0SLAPo63fkC13Rm4/NzRweIAGOfRQmA
d+whnUPZ76D8/opVY/os7Woybr83R8x0Ah7+X2JF0RArVmtL+8FtU+laCyiH
4wWXAmbyQaZTXHoBebPHsnMojl/71+LQJj4S7dSZNO6AB/Ledp5jlq91nr6R
ygZ33y+qZaqvVwQtkWQ/iX8pWNeR369Q4wNOu3pyH9zRUfl8du47T3F4ikyP
nfK3iSaPL6Hom0v1eSR0v03XcoL/0n+T9/ZS8wToX53ORaE+eAR9FvxqIMlp
upPucdEz8ZIupoa8H3dIA7rmKvThWgFjAbS6h/T5a1KRKZJfMQbVOydJ9/Od
+l1V+PnZxg0kd0gOHxpCcqjJ82GSvHOqeGIsscxlWH+Scz9XTZT8UrBye75C
LQ9udr2LZAz4bFVvRfsCnvg+Egtr+h3k/DvTvWl+Lh3JD1pVyAznDTOnyOoE
gL9TUN6ll6+Ec6fsSAUfjIFN7uccXnsEfRfYfMPYQN4DjytV6f696A/A7TUz
L4dyUZcq9tf0W+vQ95Xvb+rEow8WdaXzneo8vLe+Fe/6TO7Da9Tx4SH3jq2X
v5EA/BOavCM2HL5gYc1DMnhalRIKulwXf9ylaxXmX69DZGYsIu/N9rmQ5XcS
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
lQFkrtVQbOhq4LsVHsajblp4CKFbHuu/lowU19v251FflAe8+CyB+kfHd3Jz
Z9P9vFEu4FQfnIl73D/C5NyhhAvgpuY7pFs9sRLf+o6ByMrmaeALij841LFH
fLAIfE5lUK5P3WR9zLijnGqvpmZtSTtKGFVRUMuJSFkTyup05B6dV2Ftg3OI
KdaBzqz9o3uHiOq4zDvfSPzY2MBHTvUXUW/gAfVNg79IYwysA322fNnBId/5
BRrxrAw8+ncswye40G/p2NTqaQJdwj6W4uAYUot+EwJ4DrWPJLJuvQ4W8yb/
9vdIeRcDc1N9DrhgH5sHKDN7Oicec5alQ/0wZl/SGXi17/AaaUDPzg0/cYiz
cpqBB3rWzkebNpnlH5vb3e8ZuNDZ3Xjgny15HPy6SyW+WvFCirbG5j0bV4jH
ljq0bwko7iHlysJzXbgjDcbwDkNfmslekq+f+Pj6IxOXnd5D6h3lsUjD+5nM
+hzAs4+34hEf4cKPXjxLy+InvDZ/n8X5i3x/AzhkTX4KT7YuNTjOGzX7ZqAf
7LaAQ35gY1r4oS5IBzpp6TJt9iaF3I8X6DgDcVskvCCyP58crvDfVgejYj6Q
lYU69vcdxLEy93y0+eP4QA1jypXQj+53l0Od9C50LJWlesqYx26J5GeQj0fW
Bw5lDpoSBbpXRqUKuU2t7Jdw6vhAvFFvKFuVuyk5Lxe3imNt+tVXniPIk7KX
EvJq1c2HV8vWsgn3tLz9fF2opRxpzcn9Y61+RaV6tM/re7C4InMTfllkR7P8
VctHmsddviliXaGvH6+Wbylfc6wZapqSowaJZ7WCPbk/yVTnsFP55N+I+bn1
6vpMgTak39d3pWsIsb7jlwHKcfEKWg5HFqDMzqELOa/jeZMAlucfXlo6h7wb
sKqxHq7XTTco+Daao/ym2edbG0WkU+swYbqVUN1aflZVxn4qP7xBMxH18ZxK
961FesBHXBZvdK/F+ufLzb+pyuIjDcvP5fsTyaZ92WmOOO0sYwKbWJ+ofQX2
Iy+2/kuJnroDGSgPuAb+sIc20TFgvl7L93AONKR9nq6vR7vezO9O6iAGqDvW
qeMIUGPrbZ1WuVbcLemxsECcCW1DOwsx96CIW328nmPp8HypU4II+kKuoN5Q
XpurQXw1Z8Jy0T99BNdgyEIRfLNzibkOQUM8pbkDiN+Kmp0UfiN7Aaec/zi1
TPIHyIvh9ugx5lA+4PcXUa3nfJdHCv5gH8QLy749TlLkOZZ/vxsluNZ5KwKN
lh9tjH2IjUGn5e9gqOMAsr4+MfDYllCu2o81v43gWb1Rj9EPZ+jYvFPzh7xl
/YOxQ16nyinxQ1LmHwqEV7E4r1UqdpRwIXiceKLjG8Xce52WMxVjhupOA8UV
3XaatUG7hTY80Na/kpkfnV6+v7Ft+lxY1JB+I7hNyjjNe8Z7jtUNcBAXjhOz
K8e+B6Z8FZMKxSvmEEuWMfCA33xtcRdLNlmCSw7K/UNAh8Uz6B5NYF/odVvR
ZxddyzU/wwp9iGr+BuR23hWj8OXx/uW5ZcGPiK/Wxq0W0BY1naWyBRHy+pka
n0oTPuFbMin8fHyygX9+cIKkDxyrXi2pubYnINBKH9hyi/53vcKE/5oXHbnB
KX5l8UF+uohBJlY3OMfreZm6CFr6v0weD5vyn5ZypckhewFy6PiUz6naDbHE
fFvc/ISRjT+LO/bBbqmtfqpu4IZNTdCcM1icSe63Hgd9kGi85o4zqXVozHwz
TisWWN7cZFD4oV1BmW7tt5bimyj5Xh9s+NinjhBsDFfECuzy2HyVA/oJn2oI
18Z5WxzDWdIF2uugljFc3mJ0/IRxB35d58vPsZAe2p/r/TESr0sV5OcOi2dO
ENhrAP/TttyQN08EAKiHstj3t8Waq1rq1fRqMFSmYzuYm4Uj8NDChzLIt/Nl
5X3oD+7uzbH84ZhtRDSH13MN6c18FXazvUmLtyX9VoaEENss6Qb8HvWX5w35
ymVF5ImAdeFfbbkfi89KuOHvaByAR7pbUVydBConSzBdf1XugR8P9Df3Ke/X
1TrANfoRdUWA6zODbsnPZ9o8I7FJjd+VSDteXc5FyvNOrL/VZagH64PU6EA/
0IfVG3Jofgk5zlAHvmHpKy5MEtQy4Ng6SxN+U6F1OixT28ryBP9nLP1aP3C8
n7RfNMge5dmR0G4fbv7cFuzDHMp3yJ5HOe1j9+q7pZP3YWPtUftB7QP74Mwk
Z5/uOSNAvm3ceUWR12AD6IpysRxw8TyhfWY+mmfmhEtlVuyBvadYEodtE6HC
FOXcG8buWHuDZFfzHPTditCgofJ6nOhJoTPzduE9VvhL9H0GTXVutNBX4jWo
0K0jLG/AjT0qvwvE6gbnMdenSdcnfpck31+ur38f6pXraKpz4StmLiS43dL9
4srW+W5CWXAcOrmv4re+10Ibo/eI0UdZndgje3666qbQto32HGXpM9+mOtpF
uSlsJ35KOKJ4vhl5545RjYOQ8zz9Zp3PeltFPPRJBbmFYyMkuT5bJoTm0Pcw
qfnA9fvT9F298U98nV8syir9fkIc4Dgz+PYR5OORRd6HDPy15F7vw1p6aQHy
YGUA9Bsn7+0FOKDTqbnDTDXr/SDlfn0mi1AGAD550nkwh7ECODSsCN85fuxR
0LdFhzoc6g0Q2NRfP6gjJxzVzSVzFlinFSfME8Br9v6jcX366nxbx94c1kMu
sbj8Gx3dEzI5V68P9lXYmLvFL/K8LvbZAYJzreoIzd+FnyOmO0cPpHu6IG+b
/PT5AJfDUSpvXqM+wc8+1pdX51pQR/dQOEfZYMP9W9mMatsAvBJyHTl7wssp
T2mqO+srdX6rx3DA3y9wFqErGLtVH9/Th+6FU6SG5nzQl7Lt+PzXDh8G2+tW
o33wz/HhgqnTZ5HzriC6VY4kEDHmOTd430lpHipr4zcCANQFXnRT8K1SJN78
93x5WSFxxCizto08elaRf/OijjbjoczJ8Sw3+kopwTvl3YYrq3bqBxc3kDrQ
D+XANYn9A7pPxbjhe4ieujWXBcd8DzR/DwqeO27W188YGyucMPnwyK9MyE8O
zwHKN/zKFY2W52xABzxHPyE+8GLrWUAe275R/QEXjgPu+vGryvYU1bzR5x7J
vwubphp4VifwH7Fn3xYR+OC1FiDPpLq5xZpT7prZz+bHAHd5HU2ugbKfIRYg
B85/ivuNL7yipJiy9uP1vQ/Okg+7JNOCfjvrD+JRz1cDfBT2oE3gm0EMH8hJ
PL9gfY/EH+lynB6rV/MgduY08IvevDayfoIcQX+Dz4Cuuv88cr01b1/Fbyjm
E8RrHN+dR/mdb9F3Ai67b9dtv0WfmYG/vN0KExrAUbc1Ni8OXS7MgQ3f3Noo
dO6TnOts3DFPgDbvfjo3qvavVg63bzJFZOst5WGelQb+x+7yZnwLx8t7usA5
e31s1jVyP/XkSB4TANZxHnct5l2xk0lSrm1v+Vn/zbcsh3QsDxbUckn7X698
Lo/16mOmMLqHO1xvLf1B0NUprkmnBu8FbwRWbpnvpUm/7B89X8rx0Y28iJ9e
xTTn3lSU1+T0HN9V1NKZhUb29P4PeVwcRL+B1M6Zjv+/rfThgf6Y1x1F22wg
KvdWBhzdYbrHEvgPjptcPY+8m9hfM84b+yjXrO9sWFrznpLV/cBF82+FYD36
Cc4ruDTl2XqhjYEPMNL3DuB62dyVUqzndnOR+KPeiJfY9zL3tZpez9YhXdl1
RXk2xti2EG/zxX76azMPk/P+dXIo9O7Vt7Ykj6wjSqYH/cl+/ck+U9t9Jf8j
s3aA8Yq1Wq6zFF8o/7FtlJQDABOStnNqXiCbtAn3oYI6X+A8vM4UPnv3QYo8
Uee3VrwqH2lE+i7kr4X/cXC85nOvbFmXEV2WbTog2Q7nW9rMlXidsFa+2/br
Ef2eHODV+91DzDd4pHgkg7wG47pxsyTr6dsc3Kg9lr8zDbTqslzdu/DfatI+
aajGujmQe3IE3Scf9Z40oZMZH7fWqzVlpgajVv5I9R7E5bs3v+JEHx7lNgwr
SfDXZ+4hqnVU02rZoqaBOGrRqvmOrVGMbzl8BfHrvZR9zS7l/mDRz2cue4tI
32p9Apc06ZOmnZcmFdKr5WObQ/219IOydDvGacZKHe+g3fJ4L6FEpMmSzgAT
hhXQIQ/2+PFMH86l2HUpD29Md+C5rZm4/q0+mflggFGee24wWvnO4TLnupL8
ot6HLfod5Qx9kE9BXy/DA7267bA+q9q9oUKfk68mcSzeEjd5XpDlE1M9RBzz
pppEe7KJcv1Pajmi9pW6LuqBvE8OxOPGsYKCMZz+Ttx/6O/sViJ5LJcyJ9Pt
Lt0/rPVK+ZuZne6dFrv6fdE1LhAhXh8TJ+EisLiTJzQh+4vC+fKRnmLfLqH6
6m70vZeJub5zQNt0hoFv1V2m7/Nsuw74Enrmu+SV46ktQDP51TS6fiJZh+z3
3PVwhGtck7GkyyPT2DxynoFOXk8NfNCvE+KTAPpOE6vn2DWXxF0ZDXyO4fR6
0/myIksLMk8Pl/mhzRDnEVfvCShfXY9wwV0UWFuKpDyb1vWm8QcfAQ3KQjzQ
F45dN9D3hkDOWWGDiHGAY2LDDkbQX99miaItccPKCrWvFhFYffAI+rB5er/C
Hq76js+ST5GHY3uKv//2Yg70d/9aSoT6dnla8xBP9A+UHZ9Evy2y89kHEWPV
ryydl/UL/ybJB71Hux7iwGaga3WFPmPYsz8fhzah3RVfzuRisl6R9IK4A4/y
z+T5FIzj9jlBIp7D8V3KevgPTQ28VUQ6Huih7FvOY0arCLq+pOumNQTn93U/
55kZrEzfMwTqPV4HcZiv36s2l3wB9G+aWkk5U5GTy29YJ48Lf5UiMhwGH1b0
g6Bzc+8CPMQIr6e98DRBvrE5CHY9T3k3zap8vCLGgPvthSe/lruhPz/5JLew
rPy8Lm9KLgH/giciJV+5tx2oV+chAsYO6nPtHUfGCrlszPdT75nc/j0+Kr9z
Bt+UR4i6tlz35HXq64d/3rC8TlZNG+TZj+MXFeS1eNYeLD/ziEmcRHLtSB66
ZsP6pLtUBzm9J3GQGPPOnMdXW+3fYJDnxKwFKeJvPpeMzy2kPuNuC8Jr94D5
xBdejfJYtLP5t3JS23xq7cqfy0TfiUA768UEmuB8Z1alr+r5y99mytHQwIOc
Git9RYwD8gDo1u2iwrZcS14KdSuM0IwNqw9Cnkr021rIN6moFRef0oYeT6Xf
AAQ5UD9wX1UhnnnfBPOhXdF6vE/jTEcxVucP7hORbkdNA4/0aDOcT0zWu6DX
XI6VjXEy5SzIYxke33pSP7g/ofv3Z060JTJ+qOLt1JN+pxNw60zLKtUtzXFX
DLSl76xHfpXfdR75WbkmB+wbkU00sjayOYbnoe+CjDOXhjsijjrHnlfzlXwH
x6tuS4TJaxMENt+kPExu/xCbHoXvk7EgykTcTvMbcGpddtVuIeVBYBTtN/g1
9JnJ2d10vmJSV+X7wxg7Nh5a4BZS3axu1FBeAMDrSN+txufVu1vMfdyDekEk
fc+6zUC6PxfwiNX4bs31oDGiVvnvDFHGD2Mz85OS75VRPhzBT/E65Tck7R96
itdV34OsW9CP/7Lkkql/lx1Sf9ZoRyA5n1GxikRP7hWr2glac6YsfHShMQFc
1h9aAPXXJu2R5N6tlrLO7QDdR+LxmE8C+gnheONOHMsXcEdPmWe8GH9ERJ6k
HRlHhoL+Owoo86nX6nbCrF/ye17hF8P1rD49Tcq92dEHlcWZkkz3plWEadYt
iD/yHYvWPb/oR3z/PNNj0+dG9LflVTMDb3P3lsIHECuMZbXquYleQb3vcKze
CF6NHxjjg+oq6lgcPId4DJplMrJxRxkkDofp/qdD4ug+MC0Crki4yKNhpWDj
7E5ymy40f43kn0ZzeyieIYF9hyrI39G2FGMov835arYNANQZwL9VG2JDTEt/
s3553goDH52c99P9BeFrUj8xNZloM0DzLj4Cxm/AGe3f2piOynlAjF3LD7dF
yKl8j2LFN5/1ZF2I/X6j6PJopgIAF4781GhF+YxadgLWIw4ee3X11eE5yyfm
YVWBLa9YMkbRdqGsSvqsfL6kdYQ/licdk2WPzG8vLDq/n2Pltd0wjB9954Qx
KaXdQ1kDm21crc40hhPCf4hwDvZ1mTWUj7WT11cATYXae43ID/ZhwPPHCxoT
n9wdWIlD+VUO7jRVjksStewDXoDP2oM65Heg/fOj89HiYV0bhW8tnavtxzat
VcfKTGL6P9Cn5ezrLq+3zRG9+y42W/+T7XN2UZx/3+SZIRfvXMkkaOkBsUA5
2U5EK/inpj9AofK2mvkEcPeQL8/GzLlnYR6OPoPLE3+vm0a/m450mJ+sbKiP
LuwqlQ99PpLk5efj9Qjd7icGvn7tm5w6RwGOLLLl0T7kOebXTg50eu0n/w6x
uo9vv5ObnJ9++wDKNjQrp5/VYqYeY60VQ+D38oOn2G+nH19gxXySb8gbcuF1
24ImpIM8+TGgrl6tK+Yla//YLff1GG9oM6xMzEMtXdQ2qeHarML8mCEeZv3P
wXwRpk+V5b01x+ShPgqZdENz/untVvM+qc+SuS4sLQtJTe2Extby3h13ggJI
f74tZf+0Xzd7cFNS6PB4voyST3aun/hq1XKzd4inaMhj9ajrNYvIuhZG91+b
Xk37G8xb7Qy8+1b6vR7Qi+WrZRPWb59A539WP7khsLgZdtc34XlY819c8bwZ
CN62gPOk7KLVe+57ZgMPfNpXStm7LjkOcMyabCvQ3sscpuhHQa9zNns1Y4v+
GrhplU6tN2vLp6QvYtMFzlyXw8n3z98b84BjPzdOGNjyXejI3PL3NoAG6eD7
JRgriCUcWT1Qb4Sa6XqY1HWsDsdX0jXCF6fX5Zs4O5LyqvaRYs8FHXhWxsMd
NGdW36L7ZR0eflSIuVOEn5bVh882nK4hBD3cbs4ygc+gz9hxQR7/G37PU/gq
Q6blxvgA+ruZt7me18qdKQ/akfLqfXwlPwws3VZhH9qO/oXrBm3pGCtrDmXb
aNc+UQQe/U8sMWr5is1v6To5DkGflnDA37Q9IymvdqMbV+N2Ryl3hcqq75yn
xK5/ezuhwQ5P0aeIDz942yJuZvJvy9npGUU4WoJcCcEE4NzwaZEAx5znXIkd
cN4gb2YTHLP/XC1gGQtbthUn5btq/CB48J7G0YoVhPBGGyWc+NBSPEuTrl8R
Yeao75r6mMlg8CDGcAx499gIcli8JSVKEvlbz3sLmzl3ITXe+C4JW5c7y1fp
fOqJSDP6y0fpu394HZ6yJybohP5DKDvlsODQ7aCmDqwdagC9GnzcwGn6JqUM
ZLK2Iy/UTdLRgn8R3Lu1M4sB0IJvU6MDKJo8vmTzp22VKpq2Ym6Bvj43Pkp8
i/uXlOxXx1EzBxhbgZ9XMR8S6+DH30h5nbUvORZv3R5ReFDA2bJvNPRk649l
qMY5JOQmtDdKRZrhY5lWHWtXwSQf4hev9V351HSIWLlA0baIPsmxYX2DcVf7
C+nG57nAsWWYm1r9zZ8A6EoMyahJu3peFf3XxfTeb3jj0Zq/pyd6bdCNWvhe
H3iJzhHMd8tvhrclzw9NWktwPGmaRVsmNV/01+/Df5pleX7vT9C8ta+0vuRv
fLyjjX+a9cwYUPiPuPeW/dmHlvRbneGZPH+Rbf8/7ydw5W55bnTHRIl+nuse
i7x+ddL+JnNqsHBu6nvZ/ws0dKVrZU6tpXvUD3jf00zGvmcl+WGD/u49/bT4
/+FWc/8ETzP/huggb/qtg5dXH/8xNstO8gr60Ez0vrS8MUaAc4BynQ0EEGfv
N0c9XJ8L2k0AzoXv68V5tfOILqXoHqoxr7OZjTfX2FNehzvaKPoZ5IGyEaAs
/NVOcUrOr2K4ak4X8VEO6hfie0+B59bmiBiSIUSxFgvlrFpGf4f3ZDe/L0F+
sC9K57ZhAkurv1lLVOPhudpXapsAOgyaJfEY2u6t6LXnmnOry1SHJVtKCC1i
TwlIq+4rwJari7JzICNfcwN/OGtd4j+W/8rjG8l1tyEHJPnX57hwrD6sjmws
oHzdcG8diwPHqI+zxOHeo4hcjAWcOyT15dl4qu0ve5+O09ky0BdyBfVW0zRs
eZ+DOvANlhccVkaEnET8AqOrGcEWKB/ZqiWfEPZWj7ivs8pzdXXen3XBcpSH
ObLahe5FmPtuVmHjw2xSjM/8zqzIB7AP41Vx8zE9q6uVjbzOAMqnPwsIRT+W
ztZC0f6Q7tZ5+qwXbKhh8FXE4fEDXx7s2tO7nWAITdTFjAg3qWOhzrmGVbsT
OU7DhpG4Da6djRto81BBBzxfuhXjbzbMxqltQ7zsFceZfqv2SpswlF5vzEz3
4f91+qhE33kAvSfZfJE+t+0VKT9jXG7fj77PwD0gx5Klgrn6R5Rzjzb+/tL5
klsPhNtBIxTr6Yl+QUUJ/bVB6xXrVH4/43nQLfs9yjMh2MAHnJDXZODz/8K/
7MTpC18I9XM5SnX9nN0kG9Y9PEDOK42IlMretwjQqW20BKBDCEfXF4N9oI/1
cLrXz4oGRTj0H9q0IuNnxTXszcHyy+loJ6BNIT1fpboGqdxvuiZDS8eyrl+J
DduP0e+tY2xQH1zD0z8w0OJvRNXDz/747AO+/wd6IF6epLI86g+gH0r3ex/d
+oZwpUwHiVf/+6N4Vm/IoScn5XtZrEN/AUy8Qvt6zDewZY21XI9y6wrKbzYj
uNj78FEO8j5fo3IdFje9oe/egR3eKztr7+OTbJ8rs2aLtQ/g1fDFUpyWP/aV
cFjdU/Mfm2/bSi4iOZNjLv2ueOnz9B4Z/cHiYs7heeM3dK6q7hEDX+BMhALP
tRp9vjE6nXLuAnNoYum1XNzFMeK1Zdrr3vb703Hyrw/n/vp78Stcdin8Gp/n
Y5rGjD0GJHHVrXukCbeiX8Bfj0MbtqfzwFfHdNDM8UKttfd9V0Pf1nQv+uWZ
3pvhny+mHAdGlf67ceGsYgP/Z2PYl67W/zRWX7qbPvP3GTCRO3nZLVV9Cp/z
tSjjQZXOqdK22fnhr3OLheUm5d7WqfVdo53ofUefNit0fyPjS2ftPcLV8qac
zqp41y01XZL2RxGe7i/b/Sf7taBz7zJE7oVZganyXjJfeT84u6+9mZ366ub7
6v0asOufdAZ/HFznoZAx/Krl9UGWIOaZfP9J3hU++mceidnp+Gvdr0t/3R7+
67cwLNrh7aXpx7nxym96/F/Jf1GovqIdjDm7LU15Tvx41fw9qr+BNS/zEfox
RYL+mY9XiZX/87ajhhv3m5B2/DuiZKrzN7O2tvhP/kgN1p5Q/n54tNfuj5xO
pf5NFUv6765dRBpP5H+lFwHgPGHucePEJye5FlXW0DWWd3Lya0JT9jMa0kh8
ucYozj83QTHeQdwOR+n+iDmjlW0T1k3GfdtC5/mSaY9mMPC+9+S98I9X2yJO
Snl+9POaPDbs/dFkQv3K5nkgoA5wvBobQ96txPG/d9JzoUm8PHcAOv1Ovlfw
vD+Bv++WfP9wYIsO9fxy/YDu87ICQmsL+0gCHvpjxwb6DSC4Tl8zlOjQas9h
E+iBfs25d64e8aV4xXmKs13ou57Zlx+UYgdy4bh00wLhxlInkZUFYPdeOf9x
3WmA8H6lcm7h+r6MIvJhwfPFSMmPyBOOt94Pluw0FXwr6WLv2k9sGuDM65ue
FSrevkDWCKCs2aftBIgFyAFbV2U5IzSoSb/LATpDGcD+60V4eE8QY9VrrC15
Z+dHyv0lmyt1aoQJdjmsTJ+5Y2K5V8p9S8DuAtnpPWS+gnTcD/yvZPhKcrPb
xdUSH8gXOIKtGFO/nqX1Ca1zKvxkF+PA158wQByerB/4DMpGrJfX/9x4pbz/
B/vYtoK5hoC51uFeG9HpnUFqE+qYgc5srOE6aX6cCfIN9cXY3J0VTv099oFC
tjo3axyXv9nrJC6W+P/K1UXon6OeHvR4U9qHa/0lgMjcb0fn+Pt1p+usMHa1
czwU982aL2b1z6yZ+9c7fyT3qV4zBUnP86fvCtUv5OYfNp4nftvkyne+t4H0
wbHT6X4Xx720+yBj/22cfZOcpK5joSfcoZGTpL77ea2M0vkjn/wSfVCkM+FZ
oMJN7v7v3brnu6kf+u9uLPhU78+BDnA9q/8Ps3ezJmex1dTj4xC5L/32g34X
avDVYoqYgY1qurGJ56XfSjY29iV78qgH0blvK65R7PNUfwsK+g0044889jv+
4LJYVzDT/W7KOyCHU9o06ujk9lJQ6/9fgOXl3Fb5/gjUjTtWkejheySCvl8b
e4Gz9nsqsD6AWMFxcdanQtAIN25Pyj6Ch2zT86j3qK6+OpaGxDlwr7Cp4gyu
9QB5/wjrlDU4LC6eWw19zC1O+eaN8V1Fhc96DshF+qBmP+a7YNmPBr9Ju1pi
TfV5qbE2BQHse8v0tShT/fuJfmBx/FLmlg2davMgE32XM2I9V+jxUyFufVyq
+RHXaZEw9etTTisPAYaLxc3Kgb/1dbpWCvXIkV67LbI670ugzw36jpks4f4/
4r46rorme5iQMEHEFsRWTBCDuDMWdndiB3Y/tpewAwO7u8VAhbuLLQZ2YCCI
gaio2B2vZ4fZnY17AZ/n+3v/OJ/dnTlzemZnZydqzTqZqe+jToWKqfh8rC1f
a9qjIfmXU/meNC7QyiHze4eXsFCv8aKwtuuvf90He1VQ+wyPv4FKz8h/oyFb
jetp7XBQxi8iy1LZt83f8i7fUIox/aqMfWPtjb2NrLucksa1pgTIvmFbWkuy
WW4zaMo5LcctVNDxrsl++ZyLVTRtXPyr8bMMl0e3ypQtJuw3Psb5N7Boh/Hz
H/+XENof/3UMaMGe3ofIPMgjL3X9d5P1+YWy/SNrh9usfc43sSqGP7VUn4d7
0yKVi9vsLfi31qNYPu/yappt1K2hZHyt14qTsnfzts5kf1SImRvO8vVJpX0O
CHRpesOzZJ5iN087zMpm/+QxV6WbBx7QwIXrtbwsPpv/loGNwX1D1nGQx9J+
sPI76j5K6hNYu0dI/zSe5jVYJUp19Eqq6f1/QYZqeY9G7p531vv6ozYCr9cB
23VsPovfc48bN97STPoXqSPrY3rklcZWgIZPIjkXqGuhk7qu9a0wqwPFpWng
Byo7ANzvXZldZx8tjfmAHXP07Y2oPEq5KEzZUA9TGvTK8qLQcvpw/qvncnTp
+HOezYN7+rw93IW74x4u2Fa/t6CqX0blprDTMoZj89aEr0ZK2jRe4Dphgxtn
vb2FkOa7Pj+mPLIkD0bjXa6KPs3im0vUY3LO4mSOfNu9fCHHVuK80NB5Urt4
epm1fN7+H75jfmRVyaEEY3agADyz3ZR/v9eImynKtsGPtJU+Z2dx3eIsueph
V3VAA/QFexzffV7If3zhgVhvAr4MEHnQugJ+C7jSlGtTdys6eZ/MgaT+zhKX
S9Z3oTJOOrDNcHdEEHbfQ/4TtwhLksl+zryPIGecvZS29+RuA8CVMWRNUfeG
Uh9x6cURBha3aeBmnc170j87N3ePwCN/s8mRy+a/QECDlv3MlNm04jl3JyVG
Fae2I0+Ie1l9OtNNoElluNogRYiB6jeeieXOzZP2laQyUXw2reicUnhMnVBB
H5q/71K0eEaoqM927bV0bDljUOGR/P3bM/kht+MPXeBbeDvCBfNZcdNX9+Qo
L+qnkVmcRZ7bjwQKvA5sQxHUD3C9yw3ggM7aS+Qfb+++OcX6Xy/tDLtRxbT7
Eb7hZM81oDvagZzPSHXxGFUET7plIbMztZNt7KaIIWGkjQSZIW38Gan9pL6C
9LWX2+ILzjaG87ml+GlSlXzfKO1GdaLpde6W5GhMQtqYktci3ap/R5AOadMX
ByJIz9MjDC126MOzsXcp7TuJ0oSYuvgnbUO+chzYTIi7nuRMHp8/sl1yleI4
+5T9XL/hpwzx5aV/VlSm1UXJWWadzEn/tlTiCG5GtW0I6NNYoDEv2OyPzNR2
9Bn4Ah6VF3wP1yJ3nQXffu/RTGZ3pZ0qLpPeT2NLvxHul/vP5fZdI+kU37Om
NL7f/aX0n5z6bk2v9REUt2pj9ZwiJUy+PFrVr7PtKI/tu1/6q/pJ/ZKkPadK
HXuX4X6U1x7yzb3VIUWzzNbhPzTTS7hFCeUqBoTL5H3R6Hmm+nD/5bh73yBS
PyKPnMuUDKn+DkZlaJgg7W1+pFsxnydOdjLa/ju/+uTPr957WWbjKmQ/w+4/
3yHzR+cF3BxVX8jKRAcX+J/8fwB4c46cl+MaMEvkefSxTvzucLL4/Z/3u7dW
uq778aDdv9IJD51l9BunQpEEUeZxLwrJ5K9/gPQFsg92MVq+TvBEkzpX8bbR
lD2ie/rfeUtn1hZwLOOaGMW18yT/MSfWeMiFlSmMTzdWf7+e03c3KaN4Tp43
Gesa02iDpr4T83U3OtbQYQoZ/7P3k8+BpDThOqb3JfR4/S1Z+/jc1kpTNmP1
+dotsg9D661hgoyNd+TL8HxdkIHKo4TeFj90W3ZcRTT/yLR33i37/FTpW3tO
K8zSqLnMQmY7r2PSuSo07eVk076+XaCG7veNzmhjXvm39vbG0jkvy8apx23m
jygr4pfr8VOml/9MvUoO5TPEjDJtVQv1fFkKLp4DVf0qlnaZ02QMK6JBaU3e
cH/5ZW2TtgjyMct0XTemnzG8fsG+gg91e7Nzx9tVNVk3ciVot2n/PNaLfq88
X/LbmAmkzej6bJSPUhYan6W66DFre9me7SZ0OVRFj/PESPWblkuZlB1XuGse
pZTRr1s8sv05XazLWTqYGYzpuaD9AO/DB64Y/ZbWKtv6Qn20cbX6rOAT4dJ3
Ys4Nxzn2yuIX/7wazf0diJMG51b5nOJTiGuKkJJ2Rt/55rkPRlCaSroAYTOk
fQa08ilMrVdfB/Ln2fpZpfP9cgtl5YzhsfKbSmPpGMNn8w7MJvustazTQLQT
6PK51E0e/DpmHDlXkLVBSK0kfoxvuHAPOPlOGFC7BwlckWZBmjE/zXyfbuCV
urjl+Bua9npyh9T/Ba+y4j19TyNlPo2vNd2bysYasr38YrQO+l+7I8Tvinm+
0r/WGc9lsaiM255DU1SxOnX4NASyRA59prLD5anxsnae9QfYT0nrUF9rDPUB
4u/dLCTkL6ohtbf7Et9q2qfFANKGA30tvwJYxKbI0lndjJUB6N9ke7p9L/9P
x9HH2pwMb0z1Hyb/H5w66Wu0jr2tgv5Vf6/yaPn3x+ie2uO2Ga3npS2ID2bP
5YzKVfa8+vyB/0twKzJFlG3qgoIyWSYuHYMHuGV+vdP/CozZ/dk0S3xrlvZ/
EtsFmX9/m4Jjw+xU9JpWK6zqn1JZew4qIMtzL3cBhb3I+L+mafXl66Wu2p9Q
lR11LkeGdPzpqu5LPb06Pl1ZLi3ZJ9PBrVdNscxLPzPUJ2CS+Bw19RvBfR+i
qscwvkvva63Mqvv9sLAgTyunuZr9+1cn5GPOv5tLbdrKdm812568CW/5E8uL
y+jtsJP6NgPKk/cipc3KBDC1XU7D+V8DNGmbl1b3m1naWvQoBLauqbKzZc+B
PJXD3uumkO979LwMj+YfsCF7OlL6KVvId0rD4tN4pZ0En9lOE/9rUFylzsXf
vogE+d/byuuOUqf0gOLT6za83Pvx9CDZ2DvNe/wrGLHyQj77DHitvn9EWjop
bUufhfX4f+4H/Rwuo7Wu5XTDjmepaP6Hi6JN2Xx6H5mtl5f3PTLGtb9uGXzq
xGy+exBpC3sWJHK/7PCI8xl6VYyrmu2PCvF9IYs6JoBupCeR7d7v14Iu3mMG
qvrJkB6WRyoD8Db7SJEH8GTp9l8WiF3aJGvW14cRC8S4ThjpiI3F4Zz31WR2
Ncxxx2DzsZ2foKlndgo66cqTb1r/fUdEP4wueUIWQ1UCe/IQe1o8Lpashnva
JYl5hQeTNf59T0w2wDW5hPae00qgeK4rcqA5h77J6jT3nOzDeHivFLuDfD+J
OIVGl8DPFlcTZL75YqjAt9DcAExp0mtD9yDcd27Hv35HUNoUajlfN7qX9/2m
pF+ZuHURojKwtni5Yly6bfGao6eFb4fQnOQ55tsv9NjB9D9HinsubVyb+kFL
foC4VOmfU+4BVdO1zba0f/uP29kbbTdqDSP/T4uXrM3Z2svl7ff6nUoeahfA
h2ulVjN5Vm5lDNG8tZ/HifJOvEBiA3DvL3slzEssWkHaH4bSUO6v3M6MN2zw
qoFZfioIM95vA/0WrrgaoSXrQkdpvtrDjkt1ShzHyuo587X91onyUXvkz0nG
dfJXIjp+mHpQkNXNdw2v9DELSrtla80hsDnUV7O6W5Gpugn2Y3337eFno/GK
ODvDjTWHkFPPADztCbHVgM1kb8GAeYf470ErNN/5n2tK/9nXdw3P1Nw0VJj8
uwyNuiqT69Ak8m/c6XAAXhhGaB59YLxf2KWZ6fPPy82fJtK/VXewTMaAwE3e
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
m2Stbo4vdt2iovM+aICmr06eUM+TzMz6p9TTL9CT2EU6WmZzr+JGZXw+2RW5
DpD/l4oMH6jJa+PGOHU9KRWsiTu5N1nTsrJrbIb3BYvpf+Nf+ez1rYzNTRzr
Eag6dykjENRnPbo0XF7/HE8lCfplqVRdln7PS1oPdrtXnnT1MvvklG4c3Rgo
/5/hG2eJN2wZipofWpLp/v/Kfh1lMq3Il6w6o+fu2hADTa80Qf2uvt7bAzVf
slvon9PrR48LZLwoMG0Oy+g/7eOvRNk3/KXppXQUf6uD+p0wJP6YUJdb2juJ
Mu7/mIrKbWuliqWc/XsL5V/2DkULU4IwpescGopWtpfWUbbI9RQ1Mi8lyquE
6d+kffABp+ypCjK5lOV23SuFC/ktVMnjuZi0+36zcuOkLAulPmGU9r5O1F4U
sreQ1obO7vlM5dcLXb0ijMlE07TSwZdZzxQS5S2g2BsLYqhy/xkqfVhaoq//
4D77FiHI0bEh+Y6Lm/wdAQ9l+TKtNpuM/Y0Tyf86ls/25Yky+b80mYeiRkl1
25gPlbICrB/KjBelxeGYZWlrlP48L/pyQJPWo6OFSCwpYrfXAxKbtP2A+DbW
lkC6qm4q6FEYOna1Ye2CFULewFrqd0V6cPrHGqNlesx/+j+bc57RdhTwmi1f
aVKOs5Y9ZbTudL+pid/wyDLN9DKp+YX4DbqfuXW9/5WOGQHLm9r9BSWPVRGF
VDrM+tEpXTlKV66bru52o8lckR8hpG6smj4kU/oNXuxhch3HpnXEz66bp5qU
JT277u6jfY6NKVhfhexJleufvzv/o1zJWNE/u25o7z8dPzkvOjJAfX5O8zLy
/lGZsudN6n8qTJqz0z2K7MWV67O0n/jayyV4ALif4nRZ1U5d9JlpAGCf4frm
kvHzZ/q/raVpF1rW9waZF3O9z2Rd8KbdRvtJwjfrH9loOXrd/13eT1h9dT8q
ZRYvk/1ejwDMys1Ci1iyl21YE9IH1cI79rG5yANkyLOfrFutPk6vokvtp9TT
FABOoxD5uhBIOzR5vMC3zdB4FOiQBy90m80bo2lfq6yq/MUeyYjKw8rVrYb2
mn4Wp+ZmaZ052N7RORvq+orEzNAnD7ihBclaLWVMmNKbTVs1NwgXfkX2hjhl
u0qn9Ct7b+ZhjYMLn9Gx/mfzI1aGa9oY8i2fyPdYo/FVvr/xvnvDvcHcusvS
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
LmflzVjH4kJ+y3UkTjaUlPp0Snnh+Z9aN2SydYswx1o8R6w8iljfsGDvUYpT
0u2aGIg7LiuBtWy0fX83A5VXqS/AxPy8YLspFyIF2Qd5kG9vSJt7yUmUj5Xn
fiO9EEPpxQyNM4tr6wQZLKY0wS3rSu2aVvmES8sRlYECGyN+j5+jUhWu69iy
OcKfcn7Lyb8CZTx5XXQRYyfuxQisJSuUobbZnzhSWJOoO4vwpRxkbIDaoPf9
rwLOyAIjuOzZydx/v/mNDNQ+kHcEb+JY2mN9pXVwR8yWyOL4wEkyf4yNAbBZ
2WdrUUAZsh/1goP7xLz4l9J+iOHfYziW1rO08bibcUdRVL9An2ca43Mlkw8h
iy4pPnbuZH/d9Un9RNlKeOzk1wcvkPUB3rRsI7SblFZ9Zo2CFn1IC5o0jc/9
TH4GiOvJaUJeP6vXiJaj1w7ZHITrQluyh+vDy6H8Anc9HpJPmm+9LTfB583v
C32E8WlygmxDqycfCZ2NOUrv5ydfpJStV9Rt/lQMWUcCMuxafkuU4czi+5Es
PuQL9axxqo6VM3pMNlGehCJrRDuBjRKy3tO0Bfs8Z2Ehfn3iMCGtzSgyv858
5+NIkF9Vx4eu8QIZQT8qT5Y4EovPcibySj4XEsjYCMtTaWfgA/fDy37ilXha
5fJ96CLE9UKvh8I611VPQnhz60gyhr1SjyGGWD9DbCn5svfH++6S+Z/FnbtP
vmblsIHsDzNlkrnOP5CMEQ+Lt4mYZf2QA5s9urcCAT1IrzptgW6ioq2kdHXL
jiClXZR443LFijEO4HCh5RElnWscGZ8GngAQb2Is/PE91QsAYo0ty8amUhb9
g4qib57u0eNtDQ06sGsH79IIaNoWLYuqFsimqRvll9437aUbZG+092MamfyW
GRpTSUbnzkkyJrX4J0KLnvT5T76LC9/K+F5DTc++U+EefUu+469+zSbm9SyQ
/j4OxsBpyOV0y0Zs0uOn8fK5HT/1JzLFM1t29dn2X6/K/9PtdHlj8ruxisUu
5N1P+z/UU9+eIq2WK7oZ9dW+7dpnzDX4pd7D5VY3aU7uxyGzUMzAf1Q6ePSJ
FtOOJbuYtEl3sy4qHtf9yPz1oQ7SvLX6p8l4VZGu92X2qN80138Sg1ow8N1I
zfGhEg/I/rahidI4+6chxvdSupdkej5O4oIa/5kOTm9+opNLyHylG52l/X//
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
vr8R+IO125bKP0RaCeVz/dX7vrEXR97pN7X3mf8b6GjM+ByS9IK+junzMOGb
cP/wGi7od1YVzrvTUj9tWt+ObMX6y9rilV+Qb8DkuJNmbbxhxROT5W1KjPjX
NulbuYYmjb/ZE+TpQPW7ovezVemKIS1+vu1vmXyfrikiPz/jXNNJuF6fXajD
D/keEw4v/sFPRgehG51rm5QDeE8aVEMs381L+848tSfvyTvh2ufGA+TIZCMb
00wP9HLUPtN0xGn1nlUrZ1dXzeWJX3nwr57NoKmkbbcjrpjIf7qDP46p3e2v
6PnNnZChepctTbd3lbHwuDvpbxiLPP46zpU+OZZkwZ3dnGByD6y/gbAsn1C1
02RMsWmx4f/5e2q8RcbmPN7zMT/n7G9gZKCPIMOo6oXF95jjJ9MxY2WznNi4
qum5zCwktTqgSeuT+2rZe3PVyqQM6XYk3yeU+bh6XpUW7AmtpvlM0ljxufwG
LZkoxc3g2NGauiVFvkIXDgzJ0P/ItpAf6f6W/C/A55XaTznLd1flnY7YL/pj
dRdyVm7hGfJ38UEX8/vqrVsq9TtddNKenxLl88C44sQtk/1X3Q+/4seXOqej
MtgN7Kuicz4bOcfFtoD2973PPC+p/5XZW0gLgpwbmPRJ8696TOX4NzBo/5Y0
47Tn8KoqOTzbTdeUf91nf+y2xdps20Yrf382qW+qw+SZsjLgQ3VdEU7WfOd7
uIyDPJr/Xh8r6gF++m65WnwWlP5W2i3igDoOKQ6Ly6aBx0yX9x6mYkkJi7sc
1YHNlPmlUtcPVS9M5Kf6ASy/OAOxPM+XHCJ7XtcVzSLK2Gmd9nnC1Edlam0y
Ai97e/UeXyfWEv1rfVD/H4TNkuZJLZz5RCj/GNRMp6SvZVcWRp/8oqO6wXMG
9qNl2cc9F9Kt29lgSHcoFaT6P/K188cvWmxEFPdTTDGx/pzgvAeV+NuCiE7O
68l8la+p84Gue8zioO6J3HKfA90T/aP5r3mMfLGexZCyjOVD7wGfxcu58Cxf
7x6hu8/TSrDRipglqKLbWTRlrcQv8YejmI74Y79XP8iZvqfKHVC1EYw2J/hh
i/ur3usgA0CdKhUOTttzX/MZzjPihEjDlF8SKx3i3Q5KfTCRPZ04XIi01y41
a4qPjWsr+OTp4WnuH0qcRAFX7NL8Tlx6Kz3/P4ydZfisfuFzpP2GP/75Px0d
SNZuTO2ux4/XjeCA79mLZK9JavNjZaV/MmqDw2E2eOgff0Ia6FNcgEYhiz3A
30nvf6NlXW7p7mQeLpRT29DYguuHEmR8jdKlaaXfv33nPYw3yN4Z51ZoP/+9
E0l/P8RIZPYCKIoj+Q8XHEYuM46LddYx4xCA+8W+LWb9RXle2yH/FwX+JZ9F
CDErPDMPvmjGbDmvXJjGLvCNYJ5X8H3xR5Z4V+B3BPagfGldwB00ZIxIt1En
6cyO0oXVOrN2V0Kz+iUx6AZp2DuVxb3ZnJw3sLOpK77/0wGvyScfQ5sztwJ6
VEqP7eMXIVqWxVbe7+JWcxpq2jdvmrFZqlMvjq0bNSpFeE6Bbt1P5sfLLrwl
81se2pGzCM4U/sJHlpXWLF09oh4fMge2BWajKnP8RX0fHFwjlt1oSPrUPUz0
L0EdCsqyY9NucJ3Kf0BXeH+RxrBMCWhtK/X/XwETe+Ue6yL9E7I8HvaV/gvu
WZH5UzsaPEqzDTFq0XKzbU3gAfm7X7+T8T2wiKyPYWXY3L+x6DM2n6aVNgF/
33aQ+i2V5RBbHe2kd9HU+4kC3aD+EToWN6CadC4dzXf8Yz/elvR1trVvJNJY
tWQWajVuJCo2rRyajeR7rLA0c7iqx8FZn2v5l+Y7xpcwvosfqXpelPVOn45T
2fDNzSTxW0OfB8qXxdOS21QbTkuOSmFSm0WXg4xLOPSwMLC4+TxJn9aw5pFC
2/tYedP/by38yTe3XgGp/V/xjPr8VkNdB50pGmPOkvO6I312yWJyTuI7s325
fh3J2V5UBnqlULrXPM16b86sFfkU1jh/xdy/V0qvmmLdziVI3QovsuD71j5Y
yV8J4T2Qiu6NyCJiHtiobjH1fKX+QfJ+HiWf1vkSZe+RYlMiRfyuOy3wpv2Z
TZ7JuTSArMvs3MFCVv5s81WVHKxst1w2GpU+BbkAdhQjc2mafibjD7Sfe9JT
Yi+LaDK+fXDsKw5omLKbZVtJpsA/7ZH71RwEGwem7osTyOzLQ3nkU3wzFleR
nwsbcUC9TlLL5hRWdtBja4P0rpxxc4AQk5bRtjK6h9qf5jsWTDICfZDx1PDv
slgOVOw7BPdQZ6TGP/eUGF8d1Gm8luxblNJFjkN9WbV3KZXcna0k3LTikQLY
DPzd/mig+9JkF25zwif+7MAn3A+fMHRwUhmc3ZvQnHpaov2ush5P/V0KjdpP
8qAOlesnmiTitZxL+m4qVfDWfJYXL3+vg7r0vkI90tcNeasH3FbJXy4oTPDf
tAOZMK1HrxR/QFmyx+FWFz3OOjnYuPLEGvH5KOex2p3lBxB+cLBQ7uqZnWPp
KWHYYw/Zc9Y2nx5POk/WjkAdZb2yWeXz//Y87Ko5Dxcgm1UQarhhMB9f/KtA
71DyJzF+lHR3G6Q2QibLXCIPKv9aF+nfE+xF63v5kXd0oUuvEbXXz5IbOJYP
pQE8wJ/e02dwWaKPI1aOC60L4QXxPsL+fznPS2PdrA3s/vxPUl+x8qecJPs8
+jSWv2/uhUp7AkJsKeuxvgao5lYX29eV1rd8PkXOHXL6/Ylf3GCK6pnqe6e0
qPPxcmG6Z+7SuS5V10jffNB5g6+9BxtPAAdPOMhk4usVlL2T2RjUigWt+yV1
Ivm4fnVkdO4dz4Qz1/6FPhbpxY9Ye5fXqkvhw7pmBmUe+M/usPwfCOIUrgt/
2Wp+A2DdIsjSbq+6z6LkhSa4v2L9GHs/Y8Eb4bnO71vWqFUOMOkhjyAPIE+e
Gaq2gRKf5sH5CPH8YXFeeNQ4stdDjUtTBV6ddxO/0frfDkl0fjSqgZ918sdf
p5LxsZ/3pTmzSn5v46T/46yr/WX6mtMd0q3qugrtNkiHP1ts1NJFWdcUDuRH
R6rXppqTQQmG9lLf4N2rjmiCbyhaY1sQa9Vn7aWlG71qyU3zLVpmltk19+UV
As6sUh+F8v2oAlLKO6ezNN8u/El5vLDQGD4v0+5elrrnFq13tUk07xNK9naG
vB1W2/nw3MtQmZQ9spjr+X0JKlNL/n+m5L3lrfqceBZHaZNvf76nHaa7mowH
F8NYyf9v+/ET5sWLsf48sKLMNismh0lnq//RgdLKdFSak1OndmFu8N0pnJbd
2TxzcUCfmeqv5xk9IwLF522+V6TR31raQxR0GzLNwCnpasHIej6a744D2Tei
ySOjTbbttaB0i6PoeNQ0vLdDMTTpCfn2WtunvvPPnETjTlSW8VpTc1GaY3Vf
z36WyZAWfrlyL1X/3pmWTtCsU/Oat2izE23lbbHGjU/I6AzK1SDNf+9lE8aY
lI0/E5rusa05z6qZ1TFNPxz6nm5e6ZJndPh/Sm/dg5ky267+vTBD42mm4G4r
f1wnwE2T1mr7QLM6zKg1IE2b19Kn34ejdrn+JzolzJQ/n78Pn/5Xvthw/KpY
/9AzMv/oUgcHcSzO7f5iofx5bDLpK6ssfy4oru42aXdF3Zf3axmYNLsfFgV4
frXyZTqvG2xkrytT5z1Xy0fKyx73xAnZP/MXKmzSKeVn5Uw5K/VxXfksnc/x
tbBaHxbm3u2FvlUg7d+Cyed5kKP8j5Jo8KbFmranclJo4ywv71H4Bt/PL4uR
5TVjiwOq/E56zl2mkbbthdR9nqgfAGaGqtsOfwulo8LT/HfM8yCRr1uP7FEK
Mh8ceMQ4qPdmQcc++aXvcMcqzWW0cv35V6dyd6ijxxBD0UnSfzst21WHnN0J
ALTZeKM2p+misWTMBmJG6Sv6LfB01tZj0CReqHs2YK57uyR5zFH9KHS4sEf1
HxvpW0boX3FotyPq14FKeLnTHJ762qn8ThGPTUN/xZtL53iINypvFPM8RF7e
iFyXHoph7QG4hX5KczZZ/f+5PUp4jzzJqse0HtX7RWo/1fgt8n8u0M2l+Bf0
5U+bB/xdsWAp2TfU5w98XHQalb9UUqVzqXek77pnfvJcW90fKspSoEVCmu+0
N9mltF+eR8ZKAa9VdUYNVZ+PRvUC2abVqs+zMrw9GiZcQ8cHCHhDG91G5xc8
FGj4V+is+WysznRNFiu0rhYkFayGX2cj6a094zif1Px9ey1wtsf9PUAOtt3h
o6j/c7l6/3QlVPtj6yR/dfvgits3zXdK1uLemra+t7GjSIP6BuSpdckaK+Uq
zt/mDhQi609+VK1P+oRdLpts05U4vZs8u9kPc3suS/8boH+/SjtU7w3n6bON
cTbSO6xiHnkbnfpPCawvKA69+ijqAQ+49r+p/ifWgkWZyNkWFULVczq14FzL
xygpwg1Rnjtf9Ve1SRvnkmQ1FUebFpTArS9P1g0r/si4acInDvAmle4qyBL9
J836pmZyOdFObku7YSXNJo/WkD6H6uO4boVz41ExrcUYKeCk1/Wzn4y3jeyu
U/pbCb8tHxmfbl2JDvf8ooqxjdOuC/HVJMxfLDPOjf9XbYuzJ/aJMWsVTs6r
PjOA7NXFHVzxr9pDB79p74sAcFP/37Z3lTC2mdSnVGqEjdm4KnoKi7LUsCf9
+/nma4+zbLsr/b9X3p/xeWGDHiWq9J53t5Esb2SktEd+RIkLog+K1S7yn7RP
ldBjR0UyP/xuA7P067dP/p/wf31On2G6TT6ZX3uWXii09gsKO5Vikr/RlcTB
E3/5OK6x6pgM/WezUHDHJ5OyP90hf56tPcleRZs/zfNwdTjFA9AyYUy4mc3B
du31+FnRKbjS5N9CWeHH4cb8O0jbKX/bELE+AM2r6nbVCLSyZ/LFB5wMIk+W
Ppt3atRufuZV9blwJQOvG6hsbH3Kl8L6XsN41xMLxHeo65RzHMUPman9rFnk
98esPDQ9MnVcxfmpO8/aZVzqea30XksXtnzxLEJjcepa0QolPDFrI7Y+zVfS
pPeVO0tzb+eO0+MpOaZpyr75krw/heaDfeHqMNMOK/nQ9KeLIdFKO9N0swkb
+Oo9pbMSWf375d8n+BrihV4h/7UuF66R3ESkA/EDQGXRkjP/5tk8+JLSEny7
zR9DPsUNn2wwwHXFooFGinNk8GxBnnzFeosyUj7UF0M8HhhEO/2xd0Ks1P4H
3OtT9Rj8FZZUTbQR4JUYjpFS1vKPEgU9WDuE922qK9AmnlP60P/GQ6TMuz+B
zP+FZwnKgC+l/f5DS0TpLkPLTMbas9c9EH1m6LNJYU3CbZEe2PJ66rouSmuO
t7zfbNWQ4UL8sWOKSjhRTmrLfV0tvdPW3ZWfT98mt3xOXCvm/C9Ko8O55qp3
lHiGzTdXNOZwaZls/f028Gz9yFNETljzXfk42X+H/Q8V64aqzxQG2FPlpvvJ
n+p9qnJ+C0Jn65B9sYOYcwNAhivFyNoqm/t67ODqJLM3tR9A7vDvXPvh6vZ/
y2hprGraVRcP1p4U+tRNEuV1HKneY9cmhx69bFUeg/w0r3mrHiKeTyh5R1F5
AhXni60bYpSPa9oOxs1vq9vk4AuXoU3QhFd73fvFdxT+eb1b58V2B8j+vCA7
ld+2bYz4raJ5tfOoY0Z5b725oSg3+MJ37HrE4tAr6DKdkRHyBy5O4c7NL0b+
u4+QdxrlqfQzXD2G/0Ra8gg2qTxH83uphUvz4fwvmlbGEeXJ+ojiWU4i/igZ
bI9Br5Y9yBr5fKlzwaa2If//SppC/bub0Kl8RNeq3jk5oN9wyyNOaauZA0yv
IQM8LX8DxH4uLIuVwONlsU1ce7xl2SCU8mMjWh8k35dO+U9E7yNmVBDx3CeV
/3d9k9nV6wDXNJyHFmY23//1NX+FdLWdTY0dWHdTr53+G9Cif37uSJM2WZKo
3v/BHCy+8xTZNVuMjuWR7FTs1M2/bjuy4DnUdBwBDPl97q99Oz05BO17SubG
efifNfkt+K+g8/eOMnpvKsnXy/vP6af206IsQh6fV31ujyl43LaHCtdxyDqz
/x/3/a5q2vF/tS5o6EJJn+vHVv7VOqT4te/T/U91vuUv5NSqmBiTFpmycnmr
XNT9E0d8sGGu6bGk5WV0/5kNLrSLQwlv7v7r/7qnCeN1QeUvZOifMmx4hFm+
Ux48NVt+rFgZk+VKv32zj/tXOjZrLfXPHtmv3lu/wVrSRmnekryD41e1Evl3
O+dkkvfxawUy5MtWuQuanMtIwW95QVW5Vp1TQ9X9XSz+7Pbk7NctHlFmbddm
+TlUoGANdPGzfHzyySbz6xTnNc0vK38W/yPdPgr/Sfafyu1SUdMWzs5+6bbr
oSEV08U3eJaXybV4oRftOVO4hUPqc6E5bVXtpqBY+f78q8em750abkX68aq2
i46h1+8bp3jQ+7TkZ/HM6UThY/EolBYe0Gy2bZ7BHE5sDmlM7UJj0mYbzuwR
DTTGJemMSl6Qf79gPXSro3oP1zENTf+bUSjyshYX+t4O4xHSOOfqF1J6008X
PH2+fG6jaKMDrpr0oZziPDZ2xiBzwsa8WMsHfQ6bH8ftEFYB6StKa92a7klG
r09HcEBr/pkCglz+vf24WXo7mf7DnaUxkR63L4r1qf1uu5i3Td9TJP7iRr83
0HrLH0l7jtw4UgXXuiA/D0SpH7wnsjWdimj++DMtEGsb1pdsesUTPdbCEexl
Q9ZxsLKY8gF7HzP+Hve6fQEcVHmBrsn7i6pvkTk/UFpdOqnnqGuB80ntuYRp
wfdfGVu7DXAuv3k//n7ulqYsfsXJ3ty2b/f89Xdwe1P13LG04Jahm1jH6+SB
NN81aQFXgrTp59byx9XKD+EerCTnz1S+b3pscVa4UabzMb32+cT/K4gLMz/u
2dEqUibPhZLE3wvKzZDFMPsNv7TADWVrcF2s1z15lFA2/U3edP3nZH1ZSCVT
e8vTJv2z9N4tkW69i+R8kKdP1ONJP2Iq/dVzQWHRbvk+F6baOrlafEA/ax0W
+bdfSPrXZrvJn5WErCtUMi7tX1yV5+D/AO1tr8e2ZckeDHPqL+FC3cm+Hl/y
qf+r8bKK6MzU84IdisyZLyt7W+szP+Fcc6zM09Jj2Kejgl0HrpevUQ+0H6rZ
zzKrFFnHWanaUkRpdrxTS8DdH3RPxeNcefI/6jlwDmfTkvCAejsPN0A29p3T
/Mei6eXne4q4O2aRucQgA6sfwKZnj9Gay0hVTnFecEPRefuCeNeteNX7uedE
B965T3GDMl9pO8CL36bHM67HIvADWxbg/w35pEhn2TRZKsUDlefVJNI3S+1l
E0X2CmH5hC54q7Ll9BJkv12nkVkR1VcpJ81jz4PU8r1M7ht67P5I6n+iZUK9
ZLJOsOxTPT6zOEX0OegSi2YZTfFQ7fnyJ1Yjv8xGWjECdSsvIv0vXR7MkJUH
rgrAO7dJe7FSPpOekr7ohxXLiLIufZ0Txx1uhLVsA/A9tggXkrMFUtKKmmop
89Fca72MhqlnR5k/rGUdQc45VeTrmYDmko9vkCk6ADUtd2m2nU29fybe/oXm
zOvy19+RF2uvmf1X3leLtPvuvTE9jt7rSNr7RX7evNGsjN8PzhLKXxyU9vaY
8nOfrE6nZSvFd3/MlipcqVgs/oPaHvwtfjM+L2+KL7ln/iub4GvzTdYr+7Zd
hmgm15Gfl9riTPr3mqyZv7zZ/+tJ815o+i15LNlf5bWLg8C7yEQyL9rewzQt
LT55B0vrmQJfp2+eSbuL5L3+OPauTDb7enOF+vU/Z+xMP1YuPsoxTdsdeaZu
SwCE1lGf2XJsww1VXqEvr03Kdy2nvOx4AW90+2FF/JzXno9P4f3ng9ySsn/X
r/XTkoyrZXUagnMfXuxR+cE7k+8NrTKtPPaMdSUkPvRXtXmAxsxE9V447JxZ
wNnc0gHBNXJ9LfwucIOszTD9vD/mG640rP4Wik692CHSSmpUVFOWbycCkK2N
Htfun/F9fF78suNBDpeTzbhPhhH4DVbvg05tkGk5Z2BjrNV6TyFujWcDjWWm
+ah4U3l7TIvnvgfk46h9LQqsQUr5aXqjXSS3rIM3Zu01uaZ8rs211LPRWT78
P2tV/srkr8dxNt6CT/453wAdH19HsDnFCVxD5itCHpXNZuwj3e8a8fy+ZEtM
807WcVbZJParHrO0tPSmMZl9w2eBr7NHdT7/Fj1uYyGtOdeKuZbt2oo2vpmN
tKvz/cwt2iB/Cz1W1q3Qb52Ybmijnuuv5DO06xpdsP1Z0SdAH9JU9g63SR8j
5M0o74dqdyPzmUAHyLNlzsVifQ/2gDgZnMdXtJ+t4gwtLZuxMaCUFejBtUEo
2Ve0S2mJHtAK/zlLrPvmVQns6dNASF+KlcckG7vdmtsZGw8OcF96eKPxw3Zp
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
q9C+2jZ9M0fzlTwKt4vk+/1pm6xYJ3+OoOxK2UyY1mOv32qScwN9NtTGzoc/
8Kwszda5c4m8HmvxYyFP0Q98mxIVdXPtp4m4izrq8drJ77g1576IvFxn5jCy
MlGgeVOvtMab6ozgWBy4UhpsHsCVHTYiv4ij5P9oY9RF0T6gS3HcWQf3O8sR
m4RVOs4pbTOtzSFOSVugX5Z8FyBfaGN4bjIo61652V7EAX6sTuP2kz2jOmcn
Now7bYHzVLutsoFSN3rdMPkrd2YsGV+e6Ulkqb1psAfE0Bnva6IsEFt3lh8U
9Q78FWJgaYFcmwK6Y4f8u2KUvL6c7M8/uf9e4HH2x1DRnlcrkrMEWVuydS+1
J2tf8ryW+kog/pIGNTGa8hcLt5ok8706jhJiVmkHWu/JxceCT3eW3SfaVomz
uorkIzbW4PpjeCGZHdjniaVTPg+JDb0rmRdnM4zcU3r5WtQX7kE3Lb8paf52
ehij5LH7UzfZu6VOrI9Ybh16V9WnrpwrxkJ4b+k/5nOyNLfmVHALVVuBpfPt
xoOYsOXNMFzhvkzeQ7J9NfA1Pma7N5lP8a24fE3Z/PmOqF1L+fnS7b2ymGyb
V0/jzMtH9SaIcrCQ/POmaAv7Do1l+ow5Rs6lLjBPj5/PIfFpNzZeRcO1xTXV
2KExH9nDl/rhw3Ft+cFeT+pbqPKbdRsrts9pXmLrwxzQGBjshMfqMok+GeX3
QCY3O1cMF/4p4rW7+SCG2iCQ8dXvCz8EnEGxI0Q92Pg5XFyPhz2X1p/SMtae
QFuIiY/kXEwvWz22GCPZivIYu6yIKKtH4glkqbHG6ptzBfyQ2Z98vtszaQ/z
+BJC/dFryd61oJ+htTRXqdUtvUFJj4IPzuJG5aayX2hx2WT77McTad9trT5F
WE/A2iM64JWM1vWrvCpWwH/9rrlozvO6Wprs8bXKriVmfbegeVHjJcf+vNX2
coLuZR+dN3oH9BIg+9RTPADk1+JdBX5wv9nisgEA0i/LvzB6Z7YSdXnw/aGR
4gI0zJvAFQixjALcKsVJf2qrgRbCldKodHCqe+j1EaJt7bNl5dGlA/yexu35
vYWuH4C8CsEjcc7OCw8APshm2fwKT+WBK+ALfggiY4B1Xrc3XoyQ+jVAprl1
GvNF+t80zLxcFbE62WXr7tamfL9oKIu4elWQrXur+dGU9o7PVobmf3x0YupX
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
aOQbNyTDaxVg/Ko/fnuOtKHVW7PrVV8uT0L9HS7/v+VRo9ClQ4i4rqrn0Noi
/5aF+5McDk52ul+hl7fUMBw/qoHKjguyZb5HXGbg9Em9Nx+FlD7SHJHHEam/
7aOMALfa+J/5p9808+M2LOxf7yDT5d+ua/A+pc7NNVhPcng7BLQSeaWslO/1
UuCpdL9+3ngYftxpI6rmW0+G03/dSrN2971QOFO5f0c365SoLPlkX095Tq1F
M/Sq5xkFp1PHNPVYY707S3HVzaQ9VqgFyZ312LuO+Vx8INvbq/O5cy+lvRaa
fvFU2emeZebrl/aP+oJ0vbTXcdYtTXI5bq8uvYP2K0dyyjSut16nlOl3Yg/6
+b4uk6W+685P5+7Fb0N5/7ThOr6T1kwmrH4m2sE7Pc/EyHXnhTqbZv01ac85
UliMkdZv8/+r6yczGGlB/LA7fggKjXn1P7ufFziclGmMdRmzxSxO5Y8vVG1f
/p7/y/kUhtn0zNSeISce/Kd2mDXnkFl6zQwdM5VnW0yAfN7Qeh+xz/Vb5Jj8
5Kxon7yjfFQ0V8yspGnbnxULY4e67zXfu9n6pGrqPMFXr9YX3n/uzgzlnSeX
1cEx93YLfLyoHrf1tuBCD30W3v2eBZxHly9Jay/OTosR+vXNMwb9E6jOcdui
hHlbTJrSQVOPRZUCMPCHsqnUBdHeHfo+VPEFWP1oqVg/Mad0L6I0WIB+qcPJ
nuJc0nodtbkWVCyST2b74Nx6zPomIygYLY3ZTHYiYzkOlaS9m2+9bCfSyVdm
hOlFZXkOHJC9+UDpn3b1ruT9udkL8/da0AVgjd0zVQyw9irymewh1OayNCa+
/eBK9VyJRDuz33AJ3nrcxEldb7+1gIzO88C6gtyWw9xVcmv5h6UB9IfG9TGy
spsDJV8KtxuSPCF8CJnP0eozsV/euYGy63jR83YZzrnPKE4AylRI///E7Gkz
o1Yn7N+M7IF8yz2Ia7AvjKtz2scsn2+2hEZUUraojHjd2UrmoHuO3i/axTQh
DJnrG2J1iE8NJnN33SrfE/Uu/Ikce33X4zbptOjxdSl5PsWZicz/FTfpfert
j/eavum/i4xhLFLUR7tq58dmAWSgcjxq/hfaa7LTTXpjQGF1J2fK18WGzMXx
3a7H4TXVY57KfsDnRJVAfKhxQ9EuZ8foMZV/4bQ14nUJ4+tjV2bXlF9JF87H
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
/6P/fPzuwI6B/3ruUZ4mbVR2+NLt9/dxvTm0pGiDC+8rozPtyXNoQenWIs1T
M+OE99WV06U939sM4/CH6NK/HCPo460M48/p22P0trX59dxKiKhYVfymVrbR
ugMeGf9DGf5ZPi64cvB5TfxP9eR4hr+1xz4v7ifvwH+Pz5vhe0qhn9rvnXFY
vS+jEoKHeqK+be8aoez9OqcKP98kdT4RJW6vOiPN+mLmH48Q10v9TquE13u9
VLxzvCX/M5VHCm4JgUYtmVg8qCt0RnsvW3P6aMVByqwA/Bgv4iv2mI18Rsnz
NnmXJHt/z3q/Q+Sb6rBYqKP7xwO8nVsUN0qTjfKiPJR61W1RGW8ZSGLCM3Eo
TnJawBkOq2PEd64jfqg7/VvfaO3upUo2+q4e1zg2Yiq28JwjtG1pXB2BzCCn
UlZB70/yOTmrfpJ1Ch3qkr3iIYZG/+Ej+urkTZInl6X1qEiI8Oy6FUbmWB6v
uA+FdLnB3+qfB1tyffDR9uS5/aFaDqwVpy0OyPewrp8izetplM5HK1fo0fOL
+UJMHgBWphs/Toj32U2V3fnxi4oLOti+l+zw4vRRkRZbHte2pAfFYeW9/YL8
075yZgXa8YjE0YGH1UQfPgmR9nFTxjfAyB97RVozyqn3iWfjlvUr628lns+5
L8Q+E0PF9pPZnYUx7cgGNsIxX/oY5e4KZK0Oi5sZ0L6Z9blXvLvsHpxUKkyQ
a8ULkhOW9t8STdadV7iyXbdjta+olxZ9qMNjyHdesv972Xzj8U5yvMz0oPLI
7Njwg+iD2CUpsnZYIwO5aCpvk67dlNfXeHO8CtpKa/HqOX/yYP3QbdpQDuQ/
01T6X94qe0PE2lcLODwWr8y2RYxjaoOe9+V7RayZWU6Txtp/jAbWPlo26J33
lBCnSXWbiPalctMY6jq5hVHZxtqL0qXxVnlxCez4spSJbV/e/AcqOG6pylfO
7cnetR2dJB2/dZPywl69o94Xo2wFsjcp1Y/lk9EYQJUPRbBvu9I8lZ3KAjyh
/JAnucn370pBwLdHjB6b8zfErv/dEpi1FUDr72Q+y8ccb4Xj+MnSeJUyhllw
85DHH6vbNmzNj6tN4nB270F8+Vv9UZJ9POo9pptw3u3RQpEunO9x0OOkKZs9
euYl78tb8t3iEzk/ob1vi1iRz8X7J5FrXwuOjwrE0K+4hfo5BfVadb7Jo3k4
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
EGzE7v/ncFF7X2wApX57d6zkz35+anaMPfuGydj2n/MmVnZz0LbqW17rebL5
Hcm1q4xdJa5TSZLz64Vrryxdd0p6rG7g7xWKvJdv93YV6LaLOS7T5drlKiK/
eZdbCb460C/jsYyKHtfQyZHSu9rVTWR95Ir1J1H3oF6yviuO9TE714JCYltL
/CN9PfN7HVnv/K6VXAbw8UK/t3zD3NrjRT1j9onyhC+X7291dN8kWZ9Vhfeq
3pMaO+vxgv3bEdUP5NjpkU/EO9rNUaTxeekNtOxAX5OSBhzLjtbjY9dPcXNt
0+ySV4rjyNvPzL7LtfnZQVWXt0EA7vuX+W+GCs5kHbep0fZM46XgAucM31UA
xqQ9j34wa8rL9FnLhzb2UvXberezUBd8FAt8vQfIZYcYOu8UKMbYxvScTRbv
9/Cuf5J9PIA2xa3xLg512VsVs7xpDLBgNZHkyLm0LzjD/+ChzbXnhW0u9Uz3
Q7FmnvJpt1D9zFp4eZSIA7Jr0eROSvtqnbivvu9AXIv0/N6q2ms3kGK5djhn
VLYvXzsfba+1xn3y+2foztUDwr28cfpe0Up6rG5KPVlo17ylZix0rkC+dx3c
r+luz5jJ80H5zMbVM2/5tenYVMpjBX2V+OfnljN9aHBZk+/9W11QcscAbJxD
rhV6LDnSSUbHf2RbI9BR9qf4WtC/klzOuDXSPhWhh+Rj9cX/nIgmWg4S6B8b
ohfkObppsioumnNkzCcjvhRmPKoo0PvsPg4r5aUxCzodHijJOfokWY+3rjyJ
Y6tj0px+7wpj8OsB6vdEU5VqOqW9WPlGvNSLPEudSDSxslEZ4Fjg6Xfh6FSS
6K+lo5YPWKjRUY+XjPDnf3Ql8+dsypExBFZv1tdsecQ5kreH8pj7h3xMU3nv
3ORmJfiw151vRtq+xNVWlC/80H5ZDIN+tkVIPqIB7mXx4Pq5TZ8H5VbF+a6L
LqbvlecZU8udcteyg9b5zjZLzdoF2jOzW9MSLqrrHyCXgx7bjFTPCZw4wiCj
FzDSJPRvsaCcyRyvR1Oa4prnKqt8unx7EL4Q1Ad3vUZyBJg8SDzeadrd7D0g
TysXzbb8z7T3D8gMJpYke0blLCldC+8akRzy3o1cUOjXucjBzp8f0lC+/2KJ
qrlxz/yxwjsc5J/PcyDjNe1asKHHZ4HP0FMSbyqPEmgMmmtnwcW+cKbP3d+B
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
pX9cEFsyvwYXlOkO5RqRHTmP0Y14pU4fTw3glboCjy7ugYhPsxmNETYuWJmn
pkjjHrc8BvGCfqXfy/hU+6S+10I9jHlDH2oHoEd9y9qgyaYPurh6nXmlXcBf
cHxQ3AdBG+XL2hEgZ5u8eNDNjWL/5sGhoo+vzWnGlUmsr/nOyuoBALqxdCPe
2ArXU480sOr5xAQA56/mO2rev08dLc8NmGhvTE5cwf91cZ5xTB+97N1+sJP0
X4efT+aN9LvvGqGildbXu8hEmU2b2tXXQT2U2z6U9m4qcb+WcM8C2apGkXw0
IAN7/HyYzDuq0zntW6h/smjjA6eG45h1ZU1Pbt831T3yXSXHBq/Vov5a+iqB
2gfAdW1BI+VPabHtAMB3YdUhKjqAO71dA/xkSXdT3ltk3Z3HzNNubD8WH/gE
F1zOKWlQ+QHeHCLz5I/sbGtA74cJ9ZV3BhtYuZV0AbodOSnYpd+DSuK7J/XZ
0AQ3A+UFMgxPusuz/oQ6gGGbN6PJc+1FX3XOTeZ2mEYcNlB/0z71LRPcoM+l
Uuq5y6x8gHPQ4qUQb9eLhBtAh5/f88jkvzrDHu+r29xg6yHNLd80Y6fsWoj2
nOq+9H6w4fJxLwO115XEleJzMODEa8OVcW8505kVSCteWR9TMEa/5G50n0Hm
yCUFCjhK24LMbIzBubvPHuPzF1Yy+UCv82EWxu72iajoRLJ26fZP7f9+G4rX
FGXpXm6kUYyDn3oDlXWOwz1U+oJJ8zuC6maMnRwxNHm4KhbMQbexHprvmgBb
apP1eR9PTM3SdzMLm8Z6Cn1L5vn1/BeLlxYVZVpQdLfY/58Vkf/z/+HmYPeb
4gLvbrXIXJ6XDUZlKsvJdebzU6862QvHrhmNJlci9r/5hawd7zmc5M2KCswt
uye4h0Sic1t9ZXVjPmnnA/EopM5ppYQeo1vg+9gN+bV2NYvruToIXyn7UFb3
X+XO3nFRPs81teBw2Xn121d1Wv2q8AfNytvUSj7vzCIZoagnblma/3H2azgq
4Pn7e6IOqCOtS/tYIPG39mn8VZh31rzvzMHWpmRdTeRQ6R49taYer0b7xee9
X4x8/8B4JvfwZScOhz0nuRem14oX8V62SdFp9XXddQW5uz400fE/JdB4ej3m
kfBuV2pdOF+wwFHE0gZYn1haNv5HAfDZc+/mZP7cllerZLbJ/XBLhnahcnyN
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

                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {65536}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/4" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJwVk3tMl1UYx39cUpAIMpWLbEBFSA4UEDGE35efSHERC5BGZFO8cAkUBwwQ
MJ4XQgcag1Lgxz1KHBclR9PxPi8bBkgNL8OQqcG0pJEXlpqAmhs9/fGeveec
Pd/v9/mcc1x3ZcQkmep0uiwLGWIScw2ZmYkHYxf9P9mbmO7rk24ivzoZ8g4S
nCL28575YfVabSd/7efD2pVxfrYtVPvT6TLPzhm4OLJJNet+E58kvFQ70+I4
ZqKNbVoJS8zS2Lo3F46jK9QhVwIGorhhuY/2vXWzWu9L2PJZhOYRlq1Vf7VS
65jfx2f/duKe4y38LM1Kc08ysvfeR/ww+x1tIoCQ4trAu58WIuQm4UKBh6bL
vdObt8ySb96L5w8eGniJH8GdB/mfrDStq6Kd765XcPbIZm2mj3BjLJId9L2c
+nYb27eF8+/S07XtVTxsrsA5jvCbyxCbb93AK1YTLsaU8myRF0evN3LVOGFy
lYLIOi/N6YAde31KCKyp4KZoQokVoazEibcXEertRO8xIeIw4UgioW1KQWc8
YUP1gr4008jJTjN8Jl+HudhdfH1UQc7gIfx0ijDUXMZ38pjXBT5QA14Y+Fg2
YW0wIVt6mT9HiEv14o07rbiQCSdrCfeDFIzHO2i6KIJnqzc+XKqgPIFgLXw8
7i7Sbu0nuDiH6188CdUaLxEKHxfz9ILUJRGWep/jrnTCDAi2Owy8MvoPzglQ
sMn4Pv/bnswtjhaajZ4Q/vqCvsNMwfl9hPg9hLnF+VzwiNDdXwyXGskHBWok
oeWqfMKu0l/Bla2EzqAOtcKfsLqKkOEu3m7lfP4p4cEBQs1fzlyxTmrDxtR2
c8KyCwRjHeHXFIKfkTARJnchTIG56PmXyL7/R9xzKIhPSe63YgmGgRa1wPaS
Wu0tc+H8sTDyM4iH8DI56qla5lhyyiDhyXJC6XVCaj1hWHRyrx7mue7veG63
7AVJzY0feFQ8YxzFYychNE3OqptwuYdgkUGwDw7Qm95ew4u3iLZk8jlOsGoi
jIQQega8eIfw3dZYwAO2CoqEjX0ZIV04Z10kjJUTmlHOU+8Rpl5RMPEjIdGn
i0ds7qkm85LzC4JpP2HN54TWJAVN4mttN8uBwvrd28F6/uW5OveznJWxUm3o
q2U/8X/1DQWVwjntGwXxM4TXpKeNCZ78UjQcThOeC5vk+5LzW0LIqmm1fzMh
x82T646u5cYT0m8OIVLe4UBfFGdLTdiXbpwvvXhlJvFpXwXTslYwWcVZIwoC
TxSyd9wttp+Uu3SMcOak+Ene/wBQCeZC
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {256}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {5376}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {256}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {65536}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {256}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{256, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{256, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/12" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/13" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/14" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/15" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/16" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 256}, NeuralNetworks`AtomT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/17" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/18" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/19" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 64}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>|>,
                     "Loss/Harden" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_85e0334f_303c_4837_b202_fad67aaaa932", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
thL9qUO5oNuGNLNKV6OZco1mXnfz18tmvhiPa+b6gTPXUmaW6/uX6PyHpbcN
1CgWH0y23+wrT1mRVdFzHVdOYfI8RHA5RU2wywINwTbsbiDYiAa9sCQZx3K9
17mSLFLA2N+FWAXft69b15Dh4a77SqL3Segigf4uQqx68jiGxaQECWlpjuuC
N+RrLoCoHiB6ywWNXbxQM/YCdkapVQnnqIhfIZJyybSBM++pplUG3GxqADJU
/8JQIxkVxlyBC2GJpl8g+1KpVbJxpqgQZ/dmidlXvgcpf7pIyvWPFgkXcdOl
bRsi9GHGZnxGly80PbeyC0utXCdcImaMghmP75tUrp8psmfGp+vzRMDTQn0N
T2eT1Dy9tsjHIJsZwaUTzJvQnHpjfCffM4vWwPeZLdU3pDJoAhKphFbKYmEv
7kljSlhlVE/E02dUNU+LlyIszKWARSx7oNSKYpIjUnunDbh3EpkwV1HJJtwd
EUXeoC5SUJdAfw94v3qjbJ9vueBWkQmVR7tHTfLPbNkn8OymleqC91sGoC26
OL4LNfh+WOQ/PpsZ7UPg62HanHrf6DLfk0tv4N8pXtZGBZWU+mpUMl1LrZJT
JhR9VS6oJU2i4pyNAc5uO0j90xU4+wxxtkraSzM6oQU0DeCqmj5e46SCqRHW
j9Lpe1i43tWTEradPzI2m7qzSocy+9w9X8SMLC01M5LWaURyif3snhUFgjsu
krP0gTOXF3uW678jSUUSf5YRC6QhEwmxVSb0pzquLKMdSEZCI42M4hDN+4En
Pk8WVxllM/dW0YtkImtg87bsAB826JIY6dJeybsird0gIao+q1AlhlvsCWes
HzXTE1kqvx9n8tCqyKzqC/DDewHUzRPnzoCGO/dMRMHlgoPkGQR3zkjM/grL
KbGSWvpMhC6ZSP4T8S4ymrqL1iTR9nLB0eLpRJdz0CU8RavCDRiaWYzr0vTm
VNqk93zPCO0GfmHJtl4tJJtgjWwyNUMFTSraUS44VzyDShkn7aMzpyOHwZ5A
Td95pj6AQp7jm4zt15FhcxjNKX9KAihJ08hkThjnKwpzMR6RM79Kk9htMfYt
GpcUrKtNZa8u1Fu6oDfgmP+4vICy1OcOOtrkNnItdAxkMPxvidJ1+Bw8XCdr
OyfVZwTt3OfLOO9oyXL7irQwp1/2zVryl9wVDBZzO4W8X4exksGQPLQQzs7S
4dhxKy24khYayb7QnwjqMxSMhE3HROO3mWe8zhSypFqDVX8nT94yJlC60Vw4
uwp1CTRHXaSfuwwx7m86dmZ8GNHlOHT5Z9OcLWO2SdebC/kDOgzo42/OxXZ/
g+Vi8/1rJbJvJNh+E+p7LJlITS4KJ3ukraWtr9rn/2MyWVQ6vttVoZeRMeXW
PmCJy/ydyUlYbibqyEFcYlVquDTjSOGCLcY7i4xwLh1ZX6h3yM1r0zGhUV6A
w4Eehp42mZr8QaJi04T7ZNFmo+5k5mLqpFVJC2pd7aM23TLn6PEzgjBYbeL8
2g38Msw9sJbslxnJSB9bTwEhReEsluipWfxwUZIiI8gyNRq6YCy3KlGLb9v8
ssW650z2C51rcVydNbh24biOAVx/O1K4cItxscg0iZ0cSBbxq7aVZloIt4wp
Dci0YBWTSKlj+2A2xmSuhE1xhfcXo9zc3DYfCzAtM+dYW06FVEzH/ehachT3
OSD2CYHW4IgNaBD7zZ1scDzIIzWWoKWctNB2UvA3a5OiubXQxYUKXV7gXThs
dZcZXuRxx4P86fGMnYjzbhO7XSkG7zOm+KbG6L2q1L9Tgnskp+bU8VNbrT2b
dd0MQN8PgL4HGOAGbUlWO7HjS7otspmwxgTPI3Tt8NHPtvaJLKycF4KeZZXz
JH+EQOjOydb9D98E4nnnpZKvyu8L70mdOiImZYtusbkpJiRBPZcKUY+v10v4
pVJKwrYwiwnZ1H+qdEo2lpZ9jfxSFUPjlw5p/FKMfm+ZleuCelfwS2e4SXp/
RE+b5vKGzTVqQ9B/s5H7y+Kp3d/qU9RAwaN0PQUxTS1Ms3MFTNMv3AFdelGX
ULxL9+cup6lbBI8K9YZZMSX+Qx6HESayMZqc47gGk7P6l/6wKlmY4kZ4SL2B
M/seysBDUl64SfyxqchDNrsJsQZ+zBbyVEPwRMFkPBIhBKdqZvuNGiV4xNWf
TGSsvYDgxWKTbOow+OfQS0uOo9lvfZ79hGb2K/r1f1i5LjlBzE7WHzhz/aFx
uX5KKUp6GF9M/ubSNty18aRmP/4ns8iKtCSmpNAi8ncckxgNJv7TNEnNZaoY
WKU/k8Akg5qwLfsfwGQaZNzhtWNOIEzaNJgUn9Jgkqsve2hF8bzlBiibvlty
Ek/SPqN8UQN4V//EQ6sSz1IVwwDlDw8Pl+tfcrNnXsVm7IYFxHr+DE0E+UWj
cIc8C2dkMwUiAyJqejanTp3dCTqq38DPcv91cAxK5H7TeOaL2mrPvG+26FK5
4FnpUsLJ86Vmf+UOFlmJvE5YZmkz7albA2nZTIcjxLBlXs2px2bf5nsKDdqM
QPX/AwOSJuCYZGkwyfWMmJnNnFdEdJEtbU59Prvf2jPCgDoJulyCLuaT8C45
mi5/eGZBlwXvDfBMjeFraXon4wt75n98Zl5FBEtmagjO0/Rp8WTNzmYGWI8n
MPNuTo2b0yy6hKLmfGuImk5FT0q18pEMd+AkD2pI/nOONLdckLnvK4JkZ6nZ
hILCMquiZeX6bfRlSK4yrYRtgysgA9gkusbmcmRjUSaUzWZhx8tRfiQbexXJ
7+hYjaBzNfnRFINbj6woa48uUudHfxD50VqUH63lboosyhudHz0s++ZOuSDj
3lp1fnTmoMAzYnwDf7A47+hYFFBva8RWOFZNwytBUX654NKidQQNwVKzrx7V
PrCSfgX2qNt9djZS4B6NAvvM0aQ65dRBwaPm8RGEAmcBoYLvdLOpoSJ/oKge
URRIZEefu1RQuTaPWEbRRJc70MWuB7pEPNGh7G57dAexolvDiqQCjSrPNzha
bkXZ+GYRrsoWRgNnOpkLyvXLtYrcITsSINsvc4fsyA7PjgQKJGqhQCPqqRR1
dnRkaZUgmxmz3EidHW3ahGdHsUjOMdLye1ozKKOyo20GNtY2j/yN4tWr4jg7
yI42xJRU6c1wFSDezKKoedMt0LiZOqqdzaMso0yC0DYgNKTVLJu6+4lOSfgd
r4eI0DKmxmYrNIRGGbwrt3L1GyQILQZC71UsKdeX3McNwA/ChX2btWe3kRsN
pFmBwgUNp9CBolbmF0u7bbKZZ6wnwCpbJOC7wko6pewWmQSTzTUXUIU/w9Rv
0NS/4DgX2qhx/r6RusnmkXDCeQJnGS1h2y6eQTb15yc6rl7dBysQzoManF1q
NTgnGmRWWJUEn1uM47xiwsCZjxVLy/UzaBUeEn+hHRLOMw8h1qYNafoLZOZj
cZS3alD+3rvZLpv5W9EEYoG3vTl18bz5Ik9IDs/dh2w7kzZ3gtFFHZjZG+dW
nWbm3wzKK6xcd9whZv4dZv7lsG+5fhbtI8zcjc8sWSLEbPXAY9XDzMv18Jmj
NDMXeafbZzOzzE0IB7OjObVv3lbg74TJgCypAbqItIn8WtPliXcVdMkJILp4
hDSn2jntsPbkmjTwM1IaCnW0SEnSRqHKznSipVyByYCI9nvPtOnX7PestNts
U88q0+GUC+6UhBIGdx2cRlfpPStpaExJ9/g9K+2RUiVolAqbpxGQnHrB5pHE
JA8EhHFl7/YXv69sIPQLZHV3pVE2NU90DaR0UBf5GMJcNb3/HKBesnlUaHKX
3Y0jHg5u3XkPuHWTmGmkqKK3gPGRaTitv2poPbkMc8pmFrAnEYLZ2Zy6xfmq
yx59MJgWZDDN0oH7WpcA1ZTTuFO5patZIziLOssFMvougsZWiAWfqh5akXaB
z5twJXkeovGahka+k8ZwBql5No98JrWroiI9YVv3Jkgg2kW/6MMyEhF2QR91
ifjcZYh6F9gy6W+iyzno0ls9M5v6N9ja43rvd0hv3+hqbE2u0Z5PBgcfW5Xs
znEnbG3SwJlXei/K9XPof7pL1jc7gfLUu+NdBj7vexiceGyVvKeQ6PIPdPmg
V+aTAF6ZtBe8cvEebmdk0QCwssgMZ+UrDSsP+RQ6ZzPfW5sRmrYXuO8yxcaT
bxYzE7j/EXF/Jt7l7Wfu+2ALs5m9AUQXDzFw30Uu8PQ3+9VJs4eYebpnzIr4
z3uPC98anOvSbCMWJTyf5tHweftxKGtZet5Kzbbl4PLT3NgLmh3Ij9XOor+9
NTuXve3ipGcnNZuQ7/QGqZDIQXbSVfr4E54v6mk89RDOoRTgkK1hL3Ao4Z07
X7VJ1fZAqDWTMXBm60LwIwPNaYOo6ztNVxelpquTYXqVFSWx1x3inY85g/aj
7vHHVkUJMSV8wVD0QtCYCNfuhbjU4eWfelqWto+azZTIL68CBF+7/m3jWWUW
TZMKVN31TpZbFSW++yOFQsK6GRj2eknEKmFMhzgsk+qu5XazUT5tIotdITHc
/bjn1nCNfRdv2iTuUvoT7r2Gdqcm5dwrijJjTkIr6wf/02RvLbddaTXOK3ry
0nxzhCtI7Mq6nLSMBiiEyW8tU8jmak8ex3oV66eQFdFRKSZRUTZlUbXI1uOI
/KZ3zcLDCtlS4kWjQjZmLJRa5ouhm67DONbb2McKjwa5c2Am5ZmQwS5iVfS6
u5nbrkxQyPLpPhRzN6qrbbUZe1+VV6yc96URwlDrSl1eg1LRyXs+J32V8GjH
UBfvmDMqtcd28WgLhTopLDbziVeim6GLTWdO2ok4oZstZUV9/l35oF9rTlq9
Nqq+cbos/xQO814iLdFyc1xa4xzlzXrC9Dgjz2msW1ipKBOvRgRca9rjVx1/
uToRMHfU9vHgfcanr4u33yRrlfBczfwunnNUoCH0Lmp3uFqt7OTNLVDIFuki
km8vVciM9VBp/gaFLJgGpT/zvRWycTjP5iYqZBNRW8tAPkxJ90BzRvZ/rGxP
PNTqHCilAm65YXXOgUMUVPJud476jcSGiSL7Px3uSFwK+P9DHsk3g1MK2RLt
UXyzk/OmuqwSrqqrzZ5f2DzncA/LSPCxbBzNDc0l7biRIF+YBsTp+o/sdCPt
2QI577kTYqt8sItntAbn/OmmvY1KeDfYyXs9fxSj395IO2FE8PlKzcDpHufA
3Z5abrc2tDp38vqNcU37eLjDcagmp5NnNAHXtH1X+u9sUM49pCi7RxAu7bBb
1p94ssM5sAyR6+hX7Rz4NQW0b3dFh/OK/ptpnHPClaTlFdV3mhy+S+OsAQVM
6LmRxjmLdPJudV7aiWDh3IluyYbxp/vjhoB/1dfTfIewuSwXN76bzRB7OaMi
p8Y58D0afNepaueo70lPYlg6K5rzLrd+bALemuHVNsVJucKv3znqHOlPVH+z
u6nmYzhoKSB2CaGzC14G1uSk+UYhdLxbc5VuKWmcJkBiY+sNsId8RxDoh6WK
HKWpc9RjXF7Sjv671YniOueoB6SnxCT5HR/96m6n+e5G2F9pv55WuxMvNd1K
843BSzW30ziJUFq+sQNKl1Gpoi4/bf1XtojInWHy2OGOW2n1K/HqrbCOmOHW
/DTfawgurPVOWn1x2wbyey9Z9aVSt0UVpxWyfaMVI07O2zJnlBBb8tJMv3W3
0pcafgjtEB+uiz3Zqmjsn1upHOjk9c0dCfmnc+AFnBXL2oHNgIQYu+c8VhAq
SWHUvWQ8DG0tCF0Er6/f7cmds1yaxnmL7bP9LIWjIJuHZMOnn/W2GtR/OU3o
ZgPW3aSoUC7o4o2fCcaVUje3C0yzS820iuqPfu3AIHMRcP5KUz7ifK3KJ91I
8w1GpVMdN9IygvBSa26abxfix+Ea4EwPXmq/mVb740rwXU13liket/Dopixa
qQXbY3nTjcb2WxtqHDfW7RK3xiYor4PBXsdN9+Mh8Ft4aeCyQnZPdxQbd3Xx
HoxXec68Dcq8Lt5zq1FcbbiTVhuIo9iTn2a6Dbs/glHi9sSlTc5RVk9HKJos
zXd4tNKCA3hKGcmu78A9RtL44EvmhffM7eRtmd4MhtqT28n7cFchO470L16l
f/UE6+rFd3s++LUCj3oRF5AHr21DpbvAt9p2VErouZ62PlHoihvx4ereApPN
COvD7eD2cfwPNwETfwLWbezIw1lHc0D+oWmgi5fKibj2OMnLhGtefMMhKapp
4DEYSwa1aoRr+m653ii+zevi9c2G/qt6oP/9fyni7bSMVzhOoOC1chxPYF79
OLWH6T0NKiTD3eNh0I8WtVOs7Eg8BBqZRKoeOTMwyKEZeWqnLl7sMkXZxPlI
0U41OW5UgjJwRTD8lTqY6PTv4CEX0l/yjk2PGInOR498sPidyKGdrAaHdj8H
yO6PAbcf+IKEW4HceQXY6PotQjfcesQ1uUP9d9Iy/sF5XQNcP4f7qLrctAyV
t7qT5rsXvfXuz0urzcLVAzwYJxu3XjnAKUfrQJNz4I3RIfIKuPqxo1gaL+e9
noc0oX9nJy8uVFHWgizqXkPHrmXKfvC73JFOfEA2NNYWVNr+rmKZ24DsOgpD
r2zBGz8hvPERub1fU+JJ8OQfUIi8dRe8cQdeOgW4vMJLCSDl/WTkTsFDB35E
pdiroM9/4PI4Ih+40pEY2uMctf4JoYNXavpPQ8ySjiLEoFIhCxitG7u7eF+a
CFHQ2Hu4Z94QzFcDglIi3lypBl8YWGg7gjcxirI/RASheZeVTp28xSZIL6s/
gNynjJKj7B4ebB0hVTmJl3IhNwkg2sBwziDD6TuMG07gYzwGnQJtKsVLCcCJ
Grx0F+zxFSrFFkApiTqSmGoY8O1oB/ERcisOS5W53G5Q3gEEfwa977i5QVF2
aLUq8l1tX9jFm/tYURaq8oK77iqvd/F+MFCFynmJSkjS6GaqUNqTM1wDnmfq
Qjzx+djJu6BFZHPy60NgsJwVwKrLKE0LK1xBOrIRUreBsg80VZjtOyVP3ABi
mSZrciid8uzDES7K9HyqjZIHDrmudxH/9Bq3uNbrafU6L+11I8fEhp1B9H6s
AElk4KXLIO/VUBjIB3l+i5TB4RSM2KgxxLrEQwCchAMfgmAqIuZSPCHmat1q
ilPyybvHXllzo4t3gZj78unNQlU8k/cPQ8w3ZeMYzE1cTAwwdPlzslCTeBIE
cHCUsRtADngMAkerLSQemIrrjpVKcMLPgKhGIGqgbLo5ntpW16SgSZM2mBni
k9wQr8Qnqb25Gvf2gxABxES+GqaQHUEpW4sTymbx0u18SJvQ21d9oDvLcbg7
JxWyDXhbXJqiLIiYpv3CfnyahrqfC1EMBzuvzZuoP0pJ9nTxXjuN8oGv7qSt
N8LR6kvYQqA1uJYYsDXVjLXrB+F8g5e2M62XL+9pupCEMy903VYJknt/jJxH
m4E0ow7SrS1HgR01kBvTTVTKI4c8LLaT90Cdl8lvDdUAu2pwNIuXrusfFa3P
gaj3jQo/Bo2Kshc4KhF1tHY0+lx59XD0gGw5kfMCE9j6qJQHLPoVZ2Vug0I2
BW+bd1hR9pbo3PTcA8/gd3fy7DkSfPLLpwMwnOj+sJejvMR3dxVlJBquPBHt
NRE4cOhvSPF2NoFz/gVlI46nQR2qQWfutaAhPu5DprTobuvHSqUdWEgk3ins
yCh9WQnBi4zYEH+1/c4QOOj1mwgE4hONUhHX39DxfuQELl7tNUrFh9nwE57w
1UASUfaBIKeVbowTQfZu2kyMsTM0CoLGADjRTt6N+YjWHpDDBVMi/22Uz9+o
vA6MCSJyC9CsfXhpp5+ibC1Bq6TupmrQBD8tFP2aP51s7/eDRHI5C88rb3p3
JHqDH8HT+TPt+VeaCkIVslmjtet2F88edyT3Kto/NSrtO3n0CA8D1tLE0NOk
L4BvG2qci03+LhwZcNp4dicVZfkqLHriCEdzu5NnNzrxfwU5zS71Cqu/16/1
dlq9sTpMD14FRH8n4drbPBSJ47i8OuZkeyLkewdUY7f/MIGg8Mo6wmtBuPRG
herctBOBBCPtw7/wJOT7kuc+Ub1QVSQoPwCSr4iB0qtpprjft+virbmJcsc7
XRCzTuAu6DA4oz4ijkF8+kSqxAPS3oSeobSfdhF5d35a7Wq0pJDnp3H2EEl5
Xlp9uJDgen77oB8kkbViPCEH1DgtuJOszk878QAtA2rAsSAr/5PmMXKZ6BzY
PlqPYW1pTicQbm9XyfbwuutosAbI300pquy+3WG4wzlq+hMiM7wq/xgOdthO
WgpsaKgZNmA7B/4wOssBRf7MmbvKDw2KMmt8FX6mI7+xZiHYzxjVvE3xVJXG
L1CCP/SNxhORdlgbRxHszg1zAlZd3whJlrcnkd+85MVPjMBHT6jp29i052R/
oljuHNWpWt7YL6tLPAk8ziKNylGWKspWE5NmVr82kYxUnBeQMkFQ34Y43YgS
09/wxAjaMkLw5L0H8vwbeDoEKdL6xaqo0J47XJObVq83cXBqkQO7T2nDdpyT
5VOqHPrXXZTry9aXrZJDJNxOrAlup5mKTP8Hfdp4W5DnTJHfAi2ajvLTfvDN
qeNUFrtngxLCbjwd8Q/SH/sh+a00001EyPqY0LFzCNLUjL8loBCNsEKs7e3i
3ZjHXQ0ZWax8IbuFZ1ehkOVqW6H8vFJxPc10J8HvT+JLKiO5LSI8QKXCI1Kf
H5TzjY7ed+te2jsmviAA3nx4r9L2mjX46hzFOftJuBolHf7pIs4vWJCt302M
nJfwTtVR4aiSvtxoIg7uUmn218hFm7iuAJYVYj1ICv8UJygOQboUS//3rgA4
gFTNRtGeAmUs+J6PKozqtpr4qALunVNKyKfnQoIyD18i3OniHXPES7vlvC/N
CF/vXadA6J6CteqJXQS6uxPkKnTvXP5XSijn2Rvio5+qm1egtJfz6GvY37hx
7x2W711aN7dROa+T96UpQdhhk5cgAch6bqU9E3fyxk/gj9oTco76RzXJUAXN
DULEvrvVg0uVsWKFTAfPBW8tBU88BQoO0KT1r20oCKgLcE8O6Zgdvu/UOgTe
nfCPMNvND2hNk9PFw2PCmBPxY0ptzL2z9Q3GzU3sUm+/mPu+y+ZW0zxkWbMO
Z9bbKVudoxpUOPVpabaBrtQkhoID/Y9qCbe3su6jHywcMiJwe60D77RX5Z0q
anr92mEBEiLBNTGvsSdOWXMdEk2zUc76RU6a73FYwCU03cIXcGvQDlpKz55O
Hs0SlTryYXEzC2/rh4Tkeyg0LZDztuqrBO7opwTnupXYOYy/KncarrkJGj4b
7+HYxTMyxtCbnQk9c5X9sAoPHpWnlypkFbOAq/2HFOBq3DQGPQSu0xdfknfc
wNHaYjoK6z9hhfoOd7by62m1l3E30QNtKocBa6U+fGUvh1WjOb6YA1+eYYGX
wIWvX2tLbAp1fBjugJRWopq4Z/dwK7i1+xPxFVOsnPdho6IslqZa/Nw83J+4
tMY50OELYhsjrRbf8EQYysbh23jzDylkDXjC4wAR9y1qmgfm/R7f2bsBmhOL
v3SCddoTIgcCF/yCfqnkceBTN74ynPxYObSw/1+X72r+faXuNDnJhfmVIakW
v1tXMHRBkslKHr8I67tKzXozEK4o3eeVSiKY3uE4XHMr7cRuTTQe9GuHJf1y
FfntQ8Ot4JJicecEAewZrLJ+MFItL/Y0KCFJuDHaUj44B5bhMdMbGNGEb5Tm
Q0R9jdZ5HzeAt3+Pl8TVzlEVhI425+V3DPk1gTx/HbV8jYFuj0aHBmDQPjxT
/gR5zyGcVXtOgYagneKWPFgTniTy7UaFLFTfdByr4VbF6W9sR2zvveSNS73W
EvD7N0MJJY8GbBvmpmZX94436fpiXdi/MpnrkL230Eft3sZ18s7PwjNksZx3
k4MR/lxuP9wDzqhslFusLoBlQD7utG+EgdPOiMLNrxVUQrW4yofF9CFc7HaQ
8L4d7TBugH82VRtM3lBNHyzNCbNTgNlNQKV+MLY1KHdJac/v4vXhbe17wFFi
Kofn6A0L9nrP/6/4dQOPX88Jc8wFAyZMOV7Om7xPYFlsMjP5Z8890d/N+Pk/
30UrfosM2LMneWaJ58/Rx5M3ef68IyA5eolTuWTbPBlt+t/rrkYPyePNcp9L
ZNto527tOnnzQ8H5PWaOL7Fg9D4mv10+dLWz3v2gffOvEo+rexoTLYrd95au
oJ/Qlv1zqlFcej7W7NrdX8gWd+4Gn+470pMs2yL8+nbNBxNlf6P7O1/urxLL
m9F/uR/kQ4nxoLPOPcyWa/EjaXrvydehiqtv690v2fsTA7vvbXtIOfeWO+Fc
Yeweubzg/i4z6x7pOfLZ+VeDzaxXk7ZzU2T+si2feGdZP769Ii7NpFyUsiyS
zH98myZz2XZ+Qv+ROr1taPafauSnhqMfjfOYwS2On9R/pFUv4nzytvSXXT23
5YkNZfRvtWVRd2rEbQwK96xxOrlGPnQ+cbiP3WqYPoP7UJHXf1rWfeTHm+JS
Oy1E493z4nOvd5hZL04CVNY/BqTk2AXy2TsPdpj92l/n/i4YKJTv+AuwjyCw
v6XY+1hecCXS7FoDwt705g4zxwPfiMdv/gsbw75xj320rkv5Yx/bRBfwexh8
u5/dgzB9GOrUzy4Zn0lzkTH2bzu/0EL7zPGIv9zLF0omMMwtOGePD8ssU7b8
Hm527b7kHNnihHyH2bW3aPwTN/eY5T4gpNld/7pjCN5YK3C+1YAcBfMGliZF
WrxTbrWI2uh/RqZUKA1ZhoHoyvDw99j4icodp2+l//oaxvgNH6LLuebt8ONw
s9xCDClEYc+em+9PXxW37bYEXiU9jtx4QVnn/vfE/iPRTAli9t4HsfXDe/5y
98alOmDaHvupQFzqfjAMxF2w468L4tJuxPB/TtSIS89RoBTRcF5c+loLtSlu
iEuLUVvUbmD3dihsXwCda4HtEbfvi/9K1DW79hWi5MeCULNrPkk/k8/uuRBc
Mm4Uk8Lq3MtXYiYjmQQCiza7Fol6rm8C9RxGHFvfHm9mvQbaLPbW7DJzPLUd
UTsw+Lpn+Kb4XGOwWa5Ssh9ZwJ6JVz8W2Mulv5DP5j3eYfaHIvuASntOyJV1
fWyFju8M7tPQn/rYZo4VBNv/GWp8/0m+x8w6Bk05eCXaLLcTOzhC4opG5YSr
4tIfRyrsVLP3R35OAhZq57fH/6iMrnMPiSxElvCx0f3vSf3sR3pIK3Y09LFv
L5nB/S0WCtHRoNE76vuClY5726zO4qYSvQ6U7a64NAPn44QmcWme1qhp7vSx
kyeioeI39LMNdJBRKEDpnJD6FfecAqXD30bO6z/ys85FRGrS43BneSLgk9fP
/lk3M33xZ2b/Xe/uzUCCjhiq3DNYEG/maIy0pCx+fvuHpi5x6Vda50GIG9oj
/b42LXwg/sudKUYe4PGOOncva9wDRNa5HxRA6eLzfni7EZVeg39gpiO4GrCj
2S/NifHfD8vFpbtHEXNe0cem6I0S//YGd6+oUTbyELzFryOdxR8gKusu3FYK
QEjNqLRXDhrliTRq3YMeT6YM0U2u6Ry6m5gArJ/sMIObF7u3YApB3PoLnWaP
xW3bkbt4+Tr25AXl7b4jdcjTaYsvxP803N/g3jWfS7Clcc/g1feN7lemEE6u
a8cQMgfm38hLdKicJ1XL8hz7s4RM+tmbTMH3PO04hfuevMfi0kHcQE6CqYxH
pe58cHhnjyF3BFx2vzQTMTCywV13nvBH3bMi7fymXfOVHYq+IyW3a7eKzuuk
swLWmYpy5YqmaDPryFGucwyYGmO0ioDnqcZJ/nDi7lPsa6C5Kj7v6gdlH/sn
QKAbIRCRAA6z0apDOD4p+kfScdaFX6M/gRlZxyODOvEY2DqEu5x2MK0GIpTs
ET9+XwC24HhX7VgAHehyCphuIv9YJyX4FztJKa93v0KxGH9A+PWpq++Hru4y
u/Y3crEnHoea/Rpb797FxwjePg8fbgd66iQQbvIbI8GAonXSkeQsmuQT5co8
QHYe4bO7wAVEmln749hdAIe4GWFXXxluZj33AtmivhJi1ekS95Avcf0Lr3e3
CgflvBneCP7qL9yS8sBek0YrH8iJN1r5/m5wf/cv5QO3LERz3WkMNbPegLsb
cDzXlIQL2mN2TYy7JTnQ8U6yY6SWum8HA91jGkF4lyN5cnFbnCoeRv9UABEl
1iz3EeGUP6x78KEAHCofp/ZUJTgwYGy/9DxI4MEu5QGGmeMzIn53OTe9H7wa
3OBuZYPM7zGYWggi9WpsA5Dah0j956sH4tItSMjbG5+LSxNQKarutbhtWOVh
9tyUnwZgMu6977wWl66g/AgqeVc+NM1ib2nlaF0a7GN7Go5iUghYaDmKBtGN
F4bau9kmU5Cq9d+xe0AEMpDTC9wkQZ9yc8vmpe+rPUH6T8+nJmDlSzyCQqi9
JsKZCoE4d64qLl394AeGok+/Msqp/roHHEw8ciYPQuvdvVYWIsN72+C+/VQf
m6ezDXxedEMfWBl70ySoPHw/iCpHonciZZxfED1fCVGiD1flApj1D4SiaQ0o
kC8EBIv6u7sK+tgGuGd+u6D/SI86s4i+05jYGIIHMBDLtzgLFY3itjcWYDHF
t9N/rexPBLt7Q4S9SnHpwdGqBRbohJx76MZ+5NxLn43ObX4EzcO5Ft9gF0WE
NQjYg9ij29SXYItrDxz4+kdlH2Vr4aWjzRclbxo/DJ7DZVelEF/oXwia/BSf
+DYItfkskaOsv9njB/71MH2UKzrZx67THZEGfQUgORR1GvQcjNuesO0NNzv9
INY4jzk7Es+/aHisdwJSv6JnjZQLJEp5fUdu62QmN03mTCseTpxq0a41/uuB
AuUyksicNutr7J3fGP8n7wv6Dow9/m4eBB5DFJ/6IczuGY+nRyC/PXjM+gBv
vxvni0Lhhn6QUcUo9zb9prjNm/Km2X7M/QNZytMHynZJ91kMy5UrhT4y0TcW
mOJLsm/M4E3xS5epP90Qt2VQLMCpu8h3Tbqp/AT+41v6KG3O72NvMhqdk9W7
61riPhc4ODwc3uBeeUFV3bVAGQk5Yb172DzIlS929fzlPnjffHbLFyhuuNQE
b3iQCPGLlwyYy08gOUM01Z2KOn+9tyDaWRna6I6+D2BN3G9dt1+n5QazoSjU
eH5KnWAv42YQgwKFg6TiUOM+DF6JJRHr9i8U3prlasmtP2Y+jRX2qNkAwCx1
AOwEDcA+UQBMKQUwO9GtWSU/ARjJG8BYMwCMMw7AqrQBLEQLwHYkR6yj3QAw
yjsAE8UBmND525ygdPPgvwTNLACLYQBYeAqM5ugCYGZLnh07kwZg3e5otGm/
/iWo+m5zqPHfYwCsH4Gd/PbKLMpa8/pjZy4BmP8aALs1c0ydoHkcjNarDWD/
mRK0jvYcRkveAWBFNyeHPvLZ+PRGUO0cwK3XCMDcmAA2dT+MNsEVSDgEYC2V
MFr6Vgad+K4BukN8hoLuECew0B1iPeIOMVsywVJGnsFSXSAWGR/1Wn7UdQw7
gCrBNlG5jCT0n0xZwiERRcY/Sj7+RQV0v1jw+X6xL2r7TTj2v90vVl3XVT3+
5/eA/9dGIu4J2/Ct+f/lnjC6AIy+28AuysSv/epsF2qn0OmCQB90iO4cRgtK
d9UcgyuUaEdZqk/QuXB8SJ1FUtuSzAB9/Apub5kk5FkWib2TWsVzLV67QGC5
4U9eycvVjoZxpViRkMV0keqQDzglB1Bc+Az/H5NdRJM55xdu229CXnI8LP2s
/y1zc4ptRpDwW/9Gf/99WMYULm2eru4bLZvmdOnhEkpxIXP+Zs2bGYfXsQ4G
ZL6spW7iXPTXWszfH8ZJmcunoCtLdporSzspmmsr48hOGUGWh4m7P1mUQ+MO
r0362YRG1X0uScJyubqayzRvMPXFn2/3+ettMT42NeM1JmRF0nTHPwcgLuUw
dn7JDJaboROW/KVvshM3OYxT2KzbhobB9DTD9GmGebhPaLjF+JQlfm8p4J2w
RGv7scy3+88wB5p1LdE1G3RJC7/tRDLU3HbyY3gHHBOdJZ/C70e9E3ZozeVO
EW4BT/q1UDL5FXk50Hh2DKLRUktN43ZT8pqMoItXcBo3/05Zatrof0xydpZw
Nl+LY8fNQ/ehUlZp7kNVmkv2rd0fMha/x2PlVFUeoLtlzJUwjuVqSy10p2mN
6k5TpvH+/4xzMae0r6iaXEJza6ZRhdEsri1dfZNGsqvIimSP36t4Ie3T3c73
zKrQry8S3jtDD5Po1QoX8XOlX/lXmxpqW5zmP0m2LNffSRmXunB9ZhWbQy3T
uolOZXPwM7NvyJr7E3oih3KBRMqhlujQZlpW61zK0i6achcr0SFNzyiySjY+
QdzX1KfFZXZSZpTry0irSVEih8IsUqQWVX3Md2EmZV654KDImDh5u9mf/uPC
rCIrkXFMSaHMdQ46fXlQc8M1yVFztHUyO6fEijLhIswB9d9plGn6eVU6rvt0
W9EV2/TPV2zfaa7Y/urG18tmhjTTiAOqE2qlx/RrrKQTqhCJnUCimzFx10Bz
1/eVftGCcsEdkSl1PqLkKVByPcXes5kWQyMlFc1Hx6aP0EgkH2PbJXQGiYMu
jS/GUsaSXG6xuCU6LhJaNnO9EX7Mt1A6cZutuXYbjSTwZNEp46QY/diE9eno
gm2pCD+1+/mC7Tz2wVKrZNMqgn0Celzmq9Lp5fpVoiufzdw7ySxpfarmtGsm
dSE1mxpbpVMybzDZGTFN8vkKq4fmyGoA+2KpFWVSm0h92hVUQGsmI87faJ09
8x9/fXN0TTPi81XaGfjVVBbw7swilkE2c3cWuqYp2sflbNsaqZdN3QUcn3Up
ZYkPIlfkqZknhP0M5jHrFamOxv711bsSq6JJ5cbUh6ruO9AtU3FWLkuXSgFv
TddXHXQR30X71VsmoKOv/fHhgSN/L6vu5H3pOvLQUt2n8CYasZ3e0PoJHQCk
7Uc78r5PVpCebOjJTRsoO47/ghnQc6tBXtCgKGtxwE8itNud6lgYtnmJltun
0BrnwLgvtNzsK/rz0zhbhStJRw73XEen1HyP2o7ak3zNGb3HfT0tY9UK0pGw
nhtp9Q9H7j8e6lCKFbIimuk4Vkvv5Z++hSHD6oija/ju4bnWO1288xy85CDn
GVGIrcz+20NNt9NqgwuXk540tN5oWT2O1WCbUHPX0FGSpohZqihboPrFWJzW
nxiqKJsiRIfgAtrzG+oWynkP1BwcakTHTl7/gEbP6eSNR/PE1Nh28W4Qpbgu
nh0xd2wnr4Y4hrD0tPvmiWUuO40EL/KH626knThsQ+y4t+YNd8Tro19t9lW0
x51Gv0OfN0bDVAMJW47BKE23O/GfHc417eriTWOrfk1asFE5t4tHJ06IbFgX
AjSxvVtvN1gCTTkb6pyjFugQP0JWNiWGezz+B0sucKh0RXuh6ORrTN1qxFgQ
yHqKSrxNg+hs6R4kMXT2+Af0I3j8BnQE7MVIKaUoZB8mwxwxGxSyJ9MRAxMB
WkJKlfPi5LxpZOKAUr+jEp3rWgpasrT9ZhpnOSo05aX5bkSF/utpvpuEgMCp
6utp61O3jGCMBkkT0M+UasfQ3cu13PJO1iV0zkmaTHIOPIB23OcdbncOPIKX
rgCljjil7fan5Ilh347eUA9VyFrQPvn8k36SUQpUU9DJm1Y46sDI8EsHvUjz
79JqtyLUDvfcTDuxdORp0cQmJv573HWxVhVx8rKhqf+0omyWkDh7E5coT5Tz
jhHCG+zk9UeOtKTWgfAm58DtiL1iwB79lpyHfiym6+GnwnYmthaA2uDynguj
4AVFF6+vBmnUXngl592sZuFq3PppWJ6qr9KD/LvK+E7eA/zwR5LYkDgAEZ9W
l3hSfQDiiDz+alNBvkK2dunIPfjraaal+JGQ/qWm+JmD08QJkdzLo8By09aX
4e2KIzhY4en7eDWPTfMaCQea9BB/kR8wZRzrrT1w3noWFOLCFDlpvuuAowmt
OWkcwp5z0mo3IJttv+FXcz2Ns5nQhby0WhyuJy+NE4TLoON2WsbyFoUs7Zn+
/f2pf8zuU+jMaa2OqTGt9K5eF3JrphhLtSU96a35kq12bgnogNgD9lr676yf
bPzj0pRxnbwbhK8bDLtMcgedfty/5gJuX5UK2cQpSIOvKGRzEa43KgBXzpcI
B1BaXxyHUzW5aZztyGMcaso5g0jrP6yQfU8TjiR+DTLPuqEuXr9aLEMblTe7
eD9orPWUEqT6HLmMJrGcd076//jp4cf/+tPDwQpijZ+9Z/DmDuUBWTJGs/iH
Ha2DFriKxhtXgkfv3WUzR29B1rkzvV0mfN5y+Yfd+tPIFVqMmeM4Ypfkds1H
5Q1x6V5Yk4bl3RWXnjj6ikRTOrLMcvWJjb07Ne+bYE28mdjoiL3d1KN8LS6d
hDY6ek/cFbcZnoLCTw/EpeGmL/WZ1qN2en4LNrtWgrYHJj4IN7s2+QLZoqEy
lNhVQvubHg9i691DZkDh5sd690s2eNPHv9zLbUaPAivGZ9j5g3HXWgKiPAen
tsvv/zNbunNqafCawLNnXxcMFRrzf1oJjAluAHzWc/FN+PenLiid+tkzd8zg
PpXjuxlHbqPNeG3nBwpTZUeD+8G53FGTPG4JPK113E7okhIaSX11X15wRVxK
RVR2/dgobmNlIvKzohu7Pib2sx99AbPt+Kn/SGsksSkaeuJmYmMxYsnt5+LS
WlRQNIpLtVH/mEEYyQ6Vwn6Ui0vvopdO7eK2bRtbtloHW2Qo7aXtyuHTCiX+
UwO+9P7Xen949ML8KizMz/My7nhyT42J/PH7jIsXP4ab5TKQuKpi8x6/RVvd
OUcJqZyzeyr5mXz2dkE8plo3T0LrZhr1zA3mQ1Go8fiUvwS2jOtB6aztj/jm
z44F6EIhcyy0NGvBq0GyS6hxMQmAX0p81u0XCy/Ocl3IBbCpAOZjAGC1Y5b8
JeimAtheMoAtlPqso10DsBJfADtjdS74UcR4APMdm0L+vBZNQt+PpH5phT7h
h5aohhySpRTWooJMkeioK/uoiHQIOypcbog+6WdIpz81ofRyDake4cwVR/F8
yBWlfy4s/PIbk9pO8wxnrrnuE8Ft4E/+wQ3lWUXqy62b1beExk2iBvAf+XBI
j02Yl1hYA3/+xMXogzEayL1qyO/NqFv5jyK46nRMLKzQ5zTw+YFVy1lczkGS
Kvur4M8Pygzif6WtfY6dkskUsN7Jio4AvERquTOYxRrHNbqIblquwTNQE03+
9h9WVZGV61kqj6Y1Lsk/81cXTrohN5taJlzENQ0UEh9iWoVniJGYOkMsckmn
ZzPHGqjuN/VpbxFukJTrW0Kum+5xXysGfSKJWELU4t97EkJ+vXqs1KxcYOut
ShMnzLpEioQEuRDdTbMwN2pDuPnhOewkDW55rIPFViUULRVur8im5foODXyf
hHQ6+qBLIkZ80EVow/zSsoqkRXrKdDU56GLm48Ot4If80k03NCxrIE0v09pv
m+RDTc0oPsThfgX4uuvuY5WSu6QzJJDUP6GTSOkGKKedqZm3g1VVbOU6WT3v
r66wSBJG04pMVQSf1w0SLgeCPYBglnml1lVE8Dh09481ViPf+dRc/iP+crXU
5Jm0bKrhH+hm+1hgaRW+EnCZpZmzl9ULcwap56xACzPfDlqL8C/QuTXR6KiT
OMwawsau0z1GWV7gzRddbi3AjzDuFrcPG7BvxKwSbq6eGx7tjresiUdn6vsT
DB6rUoTqj+HV4wHmXLVjuB30im3qSWj1mpbFgoxv0eV2pXi8Ln46eLdfdYHY
rxjPCnc39uxR1vTq+Iw8EBOvbO3v9iLOnOw9rbwe5gUz2oVWr4lDCPSFuUJ1
3uXq83g1LjwO4XOoejE+9ScxvZI4ilDRo3hscmpkQreqemsVizh1fHtYHofj
nxu6C3U/2WoXi7rvCduNV+Vr8KoiYayKuor+D3517qPO3bZPayGylP6coZoh
Rwd0cPt06/w0ZWzYDoTwoZpj0WgQ27AQvNq6BccwJ2wNwr+i+stmL+L0xeAp
ZV4n5G6vxOFmLq7EiZ6ewaZ1j5eTljf23/qIvyowqYEY7d1/A5YTjhMhOMec
NHm2HFpqbl+H6ouYynU1y3EAMf42zaQWr94+CfH+Re+Gmjix2T40eJtTY/Wn
8JrxOIF2oV9Aema3tCNWzCKkM6+pIzF/XTX03Vh9+/2o2P8aZ/insHDEoqX9
F5oR+XnePfOHaq5vQFlF7yHFMreMZwhPOboWFTARb/zpOcKkKS8Urzb4laoW
BP0xQzV3Di0aeTDj09z5KJErard/3JR4qI6dMuIkcsy4x8Q9gsbqofC6qYaj
FlB9o6ov4qIRqrZipi6eczo01SWKf/pypDIcNVk96hbBujWjcn+TDSOrz0zq
EUPqcn5ZgJh5smbnyZrd+euIxn6S5VOq28rLTYmhC4Ez9qfap8Yh3jqEW7gj
K6ixw40rXwcbsTeJoXjgiccDLU08gGBgKDI2rGIIHaGtlEZ/yis5y4E4kMbU
if4vceAH2pI0JvsoEQeeuqIP1Wm8u4/mtqgptd7KNYA6H1+mx5R0+49DX7Gg
qS8gZ0rVHmIXS1ZkVSJVe+oW0lxP/5iSwpgJ6F43XeMK9Tj+xg4/JE19i5kX
WmKsZ2UY+gjMbC72BbktSYD2kPB9Kgd8L06Cvm1jmGSfEeRx1L80M9OFxcxZ
wUheS95cyc1YzNSeQS0SztwXcky4lmfKwLCvgO5jyEza94Y6IzW70kr4ontL
qwtCkR/YXdnRh8yq/VOYJ15tsheOWn0Mpq1joyV7qyJUgJLgQzWEoUHOvOC0
Mu8tfpjo8LoqkN2p9htPoPp2l7fa7hr6e5tUrgn0c2ioJucFAvhYYSaxWCq0
fSFW1vzLCRAuBdaBd4blU6nmhz4r4dpyhEZTfpND9RgrtLyOrP6QuG7ZKI90
Okk974BfzfnROjw1Ci2IbobORlSIm+JiUHVXqAeqnmyiReNvw+xH3bJCS8C3
jt5NUjUJe5U9uBdqHwi1QuwK67mPV/N0NLpogeuiq5X6+8u2oIvoO5xutAP8
RyxGkfCeP4OaBWEGKUm9aNFBDgvibZGZEGLSBNC1EOEJqT6WTRU5sPBvMU+T
GBZasBPz/SQWDsxW2wQ3L3oEH3s6GBs2Rf8p14Bs5UGDhWaMt2vGEp4K4G7P
CNswxPER4fiQCHwwx/k/kKlnmoWgMVxqkb8omatTqmvCkgqxHeiKM/E9UX80
S84vhsLNgzmXLcncpcqUBW6f6Rw3Ylwy8XsAIh3L5zJdaI9/wUSWDunsZDJD
xPet4r7RIlkLds7WYghChFQqaZsD/ulm1RzX8TnmjsD5G3zspaPzO4uLUpdM
EfqhwY1tuMjYZwfxJeZexFc+8NXThOniuve+CT88PURlrLEs2hiBJ/oaGWLx
xBTRU3/X3vWdc6mHXUQSpj2VzSkXGLqpgf1p39h4ssrdSovTIRPemMQO4q7T
Dtw89SXnqcRwd4ylwCq5HbhUJMR4tDJakn86PUTo8QJSPY5qe/BZkYlHjZWo
6mfXp7GbTcu8Sq3Pkab3vimUSH8oik7VkflzJcdlc9Fo/5zpyiKxGUjajF1o
PBo9yT+LHtM9sURHSgOn5KFfFckFz4El+VfR41gxJdxMEQdtHp4gaXZcJ0iK
rJJ/pzbwHUJ8aOgzCDswtRdqpvnzHxVSUTKDPk2SkFmub1VCczOdTOV7pgM7
DNE1d/pTKxFLF3FxNtKzCKRnSjHNnWSl/15+IcKLvWgwVsx8YLi81K/JKJOh
W+JwyIz9nRb7rpvW83Pz2e/xjb8pXK0sj1K/6qnjRt05vElobajJwRTbshRs
7LckMPGT1azx1epx5PPt/dEUA+M4K93YBQkYjcKtCG+SWi8yfN+Tir/KdxSN
DJjjr6snFVNxJNvV392O5Kq+ta3Lskght2o5CBcmUX+Y6Zv1Nknn7pw33OEk
vYE5jPcM9Se+g5gYhr7Yrk85OoDiBWovACWeA08vlZ34qmDR0xT+DqjWH11k
4vevIXg6qfQTG/EeU8GjP8YY8T139RN9rx+bjGEOMCH6rvtEjBgLb3fAsCXQ
Hgl1K/gbPqI9D9pXQ/0n+LtyRHsXlJGPUD9ROwM6D2KE3aufeDvMyyIR86qf
6nZzEmHP6qe63Y5E4K5+qsdfBvUJ2OenGj6YRPy/PNRPdXsi1G2wz081H35X
fYZd/VS36wGzDKBePAJPRG81iWhXP9Xwr1Vwr/9FV7+q3v+vdoZKhuqnut2I
TNCvfqrbrchEf/VT3b4A6mOxz091u4cKzuNf8GvJhDzUTzU/Q6GOfkhUP9Xt
R8jo/xjw+alu/5VM8Ff9VLdjI/SRruYPiyjrY5+f6nb0ZwPYApOE20IgmiMu
IMpurkAQHBYcExwQErw7ICY4PMwtPCxoaUBwGPrrtzg2bBNqnGzt5w1v44L8
/FbGRAUFhLoHxXgH7YxxC4gJQL+5+vj5oeKKoIDNxPv/+h3n//p15v+XH3X/
F6azHv07MP758KCdEUGbYmYHW/v5bd250y8iKCo6PAxoj9nlF8dfHBUUtNQ7
NjQoKngTPlLMtqjweNUX0Bft3BQUgXiBjxMaFLopYtfsCH6wA/FPsJ3titiw
mODQID9XwCgmaOQ4owb1iw6K8QmIioleMorvfg5zg/g2NrZb/Gz4Npv8bB1s
7P0CBXyB35aAzXb2AfDH0UaAC8V1SVhc+Ca8E17/MiogAgjxcw0ICcEbFu2M
iPoM4x0U76f+evuiqKjwKJhfQ8zKmF0hQauComOAw35LVwWFRYdHQbdN2zQQ
HgFhm6EnQZQKAk2AM4uoboUBY4KigI+qBjWLYCYNdzTsjwIehcUEhMwOCwfi
A6JnR28KjwiavTloUwjxhffgLUGIj7OjY4BLeP/R7UFhm/FWa5vZ/NnW3M2b
A2wcAm0CbBztHILm2mwKCrTfbCtw4M91tA/YNHeTw+ZNdvwtdpsDdjrY+dnZ
zorYNCsEfbX+y6WaT9r///qg/ez4kNle/zKO2V7/l83jf2fCfxmIiqyR6kT4
jf8DehXZsg==
                    "]]|>, "orcInstance" -> 106363392, "orcModuleId" -> 
                    103468704, "targetMachineId" -> 106019200|>, 
                    139905716250432, 139905716250288, 139905716250368, 
                    139905716244480, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_de42f23d_fcef_4235_9c96_dcb8cb63c3b3", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
ahQW/h0E8MDX
                    "]]|>, "orcInstance" -> 106435472, "orcModuleId" -> 
                    106341632, "targetMachineId" -> 105989296|>, 
                    139905716236832, 139905716236432, 139905716236512, 
                    139905716236288, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {4, 64},
                     "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "38fc078b5b5b7598", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 447360, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 16, 14, 39, 9.917931`7.748996069242293}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 4, "large", "high"}, {
          "very high", "low", 2, 2, "small", "high"}, {
          "very high", "low", 3, 2, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "medium", 3, 2, "medium", "low"}, {
          "very high", "very high", 4, 4, "large", "low"}, {
          "very high", "very high", 3, 4, "large", "high"}, {
          "very high", "medium", 4, 4, "large", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "medium", "high", 2, 4, "large", "medium"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "very high", 3, 2, "medium", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 3, 2, "small", "high"}, {
          "low", "high", 4, 4, "large", "medium"}, {"low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 2, 2, "small", "high"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "very high", 2, 2, "medium", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "high", "medium", 4, 2, "small", "medium"}, {
          "medium", "very high", 3, 2, "medium", "low"}, {
          "high", "low", 3, 2, "small", "low"}, {
          "low", "very high", 3, 2, "small", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 3, 4, "medium", "medium"}, {
          "very high", "high", 2, 4, "large", "high"}, {
          "high", "medium", 3, 4, "medium", "medium"}, {
          "medium", "low", 2, 4, "small", "high"}, {
          "high", "very high", 3, 2, "small", "high"}, {
          "medium", "very high", 2, 4, "large", "high"}, {
          "low", "medium", 4, 2, "small", "low"}, {
          "low", "high", 3, 2, "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 2, 2, "medium", "high"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 4, 2, "medium", "high"}, {
          "very high", "very high", 3, 2, "large", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 2, 2, "small", "low"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "low", 4, 4, "small", "medium"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "medium", 4, 2, "small", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "high", 4, 2, "medium", "medium"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "medium", "high", 3, 2, "large", "low"}, {
          "high", "medium", 4, 4, "small", "medium"}, {
          "very high", "low", 4, 4, "large", "medium"}, {
          "very high", "medium", 2, 2, "large", "high"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "low", 4, 4, "large", "medium"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "very high", 2, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "low", 3, 4, "large", "high"}, {
          "high", "high", 3, 4, "medium", "high"}, {
          "low", "medium", 2, 4, "large", "high"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "medium", 3, 2, "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "medium", 2, 2, "large", "medium"}, {
          "medium", "high", 4, 4, "medium", "high"}, {
          "medium", "very high", 2, 2, "large", "medium"}, {
          "very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "low", 4, 2, "small", "low"}, {
          "low", "high", 3, 4, "large", "medium"}, {
          "low", "very high", 3, 4, "large", "medium"}, {
          "medium", "low", 3, 4, "medium", "medium"}, {
          "low", "medium", 2, 4, "medium", "medium"}, {
          "low", "high", 4, 2, "large", "high"}, {
          "high", "high", 3, 2, "small", "medium"}, {
          "very high", "low", 4, 4, "medium", "medium"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 3, 2, "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "medium", 3, 4, "small", "medium"}, {
          "high", "low", 2, 4, "medium", "medium"}, {"low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "very high", 4, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 2, 4, "large", "low"}, {
          "very high", "medium", 4, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "low", "low", 2, 4, "small", "low"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 2, 2, "small", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "high", 4, 4, "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "low", 3, 2, "large", "medium"}, {
          "very high", "very high", 2, 4, "small", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 2, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "very high", "very high", 2, 4, "medium", "low"}, {
          "medium", "very high", 2, 2, "medium", "medium"}, {
          "low", "low", 2, 2, "large", "low"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "low", 2, 4, "small", "high"}, {"very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "medium", 2, 4, "large", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 2, 4, "small", "high"}, {
          "very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "low", 3, 4, "medium", "low"}, {
          "high", "low", 3, 4, "small", "low"}, {
          "high", "medium", 4, 4, "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 2, "large", "high"}, {
          "medium", "low", 2, 4, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 2, 4, "large", "low"}, {
          "low", "high", 3, 2, "small", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "medium", "low"}, {
          "very high", "high", 2, 2, "large", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "high", 4, 2, "large", "high"}, {
          "low", "low", 4, 2, "large", "high"}, {
          "very high", "very high", 3, 2, "small", "low"}, {
          "high", "high", 2, 4, "small", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "high", "low", 4, 2, "large", "high"}, {"low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "medium", 4, 4, "large", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 2, 4, "small", "high"}, {
          "low", "low", 4, 4, "medium", "high"}, {
          "very high", "high", 3, 2, "large", "high"}, {
          "low", "very high", 3, 2, "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "low", "low", 2, 4, "small", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 2, "small", "high"}, {
          "high", "low", 4, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "low", 2, 2, "small", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "high", 3, 2, "large", "medium"}, {
          "low", "high", 2, 2, "medium", "medium"}, {
          "high", "high", 4, 4, "small", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 4, 2, "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 3, 4, "medium", "high"}, {
          "medium", "high", 2, 2, "small", "medium"}, {
          "very high", "very high", 3, 4, "small", "high"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "medium", "low", 3, 4, "large", "low"}, {
          "high", "very high", 4, 2, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 2, 2, "large", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "medium", 2, 2, "medium", "low"}, {
          "medium", "medium", 4, 2, "large", "medium"}, {
          "medium", "medium", 3, 2, "large", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 4, 4, "medium", "medium"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "low", "low", 3, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 2, 4, "large", "low"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "low", 3, 4, "large", "medium"}, {
          "high", "low", 4, 4, "small", "medium"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "very high", 4, 4, "medium", "high"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "low", 2, 4, "small", "medium"}, {
          "very high", "low", 4, 2, "large", "medium"}, {
          "medium", "very high", 3, 2, "large", "medium"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "low", 3, 4, "large", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 4, 4, "small", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "low", 4, 2, "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "high", 2, 4, "large", "medium"}, {
          "very high", "medium", 2, 4, "large", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 2, 2, "small", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 3, 4, "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "medium", "medium", 4, 2, "medium", "high"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 3, 2, "medium", "low"}, {
          "high", "high", 2, 2, "small", "high"}, {
          "high", "high", 4, 2, "large", "high"}, {"very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "high", 4, 4, "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "low", 3, 4, "small", "high"}, {
          "low", "medium", 2, 2, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "high", 3, 4, "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "high", 4, 2, "small", "low"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 4, 4, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "very high", 2, 2, "large", "high"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 4, 4, "small", "high"}, {
          "medium", "high", 4, 4, "small", "low"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "high", 3, 2, "large", "medium"}, {
          "very high", "medium", 3, 2, "medium", "high"}, {
          "low", "medium", 3, 2, "small", "low"}, {
          "medium", "medium", 3, 4, "small", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "high", 2, 4, "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "very high", "very high", 4, 2, "medium", "high"}, {
          "medium", "high", 4, 2, "small", "low"}, {
          "medium", "high", 2, 2, "large", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "medium", 3, 2, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 2, 2, "large", "medium"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 4, 2, "small", "low"}, {
          "medium", "high", 4, 4, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 2, 4, "medium", "high"}, {
          "medium", "medium", 4, 4, "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "low", 4, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "high", 3, 4, "medium", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 2, 4, "small", "high"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "high", 2, 4, "medium", "low"}, {
          "medium", "medium", 3, 2, "small", "high"}, {"high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "high", 4, 4, "small", "medium"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "medium", 2, 2, "small", "low"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 2, "large", "medium"}, {
          "low", "high", 4, 2, "large", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "very high", 4, 2, "medium", "high"}, {
          "medium", "high", 2, 2, "large", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "high", 3, 2, "large", "low"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "high", 2, 2, "small", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "medium", 4, 4, "small", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "high", 3, 4, "large", "high"}, {
          "medium", "very high", 2, 4, "large", "medium"}, {
          "high", "low", 4, 2, "small", "high"}, {
          "high", "high", 3, 4, "large", "medium"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "high", 4, 2, "medium", "medium"}}, 
        "Output" -> {
         "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "acceptable", 
          "very good", "acceptable", "very good", "acceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "good", "unacceptable", "unacceptable",
           "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "acceptable", "unacceptable", "unacceptable", "good", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "good", "very good", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "very good", 
          "unacceptable"}|>, 
      "Predictions" -> {
       "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "good", "acceptable", 
        "unacceptable", "acceptable", "very good", "acceptable", "very good", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "good", "good", "very good", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "very good", "unacceptable"}, 
      "LogProbabilities" -> CompressedData["
1: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
Pwv3Hd6fId+R/Q8nyNNh
       "], 
      "CountMatrix" -> {{233, 1, 0, 0, 0}, {1, 80, 0, 0, 0}, {0, 0, 16, 0, 
       0}, {0, 0, 0, 15, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwV0ulrDwAAgOHf2my2sQ2tjbXDZjaTYWN3Y7OtuVlaWlGucrW57yvkTIao
YashRyNF1JSbXOWIfEAoSqScteIDzz48vf/A23dmQ019UCAQ+ExngwkhlDC6
Ek4EkUQRQw96Eksc8fQhgUSSSCaFVNLoRzr9ySCTAWQxkGyGMJQcchnGcPLI
p4BCiiimhFJGUEY5o6igkiqqGUcNU6hlKtOYzgxmMZs5zGUe81nAQuppYBGL
WcJSlrGcFaxkFatZw1rWsZ4NbGQTm9nCVraxnR3sZBe72cNeGtnHfg5wkEM0
cZgjHKWZFlo5xnFOcJJTnOYMbZzlHOe5wEUucZl2rnCVa1znBje5xW3ucJd7
3OcBD3nEY57wlGc85wUvecVr3vCWd7znAx/5xBe+8o3v/OAnv/hNB3/4yz86
pw0imBC6EEoY4UQQSTe6E0U0MfQiljji6U0CiSSRTAqppJFOBplkMYhsBpND
LnnkU0AhRRRTQikjKaOcSqqoZjRjGMt4JjCRSUymljr+A5iWYHI=
         "], {44}, {}, {}, {}}, {{91}, CompressedData["
1:eJwNz7FKAgEAANBLCBpyqA4huUVwiYJwaDxwEI4I0YLjKoLCoU39hobWJqG/
iIbAoGanppZqcBEKJXITcih8w/uAV2p1jzpLQRA0ybHMKnk2CCmwScQuMVUS
9jmgToNDUjJOOOWMcy5ocUmbK665occtd9zzQJ9HnnhmwAuvvPHOB0NGfPLF
mAnf/DBlxi9z/vhnRXyNdUIKFIkoUWaLbXaosEdMjYSUjGMWhzYl9A==
         "], {}, {}, {}}, {{}, {}, {15, 33, 45, 74, 103, 140, 152, 160, 170, 
         213, 225, 252, 308, 319, 338, 339}, {}, {}}, {{}, {}, {}, {78, 80, 
         83, 159, 165, 177, 205, 246, 258, 294, 304, 323, 332, 340, 
         345}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "acceptable", "good", "very good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0007138497109826589, "SingleEvaluationTime" -> 
      0.0063605, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "ae99f070-013c-4e0f-827c-953d9806a274"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"99.4", "0.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.4219653179190743231`3., 0.4081394480165771443`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"67.6", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    67.6300578034682189354`3., 2.5190181327608494044`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.986707887579623133`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0050348567649221021`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.9766381740497789288`3.", "\", \"", 
                    "0.9967776011094673372`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.9766381740497789288`3., ", ", 0.9967776011094673372`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.0133812432524942366`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0051026600470994252`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.0031759231582953861`3.", "\", \"", 
                    "0.0235865633466930888`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.0031759231582953861`3., ", ", 0.0235865633466930888`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"6.64`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"1.16`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKd0VPUf217K19gNbFev3Xr+zdOK9Zf2d5
TLI5+qzT6/ks3toHCeq4uLq/tNdo1knZ1HEXp/ptXLerXhq/s7cv+Mey7/8b
e4aKB0KGeS/smfy/b7nD9Ma+5Bb/Rfn/j+15Zs0sEWw9SLb/HlaJrHN/eMse
FmK47CXVXAB0tmOZ
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["233", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "233", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9957264957264957`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9957264957264957`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9957264957264959`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{233, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9957264957264957}], 
                    Row[{"Recall = ", 0.9957264957264957}], 
                    Row[{"FScore = ", 0.9957264957264959}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.004273504273504274`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.012345679012345678`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.004273504273504274}], 
                    Row[{"Row fraction = ", 0.012345679012345678`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.012345679012345678`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.004273504273504274`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.012345679012345678`}], 
                    Row[{"Row fraction = ", 0.004273504273504274}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9876543209876543}], 
                    Row[{"Recall = ", 0.9876543209876543}], 
                    Row[{"FScore = ", 0.9876543209876543}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["16", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{16, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["15", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "234", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9957264957264957`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{234, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9957264957264957}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{81, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9876543209876543}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{15, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "234", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9957264957264957`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{234, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.9957264957264957}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9876543209876543}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["234", TraditionalForm]}, {2.5, 
                    FormBox["81", TraditionalForm]}, {1.5, 
                    FormBox["16", TraditionalForm]}, {0.5, 
                    FormBox["15", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["234", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["81", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["16", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["15", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "acceptable" -> 0.25, "good" -> 0.25, 
             "very good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "medium", "very high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "very high", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}], 2, 4, 3}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {2, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "small", "large"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "medium"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "acceptable", "good", "very good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJztWUtOAzEMHVggLsABuAIcAHGFcoIilVUlpLJA7Dg6rVClUTTJ+O+XtE8q
ZdRMYjuO/ew8vn9uPm6nafq6P/7ZbL9fD4ftz9vd6WG33T8/7W+O/04PU4Hf
l/+PFJp3M3DWV6t3a250zGVck7c3fUaFh44tf4206dJanPXLsVzZEWwwKih7
e37W+sGoaPk3gn162jeqXNHy186AdWyK5nra2Fy+w9k/Ks+T8sHW+Pl+IpwF
izNqqUtPMaOG8sx6cukM21DWjJIL2TdaMRolDnivTdXPKoeg+QM1BrTerT2P
Dm3eRbWXRM5edMnCGk+m8goUfUqgykVBL+cyE5Y1hnROzXxZdXH5LJXRS35O
n4vyLgo0fdgR4c09L8GGS6D0ODPuqizvJjS1AaJfWMhm3Y/tgetp5UHVUcNt
MvrZV9DAyXlc7oW6fz3JOodF/8kaVvHO+96ztecePNiDS0p4kxeseIGF7a3v
rax5SzYs+hJounrdGyDePyDA8264J5z9o+Yn5e9Ln9o7njJLfmuN1cb/rF6d
Za5H9GWurh49aw1K+S3XQ9wvDjLk53CBmu9Z9pCy99C7TvGUgcvrovi2ZCzC
PlijVn941pEW48qxrbiNlm8s11vTObtmvzRw+M/8O3N/omrYSP59BR68+ifU
9VBBOTdrtkLXVZr/OTp71J5cSOeX3rNIfUJrh8icFcVRpYjgl9S9RLFJJLQc
N6LW8ewxcZFV11rX8Et2lJ5FtHPT8qFs/7EGtUfkzX9G6P1a2UE7VyZXzc4D
Gbl67rsWfMSLHy7pjxTLvHyeO09GbcO9Y/FAVtzgxv5I35XKNhp61ova48mW
o2esnUnuGdLmUbT91PCikf3mBA/ul8n/184ANX9l6xON3nTk5hV7rv8HJ40t
Ww==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {5376}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DJACZAoMEegpH5
6DQ2eWQ5bGK4zMIF0OVwuQmXW9D1EvITLvXoeolxGz4+ITNwhScp7sdlBzH2
4HMzMWYTcisxbsFmHjHhg88cXO7GZy6xbiUU54TCkhiAzS5s/kbXgy+eUN0G
AFbXUd4=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {256}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
9cq7RvT1zDc1tt47eYo5CwVU7UXGjOs7SvdeGblD4fcK/63ktkovyeTbszKc
88IPInE95U+ZmKjyoc65fNoWlZ9n+Ry3d5IVEHur6sjWbKceKyp74q3JqV6i
9aB8YMqXXHwGWQNZ/AFjfr77htHHIZCxAd3ToO/0TVwkA9HzYdy5AifZisQk
l8Cec3ZrJrnKafldTNUXZt17Ey/xiYkev/P7GzG1Z0Sv+fkbmstC9XGob5/W
ojgaZGwg3xRQa13tUMqP3DHqnjNg7Ff5HoCC4t4neaAKIrzwW3rmqXOOnB+i
3qB58NXvKp6SweF1+/3MeWR0OfXHdzmty6+pax8qZzHnQ6c7nwaTi3U8566/
uO3pKS92c4Dz/Sv7NOYaN1+KIlM3q33MZO+LjIEn2Yi17BnhVP+MQMmtIeR3
dDhyGtUYQ/vkjq9k9kcrdM8l66/o3OKO6VhiQB1LDtx15b2B3c+f1AMi+bmq
/ynnBJbPrvayy6XO84wa3di53kOEZ+/aMYFuP5rxU8as53a+lT3endfJMxU6
H6vqoEMfwoBLH+F0Jl2w+z2XO1NBvYfJejLFZ7/hjYvN+Z4El5hhrcvKZ3F6
1VyB5uizazr6GDomoLS3O/fsZHflRebc1ffZOJjkxHbn5RJPSJ1XOYi3EYe3
msqa0/LUJ07m8T7veGL+V0Kd37K/sXnxO92qO1/pZLxHVf0ZxUOjdSGwq/sd
TtOtp1DZg8ybOz2f/7z+HSH7+reof7N66BW6/aBbjWLZyuoNn3QooJ4RGTag
Z0JE7zDd/7H1IziaTDxVfnfLS2xU5n7GjDsFp9m6yx/tvpnkl1jr1VDNiEgw
eu6q3GlubSIGqnWIzblG5TB7GpZvVr49KaavcLD9Gqtv6hMQcNwDKqcy5rRs
7pg8X2Yf5OY3kzn7RH0rRPp0dQ2tItoXRvsaNYc5dY6seRINdD138ds7fPqy
mk/rzjysGXWaV5zG1Hm+5fwmsXu/68yNyN/vZqiqvK5/sbmSin0ZXnP6LeYN
cXt39oo6gMiNCH4SYfNk3WT6IIqbZb5VnBKDSq6MOW+4z/LXHBapsZW4dvU7
9Uyt1IH0+4l3olN0fKvOKb2qGs604Y1vQXe1ZEI/Szaqv3OEw37eEBNMH2Fx
n9H3hzeBMUui5zZ1f+R0xwiuoiLP5QwU837mN7dazpxHFDwT2r9ROiYQzUGK
GTTjAw7cAZMrXOm844hQd8eyn8XPuseZM+eNzmmOd7HjU6/fZmVX4DCbVGQh
Yq+aM6u8t6NP/mDSNvd+pvuW0tV7Cs+J8vG7fbvf+W5NNq9061vnXrt+51KL
Vnq+lQdg6Mr29Mpc8iQ78/eoHJTcqm71eaF1KHrHz9yW1YmIi4hdXd1us1hH
9nVN53wQ/dTKFhRXpLgzNBA2Z/+9InP3vQpRuyI5pNN3du6tkicqOTHy28R8
Xcl7SL7RASibWHnRAdN2K+uJsgfO2nC6rooNUzkRzV2h94i0j33Gu1kluper
jGqsduaDyD0qeSD0+ifukl33nfrY3d+YOcEhH/8Ccs5F++lO9lvOEL3GOQ4Z
cNoLM3869KwrdPIpYraOohpHaM4z8201pjs1PbtfFbf5pFMRH8oYRN/nk8zT
weiPu3I6s0dHb0e/e32ZgtPM8g1A5+uJczzt7qrnpMq9aD5mekZy4kIzuis8
Ckofuj6hfT46L2S/6eC0PNSF234ZOZU1b0blnVZPkXFYifGVHMRZKuZbxtrp
WGW/46DmMuR3aL0I/aq1nW8V/Roqt6jkdu2Ylp+JLfWZdblfdm7b6a9+s/su
cy7Xbyvxj547o3q7cj9tQ/csCHTuJiO7+506jq56K+u68wOrTlbkff5dwcdM
zlYoMOxyOxdEb52RvfqGmbuQXFPHDoSuk/wy419KGyrfuuUpdB/WsSObR6b4
rxXcOCS2jm/b7+lg1cqdzOl6w5ShAGqvyHkDjZPq5h2U9ciJ39/1v9Pzygm+
swJrju/i9HNdoTt3Tr3BIMCIV+VMnFk/fdY/yNQ+J5tR/R6qdnb6GyaPFZWb
vWsXX5gCIo6VZ6icj1zxE+vMmH+qzdV4Qswmd3YouY9sTxP5e9aGzO9X/2C+
lbGA6I+Y+3LgyzMyvm2WYfV+nVygAuuNCKm3A2SuVc1hkVqr9punGFFzSQz+
cjoGO1DteXI+zsSdm10n+xYS7HPIzPoOd7LKn+g6E43daG5VvnNMyVBjdUeo
HL+696s/KucCtOxOT5udh92x2wubc0DpYeDJ1x1tzWDyTk49u0leCznTIPg7
Jf9x/Tbru6g5HrnnO9vu+k72Xrvnv+sT0b4U6T2q8hi8dkbmFL/c7WUiXFRX
XuTvWQ5gqp9UyurY8Laep4NuXCDiAZFLJ/lP1Rxx/V7dq0zl8Z/fWfqd6n/3
+8oMH61Lp+VJRlwy+9Cu3CnbGJzRk+9FuLqIvN230XyD6iur31X2VcXEbOyA
KkcRjdGqT0dsqHxXBXr2eJKP7tky+Qvde0URrcXZWTG7LvM9Mzd2gKidrkD0
PNO+7QBHm1iYnJ0n5U/p2qGTi3d9c1Rft75k1kRyDqouZ3oyJ594AoIXQ87J
ypqP8hmkzio6XJGaf6zKzc4pzHlz1/8zcoJiTtudOdN+Jt85BaSdSM6WBWTv
wdB9it9U8La9Te8n08NOc2gu3Or0nVWgsvm0+oac4aZwkq1ZXGsnmte++/en
vz19w5jN3O40wp+4Yvd2lO3PWG9PbBlZOXfn5LYXl54AIUOV35A1ujLboLkL
FzC4tGmwev5JXlHFmU1C2Yc7+T3SD9F2u/jGJKZy/2dtVfCVbDjqjfYZDr1W
R4ZD3mfo687B2d8qYL0BoObb6rfZGlp9e6vmwLv3F0R8q96OqjrduWyG/IiP
vHWGY2N3ppn4dbmDaf2fQPYFLuf7CUXNc9pvBmxe+i7mVGel6HdVPaUTUDzU
xD6V7xATbx5VuRE/R+xHOfc8ye28GXT7YKceJAN2najaEf1NaUflO1cw5j5F
7CHXMuRMwnmOZsGFP1UiwzV1aqIS1d5zIv7dck7W9i7vkgVjnlbMZxWfQPSA
p/KsKl3O+ewN9UjJ47jwBwow82rnu1XO6uSzbJ+CRJXTyHIqu3XVvgLBT1bu
7q2x14GSE0Bweo5g8u3qGuIQT8h8XF3fjQtEv/07/oKns+xwcpX7Rcx6Ezxi
B2/3RUb8KoGczRXI1kpkbb07I0Venn7/WZ1pJrd2zkpd/+5yPDqmq3NV5xsm
pvUzgNzT0307n5uzbV2oYurNZ+gEx3N2tAkNRA/JfhM6jUt3ts0N6n4cbQca
OzuYs140F/z010wb0GuRcxj7ezYQd6fiod3O7hcqvESXc+zYwwBjtop8E/Vd
R79hopOTImeq4NsrsiN/YwPBCaByHoJ7Q8SXE8/axYSfKWKGNeuxegs2p6vE
NS9G6tvTb5lziPryk3139u6gmusyvq2Yre7kqfmVyvquj/0V/wfuvkBF
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {65536}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/4" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOI5DJACYa7BmIAujq
YHx0Gpd6YswG0bj0EbKfGPOwmYFNHlkcxsaG8dmJy13Y5NHFcNlFrFvx+ZdY
+3DZj8s+Us3C5V5iwgifOaTYiyt8SQkDYtRjiw9i7cBnFi6344obTLMBX6J1
rg==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {256}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {5376}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {256}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {65536}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {256}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{256, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{256, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/12" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/13" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/14" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/15" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/16" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 256}, NeuralNetworks`AtomT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/17" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/18" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`AtomT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 256}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/19" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 64}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>|>,
                     "Loss/Harden" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_85e0334f_303c_4837_b202_fad67aaaa932", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
thL9qUO5oNuGNLNKV6OZco1mXnfz18tmvhiPa+b6gTPXUmaW6/uX6PyHpbcN
1CgWH0y23+wrT1mRVdFzHVdOYfI8RHA5RU2wywINwTbsbiDYiAa9sCQZx3K9
17mSLFLA2N+FWAXft69b15Dh4a77SqL3Segigf4uQqx68jiGxaQECWlpjuuC
N+RrLoCoHiB6ywWNXbxQM/YCdkapVQnnqIhfIZJyybSBM++pplUG3GxqADJU
/8JQIxkVxlyBC2GJpl8g+1KpVbJxpqgQZ/dmidlXvgcpf7pIyvWPFgkXcdOl
bRsi9GHGZnxGly80PbeyC0utXCdcImaMghmP75tUrp8psmfGp+vzRMDTQn0N
T2eT1Dy9tsjHIJsZwaUTzJvQnHpjfCffM4vWwPeZLdU3pDJoAhKphFbKYmEv
7kljSlhlVE/E02dUNU+LlyIszKWARSx7oNSKYpIjUnunDbh3EpkwV1HJJtwd
EUXeoC5SUJdAfw94v3qjbJ9vueBWkQmVR7tHTfLPbNkn8OymleqC91sGoC26
OL4LNfh+WOQ/PpsZ7UPg62HanHrf6DLfk0tv4N8pXtZGBZWU+mpUMl1LrZJT
JhR9VS6oJU2i4pyNAc5uO0j90xU4+wxxtkraSzM6oQU0DeCqmj5e46SCqRHW
j9Lpe1i43tWTEradPzI2m7qzSocy+9w9X8SMLC01M5LWaURyif3snhUFgjsu
krP0gTOXF3uW678jSUUSf5YRC6QhEwmxVSb0pzquLKMdSEZCI42M4hDN+4En
Pk8WVxllM/dW0YtkImtg87bsAB826JIY6dJeybsird0gIao+q1AlhlvsCWes
HzXTE1kqvx9n8tCqyKzqC/DDewHUzRPnzoCGO/dMRMHlgoPkGQR3zkjM/grL
KbGSWvpMhC6ZSP4T8S4ymrqL1iTR9nLB0eLpRJdz0CU8RavCDRiaWYzr0vTm
VNqk93zPCO0GfmHJtl4tJJtgjWwyNUMFTSraUS44VzyDShkn7aMzpyOHwZ5A
Td95pj6AQp7jm4zt15FhcxjNKX9KAihJ08hkThjnKwpzMR6RM79Kk9htMfYt
GpcUrKtNZa8u1Fu6oDfgmP+4vICy1OcOOtrkNnItdAxkMPxvidJ1+Bw8XCdr
OyfVZwTt3OfLOO9oyXL7irQwp1/2zVryl9wVDBZzO4W8X4exksGQPLQQzs7S
4dhxKy24khYayb7QnwjqMxSMhE3HROO3mWe8zhSypFqDVX8nT94yJlC60Vw4
uwp1CTRHXaSfuwwx7m86dmZ8GNHlOHT5Z9OcLWO2SdebC/kDOgzo42/OxXZ/
g+Vi8/1rJbJvJNh+E+p7LJlITS4KJ3ukraWtr9rn/2MyWVQ6vttVoZeRMeXW
PmCJy/ydyUlYbibqyEFcYlVquDTjSOGCLcY7i4xwLh1ZX6h3yM1r0zGhUV6A
w4Eehp42mZr8QaJi04T7ZNFmo+5k5mLqpFVJC2pd7aM23TLn6PEzgjBYbeL8
2g38Msw9sJbslxnJSB9bTwEhReEsluipWfxwUZIiI8gyNRq6YCy3KlGLb9v8
ssW650z2C51rcVydNbh24biOAVx/O1K4cItxscg0iZ0cSBbxq7aVZloIt4wp
Dci0YBWTSKlj+2A2xmSuhE1xhfcXo9zc3DYfCzAtM+dYW06FVEzH/ehachT3
OSD2CYHW4IgNaBD7zZ1scDzIIzWWoKWctNB2UvA3a5OiubXQxYUKXV7gXThs
dZcZXuRxx4P86fGMnYjzbhO7XSkG7zOm+KbG6L2q1L9Tgnskp+bU8VNbrT2b
dd0MQN8PgL4HGOAGbUlWO7HjS7otspmwxgTPI3Tt8NHPtvaJLKycF4KeZZXz
JH+EQOjOydb9D98E4nnnpZKvyu8L70mdOiImZYtusbkpJiRBPZcKUY+v10v4
pVJKwrYwiwnZ1H+qdEo2lpZ9jfxSFUPjlw5p/FKMfm+ZleuCelfwS2e4SXp/
RE+b5vKGzTVqQ9B/s5H7y+Kp3d/qU9RAwaN0PQUxTS1Ms3MFTNMv3AFdelGX
ULxL9+cup6lbBI8K9YZZMSX+Qx6HESayMZqc47gGk7P6l/6wKlmY4kZ4SL2B
M/seysBDUl64SfyxqchDNrsJsQZ+zBbyVEPwRMFkPBIhBKdqZvuNGiV4xNWf
TGSsvYDgxWKTbOow+OfQS0uOo9lvfZ79hGb2K/r1f1i5LjlBzE7WHzhz/aFx
uX5KKUp6GF9M/ubSNty18aRmP/4ns8iKtCSmpNAi8ncckxgNJv7TNEnNZaoY
WKU/k8Akg5qwLfsfwGQaZNzhtWNOIEzaNJgUn9Jgkqsve2hF8bzlBiibvlty
Ek/SPqN8UQN4V//EQ6sSz1IVwwDlDw8Pl+tfcrNnXsVm7IYFxHr+DE0E+UWj
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
jf8DehXZsg==
                    "]]|>, "orcInstance" -> 106363392, "orcModuleId" -> 
                    103468704, "targetMachineId" -> 106019200|>, 
                    139905716250432, 139905716250288, 139905716250368, 
                    139905716244480, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_de42f23d_fcef_4235_9c96_dcb8cb63c3b3", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
ahQW/h0E8MDX
                    "]]|>, "orcInstance" -> 106435472, "orcModuleId" -> 
                    106341632, "targetMachineId" -> 105989296|>, 
                    139905716236832, 139905716236432, 139905716236512, 
                    139905716236288, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {4, 64},
                     "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "38fc078b5b5b7598", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 447360, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 16, 14, 39, 10.319054`7.766214871571357}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 4, "large", "high"}, {
          "very high", "low", 2, 2, "small", "high"}, {
          "very high", "low", 3, 2, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "medium", 3, 2, "medium", "low"}, {
          "very high", "very high", 4, 4, "large", "low"}, {
          "very high", "very high", 3, 4, "large", "high"}, {
          "very high", "medium", 4, 4, "large", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "medium", "high", 2, 4, "large", "medium"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "very high", 3, 2, "medium", "medium"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 3, 2, "small", "high"}, {
          "low", "high", 4, 4, "large", "medium"}, {"low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 2, 2, "small", "high"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "very high", 2, 2, "medium", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "high", "medium", 4, 2, "small", "medium"}, {
          "medium", "very high", 3, 2, "medium", "low"}, {
          "high", "low", 3, 2, "small", "low"}, {
          "low", "very high", 3, 2, "small", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 3, 4, "medium", "medium"}, {
          "very high", "high", 2, 4, "large", "high"}, {
          "high", "medium", 3, 4, "medium", "medium"}, {
          "medium", "low", 2, 4, "small", "high"}, {
          "high", "very high", 3, 2, "small", "high"}, {
          "medium", "very high", 2, 4, "large", "high"}, {
          "low", "medium", 4, 2, "small", "low"}, {
          "low", "high", 3, 2, "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 2, 2, "medium", "high"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "high", 4, 2, "medium", "high"}, {
          "very high", "very high", 3, 2, "large", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 2, 2, "small", "low"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "low", 4, 4, "small", "medium"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "medium", 4, 2, "small", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "high", 4, 2, "medium", "medium"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "medium", "high", 3, 2, "large", "low"}, {
          "high", "medium", 4, 4, "small", "medium"}, {
          "very high", "low", 4, 4, "large", "medium"}, {
          "very high", "medium", 2, 2, "large", "high"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "low", 4, 4, "large", "medium"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "very high", 2, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "low", 3, 4, "large", "high"}, {
          "high", "high", 3, 4, "medium", "high"}, {
          "low", "medium", 2, 4, "large", "high"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "medium", 3, 2, "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "medium", 2, 2, "large", "medium"}, {
          "medium", "high", 4, 4, "medium", "high"}, {
          "medium", "very high", 2, 2, "large", "medium"}, {
          "very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "low", 4, 2, "small", "low"}, {
          "low", "high", 3, 4, "large", "medium"}, {
          "low", "very high", 3, 4, "large", "medium"}, {
          "medium", "low", 3, 4, "medium", "medium"}, {
          "low", "medium", 2, 4, "medium", "medium"}, {
          "low", "high", 4, 2, "large", "high"}, {
          "high", "high", 3, 2, "small", "medium"}, {
          "very high", "low", 4, 4, "medium", "medium"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 3, 2, "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "medium", 3, 4, "small", "medium"}, {
          "high", "low", 2, 4, "medium", "medium"}, {"low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "low", "very high", 4, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 2, 4, "large", "low"}, {
          "very high", "medium", 4, 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "low", "low", 2, 4, "small", "low"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 2, 2, "small", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "high", 4, 4, "small", "medium"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "low", 3, 2, "large", "medium"}, {
          "very high", "very high", 2, 4, "small", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 2, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "very high", "very high", 2, 4, "medium", "low"}, {
          "medium", "very high", 2, 2, "medium", "medium"}, {
          "low", "low", 2, 2, "large", "low"}, {"high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "low", 2, 4, "small", "high"}, {"very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "medium", 2, 4, "large", "low"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 2, 4, "small", "high"}, {
          "very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "low", 3, 4, "medium", "low"}, {
          "high", "low", 3, 4, "small", "low"}, {
          "high", "medium", 4, 4, "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 2, "large", "high"}, {
          "medium", "low", 2, 4, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "low", 2, 4, "large", "low"}, {
          "low", "high", 3, 2, "small", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "medium", "low"}, {
          "very high", "high", 2, 2, "large", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "high", 4, 2, "large", "high"}, {
          "low", "low", 4, 2, "large", "high"}, {
          "very high", "very high", 3, 2, "small", "low"}, {
          "high", "high", 2, 4, "small", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "high", "low", 4, 2, "large", "high"}, {"low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "medium", 4, 4, "large", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 2, 4, "small", "high"}, {
          "low", "low", 4, 4, "medium", "high"}, {
          "very high", "high", 3, 2, "large", "high"}, {
          "low", "very high", 3, 2, "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "low", "low", 2, 4, "small", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 2, "small", "high"}, {
          "high", "low", 4, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "low", 2, 2, "small", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "high", 3, 2, "large", "medium"}, {
          "low", "high", 2, 2, "medium", "medium"}, {
          "high", "high", 4, 4, "small", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 4, 2, "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 3, 4, "medium", "high"}, {
          "medium", "high", 2, 2, "small", "medium"}, {
          "very high", "very high", 3, 4, "small", "high"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "medium", "low", 3, 4, "large", "low"}, {
          "high", "very high", 4, 2, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 2, 2, "large", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "medium", 2, 2, "medium", "low"}, {
          "medium", "medium", 4, 2, "large", "medium"}, {
          "medium", "medium", 3, 2, "large", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 4, 4, "medium", "medium"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "low", "low", 3, 2, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 2, 4, "large", "low"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "low", 3, 4, "large", "medium"}, {
          "high", "low", 4, 4, "small", "medium"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "very high", 4, 4, "medium", "high"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "low", 2, 4, "small", "medium"}, {
          "very high", "low", 4, 2, "large", "medium"}, {
          "medium", "very high", 3, 2, "large", "medium"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "low", 3, 4, "large", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 4, 4, "small", "high"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "low", 4, 2, "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "high", 2, 4, "large", "medium"}, {
          "very high", "medium", 2, 4, "large", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 2, 2, "small", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 3, 4, "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "medium", "medium", 4, 2, "medium", "high"}, {
          "high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 3, 2, "medium", "low"}, {
          "high", "high", 2, 2, "small", "high"}, {
          "high", "high", 4, 2, "large", "high"}, {"very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "high", 4, 4, "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "low", 3, 4, "small", "high"}, {
          "low", "medium", 2, 2, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "high", 3, 4, "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "high", 4, 2, "small", "low"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 4, 4, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "very high", 2, 2, "large", "high"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 4, 4, "small", "high"}, {
          "medium", "high", 4, 4, "small", "low"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "high", 3, 2, "large", "medium"}, {
          "very high", "medium", 3, 2, "medium", "high"}, {
          "low", "medium", 3, 2, "small", "low"}, {
          "medium", "medium", 3, 4, "small", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "high", 2, 4, "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "very high", "very high", 4, 2, "medium", "high"}, {
          "medium", "high", 4, 2, "small", "low"}, {
          "medium", "high", 2, 2, "large", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "medium", "medium", 3, 2, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 2, 2, "large", "medium"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 4, 2, "small", "low"}, {
          "medium", "high", 4, 4, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 2, 4, "medium", "high"}, {
          "medium", "medium", 4, 4, "medium", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "medium", "low", 4, 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "high", 3, 4, "medium", "medium"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 2, 4, "small", "high"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "high", 2, 4, "medium", "low"}, {
          "medium", "medium", 3, 2, "small", "high"}, {"high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "high", 4, 4, "small", "medium"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "medium", 2, 2, "small", "low"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 2, "large", "medium"}, {
          "low", "high", 4, 2, "large", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "very high", 4, 2, "medium", "high"}, {
          "medium", "high", 2, 2, "large", "medium"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "high", 3, 2, "large", "low"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "high", 2, 2, "small", "medium"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "medium", 4, 4, "small", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "high", 3, 4, "large", "high"}, {
          "medium", "very high", 2, 4, "large", "medium"}, {
          "high", "low", 4, 2, "small", "high"}, {
          "high", "high", 3, 4, "large", "medium"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "high", 4, 2, "medium", "medium"}}, 
        "Output" -> {
         "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "acceptable", 
          "very good", "acceptable", "very good", "acceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "good", "unacceptable", "unacceptable",
           "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "acceptable", "unacceptable", "unacceptable", "good", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "good", "very good", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "very good", 
          "unacceptable"}|>, 
      "Predictions" -> {
       "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "good", "acceptable", 
        "unacceptable", "acceptable", "very good", "acceptable", "very good", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "good", "good", "very good", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "very good", "unacceptable"}, 
      "LogProbabilities" -> CompressedData["
1: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
Pwv3Hd6fId+R/Q8nyNNh
       "], 
      "CountMatrix" -> {{233, 1, 0, 0, 0}, {1, 80, 0, 0, 0}, {0, 0, 16, 0, 
       0}, {0, 0, 0, 15, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwV0ulrDwAAgOHf2my2sQ2tjbXDZjaTYWN3Y7OtuVlaWlGucrW57yvkTIao
YashRyNF1JSbXOWIfEAoSqScteIDzz48vf/A23dmQ019UCAQ+ExngwkhlDC6
Ek4EkUQRQw96Eksc8fQhgUSSSCaFVNLoRzr9ySCTAWQxkGyGMJQcchnGcPLI
p4BCiiimhFJGUEY5o6igkiqqGUcNU6hlKtOYzgxmMZs5zGUe81nAQuppYBGL
WcJSlrGcFaxkFatZw1rWsZ4NbGQTm9nCVraxnR3sZBe72cNeGtnHfg5wkEM0
cZgjHKWZFlo5xnFOcJJTnOYMbZzlHOe5wEUucZl2rnCVa1znBje5xW3ucJd7
3OcBD3nEY57wlGc85wUvecVr3vCWd7znAx/5xBe+8o3v/OAnv/hNB3/4yz86
pw0imBC6EEoY4UQQSTe6E0U0MfQiljji6U0CiSSRTAqppJFOBplkMYhsBpND
LnnkU0AhRRRTQikjKaOcSqqoZjRjGMt4JjCRSUymljr+A5iWYHI=
         "], {44}, {}, {}, {}}, {{91}, CompressedData["
1:eJwNz7FKAgEAANBLCBpyqA4huUVwiYJwaDxwEI4I0YLjKoLCoU39hobWJqG/
iIbAoGanppZqcBEKJXITcih8w/uAV2p1jzpLQRA0ybHMKnk2CCmwScQuMVUS
9jmgToNDUjJOOOWMcy5ocUmbK665occtd9zzQJ9HnnhmwAuvvPHOB0NGfPLF
mAnf/DBlxi9z/vhnRXyNdUIKFIkoUWaLbXaosEdMjYSUjGMWhzYl9A==
         "], {}, {}, {}}, {{}, {}, {15, 33, 45, 74, 103, 140, 152, 160, 170, 
         213, 225, 252, 308, 319, 338, 339}, {}, {}}, {{}, {}, {}, {78, 80, 
         83, 159, 165, 177, 205, 246, 258, 294, 304, 323, 332, 340, 
         345}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "acceptable", "good", "very good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0008556531791907514, "SingleEvaluationTime" -> 
      0.00664275, "Version" -> {13.1, 0}|>]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9, 
   3.8685204529294043`*^9, 3.8685215146011333`*^9, 3.8685301612497177`*^9, 
   3.868530590591856*^9, 3.86853261496434*^9, 3.8685338436228123`*^9, {
   3.868535643570589*^9, 3.868535653266458*^9}, 3.86853620504729*^9, 
   3.868536647435892*^9, 3.8685368910591183`*^9, 3.868536956624065*^9, 
   3.868537492992119*^9, {3.8685379158969793`*^9, 3.868537942476584*^9}, 
   3.8685921415849247`*^9, 3.868599486276321*^9, 3.86860013955028*^9, 
   3.8686009455378437`*^9, 3.868601165154408*^9, 3.868602872755411*^9, 
   3.868604168888167*^9, 3.8686705600345984`*^9, 3.868672040003127*^9, 
   3.868681397928339*^9, 3.868938938636381*^9, 3.8689425626275787`*^9, 
   3.868943546605094*^9, 3.86894388526086*^9, 3.868944114037065*^9, 
   3.868944544993232*^9, 3.868945583119274*^9, 3.868945795964314*^9, 
   3.868946090455439*^9, 3.868946301277932*^9, 3.868946812077159*^9, 
   3.868947529554852*^9, 3.868948234247651*^9, 3.868949916263268*^9, 
   3.86895035411582*^9, 3.868950591820963*^9, 3.868955715946851*^9, 
   3.8689590912506847`*^9, 3.868961292873067*^9, {3.868964211642971*^9, 
   3.868964271971294*^9}, 3.8689658659417048`*^9, 3.868975187773774*^9, 
   3.868975807387333*^9, 3.869030236615261*^9, 3.869030576485284*^9, 
   3.8690318983554163`*^9, 3.8690322955085077`*^9, 3.8690328949105043`*^9, 
   3.869033235901104*^9, 3.869033495671227*^9, 3.869034576712833*^9, 
   3.869035610130576*^9, 3.8690361433581657`*^9, 3.869036324430427*^9, 
   3.869036425981944*^9, 3.8690403482379503`*^9, 3.869040564944063*^9, 
   3.869041421524418*^9, 3.869041561340787*^9, 3.869041673839971*^9, 
   3.8690421991522627`*^9, 3.869042855424157*^9, 3.86904326803651*^9, 
   3.869043554339016*^9, 3.869043746795423*^9, 3.869105420473537*^9, 
   3.869105653283306*^9, 3.869105982326734*^9, 3.869107184493881*^9, 
   3.869108234728773*^9, 3.869111749761622*^9, {3.869111919016803*^9, 
   3.8691119399060993`*^9}, 3.869112356812172*^9, 3.869112702187408*^9, {
   3.869112904171596*^9, 3.869112930067875*^9}, {3.8691133852077427`*^9, 
   3.869113414126828*^9}, {3.869121126953014*^9, 3.8691211520853*^9}, {
   3.869121847143949*^9, 3.86912185561662*^9}, 3.869203188780602*^9, {
   3.8692071057867537`*^9, 3.86920713930786*^9}, 3.869207400202592*^9, {
   3.869207739721821*^9, 3.8692077456111937`*^9}, {3.869207952002699*^9, 
   3.869207963437224*^9}, 3.8692080125106792`*^9, {3.869208714713435*^9, 
   3.869208729773431*^9}, 3.869209077756652*^9, 3.8692094954446297`*^9, {
   3.869210938078933*^9, 3.8692109446365433`*^9}, 3.869211902166511*^9, {
   3.869213234631062*^9, 3.8692133334937763`*^9}, {3.869214218655706*^9, 
   3.869214223564402*^9}, 3.869215458371559*^9, {3.869215992069166*^9, 
   3.869216010528124*^9}, 3.869216652211252*^9, 3.8692170070767508`*^9, 
   3.8692173280534887`*^9, {3.869217675130456*^9, 3.869217685513886*^9}, {
   3.8692180388130713`*^9, 3.8692180459383907`*^9}, {3.869219076882539*^9, 
   3.8692191672841787`*^9}, 3.869219428759843*^9, {3.869219704836887*^9, 
   3.869219710189546*^9}, {3.869281650336409*^9, 3.869281656282543*^9}, 
   3.869292838989414*^9, 3.8696410838252277`*^9, {3.869642408118239*^9, 
   3.8696424286143847`*^9}, 3.869642755347784*^9, 3.8696432269045877`*^9, 
   3.869643433213999*^9, 3.869643780899444*^9, 3.869645951169808*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"ab6a1cc0-d100-43fc-8ec0-1a81a81e99fd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedHardNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}, {3.869121279126927*^9, 
   3.869121279479135*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "testData", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"featureLayer", "[", 
       RowBox[{"KeyDrop", "[", 
        RowBox[{"#", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "&"}], ",", 
     RowBox[{
      RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}], "&"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.869292984681349*^9, 3.8692931365040483`*^9}, {
  3.869293202450193*^9, 3.869293235535232*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"3da3f85d-50c5-45aa-934b-1a84fa5781af"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"eval", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}, {
   3.868530047989657*^9, 3.868530063111247*^9}, {3.868530190826717*^9, 
   3.868530196600292*^9}, {3.86853144384466*^9, 3.868531451560924*^9}, {
   3.868532766824644*^9, 3.8685327949413958`*^9}, 3.868532945602283*^9, {
   3.868533874444491*^9, 3.8685338747929583`*^9}, {3.868604441984084*^9, 
   3.8686044511364*^9}, {3.8689602387396393`*^9, 3.8689602481032057`*^9}, {
   3.868960681250607*^9, 3.8689606824317408`*^9}, {3.868963143100669*^9, 
   3.868963145210929*^9}, 3.86896321844506*^9, {3.868976255892177*^9, 
   3.868976256410039*^9}, 3.8689764091880903`*^9, {3.869034393625832*^9, 
   3.86903439400725*^9}, {3.869043275878063*^9, 3.8690432774187603`*^9}, {
   3.86921972941183*^9, 3.869219743506506*^9}, {3.869281678616239*^9, 
   3.8692816957755537`*^9}, {3.869292976318449*^9, 3.869292982925337*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[BoxData["0.9942196531791907`"], "Output",
 CellChangeTimes->{
  3.8690345877152042`*^9, 3.869035626521063*^9, 3.869036152783195*^9, 
   3.8690363341385193`*^9, 3.869036436421172*^9, 3.869040357729239*^9, 
   3.869040576634907*^9, 3.869041433742779*^9, 3.8690415722677*^9, 
   3.8690416867128763`*^9, 3.86904220858243*^9, 3.8690432824600554`*^9, 
   3.869043562445753*^9, 3.869043754721044*^9, {3.869047065454893*^9, 
   3.869047090738934*^9}, 3.8690471518063593`*^9, 3.869047184930591*^9, 
   3.8690472207124777`*^9, 3.8690472595671577`*^9, 3.8690473069192467`*^9, 
   3.869047356173808*^9, 3.869104541974283*^9, 3.8691049803090754`*^9, 
   3.869105042273468*^9, 3.869105162486998*^9, 3.8691054315005198`*^9, 
   3.8691056671929417`*^9, 3.869105994037698*^9, 3.869107195753681*^9, 
   3.8691117585270443`*^9, 3.8691119669156637`*^9, 3.869121285329372*^9, 
   3.869208833562628*^9, 3.869209098161392*^9, 3.8692095035118723`*^9, 
   3.869210954522581*^9, 3.869211920142223*^9, 3.869213356256194*^9, 
   3.869214236948101*^9, 3.869215471853537*^9, 3.869216022517696*^9, 
   3.86921666275205*^9, 3.869217020007245*^9, 3.8692173416096373`*^9, 
   3.869217703374105*^9, 3.869218056194668*^9, 3.8692194468167562`*^9, {
   3.869219736012184*^9, 3.869219746378594*^9}, 3.869281699345985*^9, 
   3.869293239954982*^9, 3.869641122184824*^9, 3.869642458072299*^9, 
   3.869642787808694*^9, 3.869643257866144*^9, 3.869643479013624*^9, 
   3.869643821805698*^9, 3.869646089554126*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"986fa8b5-2b9c-47b8-82ad-1b1ce48e353b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Association", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Prediction\>\"", "->", 
         RowBox[{"trainedHardNet", "[", 
          RowBox[{
           RowBox[{"KeyDrop", "[", 
            RowBox[{"{", "\"\<Acceptability\>\"", "}"}], "]"}], "@", "#"}], 
          "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "->", 
         RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}]}]}], "}"}], "]"}], 
     "&"}], "/@", 
    RowBox[{"Normal", "[", "testData", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eval2", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}, {3.869121310826304*^9, 3.869121313255774*^9}, {
  3.869219749034794*^9, 3.869219752143724*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],

Cell[BoxData["0.9942196531791907`"], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9, 
   3.869105434085964*^9, 3.869105669300963*^9, 3.869105996859831*^9, 
   3.869107199042075*^9, 3.869111759364867*^9, 3.869111970506278*^9, {
   3.869121299804845*^9, 3.869121316611709*^9}, 3.8692088360902042`*^9, 
   3.86920910005622*^9, 3.869209505631686*^9, 3.869210957184381*^9, 
   3.869211922653748*^9, 3.869213358735955*^9, 3.869214238649056*^9, 
   3.8692154737290087`*^9, 3.869216025505147*^9, 3.8692166649342213`*^9, 
   3.8692170219382353`*^9, 3.869217343847763*^9, 3.8692177067848663`*^9, 
   3.869218058215096*^9, 3.869219448602796*^9, 3.869219753147689*^9, 
   3.8692817014660397`*^9, 3.8692932434109373`*^9, 3.869641124299802*^9, 
   3.8696424595787277`*^9, 3.869642789251828*^9, 3.8696432594825153`*^9, 
   3.869643480889119*^9, 3.869643823403762*^9, 3.8696460912872143`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"5f001bae-0ea9-4ff4-b790-7bb0b55a2b66"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],

Cell[BoxData[
 TemplateBox[{"8.71875`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9, 
   3.869105674742872*^9, 3.8692091039680862`*^9, 3.869210963050486*^9, 
   3.8692119248338833`*^9, 3.869213361375114*^9, 3.869215475324996*^9, 
   3.869219517507464*^9, 3.869219756735735*^9, 3.869281703543564*^9, 
   3.869293245157888*^9, 3.869646098493256*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"e05356ce-b4cd-4285-8107-65c2f4eecbb0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNetBooleanExpression", "[", 
   RowBox[{"hnf", ",", "inputSize"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
   3.869031937904567*^9, 3.869031943129614*^9}, {3.869121341559927*^9, 
   3.869121348104578*^9}, {3.869210965421191*^9, 3.869210971914925*^9}, 
   3.869219529425714*^9, 3.869219571948317*^9, 3.8696461009999447`*^9, 
   3.869646142576202*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"85881d34-aa2c-47a4-9cef-\
231d0c092462"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Acceptability\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Memory\>\"", ",", "\"\<Quality\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}, {
  3.8692109926431*^9, 3.869210996642137*^9}},
 CellLabel->
  "In[421]:=",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1382", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
           "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
           "Doors" -> <|"Type" -> "Nominal"|>, 
           "Passengers" -> <|"Type" -> "Nominal"|>, 
           "Cargo" -> <|"Type" -> "Nominal"|>, 
           "Safety" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
                  "Cargo", "Safety"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1382, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                   0.5381047338323698, 0.31349173058168534`}, {
                   0.2878959194482099, 
                   0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                   0.2578066194971254, 
                   0.4093083635172316, -0.7050063333319737, 
                   0.08206678121922453, -0.2152687718915405, 
                   0.46464274419035045`}, {
                   0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                   0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                   0.3669612074237795, -0.03875817355088801, 
                   0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                   0.5767907589006783, 0.1852877321886701, 
                   0.21134659605041434`, 0.33089384854127}}, 
                  "Precisions" -> {11.396708918937332`, 11.702295237769018`, 
                   11.751709980827822`, 12.269447018561033`, 
                   12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                  None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Mean" -> {-0.0027242377292722524`, -0.0004734344948340772,
                     0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                   "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 6, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   7052420854593502203|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 1301520, 
                  "DataMemory" -> 446480, "FunctionMemory" -> 62320, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.5374646114340518`, -1.5374646114340518`, \
-1.4481495799387802`, -1.3901532053842829`, -1.3900959198753926`, \
-1.3059537438182822`, -1.239089852169043, -1.2261733685503937`, \
-1.2132739652746585`, -1.169323039076807, -1.1079994773194297`}, 
                   "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                   0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[7.816606057704673, 0.25703225729782303`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Index" -> {<|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                   DirectedInfinity[1]}] -> 4|>, <|
               2 -> 1, 4 -> 2, Interval[{5, 
                   DirectedInfinity[1]}] -> 3|>, <|
               "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.12314196676015854`, -0.861851692199707, 
                0.10532767325639725`}, {
                0.8298183679580688, -0.28949323296546936`, 
                0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                0.38437455892562866`, -0.8375512361526489, 
                0.1422276645898819}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                0.4795919358730316}, {
                0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                0.2534555494785309, -0.4526385962963104}, {
                0.3543681204319, -0.37547722458839417`, 
                0.5876661539077759}, {-1.1276206970214844`, 
                0.17602579295635223`, -1.0098364353179932`}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.24657385051250458`, -0.8256815671920776, 
                0.8846340179443359}, {0.6182233691215515, 
                0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.34666627645492554`, -0.5679200291633606, 
                0.10750995576381683`}, {
                0.6412044167518616, -0.1759643256664276, 
                0.6604856848716736}, {-0.8092290163040161, 
                0.12987354397773743`, -1.1753407716751099`}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                0.12715618312358856`, 0.1291729062795639}, {
                0.21379514038562775`, -0.6005780100822449, 
                0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
             272386066020895428|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                "very good" -> 4|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113, 
        "unacceptable" -> 0.7012987012987013, "very good" -> 
        0.03896103896103896|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Acceptability", 
          "Order" -> {
           "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", "Cargo",
             "Safety", "Acceptability"}|>], "PreferLabeled" -> True, 
       "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> None, 
    "ImputationStrategy" -> Automatic, "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
    Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                 0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                 0.09347633272409439, 0.20684024691581726`, 
                 0.00729140592738986, -0.3824177384376526, 
                 0.2153223156929016, -0.46700865030288696`, 
                 0.21194063127040863`, 
                 0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                 0.07883942127227783, -0.375686913728714, 
                 0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                 0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                 0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                 0.1690395474433899, -0.28660914301872253`, 
                 0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                 0.17016777396202087`, -0.32100844383239746`, 
                 0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               18, "$InputDimensions" -> {18}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1:eJwtl3c41+/3x5EVSUKyV0hJWRVe50galLQ0RCrSFqGhUmRHVrL3iChRpHjd
561dpCFa9ElSRtLUVr++1/X7476v+1znr/tc5zyfj6Pt4bNsk4iQkJC/5L9r
2Ya9tn5+GwKXi/8v8Nqww8x0x/+Spv9/et5I4GdKh9TuENb/owVahtLgWEyL
9ZzcBHzqmohVJc5wLSYbfBtOsnwncSx/hXypdhGirywZ5W/B2knPaEzLMbw9
Uo1mc7PIRX4Z77LMmdVoqQo8Fjsw8Xp9GlOjTj3xi2mO2XMYOrSbeQf5gXpW
P5swLxhUrtixqLdJzErDBW1UrsE++WvkMq+M/D8m4r6iYZB6bY0mzvE40yoG
7Z99Z0u7C8jjphCc1pWjLakHaeRicbCYgGBeoM/vKdcisVUDzPH2+3r5GDtY
99eFyu0VBAFJ4qT9+wcY9zSQ2OIttLfwEqJfKFPXUkHZM26w7Houu6Z5DGVE
5SlALRBbRh2hdSp9UGJ0lZWPMZjZ/KKJ+uS+w+X2PDry0ZOqPq+n8V3fQFR0
ND7e+RGt26YIhGQ9+I7zm1m1exxT86yGpy9NUTYpGKf9jKKo/FCMfe6Eb3c6
QJ3EPPZ0qAmNBAb4tqkNHB2ms6UzxeBu0jBXX5ECnoXesHUO0c/ID6xzjiot
FRexqS7QoOwMYbgSPsgu+pnTtvfP2J0qjvOxliR/JXcok5cgO91oLHeM4VZ1
R3KDGtWUuSsMV0rpUWucJMa5x+A92IDdx5ZySkvrQO2ZE6/kfoR1bklknwfU
MMO3jGanJuCbx03wui4FOjY0cg5S/tSgYk5X7WVR7+Z26L0kyw1/fsGOzkXU
HDoC4d+zcYWdLd5vWIUPP1lgtmMsPonVRo9NquSdMJvkdi/m9/a5k2obw4AB
N+qbP59325uDFeE2TNXAhZ6bLsR2uzAo+aOBb/a1UqnGWrTTVMJRc1QwAZxw
QmuV1XjHteiZdgoOS6YxWYtJbLrRXbgzKQJLR63AHZUmGFV1D6vWVUDdqge8
/LuttHS/CbzOM2fu0xOZh201XChSoXnbJ+K0Ogaa075Dd/JNuFa7lB1xvMcq
WhzYwY8ROHHzC1IJV2VNtc5U+eiTdaiSLB0daUStov/+MviaP/P4Ot7xOcfa
Ol3Y6ImFWPwrmZeIyWUW32qZw1hXNj1JWRAsORdFTINhX4QwnlHQoq7de2Gn
61ku65QKCC26Yf1h4zVr0Z6d0KgwFTZGmkNTrxLZhCrTISEZmuu6G41c95Pp
7WhaG19F2dYfQFdKkuY5LqHUMGd4nxrFF043ZKcexFPA0Y2kudoQMTwJokyS
WOoRIWgp62HiX3Tw8NU4fuqTLbRO9hebc1kB/VKn0G78w/aZhyJPalQh8olC
Z+WywF2L+B/n5QTvituZx7s/zNR+H/87ezUfoaRNp3Ycoto4G2yY2cc9UHSn
Xz8LsTnnBTaKrccDrfXM0/EpW3w4F3ojqsHlaxVevr0aH/CS1L19FWncu8Wv
tZhNv/QrrF0/P4OZt2rYdB03HF0jTs+OXATx5Kko/a9ODoe/oP/cSXh4Ui/o
PTvK5P/44Oo9uViw8wiNKnoBBwxmooRmBZYZ7MOtKyLo/m1xrPxZytvJjUYT
6Xv0PMMfH9t/g8NNITRjKAFWqT0G7w0jUHWGK5y7fZY7+6sYLbkb7JGugO7K
r2B/NBfiXv+fcPLyNMGb0xfJwf0eHu+TRu3Z0Tjt5HE2b85ZfJ3iTxGtJ/DL
pkj0ihykG/pq2NFpgPYTRJE/Usg1i6UQukdT22YhXNekxAonJdAv07N0KnIy
vflzkt9T1WPF631FGcs7UHUvm405/cDa3DgLs912korOXLR8x5jjomb4L3UB
tTqrsNny4dQg9RxzhKLIZ1cOnjr5kI/MdmHNi1Nwp7szjos1pC+fdWl44102
/1Ars/0xjuKm5mJTnm594zZtmlcvhfjSD59vOoOBh2Xw4eHj3NWLo2m7njEa
/1Wkloh3bFRiPkYpH4LoQR0ca3gC5ny5xLKE5CB7jwu1Kwyx+Ib5tKJI06Y8
aQLKdysz7y3ybH5uMxoOhoG7Wxp7omXHSSmZkfGONWyHVyYumYLY+rOL1asO
8eYbt+LgQBCNLI+hLxnzWWWJE2hoi1NAiyqN93vIHqW/qs8Y2cxGrsjgbKcz
jJj4Eb5Nu8TtEGQClN5kwWoppJwxDrTGnYVbsYZsN0yjhZkTWGNYCC1IKUeh
irL6ZBtTktmRzepvfazfErUT1wwYwqOoOxjUVQPzxvtgvJ4Lq5jxGIS2C0DN
QxhuK0SQrPciJPFjFOxVR1cz8kjHM59iBgT4Rt4aT774UB/ncYYN6MRgJNO3
uVV0D6f8DONarD3oqYsRCiuvIc/xPlSdW81kBQL8LyEL3u/cSi5RRZSaUcUt
WBHKokJHCmYdn02CZ8/xcYawYI2NE14ttMBnpVTX/jeTlxgwZu8vh4NidQec
kxGDgmIdOi8kjD2tw/Cq4iKtvP+Wxo+djfqOhvT4+FrOflwUvKIEWmoRRte4
LbjM6Jh114kgVnum2PqEIJ32tkVChfp03DRlIi7Xc2O/VqygQ2/3okojY/4b
luP2Ka/46oHKekmLNEycnYCqS71pSnEBFXKJpOFzp/571ndi5x/iWdkudnLI
ld00mUC5GfMxapUveX33pZbmIqhtMaWO34p4+9EN1n3zP3A+1WZl3DiJ/K/1
oIZ8M78yKAXUc2VRsGALCh8Jh/RWafAz+smJvY+HhIQQDN8SBJmL01i6+n0c
+d0DH/oR9ry/yq2/8xy/nhgB7h/UMffUKbKTtwPlr6/Zok8bQLTrJcQmT8fr
Ww1wY/NNTqjjK/UcJaYq70m2xQo8PzeRjKo3cDrdIpjaX4NqT4JpnkMCi4NF
eML8vvW7hl103CKDHPZP/effA9xIKWFBiusyZBcOoEuiOQrNVqPi88e5dU8P
0Yy409jouAeFMwlF/+nqwzcNmLBCx0pOsYoW7MmBcxoyVGXLkUxkEz+9cxe7
UaUBVfa69E5wnan1XQT9ZBu+bvlY4nUzmPlBSUqPX8sXxf8HyirBOPd9IY5u
nE91Na9ZfF4pN11tEY4pNmWjjzSwv13J+PH5D15IrRReu4VBlHcx5FcMwLz0
cozY7kGbH7fD5Ze3+PYKCbbp1n8wymYYygd8uAWHMyBAqppzFVLHiqp4bFeM
IQvXQVbmmQgnzA5wQ26GnIhlInwZuZ6OriyHiT/fY/uPifzhdYdgavpx2noZ
afI6ZQgzEebvqV3BhDc2KCiIBMmF5SQYluY9s7Tp48XFcHFUKvw6K0vyb6+x
z3WfmJq4JPJOq6DR+Dn+Vq+jqIdp3OrUhdztFENyXCxHs3SjQLI8EdrmjON3
7dlqbb6hlQ14LsaCfm+cdNoFOxW2010DC3qf/opvrkTk716H2eev4/nLvlRB
cni0/J9eeNaiUOF//OOjXqyxdynkQxVLnFpKB3w0UKm9j++rUWOLFDN5RYlV
MEbuDPmSCq7/mg5/pR6wZOUPoBhdCU59k3Hn005Ubv/A3iSIgoFeBGTtS4dG
9a9Msd0NfTZlYaFgNzu5YCod/ZuFOpE9fH59B8VEz7b+lu5OhxJ06EXFI2La
FdZ//mk7ZI+CEGFiNo0C4KXF8H2GM6jn/4D30/zgwJMC5jqZ2NWcEHoRlgwK
cmFc/5wwSN5hiv89eMLOOhewoeBRQBdlbXIddOnOKgd8NezE6czR5XxkbuJf
rQVwccorEhsOofVqx1n7xfPIxl5kJveLSbn3BKDxI7boj5jNsk0udfFbpmCn
1y+Si4+jRzVAl0MjQEy6lqZI9zDb/Ug5pyfhtZR7bJWSgLJtb0GmHbHVyjfA
cGcRzA2Yh4t/yaP7BRWycDMCq+k6cDhHjU68WgI7vijQ4VuR0OW5Cg8U3+Un
quSB297RNGH/aLay/yyePSSGtwp9MGlMKW27aCVQmDuT88xzYLmH3Vhq83Nc
Mm45Ln8yFfQGRPHsxn5mul6TlV3ZQD8/SpDWsnUUMGsE1t2S4S+JjreJetoE
A45emH0ylXNOSIFyw21stmMW2+t2nkTLj1G8ySWmnzCHruTaUl5pHiZ9FkHT
vdLciYNhTKKyBP8claTvGfK4MrKKGrQTqTx3K9fxWZO/3z9WILffid8nOwMG
frxkPzXjoWf1ECeca88nHhSvz7ldzLrkn7JPCcspdooIXLUeQZqOC6HEWENg
xsfj46hYJq21i8TWr6CyezZo/jqJ8/662Try7iYMzEd84X6UPfzHVrGPfGH+
+rVIKQ4sxdeRydsfJ+me02C6zxVbpp0HvwANG2fjmTaVewQs+6oIOZt/YK0v
7NDXRZltqxWiufnXiPukSOpjhChlBUJKYQGoyn1nvpPkqTW5lplOzKZi/f3s
4LthsF/Uz2XesWSr0yJA7Y0aNf+Jr9fUEUf+bRT+TbwGWceKMSVyBnnfNMPj
ZlFsTPcaCNE1Y5WpK0iitxjUlNqtF/1Qp8l6PvQ+czet52TY8qAI8Ou2Ja2J
/rBdopmK2y/Smq505jgjiy9YLYqumtOp9ZkC2e+3wDt6ryFmzE4mvyAGdk5O
Ypf07LjVJWZsgvlJ1NXwIQ/tTJLzMMJdVaaUt8ifCTeOBOOCI/Wl+1NxyJFA
+PYdejhlDYaKaJNIgCeZJWSy2X2DcFqWg1bF14gH7eigyGrK6n7MGzaIYHui
OL6pX0JL5VNReFEfG9zajEYnG8HgZTsLXnoTT5XEUpr5+/qy0TdgRvhLNNm4
E9XmfiX3ElWbsqyvmD0+E81PijG7lDv0V6ia7PSc+Tipw6ClcIbtrfvHQKNU
kOWKsL9n55OBiD4VFcniqewj0Cfvj0LTtpLaCUOUSnjDfB3eswueDVQjJ0Rf
73WxJ4e+gobTCpi2Vgss/WbS5K0Z+OfHOBxSqeF+/FQFfTFNUt82G+VuLMe5
Qe+g9nIBnvM5BqoiE+GFyzSUNMyDkcVRNHFbId8RNhHDSjWwzckB9wVO5nLE
1+NAuRubNzcGHwXko5Z2JJ1sUcVm+Wv8mPFLmEzzchznNYl/ZBsFtw9kWVXe
uAsXvG7DybQo2PGykEasKMI/I0PZRDcLZDmeXNGOl/XVXvo2j7tyaM0IJ5hh
pYdJ9IOb3hRNS396M/6ZEz1MiqLKwvkY//A6LI2XwzRHWRheIkzqmdHoNP8j
+OeJ4/bjD6H89VnY+aca1n3KYxsnZvGpJ8shozkST4Qn0OZtibzXHSP86q+L
C7XDUEr9PFl/2Mw89iyn2bfz8dXqezRY+hqrdb0pYZ2ITf5pGxR+eRG13ALx
i1AnxGd10P5TsZC/QRh1y50YvlAUCKl+YwuvTkUnAwfqTtuCMqVL2ei0MOQK
ePga7Eqn9SKpZakp/+OxOFy3dIbdB38wxz29rOi2KFN9OQvVvX1pfroRjPqR
yCKlNWnuuHJ89NgcBDndJHohmAYkztKWqCSUjsgDBR1n6qr3A+djutSc8wRe
uj5l5YFfOJP/8qBPI4u7LRbMziz8w/eLxKGsnRyq31xE0fNr2aw6Qxa7Mxfn
zzemvqxc9u3gLww63cTGBk8gc/cO9m6hJnVciSGHT8bo7n2Bai9Ho36cML8/
iAfbH+4UXKDEdo+roueptTT3n+dXGrtj/NQ263S9k9imFEsJYx5SxKjVONrM
kvRGB+Mux1CmP/gHJ1+dRePDJ+Dvm43c9TNp9Duigcp/xdCFD1tpk4srCn3c
Q7UlPnxMYCXBNj+cWOcOy+ZkU+VEc7wWbkk6I55z+6PsqWaNA/n5E9pnxUFb
KQ9x58cxhb5yLjpGm9wsVNmzlaJ0762CTZvdIT5+bwLgf/ZoEK9Bc7/OoVyX
MPq25BvcPdPCPZxdzOtuL8WbG0tZv5GRwMU4EIMfTsHVYXJsRPgSGtzzlhWO
98SE7RHoJzwLG+yvQTyTwD/t5WQXFIwZoj3W3Qk78cLa89y3rQD/AA2Pt0bj
/UNVdK6kmVfQb6Kl1wKRG9kJuXICGMhI4JblzsdJd83x5/oZ1CCxBjPP7KDN
swxZ8/xzlLyet34raOTuPCiD8+elWJrQGJw0HIlzZzbhHpProDRhkvXSJF0c
GLkNav/1xYRb+tTSG86GX95gF5/NJb87Zcxu/gR66ijEfzRoocxuD3gdCGya
1DLatHgRyyrp5c10xHD8HntcEv2ET63nINC0HuLmjSdP3RDGmVRT1jUlEl9+
uM561Sm2YV0J9yH/BsVajQTrb95U3pODXXvVMW9hC8m0BcFktwO45kE0nigI
wwN4BKGxAUTtEnFzdTGtEVWhoaC/4LZPj3pjX8HFDY9Q28aIVQ9/pjHfHoJJ
lRnGuyayhnxvjNI1ow9WiVA02pD2LH3FfbIMomNemdaD43k2pmcaHuyKQJ0/
HaC4OJ0Uoh7BuPc70CfRG4NkAij33B9Y/dmUZb7tYFe1HEB3RRFBny6MfymC
UU2K6LvKFn95ywg8zouR5fXLYNAVxvfu/8q0Ot34kiuRtETpBLqVh7EI9/E2
7Q/GYtXJfni/uo3/Uz8VFv6nR/vK5PHJMRWB+slaTFqziTxsL2Nzmz3kW6XC
4nmZKPPHlrNdfoX/vUhQ/yDlC7ci9o31KJV0fne7Pgb9FqbdW6vpjbIZPRRZ
is8i1erbnrxgZUV/2dsEJTxXXMwsPI9gVm8dUx89h2xCp1LILV2bm75f2KvR
7RBgrg/tb5fRWPsIcj6qZ+PxRJueS2/CF+9f0q5lpVQqmWxdNXN3nYZsCMip
j6WT4bJwdNlhEkk+jpfvDsHcTUTJUVksKiwLk+xH4OD2JyimfBaS3fr4FR3d
bPWlHpw7Qx6FRwrTOpfl1Pqmjq3c4ESHxD9A2kYheGe2B8HcDOwOS8OJfBN8
fmkXhBqUs/aAKJJbpMYm/55TJ/FuGQa/Ow3btwzz+01GWNUWyaHyUC3bkKjH
t2+Q5Sz8PKFaNIo64k6y0tZPvNqqQRZlmwMXyv5xQmUHl2k0ijoiajhrdXsE
tzFMRu0yOKVGMNne5ZCW44neQWeo4f1oMigegkHtfkh9mwFrFW+ik7g6/XFb
CcpbNvG6/v316f9pgqbkDjj/RVpQ9MEe3hf0MtWH+mzgWhgEmndD1Rk1m+nS
6hT/WJIqGqPxwOLTVHh0EzyTmUkrR3ewib+HQYJPxrLPPkz5XBp9LhvDjWxY
yx1W/cCUZnaz2ApxFnslif1I/M1N1YjH4l/C+FLWA5K/R8KnwBq2SXsAn13M
4789UKUfjQHW5+bOQpfyIQiJdSIjxc8sJ1Aexm/4BIcU37CaJV/4Be73uRFZ
xazpSDG3R2o5yw00Q/Y1GfYMS+BCXy98PKuZ5NJO4HjFw5Rq8o7t1vJkbUJT
me6DWRh2QZHe5SCNCg/B82YCWshOUMOEU8wpMBj6knPxzMzlsKb/OFvn44/B
KUtRK/vTjJ+xqTTvVSFerSVu0s9cflPqZcyxmofdeZ+5iDv7ULG2hQLidqIS
1kBLfh2zcZlc790dRE8Lj+GFENn6mJ/HSMzmCgt+L0F8SxCtqt+Hb6aPRJ+r
ZbBAU0DRD7LYLrmLYLt8Ekm/qKbcuEx8lFXDmjpysQ9rcfMIc7C7bEmPHwxz
wVfUINvlP2pSF6O1i04zy48IH3sameqzu/USthq8a74NHdlylB11dQS/8AiM
bnkNXfUZwAaPw4W1i0BjXgJkzdwCmsvHCFatqUGN7kgydZb6x9W/2Mt9zqTQ
J4yzikXxsflpfNLympfRSaf/2AG89PoMWnuJgG5JK266JUyBr8wgYMRrtMrI
ILuDD6B0SjVMfqYGEi73OHFtC9RJEgK3gg6qOSRCpkdtUErWgNa8CmWPZ1+k
D/3PUPr3Mmx2cUYuYi/t6PWFtSsy2cOTUgKf2V0syL8Ut2g2W+UZGkJu9lFU
9ZuL+/qVsOrXIaa1kAdXkVj4Oyhmc65TYGXY9oOtn6BmI7noNK40DKDS/A5u
40kTFqMpgo5bjXHK7ge8zrCijYJNGND+SDQyyMA5otupPnkupU/UZwF6E5Bl
RuKpqX9xSt8o1tmmJjCbvZs8P83HkBJVuB8iLWh0CqM3GSo4tjOE3VOUQY1/
y5aZUwl9lM3AwGnf4du8ONbxxpf1hrvDlf49aDdoSVqF7ZiU64MlQ4vogZUN
fSvXw/HzctDSdTQN+T4k37uigoOy8TiyaBpOFfKhic2B9KZJB1dFvPmnsQlo
UTFEH92Og6JcDBVOekKukSdI9U2t9T3Z/eRzMwytz8jia9kTWKheQCEiCzFu
MBJNhGJ4ZRcB1Z+pBI04W9K7VYK60nLMNzIPk41X8JZRfjh18gwcc1yLcm75
4/pdi2jJ0SH2eZwtK5I5ZXXebT3S30e4+7otSYnnwQWNPvb3xi8Yyv7BfL91
4M+EZHw4pYtLmCHETD/H0XVdEdYyGM1iFK4x6VuSlCGjh7fuTKDyS41wyT4M
T0+xR3WP50SXhtm5m+rcx/536PAnjA4b78EMhTmkOqEavHd9A5U/19gZw1II
T3jOLal1YMH+38C4soVz1UhhwQeWgMPlTiayYwUn5nSWq1ohjo5n37GBrG72
yPSatf+et/Dz5iYw23sEggpL2Wvj3dg8vIcJ7/CAEwvHkVPPBW7qYXMU2r0L
0tw/sBP/OCd28x0qMwrh5yVuxee/3pB40Ht2vHsb7XSpZk8NklBVZwSLe/MK
ejwrqSzmGv0NkCKJ6pE4w6OeN1M2hLSJl7l9quFc3OK3IHfnGyt+YUl1uII5
N+5E57V2tKDxLJZKpMCOj1vQ/+MpftreaYDKB/HRw5Wkki0sGPBfj2s1NXDS
nCuwKqaXZQ7l8UVcAN6KWFEv2kWs4HQszx50g1W5Dh3Nd/nnB9dZ8JlMXHdj
ArXUVDKPqSvx/prr3JEkLRIfe4pFXpbGmUtLwHiiF/iZWNHPdgcSHMngZZgI
LpV9RZXtG0itR08QnXqa71WexrTm1TMDv9d8v2CM1dakGP5dkxRzynLG2ft3
wn9X5VkkNJLfLW024j6xLCtxTqM9HPWrTFlU4Av28tlKCHGURfNx09kvH3tQ
6TbhTpudZY+ungMl3SVYlFTKlNY404F9ymCss4GelaVj3O9RzCZKBptPnccX
fWbETLZxPjXDzEXvAxyV2kZKXiPpbx2Hn0SzaKVvDUZWFbLe33ZMdWgzUsB6
ZiF7nzlFKFFXiTIM2S4jf/0gXCJ3m/n3ptPYinxa2j0eDYai6dX1sdh0cQ1u
tivnlqTo0ZGESeTxaCNOqLNk/MVdGKT1ljeUvEecujvv1JDDGhtl2fWAEKi7
9I6ven+LQVgaOFUsQWcfZ3Zi5gPsSuxlERZS9EklDZ50jcAnV8JoFl7mxs7r
Yj2rArGpeDFr8J9Ds7w3UbRxODRkXCPJUY9Bzf8bmctspfuvLrEHWx79q+1B
mgnieCD5I9+0Zzu/ecx6vOGQBKE7ymiwIJ3rrlpL20sZWF3r49qkVKnhoy2O
7X6CLZGZLPTpDBxlcQbqV4pT/nRVK5UF3jiQMg61Xg/yBglErT8fQHTZQhL9
rI5vew3xpC7j3+dsZHWLrjCJS9F43FEXq3Yvoltvl2HjlDLUGkFwip7zfgkT
cWJJJIXrLCD7iZI2jh6XcbmbN729s5ZCb62iI4sb8cNwNMX8mUV/380k5fr2
et2b7jDNaz4JzllwnhWKbJz0Rdp8dQck6p/E9Y672Jb+mySc9Rwkf29GYyMn
tPwph4HjhPGIgTlOmPmWH5EXjt8t1mHg7WT4Km6BI9gdrPDPhk+b9WGeTALr
SL1Aa1Kns4NaNRCwXsBNDOlgD79MQudKVTL9vBrFvgObm1oAywfL4YFIGPqb
itrUCiVR8tyJdD0jEw2/ToRjR4Jw57SVrKU7nNV3STF+x0cMmdrLXIvvUeB6
6/pRvQJSP3acPkS64oGMZbQ4qgVdlZ5Dp7YdpPot5ExCPMj09Vj8s94C7lw4
ibMq75JIq/S/eb2NpZKxLNrUl5Iix6OPbygXoJSDm4eT0fWtPW75PYYUB3zI
b3k8SP0KJc+gyRRywByfr49AlS9dEL03CgtfrUOd0G2k4BVJ0+LCMHbaZPgb
4IFVa68xp4+m2Ll+J42Z6sZixcvxQo4EefW8ZAOK8yhrWjv8vqDL8ts30iJb
B3Zg8CaFPM/lKnb/Yj1X2lguF4mx7/bQhETGbuwsYetyy1BzXxY+ds8jm5Ao
GjeUAMc9Eigx5jCabGrkE3elcklC9+BS/A2aWFgGRs8VKGHNfvxt/oR9r5L/
9+5DRetNsGHHM+ucAjfcuGQJrmpPpA8ON8By2JNEDzdC7z//c107zGaZR2G2
ThF+OyWL/aFKZK/iw7xWfWK1B46ypx192J+kjJNUrlDps1203aqehRxzwNZQ
S36FWTJr2ash6BS5w6pfzQTpl2PAcGEmtIU60Jy0i+SxJY9pV4+ly156EOJS
zATZYlx1vyEu63Njg79yWJJtFxvF9lHc2Uh0C5zDz+ERFi18b5W44TwuGiFp
Yzb3OHPM+AlSnUI2S8K74VuVOqyeUIYbNxxgOnYa6GysQKvSVkKRyTA87Aln
u2dFQqh2J//Nps364s9A6vCotyz/qkDdJ3OtK2/dZNYfDPGr1XM+YHMmjg4a
iePi5+EMQQMUVSmif9NnSHgeAufKI6jprjB6dOlTkf5mWm36A8qFtrDb+XPo
7fvJqH7vHLn+fMi2PI5EZ4M6dvV7NSgWE1iYKPPPJumgdG8sLVDbh1OMhOip
bBzLerICvHqVsVNMBNMGenmvkSm88Z5tWHyvgl33XwmzP6iQ9ygr1IqegPs/
yzDL8BgU1VjOf+v3ZcfSz5DLhSQ6+CuDTd+0B078NxUCR5xDM+FnqPevJ3Wb
thPIZ4HE3R7K7TPHP4bpdKhkDnosvgpNt6xxSYEcbC+J5UyCZ8GLKk/at/oM
vZkvh2phPUztRzQWbp2L3PwOljwjHVp3RNPTmdchiZRoiiWSVs9pgt/xkHGy
FT2yXWC55W5088yF8m4enbevILOYu7BJKwNLsrUx8cUxZvRxKhmWfK/fH1TG
SnWW4ysMouEnnSxk6SUM7tiEZyY7wMD+RCzN2Uoj7+tApUEI7ffS5QOWRTKb
pzHMqCcMzgYm4ON7r6jd/TU/TTOB3PlOPm5hFF+h5wn63nfx8z/Pinm3GJ6V
vID8q8tYp8t163b/L6z18lhIWFEFRkZKdGRlMHb1h9H9gyrUuU0G2p2BT/MQ
oahD5Szy1gMmVz8e2o4VwbBNAo1me8BcdCXb/jWX6ztbTX4zSqwvLFnAcl1m
88Zf9OmXZAtY/a2ElE1l1qFulqgnYc5/0jnDbL9I4Y+R5ky9bR1LFjHDGeXa
Nl+m2VKZtwm4XLhDNy+EYK1bHN3YOIu4Zc+Y2JjxtPb2D/ZV6AOvlBzK1oQc
o5TgA/z4FHm0LXYg3xkyvFdgOEk/MkPnYll4vns8sz7RhrG/5/DR3xfQ5nBV
kgrTZ1t9QusyP+fA4IxxKJO2Ef0cduLYhgrm42KIq1qM0S/9EX1tvQCGZjdY
ltc6Gv/gHRx7p4vLRNez6gwREmuWwy+ZqzDqSTS0TTKjg5+1qGmqJIRp3oXd
YyTxe2sPtUivRWevSlYlEsWPVZNm+y3DWbH5S8yJAT60Mw1CJH3g6HF3tsVB
Q7BzfRKWXzjD2MlSuKapiJ4zfZnFDVNqLlRgtm4baVfHGmroyWQ3JZuoc1UN
hFWPoSV3xdHtP1UYp1/AcqJi6efC+WQ5IElusRdZQeo2OnbvA2TkT2EjXEVo
ctwjWA52JJe+nHao36LJg5+Qe96EndPk2dvHnxnptLJ7B5pg5b+ddpv2KYp6
2YaT/1Sw8l8RWH8qFeL1DGik1Cqyn7eOBsQqUdRCgfX3L6GiEXfJv0gfhuUa
YLvIQdZtm0dZ3jXUoRtGsn2R3IsjpfT49mi8MNqYXttzNG7vGny6+AKrdhuH
hzbYQfuEBXz6Nn+8NhxPkUcicYdWCa2tErO2G5cHcu928fvzaljnDjGK2KlD
srvfw42VQzBZwhZ/aFRgjV4IiIS84uW1v9Tfzitg3oIKZuN+nb9zfwubEyMO
4w32UtF0HnWD5DAqNIMPKZOjjy0L6EpBNlT2i9qUNKWSb+0UBpkTiE8dy6gq
mDaobSNbiTD26/F95v+wH8YNuaFsXy2TCZ2D/okSzDXPGg3OJoKjbxjbjb9Y
zuZDfK70LGibKW1z7vxS9GyzgwL/6Thb8zQTeXwW1/zTQH85J1zt+4fT2GRG
fkmLMEU+immNOcJ2ic6nG4Mx1ClSQ0n9ltzU32FocimCNAtTSIl/wZfL3ADH
ogSuvmYpL+eRheKFuyCu7zmruPOSab8q5wa0JOh1SBkL7qxEFUrkLHMuQnzL
U6it2cLu3/XCM+Z32bZrmXRf+SjVLwug8bkh5O3qSu2uwvgufibW9TZj65sr
bJqWHKiVTsdXlweYnsIKDHhRDyPqpWjUMiv2U3eofmXGKYw3HY01fcVwxu8E
+ztuAfkl5FDTUReSWfaJ+z940w8I
                "], "Biases" -> 
               RawArray["Real32",{-0.23329688608646393`, 0.1376294195652008, 
                 0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                 0.1361909657716751, -0.07115011662244797, 
                 0.0030301439110189676`, 0.04029219597578049, 
                 0.05379099026322365, 
                 0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                 0.0140318488702178, 
                 0.18612468242645264`, -0.17168177664279938`, 
                 0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                 0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                 0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                 0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                 0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                 0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "7" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1:eJwtl3c419/7x2VTJGUro0JKQxOv+6aiRMvIKKJFIlFpGCUzOyOlrMhIU8h4
v86tVBqiSYW2aJeETxn9+l7X749zrutc93WfP57XOc/78dTauMPWQ1hISGiX
5L/NdsPehTt3bthvJ/6/w5YNPrMNff5XNPz/9W5OMF7r1MZDihMpwGYmPJHX
Y/0/A2lWoxir88uhigJl0/wCV5qtd4Y3e13PIpViyKmyChbuPMktfTUAt86N
JcVJXjS9UYtUeyUxKkQTEy/UQPYcUwiwT8Pw1a6Yd20Iwoe6+OrFhym2cAlG
lYTg9uIffM+BapzyNRXfK3zEe887jLoCXrCXIWq4/lgHF39ukI3bcQv8He9w
6k3R1JdqQB+bhGjzfS9Y2TodU65ug+z643REQwEXnInkWv/uo4jlH7nRXAd7
UTsZ21LV2PV5o5nidk9cY5vGFxll82dEm3l5jbn0djDBaHYpwJZiQ0oSOgt7
J0pjtLkibjUMZt5N61id7B/Y9vkoO1Vuh28fNwvC2g+hZvQaCkl1JOcBa9a0
+bHAX12CHE60s86NR+F7xBlw4gU0M8oGu4NUqCm0gF7s0oWRbot4xygVNuCc
zuePHIbPRTNp4M9C+m3sgJo618HePJRs5c2NMtcn0sZGBbz5OpaUc3ZhpMoq
1LLRoCfWr/kgtwimNygH744vwEzfG1AuiIQZvAQ1MCOKcCGqtKiAsB/ecH/A
gDcXukCeX3dDLuaAUoEwRU2rpTsFdfTwkT9+GhvHCnJScN0VR9p92YXu11nD
7dxQSHFUwHuP3WDiiTrqnZ9C/r/bQPyTGF4bW4oeS/rpvAKAket5dOuVoLiz
iTi/+b7x3T4TUB18S8MeGSQZ8xBiT2ah11lpnC7yFho1lFG3cBRKD9vAs5eF
5P4nmTLqRbFrjy/2b5LBUR8FbN6OAH5bRBabmChJ67NqYXRuMExZNl7QNhSB
qetiYBUXTz8DpGjv+gyo7F4O04ps+dzMBNq4MgutXoayUd9jyd4mTnDi8FwW
tVeUxBsYL8IVMLlDoXT6WySjN7X8vS9XSCegH4yTluO6T8nobTsJV/S8h9py
e5R6EoHOjenwPCMBJY2mQmd5AzWY70S9ERfwkb411Q3Hw9ya46xCfgm/oH4D
vveSwINnR5Nq8m1m6OQGT9lPdBF5Dc4t6/i1U1rAZusBHM+mYGOLH9n3XIAe
l0SUzfvCDr9uo+OnvmJYdyI+1fkG16UF/DspFyxS5/l5w+uZikEKzfs5Alev
mE3y016S8NLbMP33WfQ6GID7Zh7E8BYxfJswsbbgvjA+kN9qknf5HniGhFJB
62u41pdLv+69/nePkEngyzLqDkjBa0tnMGnvOKYXqIziJVbk/J6HCGsNnLHu
NVx9spx1NyXx7oMmEKw/Cm+kTQQZx190zz8Kii99E7QFajOXoSAsTFX7915G
4BxvERIZPAwddceoUyQD86UjKEKmESb0xzJDhzwqyczHnWPnUtL5Evy24zY8
CVHGjgA/k4NmUfyL7CesfOoVkNUUZfNkvFF+nwaNrlqGO2PicH6sFF1ZMQ8d
7rvitWRrZrFyDp7TPYx2MVc598kb2NmTWugzp5Sm9I3Dr2wyDiRsAt9BZNkb
OyFbyZOCnSTJOw7QvbQB5tU+YAsLfOme/gA/PGoL8D078GXzK1hWNYbelJmT
Rk4kZhbKkrNSGSf7yYQuLNxKJ0iYCUqSmHvuFjJOH40tT73JpfU7p+X5EP1E
VKlW1ZJq/3vACdp2Vnfvvcn0JznRZ48omnzJlv57FcEepBfQk6A8qFjcR27u
VfSoPI3rXKZNyt1iuNHAhxaUVLGiX2Pw8+n3LGXVO9j6V5u8d38WqB/9Llih
2cl68gxxqdlperKnG+UkHPjPQ08pe+xBnMsU8K5jFmb5rSQT1T9gedmdcq6t
QGFNGUxd3Qpc7m6WZHUWX98cZrtdMky099nRXMN4gV7iZBQ/Npr1p0azEx9z
TRx3+5Lr5pvMtasddtQLTJ40+fNTZhTz9Y5T0Sjhn4bbx+EpjyKEM5GwJXEm
C502xDaGfuIXf1PCn+v2o5Z0NkqIpeL+cfq4QpsxscQ+KPI/TbGlWohV1qht
v5zDSVE0UO0Gr//q07Ln9jj4Iwa/Fb4De4mLLG1qKE6aKwIxupOwddZ55lb8
DQzkhUxP1yzB3fcLcNm9YD457j4TjeapqceN1QhXY6quExjtuUtVFqasIzSF
DayfRK1b81E9aw23uiyQXfP9AYpRszFyVwUc2qHNFH71CIJW6dNc0VI2Vzcf
Pzx+xTcc72DuJcZw5tcu6PzmDosbc/BU+DZqefCd/5uqRI+m2eD+wKkwfc5k
yhDKAX02zDRztNF8ZSBTYPuxUTaN5nXLocO6QzBpRS5JnR5HGil5JHfDFSfv
OETvC7ZAfPM+vKdZB9+X7ETlqkusaeEmHEw6S5q316JoRTMElauyrkRLdHRK
BA1PEdPO5fMwxbkd3p0Nh9dnv2HyWikMlXNBt13HWa/VIfS/FMmy3P+CyK4M
fsTHq2Dgdge1HbbxIjIMQpkevlKchwEl87jNuYdxzMrV+Hy3LfvspURyYkdN
Jg9poO2LBvTzPEmmGSmovqsIx49T4oIOHkPxLlWaYHYQy/dNI9c/dXBPTIHN
2ihi6lTnStN+cuzZK2Gcs8gC7XVEqTVyHEqZ1nFPX+bC6x8IN1728dm986Dm
uyWrSvjJRTQrgxLW412tYs4mVIQK63PZ0z2jIFG3mpuzJZcFyu6C0qdLWctF
TZQ1qYMxDv7IS2hxFdEX8XJ7A7p2xVGO3RzUF1dmMyrS4cODFoI8X7J3tcS2
j0dIzXYKveFjYdWWIsHEhCx0rsnlrCreofXTR5z+zzVklxrEzH68hVyxF+yO
5FbeQEWE7DPETL9uFLD77ufpwuK7nLZ9Jpta9pwFyIUI7pIMzZy4B/9uqQfT
xRHw00+vNiR6AtUHh9La6dOp9vQJiEq/CXf4LLJwF8fMpRFY46BIOdZjafmp
XmqvbiWjmUIUFLMBDv0RowGZ4zhK4wY1OwpRv0Mmie7rwtasORgf3MXbuzeh
ScUG0mi0xIVuO7FP35lfVv6VXZTj8OfF6XhXO4GM7AZ5/oMoTn8gRoFnt6H/
iBHsnWQWl+g2Hm+vQzAw2oJfEuIpU+gzzA0fhTljtJj2zPMQb+wAbm078MCV
ZHiaJAGqnz7BizEPId61HDeslaDsvJk4aLWfHkTkcq9Ew9FF7wZ55c2k9UvM
yeHSfCrOnYEblRzg4l9b02ipNhOvXo4Nm8aThpc46dX/YTqHVfFBvyQ+u+VA
9cPPa+SmltJep3nYLLEQXfZK4dtXz022TXvHdorksG0jy0A89z9WPe01eF42
wfXSk1j3ZBtUz7YEownX2fevt/FLWim7IuHJFgbZcvukpmLzKBXi14Wh67//
pujpBC9HOzJl8y3YqXmf6S71ZvZHFNiLDyHcTO1EnFIrR20Vo/Gv5Uec4F6A
jr5X+MfBjvTor3ittGgKdVmdpupVh3DmzFM0yyEOpthq06yduVyL8CnaY3YH
Pz7Kgae9FbBd/C7mOFiwvX7ZuFu9Ahw/HMKmqCss1XSQ+5weCu/9ZMjh+3em
c2Yf2bi8ZOIbPsGhfFU08hfG01LH4cWRVDAtqmfHJkrhcclzzNn0GRvYWA3P
NrmysacLaM/kFJJKyYVZklL0guPZZfCqaX47DRsC1xCUXiaZJC8uezAFrg0H
QGVhPCy1F4EfjoX437bJ2HczCu+mVrH530dDhZUJ8mOSeP+SFrYqdTsOb7vE
hci18o7Zi0GrWgP3HjdEq+ln0GuI55+stMJ8j5s8846jybeekH9QAWZZ3mQJ
x9uND355AafmS+Imusz+27UQWkev5so1/wOlUFOQDZiKXh81BFomCvhl1yg6
j/dBd5syVTsLoDGKsPTCcfZFtJIZ+Y5hqzV2oOaWU7gt35h716mEZYVnBP0+
8tTRdBSnvBehfPMqUFEXQl/vO5xxuSXwFIn1c3pws08J25WZjj3BlrjTcCTd
KzXDSsMTqPvtApaPSKOd7ouptktYUHpBh72oFscGZzcwC+/lH/VE4ln3GJxf
mgc33CK47VZXmd3hYHa5YxNZXT4HI7zv0kOnbaQGivh2MB6r959lxfeu06gv
GnhsYCtTPraD1aclsPWRHWAlsxKnXlKm9u2yuGRpE4x6+pxibmqj81sHEvFa
im/9B40D7orUzro6Fso7AvmSrUa0/GUxTbl4ixdzHyI7iSJaJDECI6MDMcV1
LRuIm8VW2/+GmENtrPlmO1xZ+orZyw0wRwMT8hr1klmMLQV+dDLYbEpmDXMm
kIihHS4IiuZEn92Fo1Nz4OB8KxTe1EpWvyLQP2cCqg7NpwbfRqDWNwT3clDj
rj4FJHoxk1gH0g8jFna1hr3mdPDwO2Qhh00x83wnDg1vgURNH8GG3b54rd2A
1vPJWL+9Hx8P5fGlJmdApVMMP1zooTlPnwoq0ybhLSkv8FIoY3mWxqy5bRPp
y39gWzgpNmGBFdxceZ2uupkxlYPyqCKlyW79DgOzhbYsZ8oSFp+xEsJlX0N/
pAEVJGfBxtwy2qP1gpu134EkvCfAO4EZO34yDAuTisFeLxtfSRlRUYwLvKi+
hUskJCjcYw+7MW2tSeL3aTick4h3Ehai4qh9aGjagWWsEi6vOsUNiEVCvMc5
GMwQMKPTSZQuZwkb3ePpmpAtu7oxjpsVIoHqpttwWwXHVcisoqFr+2HsMlss
fi+KPWrTQVjbnmG/H57bp1tr+iud11JRIG3fi/QuKIQMtq7Gzb1r2MF7jNu0
QAEi12jxASfmcwXrj6G79WHmdquf6fiOw6e6nVD85DV87Gwnx9161FnymfM1
lyN910/c6rAZ9Mpfh4quZdH4vDMs/2wc+XKZOHrsdf7+jnns6D5HjM5eQB+E
/ahCL4b9tlXEBzpjTE/1plHFgD79TjyAvf4jsKnuMXJVUuD6M43UusYyxx2i
4JDpAH+8j9A5P3380tkPn4XFUTw5kdT36EDDfz+x2W4/CUWswmVLy7HjbSHv
862NxQnJ452+m7Qyv5q9fZ9Okjcf4W2LIvKRlYCqtjz85LqUvgy4YMJQIwsf
30yx9RYofGw5OWhLYU+KMY3ef4HVaB/EffUOTPfGHybd48JeavuS7tSztGa0
AelqmrFs/5HssFMgls3ewC5MrwcRZ206rGkm+M9ZlTY+S8MVKZVsmYsk3Oyr
ZPOHMkh4TRdvecYYP5S18odYDKXfK8ZHQfEYO7EML1hO5mJlxHDk82SyuqZL
U4O3ovqSJlw004bzKUtC5WU/WYzQfJwYmgC/eQEqXvSgvL8jKLAtlP9VNJL7
FjwZbbQXkO63LD5oMAmmLqtlhz65U/5ucbxh0w7v046ydo+zTLNcAgPFN8Ay
oVbMeBqPu/74QuHWdth/ogecdn7gPz5MBrHBbyxYsJY5n7xDl5zHU93702AS
GcUKxMLYzKFNtO+YAYmOV0LbcTn4RfMchZcexIlVFtTZGIZfN16kA+Pb4UZq
GsqW7IKyWo5+F0li8W8R9odWYj1fC/P1dmHULxtw95pOXvuGuAknvvOP0o/Q
4OdVVPPrIEgWtjJLlX5wTZdFanoNXSt8aO6vfTT1sR+ILfOnF28Pw5H/iuHX
n6WYUXOZVdiqUomyFg4Ol4L3p3tcS5A8M3PJxDfe8Wx5yXS6e0aKG6U6G5sl
Q+ih/xl80x9HIt+Mca3HNBTILsZp9uqkeKaU0mv84ILORywaD5zRyzIW65LF
tYzcwSS2XSG9WUakbRWOG46FkFlTMM7eVIZ2u8awxAAlvkM4keafVhQcmB8M
Gb9j+ZnN3fhCLhZt55ah7g8PvNRrizOOdrEFGpoIDy+yfzHf+Nn3xWh2II4O
PPzB1urVseC1zSYOnmPJJsCa3CpPmFyZVYu1IqMpdpkFeg38wdke01lu9EPI
MZ2K1fpvOM2/7SiV082N38hQafII6s/Uprzz5fRjbSZt95nCVrNEOD1ZD8e1
ypPHyFCoXOuBD4Pi2aqGVbAmLhCK1r+EtC9bULD6DtsTspkcA7bhHdlWbgXt
ZLp3Ao0P6ciQS/MQpL7J470DH8LohjiT4bHJcP/PfLzarUd390jgh5pcVJWu
x8deHrg40oF5jdekJbf08UTwCoZHbnGVS8V5i/JQfJkTWHP91i9MfhWNTx5f
oYU/57JbmMFJi+aSf0E6bHs7g5/14SkMlBXC6IjjTPWfH3hWaKKU1CiB8Yg0
xE/V7ODfIvJeuQbpgTztkhQiuwcTBPsmPUfpKk9j2+ndrHbrTtyfcI+drejk
Vr1RhKC8pRQeN0z11xJxsYY45dvomDb23aWmzmQTcbFaNAxxgq678pRqMZVa
bOLh6HzAc9YzmcnXKzC2eDzY5knil7mhJPxyKs3YHUBy9msw+uNJLJ9XD//p
nYbw01OwtiwWqjKP4SRlE7xuIkuPHp2iQq0Utsi5ECyrmlnPgdNskk4iF/31
NOkNyJAzJwWm438QHjxEI8ctxvtpZ/BY1Ru2+2Q3O65Zxxsoq5hKK41E8+qf
8DJrN58mmwYp72VQ6FaMQOqDDvU4hMHJw2qmWyelw6LD01np+ANMf0Uw1rtx
kC2WiH3RknQ15Tokd83mXLcDmkfXMIldcYi3X7FbhzVMq6DQZLxZEL7Zocve
mezEk3+V8HD3UzZ83YtaMprQuHI1Xmo/xKoNU1Hvfis2XsnEio5G8KXFLCb3
PIGwBSyduAOPG9pBnpp6rZlfkOB3nwmZ9Uiw4Rwr1LozA4VHnmQnlF8wZbEC
/mypEj5a9Mgk/4kEjV66iqw/u/IeYcUCQ5MGKPnymVOcq4MTzKNoy2YdTB2M
Z7EDG9DpmxON3iqN85evgJdLJUyTRRVJ4bwMPhg8gO9iYnmbWZFU9F6BrF1u
06VNVwW5bd9N5C2P41uXe7yw6jgcqfOXn6GfzqLVLrP0qCjs8vxlotH2BP9I
HaLrH2u5R+WNeLbPC8fe98PUq6qg7oBo+FcFGyoXYPmmQmpyPYMPda9yz74d
xb1C4ew76sGazXGQPKNUoGh2kXnVFbAbm4qwNVQBlLRfAecYTgfGhFBd9TdI
9M+g1z8m4WwTXawJ6+Sa0J8tPpMC32N3Y1tSE59UdpWJFYvXPt44H2UX7mJv
Rivg9hcfoMVsMq3zt8HVtwgLN/uSt60W+VVK1qbUHqPupQWcj1kGfRj6K6jY
o0k/UtrZ7FWriB88hke/b6Bt4fHcsgwjOmMRyeJaKqjlZjpvnxQDUkbhNHVU
PTOfew6Sbv2bg/22VHZDngqP6rLZnukwy38YnC7UspWZ+bhjdzr1xYuAn5kw
9XZ6A+9iwiapyLCHI9bApcylVD4qn4lbjqgtdekSiKtNo6paaVR+eZnqV8nz
aiWTSbojH/uCetFIYjJaBczGMa4XwH+rKvrs2kEdMzVpdLkH/cq6xE08gLXp
TpmokUKstpND15+JcPhTAx9aOJ71N2/HnRe8aOBsKk4yL8M5NjPJKeQrXEoN
phGTN+BIj5NstfYxXDsjhqt0jyQDXXfscqxnwm/Syeg0z4bExmLDOwGpS0+n
Y1NVSGerD4T8aSITvVhoUMkXpCdE0hznCFhgiKymRQ4XXu5mFn9S4fwNLTIz
jGHe715x0fPTyNgpjRxSrMiw8DjOcljNCq8lUENCEmHiIjbXYgQ9iJOjAo9M
/vbmWK4zooQtuaROHK/MKe27wCU69mP7+AI2TTEUuw5uZSJTo5GtOcoU049w
Ib2N/MDQFXy59Ac0PWxk2LSPzCtfg8uZI+zDlt+szFaRnXfp4VqrVtIWPXdY
eCMXi3SmUJiPIvobbESw7mdHn7+GijlJcKVvGRl1TUP/WU2wZokuOzB/Nzt7
whxHTOukgV6gefbbcdXLGNi+KJt6G95D6JdE3Kw8nfta9s8zZlZzAy2dDFaM
J8fuDnjlN4XJXjpOP9UC2daBAghI0MKk3bO4g6bPaTZ8BnZ0G937fhOuDBez
rNlSsHVGG9SP96Q948zx8vk2lppWzpx4EwqWEMBEn8eseX002xthB5Nn5TC5
3m3UlHOIPBMk0Wpfm2Dmm5UkNuYNJQalkdRgOPupeATu+newRqEOSPa155WW
T4Nao61oo7OVjX4sTLM2T8OyvSWsVEWc1qavoWt+R2nquxNoqX8AvOr/cRMm
M/gyhcrNZWprYB6ditTA0z4xOPFKG/er6wKlP4lgho9fs90TJAQDjhI44mwI
92oEwl6NFuYxMgsMEw9hlq43dlsdws3PEvDBfAOmEOwGV64uoGNx+bBso0Rt
18oiCFpfSPujY5hM3Da2cHYuUOJjED/KU+fwV3ikwOHmNE+sUh2CwqQIlnb3
MTu60JAsJ96GEYJ17M+Yf6myaCQ+fWHMikzl6ZmiC9bLW9BN1+UQUT+HWSdp
0xvNOXheOh2HMYduH4igyrOl3NE72czcexbLLlai66dz8V1jNPw8LYo6dVH4
NGw8zvb5lwVXGjEjk162JWYGuOjdhxLvetZm14WCXwQzE47z5ybYMP4tzzQW
J8CxxZFGfTtToGm9BTPMvseMEuPAB+O47UmT4NvNQ/zkH0Y4TzESn8hnMscR
fjS7YQZxl3ZxoqnK5GSqRg/HNzOt5eq4N/E/WPg2mu5t+Mru18QzjU3PTUxX
qTK15SWsPW8+fc0fRR/KnsB2m0h69WkePRq/E1wlf7LSRmWKn/2V/fyVACeL
3jC1D/mgY9oJEWpLOckbPqCcp0uHP4TDlc7Of6xdz9RywuGRTzQbLvFkXRSP
Z7zNqIKbQZOSrGlPiAdX6WKNh4I20Zd2Cdox3p6eXPGGhYXPKGJXHCnkK7Ls
3vHs995VWPZxAf45MAf0bF6CaJcLZg3FcLX7lrPR1nZg47QEY79upy+t8YIp
rb+5pvi1/KlgM5BbdBOCT8+juFYrVjscS0pjrPEEDrOl69aS0syrxjbdGf9M
xJm83D0Fy15qoufBAlL2mA/mxbrUvrWUtxjvxa4sHgA5c3/Q5OyY7UYnfKa6
FifOkGPbneTI2f0EN8djOviYMv4Sq+FtY3XwSkUxJRZJ0KOOSFqWpkKGcf/x
aXO34wj1qXCq8g6z/t3Lgvf84ndriuMZpyBMt5tK9+suYkhvlMDzajr0akzE
oaFStJ6cL3imqMrFH93Dxu2fiZZRBzBlz3HkD3N03fwoN9MuAOg9g4teIqDS
o0ub1A5i9LVf+HtUGD+/Thk/xk/FUx/WgUf/L77kQAgs2/+O2/s3gkXu2YDD
Ya9ZUssS9rjOgTvn9B58+oyZh1AgLAnXwULrHJS5zOjqhb8sYWs+nJxzDjKM
xTDoSRqNzE0zuXbnn59o2qLb3+OspPowDnUcZxk6+hR2/wQukHho7LBgA16S
iEHphJ8QfT0XvwY8g29nlhkHawVBYU9CzdcDuTi+cyqFv94OA48tUGuWPDpI
jKO1Qie4r1elyX+LG7PYPGyy+9cXpueSDN/aL7ClqQ8gcdcP0oz4DjndZ5l3
YQFKtS5BEz9r1LOwRn01B0oLK2WXLhgx9UVxWKpwkqSKxNicL8C8i0SgoXsd
jXxzuybsqiQdcZbAWdvskGrvsuwWDyhQl4SRXyQYmMdT4IosJrt/KhnOOwn7
svUpvD2FxE+dZDnvy7j6Hj/6YXeQE8kLoEUvt9JA/3xM8tIi8b56Us91+8dY
J/GOWj3btFuc06kxgcNLJuCH1VVw3q4V7v9Drg0HOtjngz9hwih1bOpUxpYX
m+jeeCP81w+9XDWvO9sGG8rXoPqKPbjk2h2+siyFUxoMxapbR2CPiCuTsgfm
sf8vjJjSDLPnXSaVY79MlmtG8bVFAsYu7KX69mMkHB4FmXqLwCrFgaYf+sYr
/icM/W/zaEXle+ivlKe2tYfZXWUH+Fs3Bp0NmnmdyWmcxN4wTLWWJnGnD7T3
hAFVfgrASTelURAugHcDWaA3zhn6258KFhnPRkODFVTyQhhPQTy1JuvQaqMI
ftP+x+w/d1m89l6KD7q8gl+rK0c2NzbTLv/vXH3iFDLdK2KqMO8cnFh/lPnN
1UKf27K1OfPkMGCUEfXeMsSJdzbhlbTr0DWQBiHzFGnk/ALmIh5ConsS+G0Z
eZzL2mWAU3TYXOc6VpgTTF5bqjBI7Qhyvh9YYdggN0rIDwLPLGMf/uk/1ceW
/fUWg69GTnjPeRLNW7Mdn0o95s31Z4Nd5HKc8a6PdasYkNAca+Q/WWGr0gko
MU2iIdVUjLx+1+SGfDol2MmgklwCCxvUoeRyacg8kk4SD56zwJhELHx1BcVG
j4CGiDKK/OBIee974fn54xj50hfP3VeCSvlEXlIqj662S5NsmzXCvnQc82JG
rbFgHWxyOstY8AI4PWCBtZP62ba2m+T7xt7k/MaNqJ89io20K6IE+U+sqJJn
9eKN5BmYB8/kS0mxIwx+HDjG3R8bi8XNDJo/ueCgvwx9rxHnGvl2cDs1kcp+
VGGg0MjaG1PKYYvuT1BqG+A0+7IpOksKJRdmwb5d07FGLQiH9xawh//mse/C
eCZsY4Gf/kiTe0gcuimF0JbzBvQ0o42cy4uZ2TsXtBF0MMsHP/gNY0uouPsE
rAuXQy2fzaT2T9cJ3aFcz8lIyvFywLqZznT5+FLOZtIGNBjw5jt+XcTqxEfw
KPcsOc+VJ+6FJ9EML9zS64xR7Zspx/oU3O1NYDf3TGdVFQw3V9ZBnk0E63+k
hFJr0mnrypE461W9YNyhJprer0ur0iLxfbYGHbr3G0drXWV75uZwXjHSzDPM
B1WOE2Sf+cL/Q1fWcq6Azu8bgb69fhS5wxlidhtgUWMyfPqjSqHpOlyWVT6r
fvaD3bA+ajI2WYkmbBFlZ26fYO8EN5mrqwl91L+OnlMWMPRxph6ZJOgoLWdm
18ZQcXUOes1OI2WncjovchKtcAPeETzGGROzIdLyFBTGzkN+kzacVLVAif3F
eNl7Lf2Wnsc3HJFlKmNnsAs2q0G9Qg53nVJio9fE49vaaNxcPI1mRueR2mAq
BniLksjT/SZqN4Vw79/1pCyyjYYWj0KpMZ8hROMqU/M/x0cYnsAvYRLUs34O
RlguY3dnKJH8SksWN72dVQdakK3UTubnfZjKtLKoRNKA333dAAcqnkNLUwa7
tD0TBk2WoI1LHN6piQCdL1WwyrqPKkatBN+RC+h60HqKS5Yli+4iaFv2kat8
4w0e21Ng0ctXoFp/ntUcdcXiX73Q8Og+/EqcBS2+s7mzrSq4Xe1Lte6ho1zo
/RG4+p9PjNT1Rd1p1pzN7S+05pkvGhsB/dwrxoX+MaWFPftpzKwkXmZ2C2sq
zWeLGg/R0Y1zuYtVjJed8BUv+CtTVGEGi5VtZsGFGiyncysMTxNlv2cUsP3j
JrFIp2K6Zd4NBZbhOFlOB+TzY6DkajDVDjzE5UuOC9K4EzRfqKzGY58m/cxY
jvZ3p7Ln3xTQb8MoSHQ0RbcVjXyc6Ei273cm5rweQ68z46hlqzu2j0li6ZFf
mOQBTUr2ymJ7c/azavVuXjM0kEU4/WGR1bpQIbMOmmwM4OyBHjZLeD18G/0L
3szrh77UxaB2uxY+iabAlxW9gj6aDhkq3XzCZFduzZ8LKGcUhUNmStTzH2Mf
HpaBXeH02g9PFGBtSiT/qUMc1SAdKtUzMDp8Gg0rOFFABmDYhDdg8UKK8w5L
ZG5aESSzSRE3qM6kz3Nu04aP/5kY0kW28pgKe/d8pMCsRQjHashQwE5LEvIL
R5D/A/cKXShdjedvjQmnLoE85Kc7saDiRlwx8Rvsj91PIWddcYVRP0tUvshq
onJZ6uqjzGWsFZn7xsOHXbfBfrI7JETloa60cm2fnBErMjnPlHNu4yGnaFRU
kjI98asPs0N7OZXoMfSiTh7LHjPWbpwCRsIjKC9JmIbnPAUhU2MMlFanlpA3
JhFxKdzh/maULr7HDY9OYbf1VEzHmK7BH40KtN3+JHfZsgx1tRaR3ZoSlrfo
K378mIP28qdpcUwPw4EsvAaTcL5LMjWf3o2/5ySQ780l2H8mEssVM+nYNsSf
O5LRuVwWi1wUqG3ze3K71MxO/HmIO4RuQ/S1feS23wDFPQ/grbu3mcL3NtD0
yIHlUzpYctEdVjAxF2X+RNIjN3NK1pKlLUeq6adfHRvVvI5urOxj1d1jQGOK
DCZcrmUtEg2Udoznn80opgB1K5Q9f4vFZj2H/LDLIOJmTUImQHaCIzTktI9m
bz9FaiK2lHf+NpQX/8u8bmI0IT2KTgXMwEaBOL1q0+Ez8x6xvj0jqOXJSsiq
OEIHFW34pomh1N8VzfxqL4FhnQOaSXpS4EAHo8YEPPBEHOSrLrI9d3PYllNi
MP30b7ZOZQXUi9ayD9UBVGJYhXUb/ajaNhX3BOmTttUU3ieziJHBDTz2WYU6
PSzQ8lQleJ5O4b6HfmFrPb8yLs+ZPKYdA/39HqD+Xz5UiY6hT9pPWYNDLqrR
HMIWN1Rr3Iv/B5XLHCU=
                "], "Biases" -> 
               RawArray["Real32",{-0.30062639713287354`, 0.12008462101221085`,
                  0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                 0.09417349845170975, -0.10099706798791885`, 
                 0.08236243575811386, -0.2349618673324585, 0.1114811822772026,
                  0.2365228235721588, -0.1581137776374817, 
                 0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                 0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                 0.08413115888834, -0.2386404424905777, 
                 0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                 0.017599068582057953`, -0.16277392208576202`, 
                 0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                 0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                 0.048794329166412354`, -0.2748609185218811, 
                 0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                 0.15255072712898254`, -0.054961107671260834`, 
                 0.12484297901391983`, -0.013735197484493256`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "10" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwtl3lUz9/zx9sXrUpEu5AWovRpeb9mWpRUdilEJJUtIWuRFq3ShohKK0Ir
kt6vO++SLElSlDXZKWvZkuXne87vj7nnzLlnzrl35szM42mwImReoISYmFio
3L9jnt82x02b/HbMl/mfE+C3ztJi3f8uLf7fbhrPRfPxPYILaX00KTGWneh6
zPvWP8FZb8PJZdJ37kW6gIYM7EPp0G100UZZFKwyA59f/sLdS9AhqRhpKgsP
pXAWhHPjDWobpNTZ0Jl6jDVUstSb2aDl5UEG6jOx5eZmwbddqjhy2zBscz/E
LsTFYsa9VUxemMW3x7uyTjkX3qtoAw7LK8WTxXv4UY+qQNplFbmpFrC4kGiW
ejERr0+KJrNVN5lkyzNWMXQB3YQ9MHrrAcwofsKbj8tHnXAJitXaD/GrJkPR
gkD009EX9WTtwb/1peij/x/L812PohOy9mtyZLFHUIjh9l6kP+0YPl4JaN12
DeLey7HKewpo7j6cKVYeRsMP//5goAsOqftQpaqKEnqbmHKTOX43rYKMM2HU
bZFAHy5MtJ8x2xOuvGknE/0aqPcfhV/L3vDusrb4avgV262r5CEVxdkP7xS0
1TzPnzx/CmzYo9rudj8cflUX1oVOx9NkISpV9EGHl4+h89UMdvBDD9vqvwK9
M3YyZws7yngTjVK1XWz42G62/e1vSD51EiwuX6Y9udLIPLSQN7vKfVYth4q+
icwnMQYtR3RRVbIZ3OzrBFMbN7utH/yxXWEOrnv2mt6sfIDffnyHdL904dqH
5vi7IAqXPqhlGpnNVLnoDgTsm4ch4VFM/NhXZu8DtPHcbc7X5BBqG3rQtriv
zOzDLLq7V5Lk3B9B+vjNJHFQHv9KqaH0L32akpWKz6oW0LaVvmS/spmrNLPA
ijIb7iOUgzmzorZ3nsTtKUHX4tm0K1rMHkZuhw0mi/B1kBftyt/Puds1oYZZ
L/94rxAe3IuAL1sMuODrf2C2+jf6HKzLFgzW44OXAbB0hqy9VUY9vD/Uhbgo
C7QjLwMffABHbp5Nwpxgu36TYjhat1zokCkEq2FDuJSVd9jnq/Yg3jILL6UU
Y7Z3NXt2x41+DEfcG3KKtfj7cIftPFBFxoBfGKeCipdX0uo6IzwhtY9640+w
+Dnv4fHjeFicqoQyHemkGmOEGWrbcL5hMM0rmMg2mREleBth/5f9NGymPU2P
tCPfEV9YpIMqRj0dR/NeZMDRg7E4xvUDM/8lhWKqGmhcm0ZSQ84IWl4wplsW
Q66KCqzEOI5M2k9CwEIp7pfyCBrepcUPD7/GX7vmjXdU5yP6J9KIgFUsxzQK
/zujhDERfmwwJl6g1fIXOvbX0aKqVMH+92dZt2AJK21agJ7h56mViyHpbFW6
mvyCu9hUw8a9DOSczxjglaoRNDq4nSJM5/COhauw4VyUwNkmCm657cGciwqk
fv0wm6+0mK526uD+66fAtfo5f3kUww+3fdgWxY382U/xWJq4AjvXfYYDc4+g
z40iKLr8TXDi8XrcEpTIB0pMpuaTeSx6yiSUSv7Jns54LRz65RhGSuTgyt6b
0OscSdWqaTR0QjPOSh6E45dsMXqJFE4abgEPK8ajzTwfbHohR7E9O+lOYQM9
erYMi3+cZO73Y7nB/y5ToXE+bTVsYQPJ2RD8/DV33ewtG6EtopVlpRAqrkjf
slIozq4W5s4RCS7kfODnd+/nlW2CsGvqB4g5ifgjYzSq3znOLgVLkUZpBtMJ
2888rF0gbEQdk7rz82KD/wIKvDmaVu2QYxGqE/HUV1WQ1nBFwWId2nvtFxxZ
L43is6PZtRB50biWvei9LgCUlxbjuXmD/IyJIlCX1sWRBs7s5vavGDNLis6N
PAeNowu5nBZlkkszZZv+ZOMSt1UUqpBAqg3dULgnGOUXJIGReglb9e4Wk0lo
Zkm4i/TLstibqzxkzVwLSwMewJHyENa8+QMc0WrlK9zvw8zLMuSs1mk3Yc1H
fhErZI01eUzx5kQ6ulEVLf7NWOsGHxrzRJqKLkuRjmQ3t+LRKhJNvgZ5OZNw
/sIXDK5/qt05dY/g3C1jlrgwm/WFuZKJ5kpsdbVkH8ZUoVGaOp5u2cvW6Jti
9pSNMLRpFKGpFJ6+8ZRJNcrScWMD3Dg8hbZ2aLD3PUV8mqW4KCO7g3Y1vQTd
4fv5Opsy7srVczDxkDfOu1XMZ4jlUJVHMsSE/IZ3Y4/BdMVSODXaGTf1rsDP
zbEsW3U8KMi2klKcgAKkt+PxI+KopzSD6/8thUZ2bfihzomFhM/C0QZHIMB1
C7X7GdMOQTC+t09hypdFMKmykj1uN+U19ZxRI0ST9Ka9ZKMKttPUnTPwyy0d
ur3Dhm5sGkWr7aJ5Yz8HeqzsBS9i0+CW7RY26elRu9T7x9E05CCfsVEX1z7L
h+42NYybbY0v9Av4m2oFkCqXzS7J1kPnJR5iQI/WdhAzuZICv8RtSLtyN+fd
48ArnxFSq/cX+PtwH66tWMDe1txlmpGH6enIOKGH1nRK8jxBLcq+dp0fp1Fc
7V44FMThw1EfmUeJCz0ebcXHxW+BoGPt4FYbTxEHxHGX10Kho+l2mnHLmXPp
VEG3CNWLYy8YQ+68M3C7PRHDjrTwf7b/YFsnz8VnCd/536PUcL6rMd1U1WQ4
to/1GnlS0fa9bMvXnSzwtRxzuHgDWs/vx5yq8WjncwWkH6uh4hpp2CwIxB8P
asC5QAJzPpXwUSO/sclF2ihSK8NsEzGUGbjD73c+ziv/tkFL63oy+u8QZ++b
RYmeKeAnl0rfLs3FPp9qmj24hI3MPSVIur6QWrtc4JnrQxaxNAZjvJ6xeLHb
bGeggGwTyzhtsRfch3QF+qzSRn1Fn1nCuxyQmriPPf5cyk/yPEW7vewxwnQt
H7Eqnv9Zac/OckPo+2FtVqhlR1OGB4HkEiMsmaaJjqWTSId3Ru/tW5E5yUKE
1Qjm7P4If1cG4cCNVn5+UzizyDeDnoFrXGf0G25daxlO73rLaSYp4bqw+3Rv
pYh9TCyk9OA9uGCPKXmZuML+3ZrUKSuGVx5/oOjqn9CaYItx5vI4ZKWsvceW
QRixVotaHQxZQF4crfwWg7vwAy/zJJfdPHmGfTAeFDraWZDKWHGskBspqtsR
jD9eb4VpztPJ4qEkzdLMZfoGgRi6bwcL/HYIlsj2QXTCGX7Us9EsOraafnx5
DgojCmm9ZgFIlHSghkYgZl6o58clvBFKaN/HxkM/2YTdb+Demstg5hNCno3v
4L52FfsapI8xQwKZ4dAuMtJ9zvolHnGQ2Mz0XBQgb9ts9jovgF15Lc/uZYmR
9YGblJA3GzMDmsDM2R6HTbhF5Z/E7OObLsCbL6rw6lw0bJw5h4qcFGj8il/8
LbGxLN3Whr902hpfS2xC9/Q7EOV3lvWPM6Vl2sl4iA+htANzQKH3IGm0RDGD
xiTupcI8mO5XcSEhvZieqBvRuTFvhfeXxDDrrG+sycmbbDcdZCG9V6B3+VKu
7c5abtTQVOq4GIyd85ez8oArLDjrHGbeagTH9Y3ci8tjuI7SVHywto0d0J3J
+u/XsV9azax49RTy4nvZx7UMqp9EkGlAFw773cotrBjgqjYmUO6ZdDZR8zcE
KnQyMP8GMzZb4aGiNrZkjxWr0u+mtV5raOd1JWjx4IH/G4UPxYeLjl1Xh+2r
j8LHFXfgR2cc2u8v5bRqrkB10jr0tDVGA40QkqlbRk76q2lD6CiaPGcszeG7
eX/3YrT2nkF3t7aw/ikzubWFw/BqUDg9n1DH1HV72N1/dbh3fhrIx03gelWR
SpyVMFzpAH5dEsnu9Gnixv+kyGGtBqkKren6rXaY0KVGqjdG0qMRuTTT968d
BgHOvlsI3yKk4UubEVTk5eD+eh1696eYIsMqwPSBIep07eRKxyqR7RlHXDDg
y4OiNjM22cxODqulNocdLLdDiXjfC9Sf/14QcvMl36Z4EuRIyF4LG3lreRmc
BD2gFCqNDxQTqNFNjEThE+BgkA9NnbiLpp9NBX0wFahXyFCM+FySsJsH3ukz
2ImGKDbuWyJ38PFn7s5fcXyXrsdb1njh1XpVdiZaXnDkdy3pfdBgmr2LUPum
O66YdAjOPh2PqRXRlOCsQ6en2v17bxI+2XaBLWkL4K/vHkklXB70CK+h7IdN
ZHXTkm4McaQLv21oV0M8itvmomJLOat8Xckc+7wgrkBINTtl2LOAifSx8i6s
lS+yDX6TQn2j/tJkeQ086SSLr1LCSGFOEuc2dTOe+nses1O20Bixf/HrDsK2
wde86lILepEays7RHyjxNoJzjw1wR8oyyi+7x7++dpx13pVjQrv1uGL4G3iY
44CL5WJBQVcfcyROMrb7HPqKR7MuWWWKfHQKbqZdpq85JYLAw0+gua+Q0u4O
A+NyZfj6yFv4xq+e/xq1Cc6Od4TrEuL2f0WI8QGPmLAuB//2XycNq8/4x28N
czqoCddP/RA6vZqPs8flkVmYPxsZ7oLuC83+7Yjj+DtiIvm9mWDv52pP+TNU
ISmomFv52Fjk5lFFJQd64K+KDy0uVaKdE1pg/PtZ1HnoFrf3zCzgg8bjSnaG
di/Uxd2bHOmaewwZSJ7F39H+tHZGASo/a+E6xAZZwM5a4bh7zjj9SyioqXTg
I/84Kjg+DOc4I5v7Yz85ST6i7J8zkRMIWW/kXWGez05GlpoY/Wkdz4XtB/+e
49DjNQ272vNJ7k8Fb7xWC394R9Lm0d3QvsEXVvuugruG60kup5oZKXfAnX99
Jzu4l1bGvQVugzVNL0UoWFwDtR2SGGcUw+wf2VOmuimO8cqCiZMPsfVn06lr
gzyMmR3PrBoHeL3rHnh7Sx5b4buHPxxyFbTSkzAdp9Nti/Gssd+KrgZcZOqB
Z6lSspZdffyCaX6O53xNg+CKciIpboqlBXaJwuf3akDJcyfX+o6jmq/pJAO1
kDNzNqyb/i8HMjao3K5Fwb0b2cDPNuIfJXH8tLM06qM5yD/7j3QPq9CpzGLc
/M6Fl8yeg+JyC+n5zm42bV0dKCoZ8CNKHPifn0agebA0DGzv5d4nxsLTjVp0
rD0J1r66xp59Bihx8GQnbRyx7Xwbiwp4SmZdY+H7fDe8+3GnYFvDORh7biEz
4hRxXbkrc7wbTCsiM9mIZEs8tjUDdhe+hFdGOuz+0SUs+fdpwTSjL+zPN0O8
P4zDuyvn4YYp1tiSpwx+ByOZwp9tUF89nNVmWsFhjXHcs+XyVB86lIb3n+SX
m7hR4X/nwHDRV7Zojw87GtfEbmz+xLJ/3WZWC4ZS7q1T+PAyoOrvNChr0MDg
LS+Zh2E181xYCfGvHCHeZA2bkotk8UaJ+n45sSYPTWwwns9SC55z9f4HsETv
MysUt2VuXSogF5UI03IMsdEplkonjKOaWaa4XP87lDt3YH39VRIzicQb43Ug
pc2IUjqM7SNFGWTuvI982Wm83VAHCvYeJNU3CrsGimm8rQz1Di3AWFtf1Pkt
ZR8wKxsinE1I+dZwUtEJEITdlkRIWUEdRxfShPh4MnF8AD9LM3iXCY1gkPOQ
DR+mxlYfcSe/oO/kHt+NJ2438+1nPrIjuTx974lGbxk1mjp2Kk20N8StJQeo
63gE26M4hS2R3ECC0+NF05pn8y8VUnDUYxm4fXMPP3WuFLn9UcFHY7dA88x9
0PdD0t6m2JN0Ln2G77LWIBskIGmbDywlfj6s1/kpALPF1OYaBnCpHvB0Gfp8
M8WlmzzZrPKh6OayGbes2IcNul9hWY8lfpMfBKntb1moZDFdm4c4eeN65L+Z
MqveaKri1cmq0Ic0nKbgVetEbsWAFxkMFnO/9k2nbZ2GLDrkICz7q8d/eh/K
Qpqf4C/zITjrgIi1dRSSv60DVoQvQt+bvbDpZzw0JLxinWecWLqHLpv9MZ2u
XB9PP3qqaKvjdvAuLeXUg0yp+e9+Jt+1EyfNX4nVGjeZ8ogXIPFmPlX7G6L/
8Qgsl70CS3NXoJNXHd1rFyelxFU0Kn4NjEqZjyYzblK71URw6T/A5xw7hDcs
FHCrdzBpmDYxmc2lLMJrFP93Kk+aGtE4pvwYuQv0eJ1Lktg2qxJj1C9RgWMj
zugEdF6RD5YJS9A6OZlK+EOkpyQu+lW1H073r+asOx5A1Mv33LUFZmz1lVvs
6Ntw1Cvqh/IXm9mZ6eb4fMY3GJjojCOKrMj8/i2W1aeMn8btpO3NrfTsnDMr
dZiKxf6v4bBoBBN7lwlXV9hhHOTh2Ge+2NqxGKIWBKL//ecwf3EdK13aDRWu
4sxEeyKUvk3FzRPuMz+jg9STn8fmj5XEHoonC4vjNNtoNC5Kt2JBM7/yF3Nd
WWamNK4Y38JtGVEk/Pp6LLCm83al9cexpfkcvHUSwY4pMvBlrKPQq2sXiZKQ
2fnEQu0sK3IaHGR7/FRBsiaWba92AEUPO3h4rxxemerhTLtFYP8iA500tfnM
9a1cxnsOh162Yh9SFtFlYxt6HtrENzg10Jj3m2mg7D/65uPI9WycyhlmrsPw
h5dqgxfNwJ+ggq81zrC22AC4b2CN0ebZnFXfcmaushUDZx7nL5ToUnRPJdyI
ygXz20ps5povYJbVwxZXn8IjrxQx/64hHrilyfzWb+c+HLKioB92WLHpFrsi
LYM2H1PZx23VbPP8DmGV+ygUbZEhi52/YGR2AJW6PIcL3SeELUoPWIltN1tj
PImkyxdRc8wC/qtWNfAOqZjdnsKJF//j05rPbJz/UgweIi96sdqTW/5kAD4s
EbE8Jwl0DhCjgd7XLP+CFRum+5I1PA6F1twlVKRQDIHHHejMlnhssLIl/Xg9
0th9EF0zu9lBTSW88DAa5zZuwoRNV/gSXz2KNVZh2Vk72fjlbsKM2kqYOHUJ
HylSRs09MZzexjUwImoICXpciQ02cBKP85h0zmK2rPQsRWr8YWrZuvSo3YIV
xxyiC0N7hOL7L/BQ2QxJxfmwz10fJT6NxBqXO0ysWwRzA85D/5ZkNi94A8gf
TWeZg5Y0rFyNFsX7Qrb2Ld5s1khK0t3DGThPZg5NxnT2wEFm4fWYspTWM7V7
paiEpwUHpGfhkpexWKUfi649Ydy8wXe85no5Ov9yIqO6MbjuixQ9WHQOs9Ls
8Fr7BdIwkqVg24mQptCNI4S5+DQjHk67CJmH23TI+SsjMphfjGn1i2lLXzUb
KJHGxPu+7ODgOBze+QaGNsgiXb8HPgvHUIJmITo0xMBpfVPyFJMWWc+/gANu
WfR9UwXfYGhJtetUWI2RL61PksB1rsM489HXUDFlGuyRc2RD1Z1hbmAgkrEX
bXYIwgnC/2DvEA06WP8XGvJf4Rz/ATh1MZMKJiRSzO1oGKp2kJJ61Mm/fyIL
q1LnNTKQ7loZYnnuFd48OxJXvzHDjV0byKx/MnjW1HB6DiJ4vvY6jPFqZg0l
C6gmSJ7mCOLY8v540nZQYGu69uOErHU4p/8+U/erZbW1U5i70SgKi7nEHEfv
xooqaXRzHEdpPoZkd1mOjdw1je76LccPk3dRYKIxSiy+zJx/hjGftJ2UmfoX
2tpLBf9NLODrN5XSzzxiwpRjVJwtR297mikkZQq5ZJwAk2QVVLU1BcHzOrRN
9CZ6VUO+juuxy/MnJGk9h7vuT6H6zwPh7TQH2lC/HuffkmXDMtvYuPh4dvR7
DF0OixQsawxF7eGRqHE8HY4c1IXnT+UxcWIHNYyXBb0GA2p/WsHCly1FJ93x
ZL/wX/z7EqHXA1OSFGrhnUUe5F1WBLUP5kDX033M/EkJLzjoyrXjEbYuNIYu
TElBNn0u6mz0xU9lTrRy/AcujBPHwtR15LBiBiS3R9PW1S9hb7UlOW89Av2j
41Fz/iRcnLwQQzSTqF0/EiuPJVKTswFsc5Ggln9r7co5FfIbz9G0y+eFZUV6
TNpYAXeMS2WWT46ztLk19OCeC7u5uwg0H5XgvsaTMLl4JZZrnbIL2p5K7oOr
YOkBNV50LZp4lbvg3e+K/VcF5DghBAZNnsK7H/OZos9bqF38FAuivHF1UjMH
MZeFvQ6TmfiS0ZgrdGKxYpK05fc+KNpxgVIG7nFdq55R0dQR9FFVF1VXe9CB
i87cnodX8GhRHzi1bYEg01F4rs0Vcsf281qxydg46yApRtZy5WtjSLmniI82
tqCS0gjBLJ8hdG3RFZr+MpbZXpcU+Sm1Qo3xO26BbwteP+6PhS6X+NVcKspV
5lPvLHPUr/rFZp+6yWJOu+FRbhWxjnY+v2YUfZhpyBKXjQHJbXP5L77+OGfb
EnTb+q7Wzt0Tf3r2k7SyA5eTqovn3qSxkZ9O4IpwY5z06AAKcprpZdx+kCid
Apfk7whPiLJwxypTXLNiFbpYFpAgX1m4QEoDzTrbwDj/AJmJ94LRN3NqSw1D
z2WyosqSs2DS5MakfKpQ2+kXPDiYxgLOaVCjthopL7Vkl8YoMlXDPSxpWj6T
SOnl3I0eUErGLCZsEmM6gVE0Nigb14rlwQvRcMzdMRHOi1TwOB0m051fIMJE
mS2epIK19jK4wBnx07Z8wQ5BFmhc9+ftq/aijpEjqrn3wpD78+D2obFCmSPl
XH5dA0g4pfEC1Rhm8C6Fv9BwnG/YoUAu7stIVnwzydv0cDEZdyFdditl37On
yMQh+CIphDbdMrTXGnsMfLU3QVryKbCWnUFO2Va06l9PehR5UoT3VLSblMZO
O87BIUfyWPicTeRYYYx6U6exnQHhZGHfBG9WTEN9H2+k8dYglW2HWkoHIWn5
K/bplyxtDjfA/IxkeMgWY0kb0pDgEdBX/wy8agzofdAJijyhzizLFrLyFxtJ
V2YMn/45mpUFfeKig5Pp0NNM8qo3hMDg8ezD1e0wmKEvOpmRASurrRH7zvKF
pXep28+ZlilmwKGcYlCIP86+7kmAlKhx5N8Zw8ddK4C27TwJxo6Dmpa9EHa5
m296e4cNNXvOj/o6G+vGKZDF361MMBGwPX0hxd0oB0dcQFdSrEi37w3oLzkh
9A/Jo9L+csTjjWS6yQetKibQrZYqnFpYwTZ0L2M/Z3qTgnS34OLtZrYc80FN
LQVfif6D2imSoqLUnTDx5HWWu7iYLtaOQFmjq8wnrJyv/2Mk+vp2Gu6Os4TM
tCgmlvMY8mXFSKSszQ9f2QND5OrZtrpKqr/4nBa+cUMjS55ZP3pO5fXydDF/
KSpEy+NvS21moFwAQ/VN8OXK03T24g+mleYEDWpVtPiTB2sf7kktrz7Rqi0l
8Ka+STixoILuGGjiac8ItlBiCJ13XU51n/qg5j97zGhRo19rYlmqfxSstYmF
sbLl+OrYWmxaGsqGD0rh2fI5+Ko+A4tkq9ka7ihaphtj0LDPzCNvCvv16QPY
vOoAr/OHIUjtDGV3V+LF0e6iDJMjNLQsCTUnqIrKKi5iv4EXhvvnQERLJMnc
q0Qte1VaHReMXpd1MbnrJIYvaofEMbb4VsuIuBBp/nioG7nE/0J19yXchv44
WPrwKg2OeADVDf3QIXoPmUvtSeXjUw6cVGiYWzyVa6WDw5AmKoDftW5vzSi8
Zi46KT9gKcpzSFbCGzu0j8OGU/2cZ/AY6peoES5e5oXP5/SxgCw/u4KiUyDY
vw0DHqngaiiiPl05nLo/n3bLZzOdkUZ4d8/1f9okinW/+Ary6U4sJkWJDixz
gb1lB0EnLpN1hTfD9FXuoPfmDBwR7COJ38PI4XUEtu/eQk+mjqfa2CgakGig
tu3VjMXb4x79MrYsIhHW+0jwOgrr4LGMAt0+J47fv6/gbf4uYHs9b4KzMoBY
/S8Isgj8p92uslyt2+gy4wTX9uouhH3r57+YTSGzN0JqLQuF21YbIGxCIxd/
7ARpmefjftMqMD41CXVjVpPj6Tncwi33Qa3HCeelyOKD0SmQN2BN1wsY3/j9
EEjVtfxjrSMwMN4JLw+zIctn2mRduYmmOcxmEQuvswW/LDB41mn2XLyM0o1/
2HnJD6eOlnSWvPEod/rXcl5wLQKWntHG9X2vWFaUEebqPqGBGUvZJPOvwhmV
W2na8tn09c8PzqRVk74fjWHcTCHc61hqfWrDOOruGYMmKx3ZW7GZ1K6Siedf
icHhpFjWafOe1jSEwQyuFe5Hh2KlVhRu8ENaX/UU7uqbU6K1LSq9KWPVpyuF
W8Mnoa28FljIJLAy+VloPP8xe/RfITukNkCu9jno9zOBL777hqbPjsDTVSXo
cHAxPWjTp7snMiiqOob011ZCct1QNsXdgUx+lGG21BEomzUIPR996HG8NF6N
TWX3h9uQsYyOoEcqiorOi8FtyVS03FmPKruVcJTdQ1bUvwZ0mvbDyVOq+O3E
Raba8JJ9874Ox4YegFbBc/ZqayotiNUj5UscBHxwpSt29hizrwLWccvIdKwz
pn8vIrnSKZTyx49GJJ4VsthsUFizm45cEKc3TVfofUcdtN42EdntFsMMyWOs
pzkZY16oIHy/w6lmB6KXyRLq366KhaUJuKVewOyvtbBbctkQsrOD+X7cTvXL
b8AntQh+ttJEGFlezUSF8/HjkWPUbECkZHEWsSmKXbFdw1bfb+PslmYA3XaD
175pwuyVpnhsoS6L+NXItmReo+7P94TqNtZgfO0Ie+H7nTsbKkWHsiRx78AC
kGppYPtz+ti2HUl8U98QrPx6Ruhy8y5z/aJPh3640KgiFeY6s4gLzJRF47lR
sHT1UuaklMk6le4LTGgXDTHWZF5ZIfB0nSdLOLkBqiR94O43EYz5q4YTy0RQ
UqaGvSfNKLEqBxLGHMJTFvWgPXUA/Ef6s8M9Tcz7rwdlnfFg0X+fAht9i/se
9pcFRivwt8LNyET5BM18sgFvPMhlI9crQtJ0a5qZvQ2+zvgC35I5zN+RD1en
WbOWcfrw5cZsPBUwHty2aSD6uFLaf5G0uz8Ip/1jBs3J79icnHHEhvqygjB/
2nHyKD1dlsM9e2dNG17uYRsk8pjH/E4ctUEN9Y5K0ND1dnzf+hqq2eAFm+OP
Mul7w/GowXv4VWlH3op7YYO7L5v8OAhHNkhS6cCuiz9XLwbrLA9SuqdNdcvk
RZc9h9Kg1TJcZ/KbK0/ZhuMEkRAbGA4q8So0t9EU/T4qkqWDF3YWauOSRddo
2b3XEGP7iyXOPUvCTyNBMKAK58YHCrcv0oX4HWK0wO09V+LfzH29YcXX/LnL
JOwd8f6BXE4xpJ+df3ccrsrZotWuAjI8Mpbbms2Rt4YAV+WY4qfcHYIB3Uh8
5+yAGy5n0JrpJ7HP5Re7M9oLtbsXQOaJS7XdyY9Zb9p4akr2YMlljdgw0AvF
u4op/EUCJpeuR8uEDdQoc5py1HvY4OJINM9T/6ftG1nB1KP858YxuLtWyKYr
5oDyszQIrTbES1mPOJ3V58Gt/whdtzaD3qlPebdt+7ihV3VE7wdk6MKxyVSX
a8uHSu3i63bYQN5iEUi9C6OWlAQUv0RoNcWV9cxZAk869ZiScydb9iWF0hLM
6aPRTqazWxmNc5U5vf2PWVZnP9kmzeGSL1bTiDVnaYxMHNc2rxKKNf/Auk5H
DJh5AEIlxuDKR6W0/hTgW8tMNitVjlTk48kxoRNKY/M463knaOtOdejYUMCG
nVYTlY7+RztGYjTfNAVvPdTACZp61L71KkpEzsGfHn/ZqRkNbMWng8zfTRYD
I5XZv/lKs7zv0V4HJdzqNlY0qjONc9t/np0e+xI842zYe71QfHs/BAd+GILm
FA/WFTeE0kKjSdJ7D435+xY0B9RoWu8UmpmRhw0hX0HY6AYpSxeRpHMGlZv/
5ZLdj9LwGUsxbkEra31ex354baNqfx1cY7Warm48yLd261CMtjj13Jak7pPe
TP1Op1B5632+rNUX51i4oOWqbsjx0KfJnRn4LtGRefg9J8ktBdzysKH0fJIH
11pxDLY+UcQvU7Vx38EuWJu9mWjXLHh26xmNiDRn0QWHMccwns5SFA2x/yF0
cJUXWYVdZHO7EZhnPr8rzJSWhy0H7yOzBFk955m/10x6sFQWTx8+Ty7DpMDI
pRXyRs2G4nZ19l5TBPrbBSxzhRNfIEzDuEFldNN5zaqEs9nVh2NR01Icb8iF
otmxRjaYVw2rvYrov9k6+G7qAtomOxOeuRTg5YJwulh4Bd+6cPT0xVG43cTj
zLAou6eTJ5PxMxUq9NrI3ozNobtKuZgkHCJqqz75jx1DMHnGeHZ88T2oeJvG
pB5GoaVzFIw2/AldMtKoZqEAc+VXsI4thQK71ypo6i5LjrMvwJ/bs7DucxRz
hQVUbTgKIy4o4fn+OhY/JR/XhtdBsqse2mxL4A6tS6Pylr8s2vw9UypXZatm
LqGlfDMbrAjC2xVjaaXea+GzG450deVGjOPW0Olz9uyiVwpbmf6amc8wxs7y
/3B55S/mYG1DurtOMOnlxljxwoiaPy/Dxx8i2OTQEuattg8mW47DbVc84VFD
Ib/0sh22Nj8XKM1XRiZ2mPQ/frfFRxwMCy7AML08sgw8g3GlQEPMxLnz3UTq
Mn9B/Gk88z0/GXPPHIPAJxfwUsRndvGJG/4fzWYM6A==
                "], "Biases" -> 
               RawArray["Real32",{-0.18632154166698456`, -0.05518893152475357,
                  0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                 0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                 0.12943300604820251`, 
                 0.21619535982608795`, -0.12615013122558594`, 
                 0.12520363926887512`, 0.1943180412054062, 
                 0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                 0.12467250972986221`, -0.3208949565887451, 
                 0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                 0.16070689260959625`, -0.07001221925020218, 
                 0.07522184401750565, 
                 0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                 0.24120552837848663`, -0.04254811629652977, 
                 0.19626277685165405`, 0.04852093756198883}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "11" -> <|
            "Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "12" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                "], "Biases" -> 
               RawArray["Real32",{0.18740198016166687`, -0.1249600350856781, 
                 0.03215433284640312, -0.2378043681383133}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
        19653.548073458904`|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "Mean" -> {0.23124615267859935`, -0.72822837729203, 
              0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
              0.10517240908924025`, -0.24024309043728495`, 0.3074998656424723,
               0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
              0.3879769949206493}, 
             "StandardDeviation" -> {0.42336656209659007`, 0.2672799034098392,
               0.07124798075524297, 0.36989547912470067`, 
              0.17138659393602926`, 0.5155818183543911, 0.688893371869374, 
              0.24977193740899778`, 0.6403849334448501, 0.4897664046907167, 
              0.46819109868519837`, 0.43423173863577835`, 0.6276718952348702, 
              0.28383206529853633`, 0.7719651260033509, 0.09756213850198994, 
              0.2950767752080472, 0.22147755480753964`}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, "Key" -> 
             "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
         Around[0.9926698116140742, 0.007247173785702781], "EvaluationTime" -> 
         0.0002390132437947042, "TestSize" -> 276, "ModelMemory" -> 101904, 
         "ModelUtility" -> 5.3529526868256205`, "TrainingSize" -> 1106, 
         "TrainingTime" -> 50.11872336272725, "TrainingMemory" -> 1025056, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.021350027675851042`, 0.008527240234488089]}, 
         "AccuracyHistory" -> {
           Around[0.9926698116140742, 0.005124525728307819]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           4, "NumberOfParameters" -> 8600, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
              Around[0.5039356498747214, 0.011280914837970198`], 
              "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 2744, 
              "ModelMemory" -> 101904., "ModelUtility" -> -5.255034068743364, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 474568., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[3.3682246428941447`, 0.11709052181782027`], 
                Around[5.718797544659934, 0.1974406032409913]}, 
              "AccuracyHistory" -> {
                Around[0.4977980114632854, 0.013422541870627485`], 
                Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
              Around[0.7731731038259634, 0.010538572727576656`], 
              "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 2532, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
              461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.0207920682675256`, 0.13567904919872614`], 
                Around[1.989358115693642, 0.12729332292504641`]}, 
              "AccuracyHistory" -> {
                Around[0.7666435334598815, 0.01212548962300386], 
                Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
              Around[0.8754721532521594, 0.013799020363039234`], 
              "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.6640374106578726`,
               "TrainingSize" -> 250, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 580856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7727930479153965, 0.07355983104423623]}, 
              "AccuracyHistory" -> {
                Around[0.8754721532521594, 0.009757380872436296]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.021350027675851042`, 0.012059338789226588`], 
              "Accuracy" -> Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.021350027675851042`, 0.008527240234488089]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
             Around[0.021350027675851042`, 0.012059338789226588`], 
             "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
             "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1638549337103177`, 0.10037145501929841`], "Accuracy" -> 
              Around[0.5492390926678674, 0.023756280779855192`], 
              "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 1300, 
              "ModelMemory" -> 62416., "ModelUtility" -> -2.4356505013181984`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 315949.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0659744269130655`, 0.06346538833801657], 
                Around[1.2617354405075698`, 0.023724306617050557`]}, 
              "AccuracyHistory" -> {
                Around[0.5686355009414037, 0.0494049938117882], 
                Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
              Around[0.34906013350595955`, 0.01773043247078872], 
              "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 2744,
               "ModelMemory" -> 62416., 
              "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
              288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.7284854644248697`, 0.024470278570364008`], 
                Around[1.7449836721317225`, 0.02985267016659267]}, 
              "AccuracyHistory" -> {
                Around[0.333797137166834, 0.012654176408351573`], 
                Around[0.364323129845085, 0.01286858453924453]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7297176649588678, 0.030635251566725513`], "Accuracy" -> 
              Around[0.7731352673792209, 0.01749760840751051], 
              "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.4608603411176038`,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 430312, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7297176649588678, 0.021662394126187413`]}, 
              "AccuracyHistory" -> {
                Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
              Around[0.8462070332421717, 0.03062402709723611], 
              "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> -0.1999951890132391, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 882408, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.38327177587574507`, 0.029923508235575796`]}, 
              "AccuracyHistory" -> {
                Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020558565549557822`, "MeanCrossEntropy" -> 
             Around[0.38327177587574507`, 0.0423182311805343], "ModelMemory" -> 
             62416, "TrainingMemory" -> 882408, "TrainingTime" -> 
             1.2870992522366111`|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.35435313401532587`, 0.026162924108051638`], "Accuracy" -> 
              Around[0.8602959769418544, 0.016276096618821716`], 
              "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900, 
              "ModelMemory" -> 58320, 
              "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 250,
               "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35435313401532587`, 0.018499981052472317`]}, 
              "AccuracyHistory" -> {
                Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
              Around[0.4905470789487266, 0.05942169230008629], 
              "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 2672,
               "ModelMemory" -> 58320., "ModelUtility" -> -4.197660943845806, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 273552., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5949653673903932`, 0.05337852556796832], 
                Around[3.769761211170389, 0.12190065068836999`]}, 
              "AccuracyHistory" -> {
                Around[0.549197732950539, 0.013394029354165352`], 
                Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
              Around[0.7442585992282589, 0.013337895880245353`], 
              "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 2632,
               "ModelMemory" -> 58320., 
              "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              308650.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7090566921048821, 0.029587871638874982`], 
                Around[0.9267562156706394, 0.048804806717094945`]}, 
              "AccuracyHistory" -> {
                Around[0.7339496000489554, 0.012070557593356287`], 
                Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
              Around[0.9791671208169963, 0.012128533944401654`], 
              "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07118410180594256, 0.013542997191503502`]}, 
              "AccuracyHistory" -> {
                Around[0.9791671208169963, 0.008576168597937634]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
             Around[0.07118410180594256, 0.01915269030340499], "ModelMemory" -> 
             58320, "TrainingMemory" -> 945064, "TrainingTime" -> 
             6.2334652825440156`|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
              Around[0.838474265252356, 0.01562338483938151], 
              "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 1100, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 250, 
              "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 845536, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4150311982338223, 0.022874520429674614`]}, 
              "AccuracyHistory" -> {
                Around[0.838474265252356, 0.011047401365013764`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.9363303357963932`, 0.22063573174865092`], "Accuracy" -> 
              Around[0.6016657435215405, 0.009931734042792198], 
              "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 2400, 
              "ModelMemory" -> 187664., "ModelUtility" -> -4.394526005243066, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.8628854898161876, 
              "TrainingMemory" -> 768069.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7328302955198254`, 0.11030764480200886`], 
                Around[3.1398303760729616`, 0.1343428411885501]}, 
              "AccuracyHistory" -> {
                Around[0.6013282055836575, 0.014050468348716146`], 
                Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
              Around[0.7771993076355267, 0.016090257916624478`], 
              "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.4133613417100643`,
               "TrainingSize" -> 50, "TrainingTime" -> 1., "TrainingMemory" -> 
              768752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0883077850611167`, 0.06546404015990553]}, 
              "AccuracyHistory" -> {
                Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
             Around[1.0883077850611167`, 0.09258013344187536], "ModelMemory" -> 
             187664, "TrainingMemory" -> 768752, "TrainingTime" -> 
             16.33188643150958|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.06349687324568681, 0.020314194118190455`], "Accuracy" -> 
              Around[0.9752187821898789, 0.013178658637319573`], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.1990832337140014`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 1031984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06349687324568681, 0.014364304415312347`]}, 
              "AccuracyHistory" -> {
                Around[0.9752187821898789, 0.009318718889391335]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
              Around[0.5614696628952743, 0.02316984504064622], 
              "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 1900, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.375448364812931, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 588357.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2425860137311924`, 0.09670887865815357], 
                Around[3.472752094517207, 0.15761956845763322`]}, 
              "AccuracyHistory" -> {
                Around[0.5412325518696653, 0.01645230430382249], 
                Around[0.5817067739208833, 0.01550253065862414]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
              Around[0.7822399753364762, 0.011053793618809461`], 
              "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 2632, 
              "ModelMemory" -> 164368., "ModelUtility" -> -3.09292339195906, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.9314427449080938, 
              "TrainingMemory" -> 599973.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1299535489778723`, 0.07202244880796001], 
                Around[1.862147339889153, 0.11678580277280175`]}, 
              "AccuracyHistory" -> {
                Around[0.7898676324542127, 0.011253506706433129`], 
                Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.42705750837440937`, 0.035076829136806445`], "Accuracy" -> 
              Around[0.8446730233225903, 0.015135382766381485`], 
              "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 1132, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.5213181632194831, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 668632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.42705750837440937`, 0.024803063745157707`]}, 
              "AccuracyHistory" -> {
                Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
             Around[0.42705750837440937`, 0.035076829136806445`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
             "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.29713763668876286`, 0.029783149124946628`], "Accuracy" -> 
              Around[0.8857231716276136, 0.013316951171936615`], 
              "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.27080207566416914`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 518544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.29713763668876286`, 0.02105986671133995]}, 
              "AccuracyHistory" -> {
                Around[0.8857231716276136, 0.00941650647840652]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
              Around[0.4534728434064575, 0.03657154854139636], 
              "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 2200, 
              "ModelMemory" -> 93800., "ModelUtility" -> -4.7036563931676705`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.5848931924611134`, 
              "TrainingMemory" -> 372712., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.8582879282812748`, 0.09593272842945073], 
                Around[4.168810776492888, 0.14832220789749126`]}, 
              "AccuracyHistory" -> {
                Around[0.4184413958301533, 0.015453697183599058`], 
                Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
              Around[0.769971120234303, 0.0162893024591907], "EvaluationTime" -> 
              0.00006291890573589659, "TestSize" -> 1332, "ModelMemory" -> 
              93800, "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 
              50, "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2977572298050588`, 0.07725242580096887]}, 
              "AccuracyHistory" -> {
                Around[0.769971120234303, 0.01151827622969245]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
             Around[1.2977572298050588`, 0.1092514282939514], "ModelMemory" -> 
             93800, "TrainingMemory" -> 386192, "TrainingTime" -> 
             25.884295625347566`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5879853515835944`, 0.14718023198397873`], "Accuracy" -> 
              Around[0.7939162815913106, 0.015646642549432373`], 
              "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -3.152069743372218, 
              "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 600288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5879853515835944`, 0.10407214009248054`]}, 
              "AccuracyHistory" -> {
                Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
              Around[0.5705716928210636, 0.02387696402198573], 
              "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 2100, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.803632164263322, 
              "TrainingSize" -> 10, "TrainingTime" -> 5.444439372449127, 
              "TrainingMemory" -> 583613.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.6845044721043254`, 0.10447663667270932`], 
                Around[4.364677185562806, 0.2100094842353753]}, 
              "AccuracyHistory" -> {
                Around[0.5492372585429602, 0.014247131834686502`], 
                Around[0.591906127099167, 0.01628060211969826]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38151664752165954`, 0.03977608365046414], "Accuracy" -> 
              Around[0.8740940349402928, 0.013875001085229821`], 
              "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 250, 
              "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
              683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.38151664752165954`, 0.028125938478286556`]}, 
              "AccuracyHistory" -> {
                Around[0.8740940349402928, 0.009811107356336711]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00037881779653037317`, "MeanCrossEntropy" -> 
             Around[0.38151664752165954`, 0.03977608365046414], "ModelMemory" -> 
             164368, "TrainingMemory" -> 683480, "TrainingTime" -> 
             92.6247680155231|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2846789544300572`, 0.10135837559026044`], "Accuracy" -> 
              Around[0.7374636238433064, 0.017014953179959547`], 
              "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.6005267903937916`,
               "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 341168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2846789544300572`, 0.07167119470992618]}, 
              "AccuracyHistory" -> {
                Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
              Around[0.5152833374237896, 0.07249298936486862], 
              "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 2744,
               "ModelMemory" -> 58320., "ModelUtility" -> -5.074385087421649, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 295925.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.5190643035821725`, 0.1028129894230038], 
                Around[5.812425858174743, 0.191466359358563]}, 
              "AccuracyHistory" -> {
                Around[0.5871646538577457, 0.013267469359568705`], 
                Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020244886234998508`, "MeanCrossEntropy" -> 
             Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
             58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
              Around[0.8717062863197803, 0.01777595950885693], 
              "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.10702789819239966`, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 374688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3301382275974658, 0.02068135393911543]}, 
              "AccuracyHistory" -> {
                Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
              Around[0.7363490438369396, 0.017031507261842195`], 
              "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.3231968082428875`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 338064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6791528095168373, 0.027387263849560993`]}, 
              "AccuracyHistory" -> {
                Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
              Around[0.4863596829810406, 0.04278093185210315], 
              "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 2744, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.180492238404206, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5444439372449126, 
              "TrainingMemory" -> 322133.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.508549842629893, 0.04605766705211905], 
                Around[3.771470810362135, 0.12018564135103059`]}, 
              "AccuracyHistory" -> {
                Around[0.5280828090172973, 0.013434097226343747`], 
                Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
             Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
             9.109108405185806|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5038386117534089, 0.041784890614198204`], "Accuracy" -> 
              Around[0.828465928965194, 0.02654031530216917], 
              "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 400, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.7882946404845459, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 528184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5038386117534089, 0.029546379504437673`]}, 
              "AccuracyHistory" -> {
                Around[0.828465928965194, 0.018766836924992914`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
              Around[0.3679296647759494, 0.07392752974250799], 
              "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 2744,
               "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
              449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.148424842980697, 0.03780978285236538], 
                Around[1.4568966776552688`, 0.026077841742531138`]}, 
              "AccuracyHistory" -> {
                Around[0.2945557228909562, 0.012245543527860529`], 
                Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
              Around[0.6180757845356775, 0.05382602805907864], 
              "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 2632, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
              461714.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.155425119141791, 0.02396130422338247], 
                Around[1.0610392976248695`, 0.02621811203957636]}, 
              "AccuracyHistory" -> {
                Around[0.5650696245779578, 0.013556795434539574`], 
                Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23257721592841687`, 0.03163453421313113], "Accuracy" -> 
              Around[0.908886547057971, 0.024356212382520913`], 
              "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 0.7369941836531197, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1045880, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23257721592841687`, 0.022368993661782865`]}, 
              "AccuracyHistory" -> {
                Around[0.908886547057971, 0.017222442939700294`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
             Around[0.23257721592841687`, 0.03163453421313113], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1045880, "TrainingTime" -> 
             1.4937384274690055`|>, "Index" -> 10|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
              Around[0.7457728338345587, 0.018472683364634448`], 
              "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.7509502414499094`, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 309112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8371599125387441, 0.047884777618598134`]}, 
              "AccuracyHistory" -> {
                Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
              Around[0.8882989940963734, 0.013145309817848845`], 
              "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.48100284988718467`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 469432, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2722926005782066, 0.022605846381320353`]}, 
              "AccuracyHistory" -> {
                Around[0.8882989940963734, 0.009295137712999018]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04678344173247784, 0.020786249475512084`], "Accuracy" -> 
              Around[0.9851396376350638, 0.010281268792086398`], 
              "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 3.8798539588000582`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 972672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04678344173247784, 0.014698097959569912`]}, 
              "AccuracyHistory" -> {
                Around[0.9851396376350638, 0.007269954882085916]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
              Around[0.502464111857925, 0.07130486561817233], 
              "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 2200, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.6637320197127625`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299269.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8332223163074313`, 0.08054167103388306], 
                Around[4.86043648706169, 0.16818929238262642`]}, 
              "AccuracyHistory" -> {
                Around[0.572995990979411, 0.015538960918031978`], 
                Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
             Around[3.3468294016845603`, 1.5153492244478233`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 299269.3333333333, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 11|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
              Around[0.762381947001795, 0.01642868812328819], 
              "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -1.7030510878983651`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 600016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7752070403907262, 0.03017334558439825]}, 
              "AccuracyHistory" -> {
                Around[0.762381947001795, 0.011616836777975974`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.39447704061745437`, 0.03234768531334908], "Accuracy" -> 
              Around[0.8594906763316973, 0.01476170763807768], 
              "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 1100, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.3625496870271967, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 675000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.39447704061745437`, 0.02287326764075762]}, 
              "AccuracyHistory" -> {
                Around[0.8594906763316973, 0.01043810357277798]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
              Around[0.9455603955460657, 0.019279136977717354`], 
              "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 1.404009915150804, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1142080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15855325263059325`, 0.025484079405049796`]}, 
              "AccuracyHistory" -> {
                Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
              Around[0.5116939418989973, 0.07010685788967808], 
              "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 2400, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              586421.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.521906370483909, 0.03515613181787799], 
                Around[1.5882755791735657`, 0.05563504596868172]}, 
              "AccuracyHistory" -> {
                Around[0.442311083421225, 0.014256465737770922`], 
                Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
             Around[1.5550909748287374`, 0.04454750436345691], "ModelMemory" -> 
             164368., "TrainingMemory" -> 586421.3333333333, "TrainingTime" -> 
             5.818068863066169|>, "Index" -> 12|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9007091827219887, 0.030008702121127984`], "Accuracy" -> 
              Around[0.6760965348587569, 0.018079481767156038`], 
              "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.8723329888169609`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9007091827219887, 0.02121935676445673]}, 
              "AccuracyHistory" -> {
                Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.43111245312757496`, 0.025345577264303743`], "Accuracy" -> 
              Around[0.8330426045067885, 0.015571490015669136`], 
              "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 1132,
               "ModelMemory" -> 58320, "ModelUtility" -> -0.4088030140985044, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 364536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.43111245312757496`, 0.01792202955667676]}, 
              "AccuracyHistory" -> {
                Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.1842923793671783, 0.025304164192749383`], "Accuracy" -> 
              Around[0.9457395297710746, 0.019169568233064083`], 
              "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 891920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1842923793671783, 0.01789274609295091]}, 
              "AccuracyHistory" -> {
                Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
              Around[0.43385363675367183`, 0.011415114317526467`], 
              "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 2472, 
              "ModelMemory" -> 58320., "ModelUtility" -> -3.5149737403880033`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 273418.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4396046101139186`, 0.029031135765925187`], 
                Around[2.475712680707863, 0.06775654619883521]}, 
              "AccuracyHistory" -> {
                Around[0.439498971976867, 0.014905537896345295`], 
                Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
             Around[1.9576586454108909`, 0.5187408468073508], "ModelMemory" -> 
             58320., "TrainingMemory" -> 273418.6666666666, "TrainingTime" -> 
             4.386881933034051|>, "Index" -> 13|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8419793893936219, 0.040743862542620725`], "Accuracy" -> 
              Around[0.7373831716775224, 0.01693418574125903], 
              "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.8856361050895067`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 782064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8419793893936219, 0.02881026149561968]}, 
              "AccuracyHistory" -> {
                Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
              Around[0.8250320562814308, 0.01594299951984108], 
              "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, "ModelUtility" -> -0.6112985333219293,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 848080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4432056724888078, 0.02238507759095115]}, 
              "AccuracyHistory" -> {
                Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.16858329728652338`, 0.029069351611494675`], "Accuracy" -> 
              Around[0.945560395546066, 0.01927913697771735], 
              "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 1.2824675838731772`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 1207096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.16858329728652338`, 0.020555135649183976`]}, 
              "AccuracyHistory" -> {
                Around[0.945560395546066, 0.013632408492368258`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
             Around[0.16858329728652338`, 0.029069351611494675`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
             "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3249962292171797`, 0.12170206901231112`], "Accuracy" -> 
              Around[0.793195580192614, 0.015828005629622638`], 
              "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300, 
              "ModelMemory" -> 164368, "ModelUtility" -> -2.7896299497840076`,
               "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 589096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3249962292171797`, 0.08605635828303838]}, 
              "AccuracyHistory" -> {
                Around[0.793195580192614, 0.011192090113365015`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 250, 
              "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 686536,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00044256629018744604`, "MeanCrossEntropy" -> 
             Around[0.3701221449474526, 0.03366489354688038], "ModelMemory" -> 
             164368, "TrainingMemory" -> 686536, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 15|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1227673790868702`, 0.10368611279141937`], "Accuracy" -> 
              Around[0.757173277714323, 0.018196954510351714`], 
              "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.342528378471589, 
              "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 309656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1227673790868702`, 0.07331715346968586]}, 
              "AccuracyHistory" -> {
                Around[0.757173277714323, 0.012867189931212827`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33220140414624993`, 0.047853257302163214`], "Accuracy" -> 
              Around[0.8965085805171233, 0.012697194170323252`], 
              "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.07288974716187491, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 510104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33220140414624993`, 0.03383736274022428]}, 
              "AccuracyHistory" -> {
                Around[0.8965085805171233, 0.00897827209987787]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.029497520149122013`, 0.01667491875741592], "Accuracy" -> 
              Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 4.7583398302297795`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 39.810717055349734`, 
              "TrainingMemory" -> 948200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.029497520149122013`, 0.011790948129103553`]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.2949671588281193`, 0.14749235577106196`], "Accuracy" -> 
              Around[0.5835796437000327, 0.02088503617561304], 
              "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -3.761313256061099, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 297120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2949671588281193`, 0.10429284493889672`]}, 
              "AccuracyHistory" -> {
                Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
             Around[2.2949671588281193`, 0.14749235577106196`], "ModelMemory" -> 
             62416, "TrainingMemory" -> 297120, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 16|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
              Around[0.7677501064780398, 0.00816276162917491], 
              "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 2664,
               "ModelMemory" -> 93800., 
              "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 386088.,
               "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.5973296386447973`, 0.09710009617968923], 
                Around[1.6944960008299512`, 0.10490120341267964`]}, 
              "AccuracyHistory" -> {
                Around[0.7682281016221508, 0.011537187632355594`], 
                Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33249143642424983`, 0.02780494761566639], "Accuracy" -> 
              Around[0.8613277396783116, 0.014507674452371017`], 
              "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 1132,
               "ModelMemory" -> 93800, "ModelUtility" -> 0.05248807658590138, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 502672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33249143642424983`, 0.01966106700957443]}, 
              "AccuracyHistory" -> {
                Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04443140001711353, 0.021314953380441544`], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.92776201569796, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 970336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04443140001711353, 0.01507194807598534]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00046938966244621503`, "MeanCrossEntropy" -> 
             Around[0.04443140001711353, 0.021314953380441544`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
             "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
              Around[0.7384665234825579, 0.010719276135332273`], 
              "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 2432, 
              "ModelMemory" -> 93800., "ModelUtility" -> -1.9350890275488193`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.37788092188698263`, 
              "TrainingMemory" -> 378786.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7726332524190396, 0.028941631998749596`], 
                Around[1.0060756456836646`, 0.05024424270156515]}, 
              "AccuracyHistory" -> {
                Around[0.7324400373766513, 0.0120571885743892], 
                Around[0.7444930095884645, 0.01307837056160318]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.34782344779765667`, 0.025712507033831242`], "Accuracy" -> 
              Around[0.8557374599745653, 0.014686070676875251`], 
              "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, 
              "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 250,
               "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.34782344779765667`, 0.018181488084928872`]}, 
              "AccuracyHistory" -> {
                Around[0.8557374599745653, 0.0103846201646034]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15276622770087278`, 0.028666652684449675`], "Accuracy" -> 
              Around[0.9498135082589592, 0.018508440411731872`], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 1.5673860415737628`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 907872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15276622770087278`, 0.02027038450709391]}, 
              "AccuracyHistory" -> {
                Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.15276622770087278`, 0.028666652684449675`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
             "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7753042739299817, 0.039969593621796584`], "Accuracy" -> 
              Around[0.7375401740439216, 0.01714466436223822], 
              "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 1300, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.637907986699601, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 461800, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7753042739299817, 0.02826277069124294]}, 
              "AccuracyHistory" -> {
                Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35554695739060116`, 0.027033696117590978`], "Accuracy" -> 
              Around[0.8470897173852533, 0.01508748965454944], 
              "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.08838018962147687,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 567400, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.35554695739060116`, 0.01911570984528502]}, 
              "AccuracyHistory" -> {
                Around[0.8470897173852533, 0.01066846624581379]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15410934185340477`, 0.03040532289461026], "Accuracy" -> 
              Around[0.9596068784743268, 0.016667152171683092`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 1.5363925902488362`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1024944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15410934185340477`, 0.0214998100029455]}, 
              "AccuracyHistory" -> {
                Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.15410934185340477`, 0.03040532289461026], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1024944, "TrainingTime" -> 
             2.891283046943182|>, "Index" -> 19|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.9025240498596048`, 0.17368396265702707`], "Accuracy" -> 
              Around[0.7888324315844696, 0.015739599038312638`], 
              "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -3.5329225623661613`,
               "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 780096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9025240498596048`, 0.12281310777813492`]}, 
              "AccuracyHistory" -> {
                Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
              Around[0.8854786750958584, 0.013351117434256547`], 
              "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, 
              "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 250, 
              "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
              837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6454807954277998, 0.062000766216747265`]}, 
              "AccuracyHistory" -> {
                Around[0.8854786750958584, 0.009440665674180743]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00022514047861176898`, "MeanCrossEntropy" -> 
             Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
             187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
             115.3099731077524|>, "Index" -> 20|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
              Around[0.5296860458536663, 0.019284927181766578`], 
              "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -2.44789502640578, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2036312536280331`, 0.01921988365429954]}, 
              "AccuracyHistory" -> {
                Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8399174549925484, 0.024903779896598206`], "Accuracy" -> 
              Around[0.7369045920343117, 0.018395727422659554`], 
              "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.7311181711686499`, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 351208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8399174549925484, 0.017609631642061807`]}, 
              "AccuracyHistory" -> {
                Around[0.7369045920343117, 0.0130077436054219]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
             Around[0.8399174549925484, 0.024903779896598206`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 351208, "TrainingTime" -> 
             2.4002626703166206`|>, "Index" -> 21|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
              Around[0.7313061583954904, 0.017144680944532857`], 
              "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.028995426006972, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 313112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9663976578750052, 0.05017890964418109]}, 
              "AccuracyHistory" -> {
                Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35008419981942934`, 0.024708646909891732`], "Accuracy" -> 
              Around[0.8568009346457361, 0.014673031432912107`], 
              "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> 
              0.0029327369312612817`, "TrainingSize" -> 250, "TrainingTime" -> 
              3.981071705534973, "TrainingMemory" -> 398384, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35008419981942934`, 0.017471651783928475`]}, 
              "AccuracyHistory" -> {
                Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.042170347467092334`, 0.016000630897312476`], 
              "Accuracy" -> Around[0.9907604816520923, 0.008121627376877738], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 825792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.042170347467092334`, 0.011314154610752645`]}, 
              "AccuracyHistory" -> {
                Around[0.9907604816520923, 0.00574285779246056]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
              Around[0.5804592460589959, 0.018783072828788897`], 
              "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
              "ModelMemory" -> 58320, "ModelUtility" -> -3.4638943660534287`, 
              "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.987919142262011, 0.07603787179768637]}, 
              "AccuracyHistory" -> {
                Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
             Around[1.987919142262011, 0.10753378955027475`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 299984, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 22|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9403941167153582, 0.030071559648660914`], "Accuracy" -> 
              Around[0.6590202792143492, 0.018327916017389055`], 
              "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.9641702588327155`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 318200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9403941167153582, 0.021263803748423883`]}, 
              "AccuracyHistory" -> {
                Around[0.6590202792143492, 0.01295979370091334]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.45576172147997035`, 0.02603166210338864], "Accuracy" -> 
              Around[0.8256280537105091, 0.015920374420882354`], 
              "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -0.525479429825631, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 420072, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45576172147997035`, 0.01840716479886297]}, 
              "AccuracyHistory" -> {
                Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
              Around[0.9385178062088241, 0.020368186136795634`], 
              "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 1.0349935743091963`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 933232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.20578142008052, 0.019371630008387233`]}, 
              "AccuracyHistory" -> {
                Around[0.9385178062088241, 0.01440248253779802]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041974250697322877`, "MeanCrossEntropy" -> 
             Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
             62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
             2.29662775876662|>, "Index" -> 23|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5041540185761222`, 0.12792697018320168`], "Accuracy" -> 
              Around[0.7491330451581357, 0.01676873732368961], 
              "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 1332,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5041540185761222`, 0.09045802811319117]}, 
              "AccuracyHistory" -> {
                Around[0.7491330451581357, 0.01185728787351688]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3551338319540449, 0.027278187743878263`], "Accuracy" -> 
              Around[0.8473263359267194, 0.015089820198610777`], 
              "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 1132,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 250, 
              "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 527408,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3551338319540449, 0.01928859153217609]}, 
              "AccuracyHistory" -> {
                Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
              Around[0.9895518014074794, 0.008620653342748424], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 4.258968427388813, 
              "TrainingSize" -> 1106, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 932288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.03734914821299343, 0.013125775259394882`]}, 
              "AccuracyHistory" -> {
                Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
              Around[0.46102332820255726`, 0.018987327336901637`], 
              "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 1372,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10, 
              "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.678346364097339, 0.08174114510413875]}, 
              "AccuracyHistory" -> {
                Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00029572208708069134`, "MeanCrossEntropy" -> 
             Around[2.678346364097339, 0.11559943601018015`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 449640, "TrainingTime" -> 
             18.983242383456506`|>, "Index" -> 24|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
              Around[0.7762423210420635, 0.014329340894644918`], 
              "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 2432, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              605098.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8208265202024376, 0.05283642239438791], 
                Around[1.4514603795294685`, 0.08835215155478726]}, 
              "AccuracyHistory" -> {
                Around[0.7878452988653784, 0.012263467049955281`], 
                Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, "ModelUtility" -> -0.2386147056327178,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 680424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.06082621292123911, 0.019650473295384628`], "Accuracy" -> 
              Around[0.9770146234585061, 0.012716008303818851`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.2838445796528624`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1099664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06082621292123911, 0.013894982920691632`]}, 
              "AccuracyHistory" -> {
                Around[0.9770146234585061, 0.008991575701254757]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.06082621292123911, 0.019650473295384628`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
             "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
              Around[0.7627369072147341, 0.011750893611347561`], 
              "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 2664, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              468021.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0095607638414457`, 0.05525446612282441], 
                Around[1.1842784010456864`, 0.07075909436910463]}, 
              "AccuracyHistory" -> {
                Around[0.7543389604118015, 0.011774622135660197`], 
                Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35804951443350097`, 0.026655439166062223`], "Accuracy" -> 
              Around[0.8488505284229317, 0.014960827173881168`], 
              "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
              527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35804951443350097`, 0.018848241789828087`]}, 
              "AccuracyHistory" -> {
                Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 3.3814381242084908`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 959184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.05985945373078884, 0.01350088664315196]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.05985945373078884, 0.01909313699480727], "ModelMemory" -> 
             101904, "TrainingMemory" -> 959184, "TrainingTime" -> 
             6.89353199975045|>, "Index" -> 26|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3358149900117273`, 0.12222648201044096`], "Accuracy" -> 
              Around[0.7862467400481814, 0.01602150238466662], 
              "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 1300, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.825724619026342, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 781952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3358149900117273`, 0.08642717427015836]}, 
              "AccuracyHistory" -> {
                Around[0.7862467400481814, 0.01132891298099421]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
              Around[0.8858609662855659, 0.013283721779471411`], 
              "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.3445805711537584`,
               "TrainingSize" -> 250, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 845640, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6317653258849528, 0.05961837551263815]}, 
              "AccuracyHistory" -> {
                Around[0.8858609662855659, 0.009393009749659667]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
             Around[0.6317653258849528, 0.08431311521662489], "ModelMemory" -> 
             187664, "TrainingMemory" -> 845640, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 27|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1154980744941485`, 0.034353683515180075`], "Accuracy" -> 
              Around[0.5814498430933545, 0.019088672339769665`], 
              "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 1332, 
              "ModelMemory" -> 93800, "ModelUtility" -> -2.347503593111097, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 386152, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1154980744941485`, 0.02429172257232034]}, 
              "AccuracyHistory" -> {
                Around[0.5814498430933545, 0.01349772965529921]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5546183182382579, 0.026395794652472045`], "Accuracy" -> 
              Around[0.8135685469111952, 0.016337844310188795`], 
              "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> -0.9566176476083332, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 451760, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5546183182382579, 0.01866464539357059]}, 
              "AccuracyHistory" -> {
                Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
              Around[0.9299868058195125, 0.021652291921408842`], 
              "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.7601699845170374, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 918608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23091679939394155`, 0.02259715579830503]}, 
              "AccuracyHistory" -> {
                Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041019731090850185`, "MeanCrossEntropy" -> 
             Around[0.23091679939394155`, 0.0319572042010208], "ModelMemory" -> 
             93800, "TrainingMemory" -> 918608, "TrainingTime" -> 
             1.3087789598585713`|>, "Index" -> 28|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
              Around[0.7681507374150377, 0.016318407378901893`], 
              "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 1332,
               "ModelMemory" -> 93800, "ModelUtility" -> -2.137795388853302, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 386256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9948450772059008, 0.05585599851339633]}, 
              "AccuracyHistory" -> {
                Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
              Around[0.8617176768356566, 0.014429545856984168`], 
              "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.052922354317971765`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 497976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3326799470819294, 0.018734832919486785`]}, 
              "AccuracyHistory" -> {
                Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07021180454193646, 0.026976812427827776`], "Accuracy" -> 
              Around[0.9710277520559213, 0.014250347362805026`], 
              "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.0477874334351047`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 966920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07021180454193646, 0.01907548700251455]}, 
              "AccuracyHistory" -> {
                Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
             Around[0.07021180454193646, 0.026976812427827776`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
             "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
              Around[0.7911413261337976, 0.015627505897240296`], 
              "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 2332,
               "ModelMemory" -> 187664., 
              "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
              774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.7558990910227044, 0.037970217663081576`], 
                Around[0.9594474328704059, 0.07043483754789011]}, 
              "AccuracyHistory" -> {
                Around[0.7779594452749371, 0.011355683387275856`], 
                Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
              Around[0.8389781853611775, 0.015335274506302916`], 
              "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4042669758821077, 0.022272205006115358`]}, 
              "AccuracyHistory" -> {
                Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.10406413363415194`, 0.020899367441681686`], "Accuracy" -> 
              Around[0.9736914348517792, 0.013553043838557063`], 
              "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 2.2363622110324752`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 1218600, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.10406413363415194`, 0.014778084440522468`]}, 
              "AccuracyHistory" -> {
                Around[0.9736914348517792, 0.009583449203962254]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
             Around[0.10406413363415194`, 0.020899367441681686`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
             "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 1382, 
      "PreprocessorEvaluationTime" -> 3.9375*^-6, "PreprocessorMemory" -> 
      94088, "InputDimension" -> 18, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.869215141896656`16.340197867844974*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
          "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
          "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 40|>, <|
         "TrainingSizes" -> 250, "TimeBudgets" -> 138.0795097872658, 
          "ElapsedTimes" -> 151.156252, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
          "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 21|>}, 
        
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
             Interval[{5, 
               DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
           5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
           8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
      "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
      "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, "Instant",
         "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9, 3.869210988494907*^9, 3.869211542035791*^9},
 CellLabel->
  "Out[421]=",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}},
 CellLabel->
  "In[422]:=",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "19034f41-be4d-4eaa-9650-6c15422c87b6"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"99.1", "0.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.1329479768786114846`3., 0.4991396165558288911`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"69.1", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.0751445086705189169`3., 2.4883140570071944353`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9564305105930941409`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0303164048540168762`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8957977008850603884`3.", "\", \"", 
                   "1.0170633203011278933`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8957977008850603884`3., 
                   ", ", 1.0170633203011278933`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0445471424083839287`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0316921409220950537`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "0.0188371394358061786`3."}], "\", \"", 
                   "0.107931424252574043`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -0.0188371394358061786`3.,
                    ", ", 0.107931424252574043`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"7.04`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.43`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKL96k7RRV8dY+KOjpDQbrV/Z9e/5HbLZ6
aH9Nxp6Fze2dvdmLST56Lm/tC4SvXDFReEnQvIdVIuvcH96yZ0ABxLvnafFu
1ROib+2tl7O8S9z4wr5rUTe/tvVtkv11gumH1M2Pr+13x6+w3LHlsb2OQUn3
hPJ9JJtT+e0aU/7Lt/Zlp+/u8Xv22v7VOq5H6pOe2gMAbTJnmQ==
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.9815950920245398`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9876543209876543}], 
                    Row[{"Recall = ", 0.975609756097561}], 
                    Row[{"FScore = ", 0.9815950920245398}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.012345679012345678`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0041841004184100415`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.012345679012345678`}], 
                    Row[{"Row fraction = ", 0.0041841004184100415`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9979035639412998`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.99581589958159}], 
                    Row[{"FScore = ", 0.9979035639412998}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.024390243902439025`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.024390243902439025`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.923076923076923`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8571428571428571}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.923076923076923}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{82, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.975609756097561}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{239, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.99581589958159}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9876543209876543}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{14, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8571428571428571}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["82", TraditionalForm]}, {2.5, 
                    FormBox["13", TraditionalForm]}, {1.5, 
                    FormBox["239", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["81", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["13", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["238", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["14", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
              "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
              "Doors" -> <|"Type" -> "Nominal"|>, 
              "Passengers" -> <|"Type" -> "Nominal"|>, 
              "Cargo" -> <|"Type" -> "Nominal"|>, 
              "Safety" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|
                  "FeatureNames" -> {
                    "PurchasePrice", "MaintenanceCost", "Doors", "Passengers",
                     "Cargo", "Safety"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 6|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 1382, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                    0.5381047338323698, 0.31349173058168534`}, {
                    0.2878959194482099, 
                    0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                    0.2578066194971254, 
                    0.4093083635172316, -0.7050063333319737, 
                    0.08206678121922453, -0.2152687718915405, 
                    0.46464274419035045`}, {
                    0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                    0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                    0.3669612074237795, -0.03875817355088801, 
                    0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                    0.5767907589006783, 0.1852877321886701, 
                    0.21134659605041434`, 0.33089384854127}}, 
                    "Precisions" -> {11.396708918937332`, 11.702295237769018`,
                     11.751709980827822`, 12.269447018561033`, 
                    12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                    None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 6, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 
                    1301520, "DataMemory" -> 446480, "FunctionMemory" -> 
                    62320, "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-1.5374646114340518`, \
-1.5374646114340518`, -1.4481495799387802`, -1.3901532053842829`, \
-1.3900959198753926`, -1.3059537438182822`, -1.239089852169043, \
-1.2261733685503937`, -1.2132739652746585`, -1.169323039076807, \
-1.1079994773194297`}, "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                    0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[7.816606057704673, 0.25703225729782303`], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5495059474424677337|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Index" -> {<|
                  "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                  2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                  "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                  "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.12314196676015854`, -0.861851692199707, 
                   0.10532767325639725`}, {
                   0.8298183679580688, -0.28949323296546936`, 
                   0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                   0.38437455892562866`, -0.8375512361526489, 
                   0.1422276645898819}}], 
                  RawArray["Real32",{{0., 0., 
                   0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                   0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                   0.4795919358730316}, {
                   0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                   0.2534555494785309, -0.4526385962963104}, {
                   0.3543681204319, -0.37547722458839417`, 
                   0.5876661539077759}, {-1.1276206970214844`, 
                   0.17602579295635223`, -1.0098364353179932`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.24657385051250458`, -0.8256815671920776, 
                   0.8846340179443359}, {0.6182233691215515, 
                   0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.34666627645492554`, -0.5679200291633606, 
                   0.10750995576381683`}, {
                   0.6412044167518616, -0.1759643256664276, 
                   0.6604856848716736}, {-0.8092290163040161, 
                   0.12987354397773743`, -1.1753407716751099`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                   0.12715618312358856`, 0.1291729062795639}, {
                   0.21379514038562775`, -0.6005780100822449, 
                   0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
                272386066020895428|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                   "very good" -> 4|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {4}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113,
            "unacceptable" -> 0.7012987012987013, "very good" -> 
           0.03896103896103896|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Acceptability", 
             "Order" -> {
              "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
               "Cargo", "Safety", "Acceptability"}|>], "PreferLabeled" -> 
          True, "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> 
       None, "ImputationStrategy" -> Automatic, "Prior" -> Automatic, 
       "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
       "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
       Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                    0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                    0.09347633272409439, 0.20684024691581726`, 
                    0.00729140592738986, -0.3824177384376526, 
                    0.2153223156929016, -0.46700865030288696`, 
                    0.21194063127040863`, 
                    0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                    0.07883942127227783, -0.375686913728714, 
                    0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                    0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                    0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                    0.1690395474433899, -0.28660914301872253`, 
                    0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                    0.17016777396202087`, -0.32100844383239746`, 
                    0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 18, "$InputDimensions" -> {18}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                   "], "Biases" -> 
                  RawArray["Real32",{-0.23329688608646393`, 
                    0.1376294195652008, 
                    0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                    0.1361909657716751, -0.07115011662244797, 
                    0.0030301439110189676`, 0.04029219597578049, 
                    0.05379099026322365, 
                    
                    0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                    0.0140318488702178, 
                    0.18612468242645264`, -0.17168177664279938`, 
                    0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                    0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                    0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                    0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                    0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                    0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "7" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                   "], "Biases" -> 
                  RawArray["Real32",{-0.30062639713287354`, 
                    0.12008462101221085`, 
                    0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                    0.09417349845170975, -0.10099706798791885`, 
                    0.08236243575811386, -0.2349618673324585, 
                    0.1114811822772026, 
                    0.2365228235721588, -0.1581137776374817, 
                    0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                    0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                    0.08413115888834, -0.2386404424905777, 
                    0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                    0.017599068582057953`, -0.16277392208576202`, 
                    0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                    0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                    0.048794329166412354`, -0.2748609185218811, 
                    0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                    0.15255072712898254`, -0.054961107671260834`, 
                    0.12484297901391983`, -0.013735197484493256`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "10" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1: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
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.18632154166698456`, -0.05518893152475357, 
                    0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                    0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                    0.12943300604820251`, 
                    0.21619535982608795`, -0.12615013122558594`, 
                    0.12520363926887512`, 0.1943180412054062, 
                    0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                    0.12467250972986221`, -0.3208949565887451, 
                    0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                    0.16070689260959625`, -0.07001221925020218, 
                    0.07522184401750565, 
                    0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                    0.24120552837848663`, -0.04254811629652977, 
                    0.19626277685165405`, 0.04852093756198883}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "11" -> <|
               "Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "12" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.18740198016166687`, -0.1249600350856781, 
                    0.03215433284640312, -0.2378043681383133}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
           19653.548073458904`|>, "InputType" -> "NumericalVector", 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "Mean" -> {0.23124615267859935`, -0.72822837729203, 
                 0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
                 0.10517240908924025`, -0.24024309043728495`, 
                 0.3074998656424723, 
                 0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
                 0.3879769949206493}, 
                "StandardDeviation" -> {0.42336656209659007`, 
                 0.2672799034098392, 0.07124798075524297, 
                 0.36989547912470067`, 0.17138659393602926`, 
                 0.5155818183543911, 0.688893371869374, 0.24977193740899778`, 
                 0.6403849334448501, 0.4897664046907167, 0.46819109868519837`,
                  0.43423173863577835`, 0.6276718952348702, 
                 0.28383206529853633`, 0.7719651260033509, 
                 0.09756213850198994, 0.2950767752080472, 
                 0.22147755480753964`}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
            Around[0.9926698116140742, 0.007247173785702781], 
            "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
            "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
            "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
            "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.021350027675851042`, 0.008527240234488089]}, 
            "AccuracyHistory" -> {
              Around[0.9926698116140742, 0.005124525728307819]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 4, "NumberOfParameters" -> 8600, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
                 Around[0.5039356498747214, 0.011280914837970198`], 
                 "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -5.255034068743364, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 474568., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[3.3682246428941447`, 0.11709052181782027`], 
                   Around[5.718797544659934, 0.1974406032409913]}, 
                 "AccuracyHistory" -> {
                   Around[0.4977980114632854, 0.013422541870627485`], 
                   Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
                 Around[0.7731731038259634, 0.010538572727576656`], 
                 "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 
                 2532, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
                 461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.0207920682675256`, 0.13567904919872614`], 
                   Around[1.989358115693642, 0.12729332292504641`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7666435334598815, 0.01212548962300386], 
                   Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
                 Around[0.8754721532521594, 0.013799020363039234`], 
                 "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.6640374106578726`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 580856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7727930479153965, 0.07355983104423623]}, 
                 "AccuracyHistory" -> {
                   Around[0.8754721532521594, 0.009757380872436296]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.021350027675851042`, 0.012059338789226588`], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 5.3529526868256205`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 1025056, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.021350027675851042`, 0.008527240234488089]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
                Around[0.021350027675851042`, 0.012059338789226588`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
                "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1638549337103177`, 0.10037145501929841`], 
                 "Accuracy" -> 
                 Around[0.5492390926678674, 0.023756280779855192`], 
                 "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 
                 1300, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -2.4356505013181984`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 315949.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0659744269130655`, 0.06346538833801657], 
                   Around[1.2617354405075698`, 0.023724306617050557`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5686355009414037, 0.0494049938117882], 
                   Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
                 Around[0.34906013350595955`, 0.01773043247078872], 
                 "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
                 288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.7284854644248697`, 0.024470278570364008`], 
                   Around[1.7449836721317225`, 0.02985267016659267]}, 
                 "AccuracyHistory" -> {
                   Around[0.333797137166834, 0.012654176408351573`], 
                   Around[0.364323129845085, 0.01286858453924453]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7297176649588678, 0.030635251566725513`], 
                 "Accuracy" -> 
                 Around[0.7731352673792209, 0.01749760840751051], 
                 "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.4608603411176038`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 430312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7297176649588678, 0.021662394126187413`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
                 Around[0.8462070332421717, 0.03062402709723611], 
                 "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.1999951890132391, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 882408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38327177587574507`, 0.029923508235575796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020558565549557822`, 
                "MeanCrossEntropy" -> 
                Around[0.38327177587574507`, 0.0423182311805343], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 882408, 
                "TrainingTime" -> 1.2870992522366111`|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.35435313401532587`, 0.026162924108051638`], 
                 "Accuracy" -> 
                 Around[0.8602959769418544, 0.016276096618821716`], 
                 "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35435313401532587`, 0.018499981052472317`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
                 Around[0.4905470789487266, 0.05942169230008629], 
                 "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 
                 2672, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -4.197660943845806, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 273552., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5949653673903932`, 0.05337852556796832], 
                   Around[3.769761211170389, 0.12190065068836999`]}, 
                 "AccuracyHistory" -> {
                   Around[0.549197732950539, 0.013394029354165352`], 
                   Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
                 Around[0.7442585992282589, 0.013337895880245353`], 
                 "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 
                 2632, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 308650.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7090566921048821, 0.029587871638874982`], 
                   Around[0.9267562156706394, 0.048804806717094945`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7339496000489554, 0.012070557593356287`], 
                   Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
                 Around[0.9791671208169963, 0.012128533944401654`], 
                 "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
                 "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
                 "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
                 "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.07118410180594256, 0.013542997191503502`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9791671208169963, 0.008576168597937634]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
                Around[0.07118410180594256, 0.01915269030340499], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 945064, 
                "TrainingTime" -> 6.2334652825440156`|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
                 Around[0.838474265252356, 0.01562338483938151], 
                 "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 
                 1100, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 
                 250, "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 845536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4150311982338223, 0.022874520429674614`]}, 
                 "AccuracyHistory" -> {
                   Around[0.838474265252356, 0.011047401365013764`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.9363303357963932`, 0.22063573174865092`], 
                 "Accuracy" -> 
                 Around[0.6016657435215405, 0.009931734042792198], 
                 "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 
                 2400, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -4.394526005243066, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.8628854898161876, "TrainingMemory" -> 
                 768069.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.7328302955198254`, 0.11030764480200886`], 
                   Around[3.1398303760729616`, 0.1343428411885501]}, 
                 "AccuracyHistory" -> {
                   Around[0.6013282055836575, 0.014050468348716146`], 
                   Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
                 Around[0.7771993076355267, 0.016090257916624478`], 
                 "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.4133613417100643`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1., "TrainingMemory" -> 768752, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0883077850611167`, 0.06546404015990553]}, 
                 "AccuracyHistory" -> {
                   Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
                Around[1.0883077850611167`, 0.09258013344187536], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 768752, 
                "TrainingTime" -> 16.33188643150958|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.06349687324568681, 0.020314194118190455`], 
                 "Accuracy" -> 
                 Around[0.9752187821898789, 0.013178658637319573`], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.1990832337140014`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 6.309573444801933, "TrainingMemory" -> 1031984, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06349687324568681, 0.014364304415312347`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9752187821898789, 0.009318718889391335]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
                 Around[0.5614696628952743, 0.02316984504064622], 
                 "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 
                 1900, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.375448364812931, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 588357.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.2425860137311924`, 0.09670887865815357], 
                   Around[3.472752094517207, 0.15761956845763322`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5412325518696653, 0.01645230430382249], 
                   Around[0.5817067739208833, 0.01550253065862414]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
                 Around[0.7822399753364762, 0.011053793618809461`], 
                 "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 
                 2632, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.09292339195906, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.9314427449080938, "TrainingMemory" -> 
                 599973.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.1299535489778723`, 0.07202244880796001], 
                   Around[1.862147339889153, 0.11678580277280175`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7898676324542127, 0.011253506706433129`], 
                   Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.42705750837440937`, 0.035076829136806445`], 
                 "Accuracy" -> 
                 Around[0.8446730233225903, 0.015135382766381485`], 
                 "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.5213181632194831, "TrainingSize" -> 250,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 668632, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.42705750837440937`, 0.024803063745157707`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
                Around[0.42705750837440937`, 0.035076829136806445`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
                "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.29713763668876286`, 0.029783149124946628`], 
                 "Accuracy" -> 
                 Around[0.8857231716276136, 0.013316951171936615`], 
                 "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.27080207566416914`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 518544, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.29713763668876286`, 0.02105986671133995]}, 
                 "AccuracyHistory" -> {
                   Around[0.8857231716276136, 0.00941650647840652]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
                 Around[0.4534728434064575, 0.03657154854139636], 
                 "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 
                 2200, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -4.7036563931676705`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.5848931924611134`, "TrainingMemory" -> 
                 372712., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.8582879282812748`, 0.09593272842945073], 
                   Around[4.168810776492888, 0.14832220789749126`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4184413958301533, 0.015453697183599058`], 
                   Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
                 Around[0.769971120234303, 0.0162893024591907], 
                 "EvaluationTime" -> 0.00006291890573589659, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2977572298050588`, 0.07725242580096887]}, 
                 "AccuracyHistory" -> {
                   Around[0.769971120234303, 0.01151827622969245]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
                Around[1.2977572298050588`, 0.1092514282939514], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 386192, 
                "TrainingTime" -> 25.884295625347566`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5879853515835944`, 0.14718023198397873`], 
                 "Accuracy" -> 
                 Around[0.7939162815913106, 0.015646642549432373`], 
                 "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -3.152069743372218, "TrainingSize" -> 50, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 600288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5879853515835944`, 0.10407214009248054`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
                 Around[0.5705716928210636, 0.02387696402198573], 
                 "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 
                 2100, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.803632164263322, "TrainingSize" -> 10, 
                 "TrainingTime" -> 5.444439372449127, "TrainingMemory" -> 
                 583613.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.6845044721043254`, 0.10447663667270932`], 
                   Around[4.364677185562806, 0.2100094842353753]}, 
                 "AccuracyHistory" -> {
                   Around[0.5492372585429602, 0.014247131834686502`], 
                   Around[0.591906127099167, 0.01628060211969826]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38151664752165954`, 0.03977608365046414], 
                 "Accuracy" -> 
                 Around[0.8740940349402928, 0.013875001085229821`], 
                 "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38151664752165954`, 0.028125938478286556`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8740940349402928, 0.009811107356336711]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00037881779653037317`, 
                "MeanCrossEntropy" -> 
                Around[0.38151664752165954`, 0.03977608365046414], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 683480, 
                "TrainingTime" -> 92.6247680155231|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2846789544300572`, 0.10135837559026044`], 
                 "Accuracy" -> 
                 Around[0.7374636238433064, 0.017014953179959547`], 
                 "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.6005267903937916`, "TrainingSize" -> 50,
                  "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 341168, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2846789544300572`, 0.07167119470992618]}, 
                 "AccuracyHistory" -> {
                   Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
                 Around[0.5152833374237896, 0.07249298936486862], 
                 "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 
                 2744, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -5.074385087421649, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 295925.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.5190643035821725`, 0.1028129894230038], 
                   Around[5.812425858174743, 0.191466359358563]}, 
                 "AccuracyHistory" -> {
                   Around[0.5871646538577457, 0.013267469359568705`], 
                   Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020244886234998508`, 
                "MeanCrossEntropy" -> 
                Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
                58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
                58.99948267602831|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
                 Around[0.8717062863197803, 0.01777595950885693], 
                 "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.10702789819239966`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 374688, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3301382275974658, 0.02068135393911543]}, 
                 "AccuracyHistory" -> {
                   Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
                 Around[0.7363490438369396, 0.017031507261842195`], 
                 "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.3231968082428875`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 338064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6791528095168373, 0.027387263849560993`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
                 Around[0.4863596829810406, 0.04278093185210315], 
                 "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.180492238404206, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5444439372449126, "TrainingMemory" -> 
                 322133.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.508549842629893, 0.04605766705211905], 
                   Around[3.771470810362135, 0.12018564135103059`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5280828090172973, 0.013434097226343747`], 
                   Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
                Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
                62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
                9.109108405185806|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5038386117534089, 0.041784890614198204`], 
                 "Accuracy" -> Around[0.828465928965194, 0.02654031530216917],
                  "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 
                 400, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.7882946404845459, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 528184, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5038386117534089, 0.029546379504437673`]}, 
                 "AccuracyHistory" -> {
                   Around[0.828465928965194, 0.018766836924992914`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
                 Around[0.3679296647759494, 0.07392752974250799], 
                 "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
                 449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.148424842980697, 0.03780978285236538], 
                   Around[1.4568966776552688`, 0.026077841742531138`]}, 
                 "AccuracyHistory" -> {
                   Around[0.2945557228909562, 0.012245543527860529`], 
                   Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
                 Around[0.6180757845356775, 0.05382602805907864], 
                 "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 
                 2632, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
                 461714.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.155425119141791, 0.02396130422338247], 
                   Around[1.0610392976248695`, 0.02621811203957636]}, 
                 "AccuracyHistory" -> {
                   Around[0.5650696245779578, 0.013556795434539574`], 
                   Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23257721592841687`, 0.03163453421313113], 
                 "Accuracy" -> 
                 Around[0.908886547057971, 0.024356212382520913`], 
                 "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 0.7369941836531197, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1045880, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23257721592841687`, 0.022368993661782865`]}, 
                 "AccuracyHistory" -> {
                   Around[0.908886547057971, 0.017222442939700294`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
                Around[0.23257721592841687`, 0.03163453421313113], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1045880, 
                "TrainingTime" -> 1.4937384274690055`|>, "Index" -> 10|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
                 Around[0.7457728338345587, 0.018472683364634448`], 
                 "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.7509502414499094`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 309112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8371599125387441, 0.047884777618598134`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
                 Around[0.8882989940963734, 0.013145309817848845`], 
                 "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.48100284988718467`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 469432, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2722926005782066, 0.022605846381320353`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8882989940963734, 0.009295137712999018]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04678344173247784, 0.020786249475512084`], 
                 "Accuracy" -> 
                 Around[0.9851396376350638, 0.010281268792086398`], 
                 "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 3.8798539588000582`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 972672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04678344173247784, 0.014698097959569912`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9851396376350638, 0.007269954882085916]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
                 Around[0.502464111857925, 0.07130486561817233], 
                 "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 
                 2200, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.6637320197127625`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299269.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.8332223163074313`, 0.08054167103388306], 
                   Around[4.86043648706169, 0.16818929238262642`]}, 
                 "AccuracyHistory" -> {
                   Around[0.572995990979411, 0.015538960918031978`], 
                   Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
                Around[3.3468294016845603`, 1.5153492244478233`], 
                "ModelMemory" -> 62416., "TrainingMemory" -> 
                299269.3333333333, "TrainingTime" -> 18.65727460278956|>, 
              "Index" -> 11|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
                 Around[0.762381947001795, 0.01642868812328819], 
                 "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -1.7030510878983651`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 600016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7752070403907262, 0.03017334558439825]}, 
                 "AccuracyHistory" -> {
                   Around[0.762381947001795, 0.011616836777975974`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.39447704061745437`, 0.03234768531334908], 
                 "Accuracy" -> 
                 Around[0.8594906763316973, 0.01476170763807768], 
                 "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 
                 1100, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.3625496870271967, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 675000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.39447704061745437`, 0.02287326764075762]}, 
                 "AccuracyHistory" -> {
                   Around[0.8594906763316973, 0.01043810357277798]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
                 Around[0.9455603955460657, 0.019279136977717354`], 
                 "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 1.404009915150804, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1142080, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15855325263059325`, 0.025484079405049796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
                 Around[0.5116939418989973, 0.07010685788967808], 
                 "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 
                 2400, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 586421.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.521906370483909, 0.03515613181787799], 
                   Around[1.5882755791735657`, 0.05563504596868172]}, 
                 "AccuracyHistory" -> {
                   Around[0.442311083421225, 0.014256465737770922`], 
                   Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
                Around[1.5550909748287374`, 0.04454750436345691], 
                "ModelMemory" -> 164368., "TrainingMemory" -> 
                586421.3333333333, "TrainingTime" -> 5.818068863066169|>, 
              "Index" -> 12|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9007091827219887, 0.030008702121127984`], 
                 "Accuracy" -> 
                 Around[0.6760965348587569, 0.018079481767156038`], 
                 "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.8723329888169609`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9007091827219887, 0.02121935676445673]}, 
                 "AccuracyHistory" -> {
                   Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.43111245312757496`, 0.025345577264303743`], 
                 "Accuracy" -> 
                 Around[0.8330426045067885, 0.015571490015669136`], 
                 "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.4088030140985044, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 364536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.43111245312757496`, 0.01792202955667676]}, 
                 "AccuracyHistory" -> {
                   Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.1842923793671783, 0.025304164192749383`], 
                 "Accuracy" -> 
                 Around[0.9457395297710746, 0.019169568233064083`], 
                 "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 891920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.1842923793671783, 0.01789274609295091]}, 
                 "AccuracyHistory" -> {
                   Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
                 Around[0.43385363675367183`, 0.011415114317526467`], 
                 "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 
                 2472, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -3.5149737403880033`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 273418.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.4396046101139186`, 0.029031135765925187`], 
                   Around[2.475712680707863, 0.06775654619883521]}, 
                 "AccuracyHistory" -> {
                   Around[0.439498971976867, 0.014905537896345295`], 
                   Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
                Around[1.9576586454108909`, 0.5187408468073508], 
                "ModelMemory" -> 58320., "TrainingMemory" -> 
                273418.6666666666, "TrainingTime" -> 4.386881933034051|>, 
              "Index" -> 13|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8419793893936219, 0.040743862542620725`], 
                 "Accuracy" -> 
                 Around[0.7373831716775224, 0.01693418574125903], 
                 "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.8856361050895067`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 782064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8419793893936219, 0.02881026149561968]}, 
                 "AccuracyHistory" -> {
                   Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
                 Around[0.8250320562814308, 0.01594299951984108], 
                 "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.6112985333219293, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 848080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4432056724888078, 0.02238507759095115]}, 
                 "AccuracyHistory" -> {
                   Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.16858329728652338`, 0.029069351611494675`], 
                 "Accuracy" -> Around[0.945560395546066, 0.01927913697771735],
                  "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 
                 276, "ModelMemory" -> 187664, "ModelUtility" -> 
                 1.2824675838731772`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.2589254117941673`, "TrainingMemory" -> 1207096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.16858329728652338`, 0.020555135649183976`]}, 
                 "AccuracyHistory" -> {
                   Around[0.945560395546066, 0.013632408492368258`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
                Around[0.16858329728652338`, 0.029069351611494675`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
                "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3249962292171797`, 0.12170206901231112`], 
                 "Accuracy" -> 
                 Around[0.793195580192614, 0.015828005629622638`], 
                 "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -2.7896299497840076`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 589096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3249962292171797`, 0.08605635828303838]}, 
                 "AccuracyHistory" -> {
                   Around[0.793195580192614, 0.011192090113365015`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 686536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00044256629018744604`, 
                "MeanCrossEntropy" -> 
                Around[0.3701221449474526, 0.03366489354688038], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 686536, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 15|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1227673790868702`, 0.10368611279141937`], 
                 "Accuracy" -> 
                 Around[0.757173277714323, 0.018196954510351714`], 
                 "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.342528378471589, "TrainingSize" -> 50, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 309656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1227673790868702`, 0.07331715346968586]}, 
                 "AccuracyHistory" -> {
                   Around[0.757173277714323, 0.012867189931212827`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33220140414624993`, 0.047853257302163214`], 
                 "Accuracy" -> 
                 Around[0.8965085805171233, 0.012697194170323252`], 
                 "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.07288974716187491, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 510104, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33220140414624993`, 0.03383736274022428]}, 
                 "AccuracyHistory" -> {
                   Around[0.8965085805171233, 0.00897827209987787]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.029497520149122013`, 0.01667491875741592], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 4.7583398302297795`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 39.810717055349734`, "TrainingMemory" -> 948200, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.029497520149122013`, 0.011790948129103553`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.2949671588281193`, 0.14749235577106196`], 
                 "Accuracy" -> 
                 Around[0.5835796437000327, 0.02088503617561304], 
                 "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -3.761313256061099, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 297120, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.2949671588281193`, 0.10429284493889672`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
                Around[2.2949671588281193`, 0.14749235577106196`], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 297120, 
                "TrainingTime" -> 58.99948267602831|>, "Index" -> 16|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
                 Around[0.7677501064780398, 0.00816276162917491], 
                 "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 
                 2664, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 
                 386088., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5973296386447973`, 0.09710009617968923], 
                   Around[1.6944960008299512`, 0.10490120341267964`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7682281016221508, 0.011537187632355594`], 
                   Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33249143642424983`, 0.02780494761566639], 
                 "Accuracy" -> 
                 Around[0.8613277396783116, 0.014507674452371017`], 
                 "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.05248807658590138, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 502672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33249143642424983`, 0.01966106700957443]}, 
                 "AccuracyHistory" -> {
                   Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04443140001711353, 0.021314953380441544`], 
                 "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.92776201569796, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 970336, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04443140001711353, 0.01507194807598534]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00046938966244621503`, 
                "MeanCrossEntropy" -> 
                Around[0.04443140001711353, 0.021314953380441544`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
                "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
                 Around[0.7384665234825579, 0.010719276135332273`], 
                 "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 
                 2432, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -1.9350890275488193`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.37788092188698263`, "TrainingMemory" -> 
                 378786.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7726332524190396, 0.028941631998749596`], 
                   Around[1.0060756456836646`, 0.05024424270156515]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324400373766513, 0.0120571885743892], 
                   Around[0.7444930095884645, 0.01307837056160318]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.34782344779765667`, 0.025712507033831242`], 
                 "Accuracy" -> 
                 Around[0.8557374599745653, 0.014686070676875251`], 
                 "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.34782344779765667`, 0.018181488084928872`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8557374599745653, 0.0103846201646034]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15276622770087278`, 0.028666652684449675`], 
                 "Accuracy" -> 
                 Around[0.9498135082589592, 0.018508440411731872`], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 93800, "ModelUtility" -> 
                 1.5673860415737628`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 907872, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15276622770087278`, 0.02027038450709391]}, 
                 "AccuracyHistory" -> {
                   Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.15276622770087278`, 0.028666652684449675`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
                "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7753042739299817, 0.039969593621796584`], 
                 "Accuracy" -> 
                 Around[0.7375401740439216, 0.01714466436223822], 
                 "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 
                 1300, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.637907986699601, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 461800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7753042739299817, 0.02826277069124294]}, 
                 "AccuracyHistory" -> {
                   Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35554695739060116`, 0.027033696117590978`], 
                 "Accuracy" -> 
                 Around[0.8470897173852533, 0.01508748965454944], 
                 "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08838018962147687, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 567400, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35554695739060116`, 0.01911570984528502]}, 
                 "AccuracyHistory" -> {
                   Around[0.8470897173852533, 0.01066846624581379]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15410934185340477`, 0.03040532289461026], 
                 "Accuracy" -> 
                 Around[0.9596068784743268, 0.016667152171683092`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 1.5363925902488362`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1024944, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15410934185340477`, 0.0214998100029455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.15410934185340477`, 0.03040532289461026], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1024944, 
                "TrainingTime" -> 2.891283046943182|>, "Index" -> 19|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.9025240498596048`, 0.17368396265702707`], 
                 "Accuracy" -> 
                 Around[0.7888324315844696, 0.015739599038312638`], 
                 "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -3.5329225623661613`, "TrainingSize" -> 50,
                  "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 780096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.9025240498596048`, 0.12281310777813492`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
                 Around[0.8854786750958584, 0.013351117434256547`], 
                 "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 
                 250, "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
                 837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6454807954277998, 0.062000766216747265`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8854786750958584, 0.009440665674180743]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00022514047861176898`, 
                "MeanCrossEntropy" -> 
                Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
                187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
                115.3099731077524|>, "Index" -> 20|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
                 Around[0.5296860458536663, 0.019284927181766578`], 
                 "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.44789502640578, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2036312536280331`, 0.01921988365429954]}, 
                 "AccuracyHistory" -> {
                   Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8399174549925484, 0.024903779896598206`], 
                 "Accuracy" -> 
                 Around[0.7369045920343117, 0.018395727422659554`], 
                 "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.7311181711686499`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 351208, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8399174549925484, 0.017609631642061807`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7369045920343117, 0.0130077436054219]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
                Around[0.8399174549925484, 0.024903779896598206`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 351208, 
                "TrainingTime" -> 2.4002626703166206`|>, "Index" -> 21|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
                 Around[0.7313061583954904, 0.017144680944532857`], 
                 "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.028995426006972, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 313112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9663976578750052, 0.05017890964418109]}, 
                 "AccuracyHistory" -> {
                   Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35008419981942934`, 0.024708646909891732`], 
                 "Accuracy" -> 
                 Around[0.8568009346457361, 0.014673031432912107`], 
                 "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, "ModelUtility" -> 
                 0.0029327369312612817`, "TrainingSize" -> 250, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 398384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35008419981942934`, 0.017471651783928475`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.042170347467092334`, 0.016000630897312476`], 
                 "Accuracy" -> 
                 Around[0.9907604816520923, 0.008121627376877738], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 825792, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.042170347467092334`, 0.011314154610752645`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9907604816520923, 0.00574285779246056]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
                 Around[0.5804592460589959, 0.018783072828788897`], 
                 "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
                 "ModelMemory" -> 58320, 
                 "ModelUtility" -> -3.4638943660534287`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.987919142262011, 0.07603787179768637]}, 
                 "AccuracyHistory" -> {
                   Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
                Around[1.987919142262011, 0.10753378955027475`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 299984, 
                "TrainingTime" -> 18.65727460278956|>, "Index" -> 22|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9403941167153582, 0.030071559648660914`], 
                 "Accuracy" -> 
                 Around[0.6590202792143492, 0.018327916017389055`], 
                 "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.9641702588327155`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 318200, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9403941167153582, 0.021263803748423883`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6590202792143492, 0.01295979370091334]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.45576172147997035`, 0.02603166210338864], 
                 "Accuracy" -> 
                 Around[0.8256280537105091, 0.015920374420882354`], 
                 "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.525479429825631, "TrainingSize" -> 250, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 420072, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.45576172147997035`, 0.01840716479886297]}, 
                 "AccuracyHistory" -> {
                   Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
                 Around[0.9385178062088241, 0.020368186136795634`], 
                 "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, "ModelUtility" -> 
                 1.0349935743091963`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 933232, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.20578142008052, 0.019371630008387233`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9385178062088241, 0.01440248253779802]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041974250697322877`, 
                "MeanCrossEntropy" -> 
                Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
                62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
                2.29662775876662|>, "Index" -> 23|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5041540185761222`, 0.12792697018320168`], 
                 "Accuracy" -> 
                 Around[0.7491330451581357, 0.01676873732368961], 
                 "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 
                 1332, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5041540185761222`, 0.09045802811319117]}, 
                 "AccuracyHistory" -> {
                   Around[0.7491330451581357, 0.01185728787351688]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3551338319540449, 0.027278187743878263`], 
                 "Accuracy" -> 
                 Around[0.8473263359267194, 0.015089820198610777`], 
                 "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 
                 250, "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3551338319540449, 0.01928859153217609]}, 
                 "AccuracyHistory" -> {
                   Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
                 Around[0.9895518014074794, 0.008620653342748424], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 101904, "ModelUtility" -> 
                 4.258968427388813, "TrainingSize" -> 1106, "TrainingTime" -> 
                 15.848931924611142`, "TrainingMemory" -> 932288, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.03734914821299343, 0.013125775259394882`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
                 Around[0.46102332820255726`, 0.018987327336901637`], 
                 "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.678346364097339, 0.08174114510413875]}, 
                 "AccuracyHistory" -> {
                   Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00029572208708069134`, 
                "MeanCrossEntropy" -> 
                Around[2.678346364097339, 0.11559943601018015`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 449640, 
                "TrainingTime" -> 18.983242383456506`|>, "Index" -> 24|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
                 Around[0.7762423210420635, 0.014329340894644918`], 
                 "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 
                 2432, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 605098.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8208265202024376, 0.05283642239438791], 
                   Around[1.4514603795294685`, 0.08835215155478726]}, 
                 "AccuracyHistory" -> {
                   Around[0.7878452988653784, 0.012263467049955281`], 
                   Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.2386147056327178, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 680424, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.06082621292123911, 0.019650473295384628`], 
                 "Accuracy" -> 
                 Around[0.9770146234585061, 0.012716008303818851`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.2838445796528624`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1099664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06082621292123911, 0.013894982920691632`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9770146234585061, 0.008991575701254757]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.06082621292123911, 0.019650473295384628`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
                "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
                 Around[0.7627369072147341, 0.011750893611347561`], 
                 "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 
                 2664, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 468021.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0095607638414457`, 0.05525446612282441], 
                   Around[1.1842784010456864`, 0.07075909436910463]}, 
                 "AccuracyHistory" -> {
                   Around[0.7543389604118015, 0.011774622135660197`], 
                   Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35804951443350097`, 0.026655439166062223`], 
                 "Accuracy" -> 
                 Around[0.8488505284229317, 0.014960827173881168`], 
                 "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35804951443350097`, 0.018848241789828087`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 3.3814381242084908`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 959184, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.05985945373078884, 0.01350088664315196]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.05985945373078884, 0.01909313699480727], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 959184, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 26|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3358149900117273`, 0.12222648201044096`], 
                 "Accuracy" -> 
                 Around[0.7862467400481814, 0.01602150238466662], 
                 "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 
                 1300, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.825724619026342, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 781952, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3358149900117273`, 0.08642717427015836]}, 
                 "AccuracyHistory" -> {
                   Around[0.7862467400481814, 0.01132891298099421]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
                 Around[0.8858609662855659, 0.013283721779471411`], 
                 "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3445805711537584`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 845640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6317653258849528, 0.05961837551263815]}, 
                 "AccuracyHistory" -> {
                   Around[0.8858609662855659, 0.009393009749659667]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
                Around[0.6317653258849528, 0.08431311521662489], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 845640, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 27|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1154980744941485`, 0.034353683515180075`], 
                 "Accuracy" -> 
                 Around[0.5814498430933545, 0.019088672339769665`], 
                 "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.347503593111097, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 386152, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1154980744941485`, 0.02429172257232034]}, 
                 "AccuracyHistory" -> {
                   Around[0.5814498430933545, 0.01349772965529921]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5546183182382579, 0.026395794652472045`], 
                 "Accuracy" -> 
                 Around[0.8135685469111952, 0.016337844310188795`], 
                 "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.9566176476083332, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 451760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5546183182382579, 0.01866464539357059]}, 
                 "AccuracyHistory" -> {
                   Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
                 Around[0.9299868058195125, 0.021652291921408842`], 
                 "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.7601699845170374, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 918608, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23091679939394155`, 0.02259715579830503]}, 
                 "AccuracyHistory" -> {
                   Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041019731090850185`, 
                "MeanCrossEntropy" -> 
                Around[0.23091679939394155`, 0.0319572042010208], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 918608, 
                "TrainingTime" -> 1.3087789598585713`|>, "Index" -> 28|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
                 Around[0.7681507374150377, 0.016318407378901893`], 
                 "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.137795388853302, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 386256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9948450772059008, 0.05585599851339633]}, 
                 "AccuracyHistory" -> {
                   Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
                 Around[0.8617176768356566, 0.014429545856984168`], 
                 "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.052922354317971765`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 497976, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3326799470819294, 0.018734832919486785`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07021180454193646, 0.026976812427827776`], 
                 "Accuracy" -> 
                 Around[0.9710277520559213, 0.014250347362805026`], 
                 "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
                 "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.0477874334351047`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 966920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.07021180454193646, 0.01907548700251455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
                Around[0.07021180454193646, 0.026976812427827776`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
                 Around[0.7911413261337976, 0.015627505897240296`], 
                 "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 
                 2332, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
                 774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.7558990910227044, 0.037970217663081576`], 
                   Around[0.9594474328704059, 0.07043483754789011]}, 
                 "AccuracyHistory" -> {
                   Around[0.7779594452749371, 0.011355683387275856`], 
                   Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
                 Around[0.8389781853611775, 0.015335274506302916`], 
                 "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4042669758821077, 0.022272205006115358`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.10406413363415194`, 0.020899367441681686`], 
                 "Accuracy" -> 
                 Around[0.9736914348517792, 0.013553043838557063`], 
                 "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276,
                  "ModelMemory" -> 187664, "ModelUtility" -> 
                 2.2363622110324752`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 2.51188643150958, "TrainingMemory" -> 1218600, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.10406413363415194`, 0.014778084440522468`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9736914348517792, 0.009583449203962254]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
                Around[0.10406413363415194`, 0.020899367441681686`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
                "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 
         1382, "PreprocessorEvaluationTime" -> 3.9375*^-6, 
         "PreprocessorMemory" -> 94088, "InputDimension" -> 18, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.869215141896656`16.340197867844974*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
             "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
             "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 
             40|>, <|"TrainingSizes" -> 250, "TimeBudgets" -> 
             138.0795097872658, "ElapsedTimes" -> 151.156252, 
             "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
             "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 
             21|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, 
       "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              2846111867015398573|>, 
            "f2" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, 
              "ID" -> 41728420326286313|>, 
            "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                Interval[{5, 
                  DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
            "f4" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
              536027689597629633|>, 
            "f5" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
              5753609278033805624|>, 
            "f6" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
              8080186329754682489|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
         "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
         "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|"Input" -> {{"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "high", 4, 4, "medium", "low"}, {
        "medium", "medium", 2, 2, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "high", "very high", 2, 4, "large", "low"}, {
        "high", "high", 4, 2, "small", "medium"}, {
        "low", "high", 3, 4, "large", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 4, "small", "medium"}, {
        "medium", "high", 4, 2, "medium", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "high", 3, 4, "small", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "high", 2, 2, "large", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "low", 4, 4, "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "medium"}, {
        "very high", "very high", 3, 4, "small", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "low", 4, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "medium", "very high", 3, 2, "small", "medium"}, {
        "high", "very high", 2, 2, "medium", "high"}, {
        "high", "medium", 4, 2, "large", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 4, "medium", "high"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "medium", "high", 4, 4, "medium", "medium"}, {
        "low", "high", 3, 2, "medium", "high"}, {
        "medium", "high", 2, 4, "large", "low"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "medium", 2, 2, "small", "medium"}, {
        "low", "very high", 2, 2, "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "low", 4, 2, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "medium", 4, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "high", 2, 4, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "very high", "low", 3, 4, "small", "high"}, {
        "low", "high", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "medium", "very high", 2, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "medium", 3, 2, "medium", "low"}, {
        "high", "high", 2, 4, "large", "high"}, {
        "high", "medium", 2, 4, "medium", "high"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "medium", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "high", 4, 4, "large", "medium"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "very high", 4, 4, "large", "low"}, {
        "low", "very high", 2, 2, "medium", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "medium", 2, 4, "small", "high"}, {"low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "medium", 3, 4, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "very high", "medium", 4, 4, "large", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {
        "low", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 4, "large", "high"}, {
        "high", "low", 3, 4, "medium", "high"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 2, 4, "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "low", "medium", 4, 4, "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 3, 4, "small", "medium"}, {
        "high", "medium", 2, 2, "large", "medium"}, {
        "medium", "high", 4, 2, "medium", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 2, 2, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "medium", 3, 4, "small", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "medium", "medium", 3, 4, "medium", "medium"}, {
        "high", "low", 2, 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "low", "medium", 3, 4, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 4, 2, "small", "high"}, {
        "very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "very high", 2, 2, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "low", 2, 4, "large", "medium"}, {
        "low", "medium", 4, 4, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {
        "high", "very high", 3, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "high", 4, 2, "medium", "low"}, {
        "high", "medium", 4, 4, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "medium", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "low", 4, 2, "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 3, 4, "large", "medium"}, {
        "very high", "medium", 4, 2, "large", "high"}, {
        "high", "high", 4, 2, "large", "medium"}, {
        "high", "medium", 2, 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "high", 4, 4, "small", "low"}, {
        "low", "low", 2, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "medium", 2, 4, "medium", "medium"}, {
        "medium", "medium", 3, 2, "large", "low"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "very high", 3, 2, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 4, "small", "high"}, {
        "low", "medium", 4, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "low", 4, 2, "small", "medium"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "very high", 3, 4, "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "large", "low"}, {
        "very high", "low", 4, 4, "large", "high"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 4, "medium", "high"}, {
        "medium", "very high", 4, 4, "small", "high"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "low", 3, 2, "large", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "very high", 4, 4, "large", "medium"}, {
        "high", "high", 3, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 2, 2, "large", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "medium", 4, 4, "large", "medium"}, {
        "medium", "very high", 2, 4, "medium", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 2, 2, "small", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 2, 2, "medium", "medium"}, {
        "medium", "low", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 2, "large", "high"}, {
        "very high", "very high", 4, 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 4, "small", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "medium", "medium", 2, 2, "medium", "high"}, {
        "very high", "very high", 4, 4, "medium", "high"}, {
        "medium", "very high", 4, 2, "large", "high"}, {
        "medium", "very high", 4, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "large", "medium"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 2, "large", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {
        "low", "high", 2, 4, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 4, "small", "medium"}, {
        "high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "high", "low", 2, 4, "large", "low"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 4, "medium", "medium"}, {
        "high", "high", 2, 4, "small", "medium"}, {
        "very high", "medium", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "medium", "low"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "medium", "low"}, {
        "low", "low", 4, 4, "small", "low"}, {
        "very high", "low", 3, 4, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 3, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 2, 2, "medium", "high"}, {
        "very high", "very high", 3, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "high", 4, 2, "medium", "high"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 4, 2, "medium", "low"}, {
        "medium", "very high", 4, 2, "small", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 4, 2, "small", "low"}, {
        "medium", "high", 3, 2, "medium", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "high", 3, 2, "large", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "very high", 2, 2, "medium", "medium"}, {
        "very high", "low", 2, 2, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "very high", "low", 2, 4, "small", "low"}, {
        "low", "low", 2, 2, "medium", "high"}, {
        "medium", "medium", 4, 4, "small", "low"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "high", 3, 2, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "very high", "very high", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 2, "medium", "low"}, {
        "medium", "high", 2, 2, "small", "medium"}, {
        "medium", "medium", 2, 4, "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "low", "very high", 3, 4, "medium", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "very high", "very high", 3, 4, "large", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "high", "low", 3, 2, "medium", "high"}, {
        "low", "high", 2, 4, "large", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "low", 2, 4, "small", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 3, 2, "large", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 4, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "low"}, {
        "high", "medium", 4, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "medium"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "low", 3, 2, "large", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "high"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}}, 
      "Output" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}|>, 
    "Predictions" -> {
     "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
      "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", "very good",
       "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", "very good", 
      "very good", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "very good", "good", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", "good", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable"}, 
    "LogProbabilities" -> CompressedData["
1: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
9XRNEKE4i9l9otgfv2sXmh9tWi3aJ2iuwyjz1xX9GQr7/Y8edMqmSY9Xb74y
Qe4LifGmRe9TrIDgYwevMsn2jZP+Q/KV79WkyLdrV4lq/6iarrqf+dxG2X+w
rwvQvjA9aCaan8LjBmX/bC8eTeyfn95/Sii1h9v9lwQ2JSzYk7ls64/lZ3GC
ywp2I/nwX55D+4eQfmc+Zfylrmh/hMLlKG+VrxycQ5Ff6RWUl9eNWaGKY2uW
UOJX178abAg/srQ/e/1k2Lbwn31rroaDb22EVStTghM84N0KZDe0bSbo/Mi9
d49yPhKm8NJhx+Ix7R3fXEnETgn8QefC1dPbF3vjd2oNFK1fgqHvR7X5Cz07
yPc/HhttFA7HTRR5/sebcIIb7roeCpn6hdmm+SG484C1LLbNFUgcbHED0/xR
dTabkV8rpt9HcUDuFknZ//sORiG5gkkIqmdNMqHEf/EKrUhYRNjprko/8CT4
2tRwmN1P2PeDFAnBBexGdP8mZ2HIPoTfmin6eR62NxQYPVr9k+g38a6dAobB
BkcgEHviOxm+R7HMuM984MXAXumze1Z49js9zpS3bkAgI221N4kyzi3V/UmW
yj/prnkU/5exytD85ZdxFF/5qwLU9QvSEnwGvH82qPxaKpOMm4CxLmWHAzMY
M3601YtEr29PfeAeuSGUBUmMCPszmBkGVhh2fohNAIm/luEBwDX9eGtF9VPc
+UjI+otfbMCs9cAbZaAHicebP/mAR1VHTNCaSbCn5Vus2UwmiUazA91BcLna
bvySf3G6s7whU28SEBg+bZcdCE0VY2PnuEOyr0auRqASf629RjjXZiq+bW8i
M/gWEUf3JooOTfUgkX9RjPJ/2qETyG7kzRaU/I7uvxHZLytyEpK/YkIUxb+x
NtdY8HOHiSbdDPjDnCdeVxAOZ8f8WluknYET5e0p3T4w85/K3NcXVuBmaVG5
wGMAgcmuo70RytYj/82pK0FxgtHwmaJf2dgJaNy6hyr9CJ7Pptz/iHz4CXBm
FNalxJnQrodxb5qHAztAqRxxpkZCcFpys+r++nUDiiv0BO8U9efvvfBG66lc
4o5QXH9cPT4JTCreciCK91W5kvafRGepBuOS1BsI7JJN8yMxy+SRB9meM1Ib
+a186GFKfBO1rUfxJYNvi/yUwVgXrb7/idrdUfwWrKlX7Q8nqfdPhzcZRkPD
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
     "], "CountMatrix" -> {{80, 0, 0, 2, 0}, {0, 13, 0, 0, 0}, {1, 0, 238, 0, 
     0}, {0, 0, 0, 12, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwt0KFOAgEAgOETvHndYnAyt2MGNpkkZYZjYzNoACYEIDhnMEExa3Qjsjkf
gAew6IZuBhPB4pwmghQ3SRJsBv0C4at/+NePu7XOQhAEFUKWiFhljZgsG+TY
pMA2O+ySUKLMPgfzXpU6TVq0OeKEU84454JLevS54poBN9xyx5B7HnjkiRHP
vPDKG++M+WDCJ19M+WbGD7/8kTIgzSIhEcuskCEmS54tChRJ2OOQBv+qkSTf

       "], {}, {}, {142, 188}, {}}, {{}, {19, 21, 27, 49, 62, 66, 70, 99, 109,
        207, 235, 250, 266}, {}, {}, {}}, {{107}, {}, CompressedData["
1:eJwl0ulrDgAAwOF3aBq7rNlsjL1b7bKx2oWZxRqzmc07bFOUFUXaHLkpdxQh
Uu4jc5Oj+IZcIZSUK5QjvqCQUMizfHj6/QO/YEtbqDUsEAh8pqOd6EwXwomg
G5FEEU0MsfQgjngSSKQXSSSTQj9SCZJGOhlkkU0OueQxkHwKKKSIYkoYQill
lFNBJaOooppaxlJHiAbGM5FGmmhmMlOYSgvTmM4MZjKLVtqYzRzmMo/5LGAh
i1jMEpayjOWsYCWrWM0a1rKO9WxgI5vYzBa2so3t7GAnu9jNHvayj/0c4CCH
OEw7RzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7zgIc8
4jFPeMoznvOCl7ziNW94yzve84GPfAr8f+8LX/nGd37wk1/85g9/6Zg0jHC6
EkF3IokimhhiiSOeniSQSBLJ9KYPKfQllSBppJNBJllkk0N/csljAPkUUEgR
xZQwiMGUMpQyhlHOcEZQQSUjqWI01dQwhlrqqGccIRqYQCNNNDOJf4h0Y6U=

       "], {}, {}}, {{}, {}, {}, {11, 73, 95, 103, 139, 152, 187, 234, 246, 
       273, 324, 334}, {}}}, 
    "ExtendedClasses" -> {"acceptable", "good", "unacceptable", "very good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006979190751445086, "SingleEvaluationTime" -> 
    0.00704475, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{3.86896617348654*^9, 3.868966311492532*^9, 
  3.8689668453138514`*^9, 3.869211547634626*^9},
 CellLabel->
  "Out[422]=",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],

Cell[BoxData[
 TemplateBox[{"753.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.868966455151699*^9, 3.868966522419289*^9, {3.868966572943582*^9, 
   3.868966625736467*^9}, 3.868966851157722*^9, 3.8692115560464487`*^9, 
   3.8692119399774446`*^9},
 CellLabel->
  "Out[438]=",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 774, 15, 29, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1596, 47, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[1825, 55, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[2293, 66, 127811, 2375, 652, "Output",ExpressionUUID->"066bf15c-482b-4257-8a89-450dfe0b9b1f"]
}, Open  ]],
Cell[130119, 2444, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138649, 2651, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[138969, 2658, 2756, 68, 154, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[141728, 2728, 1775, 41, 195, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143540, 2774, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[143898, 2782, 6811, 109, 154, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[150712, 2893, 1441, 26, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[152156, 2921, 1091, 24, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[153284, 2950, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[153642, 2958, 2084, 37, 133, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155763, 3000, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[156222, 3009, 2095, 41, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[158342, 3054, 1124, 19, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[159469, 3075, 482423, 8899, 495, "Output",ExpressionUUID->"ab6a1cc0-d100-43fc-8ec0-1a81a81e99fd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[641941, 11980, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[642451, 11990, 919, 15, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[643373, 12007, 701, 16, 29, "Input",ExpressionUUID->"3da3f85d-50c5-45aa-934b-1a84fa5781af"],
Cell[CellGroupData[{
Cell[644099, 12027, 1162, 18, 51, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[645264, 12047, 1554, 22, 33, "Output",ExpressionUUID->"986fa8b5-2b9c-47b8-82ad-1b1ce48e353b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[646855, 12074, 1293, 30, 71, "Input",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],
Cell[648151, 12106, 1364, 19, 33, "Output",ExpressionUUID->"5f001bae-0ea9-4ff4-b790-7bb0b55a2b66"]
}, Open  ]],
Cell[CellGroupData[{
Cell[649552, 12130, 570, 14, 32, "Input",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],
Cell[650125, 12146, 658, 10, 44, "Output",ExpressionUUID->"e05356ce-b4cd-4285-8107-65c2f4eecbb0"]
}, Open  ]],
Cell[650798, 12159, 520, 9, 29, "Input",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[651355, 12173, 412, 6, 69, "Chapter",ExpressionUUID->"85881d34-aa2c-47a4-9cef-231d0c092462"],
Cell[CellGroupData[{
Cell[651792, 12183, 702, 15, 29, "Input",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],
Cell[652497, 12200, 215647, 3688, 68, "Output",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[868181, 15893, 346, 7, 29, "Input",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],
Cell[868530, 15902, 313627, 5620, 495, "Output",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1182194, 21527, 368, 7, 29, "Input",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],
Cell[1182565, 21536, 377, 8, 44, "Output",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

