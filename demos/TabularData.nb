(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1900761,      35322]
NotebookOptionsPosition[   1896040,      35235]
NotebookOutlinePosition[   1896478,      35252]
CellTagsIndexPosition[   1896435,      35249]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11077288561920941368852551122364974338449867215102741853992], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11077288561920941368852551122364974338449867215102741853992,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9, 3.8685300999400797`*^9, 3.868533465833148*^9, 
  3.868591722379105*^9, 3.868670373439299*^9, 3.868944316441147*^9, 
  3.869023715466254*^9, 3.869041339373542*^9, 3.869119740136602*^9, 
  3.869212283188902*^9, 3.869281595247718*^9, 3.869292700722034*^9, 
  3.869640816336421*^9, 3.8696453168534527`*^9, 3.86965027000084*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"6eb431cb-b644-4d20-964e-26caf3939935"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "featureValues"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}, {3.868682465592621*^9, 3.868682467103612*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9, {
   3.8686824585003*^9, 3.86868246003918*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"64", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize"}], 
          RowBox[{"(*", 
           RowBox[{",", 
            RowBox[{
             RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}], ",", 
            RowBox[{
             RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}]}], "*)"}],
           "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"classificationLayerSize", ",", "classificationLayerSize"}], 
          RowBox[{"(*", 
           RowBox[{",", 
            RowBox[{
             RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}], ",", 
            RowBox[{
             RowBox[{"RandomNormalSoftBits", "[", "#", "]"}], "&"}]}], "*)"}],
           "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}, {
   3.868520025904859*^9, 3.868520026662962*^9}, {3.868520165374518*^9, 
   3.868520172724663*^9}, {3.868520227657476*^9, 3.8685202280400333`*^9}, {
   3.868520278697311*^9, 3.868520283147401*^9}, {3.8685206145298347`*^9, 
   3.8685206150078983`*^9}, {3.868537004723915*^9, 3.868537005683709*^9}, {
   3.8686716248609867`*^9, 3.86867162498657*^9}, {3.8689423409409943`*^9, 
   3.868942344276237*^9}, {3.868947806296569*^9, 3.868947806625355*^9}, 
   3.868955246204385*^9, {3.868957393208212*^9, 3.8689574013451433`*^9}, {
   3.868957440249872*^9, 3.8689574443738937`*^9}, {3.8689577953130703`*^9, 
   3.868957801168947*^9}, {3.868958026730661*^9, 3.8689580269562798`*^9}, {
   3.868960876079372*^9, 3.8689608783682137`*^9}, {3.868964831153708*^9, 
   3.868964831513155*^9}, {3.868965437993729*^9, 3.868965438129128*^9}, {
   3.868975240520047*^9, 3.868975267560664*^9}, {3.8690319933178453`*^9, 
   3.8690319942928963`*^9}, {3.869034512435259*^9, 3.869034512808312*^9}, {
   3.869034610772094*^9, 3.869034611688615*^9}, {3.86903620618801*^9, 
   3.869036206373323*^9}, {3.8690363476068773`*^9, 3.869036349769408*^9}, {
   3.869036449105991*^9, 3.869036450054133*^9}, {3.8691058271725616`*^9, 
   3.86910585030811*^9}, {3.869106008681794*^9, 3.86910601769174*^9}, {
   3.869106118542383*^9, 3.869106126708026*^9}, {3.869106300198392*^9, 
   3.869106310243504*^9}, {3.869106550008959*^9, 3.8691065502511663`*^9}, {
   3.8691066023696003`*^9, 3.8691066409269953`*^9}, {3.869106728726873*^9, 
   3.869106732707152*^9}, {3.869106781369624*^9, 3.869106781690955*^9}, {
   3.869107221769636*^9, 3.869107224150084*^9}, {3.8691076647349586`*^9, 
   3.8691076791551533`*^9}, 3.869108111159465*^9, {3.869111253542173*^9, 
   3.869111266704829*^9}, 3.8691114531763678`*^9, {3.8691115014501963`*^9, 
   3.8691115024350452`*^9}, {3.8691115775921707`*^9, 
   3.8691115787758913`*^9}, {3.8691116899369087`*^9, 3.869111690538197*^9}, {
   3.8691117691600723`*^9, 3.8691117876982183`*^9}, {3.8691121802378807`*^9, 
   3.8691121836826277`*^9}, 3.869112387993538*^9, {3.8691125616997557`*^9, 
   3.8691125907168922`*^9}, {3.86911270806533*^9, 3.869112723740849*^9}, {
   3.869112956528831*^9, 3.869112966025186*^9}, {3.869113141057391*^9, 
   3.869113142033929*^9}, 3.869115743191606*^9, {3.869117545424532*^9, 
   3.869117552560911*^9}, 3.8691197572896433`*^9, {3.869121698753475*^9, 
   3.8691217122755747`*^9}, 3.86919713699297*^9, {3.869203795640698*^9, 
   3.8692038057553377`*^9}, {3.8692077554756203`*^9, 3.869207760735105*^9}, {
   3.869208079942*^9, 3.869208085087775*^9}, {3.8692088553125353`*^9, 
   3.86920886120012*^9}, {3.869209158678213*^9, 3.869209159292757*^9}, {
   3.8692095136217213`*^9, 3.869209514533951*^9}, {3.869211601191217*^9, 
   3.869211602739736*^9}, {3.8692123062616177`*^9, 3.8692123119646463`*^9}, {
   3.869212438589468*^9, 3.8692124505522203`*^9}, {3.869212552950715*^9, 
   3.8692125532671328`*^9}, {3.8692126127431927`*^9, 3.869212613253107*^9}, {
   3.8692126791033287`*^9, 3.86921268464844*^9}, {3.86921276395127*^9, 
   3.8692127642612867`*^9}, {3.869212861743297*^9, 3.8692128621976557`*^9}, {
   3.869212912650663*^9, 3.8692129131419163`*^9}, {3.869213418442769*^9, 
   3.869213422358157*^9}, {3.86921548420509*^9, 3.869215497105235*^9}, {
   3.869215546879163*^9, 3.8692155519349546`*^9}, {3.8692161044615107`*^9, 
   3.869216107132107*^9}, {3.8692167279588547`*^9, 3.8692167436075907`*^9}, {
   3.869217032457283*^9, 3.8692170459859877`*^9}, {3.869217373494234*^9, 
   3.8692173782740717`*^9}, {3.869217516946954*^9, 3.869217517213879*^9}, {
   3.869217724899954*^9, 3.86921773656007*^9}, {3.86921777789679*^9, 
   3.8692177779781427`*^9}, {3.869217825227951*^9, 3.869217842059514*^9}, {
   3.869218068966909*^9, 3.869218073431982*^9}, {3.8692196032022543`*^9, 
   3.869219604075777*^9}, {3.869640832449705*^9, 3.8696408362063217`*^9}, {
   3.869640916496462*^9, 3.8696409176144342`*^9}, {3.869641135904475*^9, 
   3.8696411391902113`*^9}, {3.869642484224144*^9, 3.869642487904296*^9}, {
   3.869643270826934*^9, 3.86964331035256*^9}, {3.869643840456313*^9, 
   3.869643840835198*^9}, {3.8696502846154737`*^9, 3.8696502876411943`*^9}, {
   3.8696510070261927`*^9, 
   3.869651011546204*^9}},ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-\
4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"64", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNOT", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"HardNeuralMajority", "[", 
          RowBox[{"classificationLayerSize", ",", "inputSize"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"HardNeuralNOT", "[", 
          RowBox[{"classificationLayerSize", ",", "classificationLayerSize"}],
           "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralMajority", "[", 
          RowBox[{"classificationLayerSize", ",", "classificationLayerSize"}],
           "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.869651023660898*^9, 3.8696510249354467`*^9}, {
   3.869651117393078*^9, 3.8696511293511467`*^9}, {3.869651199170328*^9, 
   3.8696512038715267`*^9}, {3.869651329521565*^9, 3.869651428917004*^9}, {
   3.869651493868416*^9, 3.869651496496129*^9}, {3.869651537835287*^9, 
   3.869651581005632*^9}, 3.869651874226878*^9, {3.869651941901227*^9, 
   3.869651961264625*^9}, {3.8696520363549767`*^9, 3.8696520539452868`*^9}, {
   3.8696520855000467`*^9, 3.869652132392926*^9}, {3.869652190507762*^9, 
   3.869652191505183*^9}, {3.869652270060505*^9, 3.869652330826764*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"0ae7b8a4-1a49-48e1-8a8e-1fac0abce9af"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetFlatten", "[", "trainableNet", "]"}]], "Input",
 CellChangeTimes->{{3.8696512089604473`*^9, 3.8696512125980177`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"e3cb48ad-a12a-496b-9c22-75c7753cdb0f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["7", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    PaneBox[
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Acceptabi..\"", "\"Acceptability\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Acceptability", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss/Error\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Cargo\"", TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-13.000000133974481`, -4.999999651666337}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/Featu..\"", "\"Net/FeatureLayer/Catenate\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "Net/FeatureLayer/Catenate", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-27, 
                    2]}, {-12.00000005358979, -1.999999678461235}], 
                    
                    Offset[{
                    0, -13.5}, {-12.00000005358979, -1.999999678461235}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Doors\"", TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-13.000000107179584`, -3.999999651666337}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Maintenan..\"", "\"MaintenanceCost\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MaintenanceCost", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-13.000000080384687`, -2.9999996516663376`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Passengers\"", TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-13.00000005358979, -1.9999996516663379`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"PurchaseP..\"", "\"PurchasePrice\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "PurchasePrice", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{
                    0, -7}, {-13.000000026794893`, -0.9999996516663383}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Safety\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-12.999999999999996`, 
                    3.4833366137853197`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Loss\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Loss/Hard..\"", "\"Loss/Harden\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Loss/Harden", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999999732051017`, 
                    1.0000001071795879`}], 
                    
                    Offset[{0, -13.5}, {-3.9999999732051017`, 
                    1.0000001071795879`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Loss/Soft..\"", "\"Loss/SoftProbs\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Loss/SoftProbs", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999973205102, 
                    1.0000000803846907`}], 
                    
                    Offset[{0, -13.5}, {-2.999999973205102, 
                    1.0000000803846907`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Loss/Soft..\"", "\"Loss/SoftmaxLayer\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Loss/SoftmaxLayer", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -13.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/7\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/7", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-10.9999999732051, 
                    1.000000294743867}], 
                    
                    Offset[{0, -13.5}, {-10.9999999732051, 
                    1.000000294743867}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/1\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/1", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-13.999999973205098`, 
                    1.000000375128558}], 
                    
                    Offset[{0, -13.5}, {-13.999999973205098`, 
                    1.000000375128558}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/3\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/3", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-12.9999999732051, 
                    1.000000348333661}], 
                    
                    Offset[{0, -13.5}, {-12.9999999732051, 
                    1.000000348333661}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/10\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/10", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-7.9999999732051, 1.000000214359176}], 
                    
                    Offset[{0, -13.5}, {-7.9999999732051, 
                    1.000000214359176}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/11\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/11", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-6.9999999732051, 
                    1.0000001875642788`}], 
                    
                    Offset[{0, -15.5}, {-6.9999999732051, 
                    1.0000001875642788`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/12\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/12", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999973205101, 
                    1.0000001607693818`}], 
                    
                    Offset[{0, -13.5}, {-5.999999973205101, 
                    1.0000001607693818`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/13\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/13", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999973205101, 
                    1.0000001339744848`}], 
                    
                    Offset[{0, -13.5}, {-4.999999973205101, 
                    1.0000001339744848`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/2\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/2", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}], 
                    Offset[{0, -13.5}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/4\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/4", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-9.999999999999996, 
                    2.679489702911784*^-7}], 
                    
                    Offset[{0, -13.5}, {-9.999999999999996, 
                    2.679489702911784*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/5\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/5", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-11.9999999732051, 
                    1.000000321538764}], 
                    
                    Offset[{0, -13.5}, {-11.9999999732051, 
                    1.000000321538764}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/6\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/6", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-8.999999999999996, 
                    2.411540732620606*^-7}], 
                    
                    Offset[{0, -13.5}, {-8.999999999999996, 
                    2.411540732620606*^-7}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/8\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/8", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-9.9999999732051, 1.00000026794897}], 
                    
                    Offset[{0, -15.5}, {-9.9999999732051, 1.00000026794897}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Net/SoftN..\"", "\"Net/SoftNet/9\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "Net/SoftNet/9", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-8.9999999732051, 1.000000241154073}], 
                    
                    Offset[{0, -13.5}, {-8.9999999732051, 
                    1.000000241154073}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999985262806, 
                    0.5500000388526006}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{-5.2177580926747265`, 
                    1.7392528529019002`}, {-12.479057033602844`, \
-3.4371704901375812`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.31622779143670915`, 0.948683289577223}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{-4.919349484592803, 
                    2.459674907063233}, {-12.455901777458964`, \
-2.911803065120385}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.4472136194660424,
                     0.8944271790168733}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337044`}, {-12.450000065647494`, \
-2.4499996664035315`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334008,
                     0.7071067622396938}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.4737193454461553`*^-7, 
                    5.499999999999997}, {-12.45000005358979, \
-1.9999996664035313`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897189930098`*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{3.889087400733703, 
                    3.8890871923183172`}, {-12.450000041532086`, \
-1.5499996664035316`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.707106762239694, -0.7071068001334005}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{4.919349616406267, 
                    2.4596746434363035`}, {-12.455901728595606`, \
-1.0881962673704069`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.44721357153387337`, -0.8944272029829576}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{1.4737193393399295`*^-7, 
                    5.499999999999998}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489707890781*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"64\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461564`*^-7, 
                    5.499999999999999}, {-3.449999973205102, 
                    1.0000000924423944`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897189930118`*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.4499999732051023`, 
                    1.0000000656474974`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}], 
                    InsetBox[
                    FormBox["\"21\"", TraditionalForm], 
                    
                    Offset[{-5.217758092674727, 
                    1.7392528529019002`}, {-11.479056953218153`, \
-0.4371705169324793}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.31622779143670915`, 0.9486832895772231}], 
                    InsetBox[
                    FormBox["\"5376\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337052`*^-7, 
                    5.499999999999999}, {-13.449999973205099`, 
                    1.0000003603913648`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.679489696788555*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461553`*^-7, 
                    5.499999999999997}, {-7.4499999732051005`, 
                    1.0000001996219825`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897189930098`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-6.4499999732051005`, 
                    1.0000001728270855`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox["\"256\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.4499999732051005`, 
                    1.0000001460321886`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"64\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-4.449999973205101, 
                    1.0000001192372916`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox["\"65536\"", TraditionalForm], 
                    
                    Offset[{1.4737193366014802`*^-7, 
                    5.499999999999997}, {-10.449999999999996`, 
                    2.8000667395428143`*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897029117823`*^-8}], 
                    InsetBox[
                    FormBox["\"5376\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-12.449999973205099`, 
                    1.0000003335964678`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"65536\"", TraditionalForm], 
                    
                    Offset[{1.4737193366014802`*^-7, 
                    5.499999999999997}, {-9.449999999999996, 
                    2.532117769251636*^-7}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897029117823`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"21\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-11.449999973205099`, 
                    1.0000003068015708`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{-3.8890871923183177`, 
                    3.889087400733702}, {-8.449999985262803, 
                    0.5500002264168798}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334004,
                     0.7071067622396942}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"21\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193454461553`*^-7, 
                    5.499999999999997}, {-10.449999973205099`, 
                    1.0000002800066736`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897189930098`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"21\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-9.449999973205099, 
                    1.0000002532117764`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"256\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-8.4499999732051, 
                    1.0000002264168797`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Acceptability\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Acceptability", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-13.000000133974481`, -4.999999651666337}, \
{-12.00000005358979, -1.999999678461235}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Cargo\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Cargo", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-13.000000107179584`, -3.999999651666337}, \
{-12.00000005358979, -1.999999678461235}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Doors\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Doors", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-13.000000080384687`, -2.9999996516663376`}, \
{-12.00000005358979, -1.999999678461235}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"MaintenanceCost\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"MaintenanceCost", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-13.00000005358979, -1.9999996516663379`}, \
{-12.00000005358979, -1.999999678461235}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Passengers\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Passengers", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-13.000000026794893`, -0.9999996516663383}, \
{-12.00000005358979, -1.999999678461235}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"PurchasePrice\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"PurchasePrice", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-12.999999999999996`, 
                    3.4833366137853197`*^-7}, {-12.00000005358979, \
-1.999999678461235}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Safety\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Safety", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999732051017`, 
                    1.0000001071795879`}, {-2.999999973205102, 
                    1.0000000803846907`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]64\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[{{-2.999999973205102, 
                    1.0000000803846907`}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-12.00000005358979, -1.999999678461235}, \
{-10.9999999732051, 1.000000294743867}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 21\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-13.999999973205098`, 
                    1.000000375128558}, {-12.9999999732051, 
                    1.000000348333661}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5376\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5376\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999999732051, 
                    1.000000214359176}, {-6.9999999732051, 
                    1.0000001875642788`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])", 
                    
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.9999999732051, 
                    1.0000001875642788`}, {-5.999999973205101, 
                    1.0000001607693818`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])", 
                    
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999973205101, 
                    1.0000001607693818`}, {-4.999999973205101, 
                    1.0000001339744848`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999973205101, 
                    1.0000001339744848`}, {-3.9999999732051017`, 
                    1.0000001071795879`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]64\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-10.999999999999996`, 
                    2.9474386732029625`*^-7}, {-9.999999999999996, 
                    2.679489702911784*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 65536\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 65536\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-12.9999999732051, 
                    1.000000348333661}, {-11.9999999732051, 
                    1.000000321538764}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5376\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5376\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.999999999999996, 
                    2.679489702911784*^-7}, {-8.999999999999996, 
                    2.411540732620606*^-7}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 65536\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 65536\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-11.9999999732051, 
                    1.000000321538764}, {-10.9999999732051, 
                    1.000000294743867}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
256\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.999999999999996, 
                    2.411540732620606*^-7}, {-7.9999999732051, 
                    1.000000214359176}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])", 
                    
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-10.9999999732051, 
                    1.000000294743867}, {-9.9999999732051, 
                    1.00000026794897}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
256\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-9.9999999732051, 
                    1.00000026794897}, {-8.9999999732051, 
                    1.000000241154073}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
256\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.9999999732051, 
                    1.000000241154073}, {-7.9999999732051, 
                    1.000000214359176}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.449999985262806, 
                    0.5500000388526006}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Acceptability\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Acceptability", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-12.479057033602844`, -3.4371704901375812`}, \
{-0.25, 0}, 
                    Offset[8], {1.000000080384691, 2.9999999732051017`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Cargo\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Cargo", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-12.455901777458964`, -2.911803065120385}, \
{-0.25, 0}, 
                    Offset[8], {1.000000053589794, 1.9999999732051021`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Doors\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Doors", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-12.450000065647494`, -2.4499996664035315`}, \
{-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"MaintenanceCost\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"MaintenanceCost", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-12.45000005358979, -1.9999996664035313`}, \
{-0.25, 0}, 
                    Offset[8], {1., -2.679489718993011*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Passengers\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Passengers", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-12.450000041532086`, -1.5499996664035316`}, \
{-0.25, 0}, 
                    Offset[8], {0.999999973205103, -1.0000000267948967`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"PurchasePrice\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"PurchasePrice", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-12.455901728595606`, -1.0881962673704069`}, \
{-0.25, 0}, 
                    Offset[8], {0.9999999464102061, -2.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Safety\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Safety", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.449999973205102, 
                    1.0000000924423944`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999996, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]64\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499999732051023`, 
                    1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.4499999732051023`, 
                    1.0000000656474974`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-11.479056953218153`, -0.4371705169324793}, \
{-0.25, 0}, 
                    Offset[8], {1.000000080384691, 2.999999973205102}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 21\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-13.449999973205099`, 
                    1.0000003603913648`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999982, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5376\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5376\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.4499999732051005`, 
                    1.0000001996219825`}, {-0.25, 0}, 
                    Offset[8], {1., -2.679489718993011*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])", 
                    
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.4499999732051005`, 
                    1.0000001728270855`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])", 
                    
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.4499999732051005`, 
                    1.0000001460321886`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999973205101, 
                    1.0000001192372916`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[Times]64\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]64\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-10.449999999999996`, 
                    2.8000667395428143`*^-7}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 65536\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 65536\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-12.449999973205099`, 
                    1.0000003335964678`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 5376\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 5376\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-9.449999999999996, 
                    2.532117769251636*^-7}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 65536\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 65536\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-11.449999973205099`, 
                    1.0000003068015708`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
256\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.449999985262803, 
                    0.5500002264168798}, {-0.25, 0}, 
                    Offset[8], {1.000000026794896, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])\
\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]256\[VeryThinSpace])", 
                    
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-10.449999973205099`, 
                    1.0000002800066736`}, {-0.25, 0}, 
                    Offset[8], {1., -2.679489718993011*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
256\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-9.449999973205099, 
                    1.0000002532117764`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
256\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 256\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.4499999732051, 
                    1.0000002264168797`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 256\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999999999993`, 5.3589794058235685`*^-8}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Acceptability\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Acceptability", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7226666666666666, 0.6733333333333333, 
                    0.8926666666666666]], 
                    EdgeForm[
                    RGBColor[0.584, 0.51, 0.839]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"CE\"", 
                    GrayLevel[0.33], Bold, 10, StripOnInput -> False], 
                    TraditionalForm]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss/Error\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CrossEntropyLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/Error", Bold], 
                    Style[
                    CrossEntropyLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13.000000133974481`, -4.999999651666337}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Cargo\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Cargo", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-12.00000005358979, -1.999999678461235}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 
                    16], {-12.00000005358979, -1.999999678461235}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/FeatureLayer/Catenate\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/FeatureLayer/Catenate", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13.000000107179584`, -3.999999651666337}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Doors\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Doors", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13.000000080384687`, -2.9999996516663376`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MaintenanceCost\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["MaintenanceCost", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13.00000005358979, -1.9999996516663379`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Passengers\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Passengers", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-13.000000026794893`, -0.9999996516663383}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PurchasePrice\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["PurchasePrice", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-12.999999999999996`, 3.4833366137853197`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Safety\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Safety", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-3.9999999732051017`, 1.0000001071795879`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-3.9999999732051017`, 
                    1.0000001071795879`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Loss/Harden\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/Harden", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999973205102, 1.0000000803846907`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Sum]\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-2.999999973205102, 
                    1.0000000803846907`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Loss/SoftProbs\"", Bold, StripOnInput -> False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Total", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/SoftProbs", Bold], 
                    HoldForm[
                    AggregationLayer[Total]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztWFtIk2EYdnO6zaFuc9N5SHSbp6lT2cmpqNOpOwiRUhkUoXkgCoVpSBdF
dROdLqqbLqKuuomC6EARFEGR0F1FEdVVFEQXRecDnZ5HNhiytWn/1oG98Prr
9/7/93zv+73f+72P5SNTA+PitLS0aRl+DAzPugKB4a2DSvyxcnJ648Tk2Kh3
cmZsYizQPJKOQQe0FCpJS0lKUpKS/1syMjJUpaWl4yaTaX9FRcU2rVbbl2hM
vV4/7fF4Xvv9/m/d3d1P8PzS39//w263nxeJROJEYNbU1OwjBrC+wt9Rjkkk
kmyLxXKS42VlZZuExszLy3NxbqvVetrtdj/Nzs42hWxSqbSANpvNdlZoXKfT
ec3n833Kzc21er3eD3g25eTkNFL5O3C/OxyOi0Jiwh8d58UeXtDpdCvoWyQ1
m81HhcRFjDs5L/Z3T3V19e6GhoZjGo3GvVCzsrL0QuLCxwHiVlVV7UK8r+bn
5/tCNuZVc3PzFaxpr5CYFKVSaSNua2vrTZ6hzMzMvJCtrq7uMG3FxcVrhcaF
iFpaWq5zfuKiTniKiopWMX85xvqRAMx5kclkJcA5F55HnZ2d9+HnmkRhhkt6
eroCZ7eO60gGXkr+TUHN1UEbk604Dzui1dtEKu7SIeiZZOuf3ueUJFcKCtgq
xc5Hg8EwIyQu7nQ/52UvhbvvRjTFPTgkJC7vm7a2tlvBvnSzkHPHEvQTWpfL
9Yi9eWFh4WAysdmj9fT0PGe81Wp1ezzfKBSKCvIJ9B8H+ESPa14KNvpiC/qa
t319fa9410d7D3sjR495nDyCvTX6+mfsexkvo9G4dSnY6KV6yYHIEeRy+bKF
drFYLGWeEZM5AZ+NHGe8Ojo67hF7KX4zz7DXDzlnSUnJuoX2ysrKnbTV1tYe
7O3tfRFuQ86vpg0xDywSVgTOdYrf1tfXH4m0JsT1XXt7+232sfQ7xF2o4G4b
gmd9djGg8GU7v+N84JgZC+0hfzDvFvobrcYsprcGR1jO3OC+ku9FWdf83Y1a
40VPP1deXj4Vib+Qp8eDSY6JPH6DM/SRXCHae+AKh4jLPh7xfk/OErKpVCon
+UuknIgkXFtXV9fjYB6t/9W7jC/fA/+8hNy9ExrnuWLNw7o/I68N8eCG7oVY
9bmpqekE44+z/TLIneYQ027+HwBruMuzRz4XD2Y4biwFR3nA91HLWokTZiP/
voz9sceL+TuCmq5hfcA+qZOBl5KU/E3yE7YM2js=
                    "], {{0, 29.333333333333332`}, {16., 0}}, {0, 255}, 
                    ColorFunction -> RGBColor, ImageResolution -> 135.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {16., 29.333333333333332`}, 
                    PlotRange -> {{0, 16.}, {0, 29.333333333333332`}}, 
                    ImageSize -> 16], 
                    TraditionalForm]], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Loss/SoftmaxLayer\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "SoftmaxLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss/SoftmaxLayer", Bold], 
                    Style[
                    SoftmaxLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-10.9999999732051, 1.000000294743867}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-10.9999999732051, 
                    1.000000294743867}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/7\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/7", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-13.999999973205098`, 
                    1.000000375128558}], 
                    
                    Offset[{-10.5, -10.5}, {-13.999999973205098`, 
                    1.000000375128558}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-13.999999973205098`, 
                    1.000000375128558}], 
                    
                    Offset[{10.5, 10.5}, {-13.999999973205098`, 
                    1.000000375128558}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-13.999999973205098`, 
                    1.000000375128558}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/1\"", Bold, StripOnInput -> False]}, {
                    StyleBox["NetArrayLayer", FontFamily -> "Source Code Pro",
                     ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/1", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-12.9999999732051, 1.000000348333661}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-12.9999999732051, 
                    1.000000348333661}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/3\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/3", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-7.9999999732051, 1.000000214359176}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-7.9999999732051, 
                    1.000000214359176}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/10\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/10", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], {
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    DiskBox[{-6.9999999732051, 1.0000001875642788`}, 
                    Offset[13.88888888888889]]}, {
                    DiskBox[{-6.9999999732051, 1.0000001875642788`}, 
                    Offset[11.666666666666668`]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Sort\"", 
                    GrayLevel[0.33], Bold, 9, StripOnInput -> False], 
                    TraditionalForm]], {-6.9999999732051, 
                    1.0000001875642788`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/11\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "FunctionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/11", Bold], 
                    Style[
                    FunctionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-5.999999973205101, 1.0000001607693818`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[LeftDoubleBracket] \[RightDoubleBracket]\"", 
                    GrayLevel[0.33], 13, Bold, StripOnInput -> False], 
                    TraditionalForm]], {-5.999999973205101, 
                    1.0000001607693818`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/12\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "PartLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/12", Bold], 
                    Style[
                    PartLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-4.999999973205101, 1.0000001339744848`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999973205101, 
                    1.0000001339744848`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/13\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/13", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 20), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}], 
                    
                    Offset[{-10.5, -10.5}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}], 
                    
                    Offset[{10.5, 10.5}, {-10.999999999999996`, 
                    2.9474386732029625`*^-7}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-10.999999999999996`, 
                    2.9474386732029625`*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/2", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 21), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-9.999999999999996, 2.679489702911784*^-7}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztm01oE0EUxzetQkEUPSiIILSKl4JgBSkeUvyiFKyUVC9CoUlmZhOh0aaK
CmIufpwEDx4UhEq12dnQg0Lx4qHgRT2IFz2Jh4J6EQo9KBYt6ZtaJPuStkkz
u7OP5AevJTn998fbN9PZbXviYky0WJY11gY/YvGrx7LZ+PXB7fDhXGYsbWc4
68tc5jbPdida4cvDUANQm6zQ0286AHGa/upDmz/O5QGbuzd0la5cPqPFnxBy
n+DyK1RRV+nIFQB1+xOisBeud1anu4byx91p3e4axV8q6RyqeP1M3oW6VU/p
ukCfqcsfuJrC7nK5GQLbNm1s2B/n+U7sDtbgPp3hCFCHPyeP/L23rGJEZzgC
bMif2uuBr8VSfzaTMd3hCLAhfzaX46j3PuZyuRbd4QhQsz/GCu3g66/Hn3DO
+xGOADX7A18PUe99brA1t5Sa/KVShT3ga8G75roJv8IRoCZ/MPfuo96bFeLR
Zr/CEaBqf6nUxC7w9Qvt9y74GY4AVfuzuXPH23vu9+Hh8TY/wxGgKn/p9OQO
cDaP1txRv8MRoCp/grk5NPd+DA1NbPE7HAHW9Tcy8mwb+Jrz9p68FkQ4Aqzr
T7lCvTeXSLzYGkQ4AqzpT92j6l5Fa+7NoMIRYE1/gslLqPfm1VoSVDgCrOpP
7U3A1zfv3HNvBxmOAKv6g7mXRr33Mx4v7AwyHAEq+lN/k+FnajD37gUdjgAV
/akzAdR7v4V4ujvocAQo86fOotSZFJp7D0yEI0CZP3UWinrvj3pGbiIcATz+
1Bk8+PqE5t5jU+EI4PEHc28Q9d5iMlnYbyocAUr8FSPg6wN6j2DSXDQS/Pdn
J93+8ufh+U6T4Qiw4q8Y4dx5h/xNmY1GgmV/MPdO4t5T7waZDkeAFX9yBp3N
T5sORoR+uG+P4t5jTHabDkYEtWa8RP5emQ5FhY6OI6Pla26hx3QuKvRE7Tee
d6i4fG06ExUYyx/s7b3i6T2b5U+ZzoURwh0IZXG5UOpP7f/C+P4jni9hKq8/
edq0q0qojGGtrq7Y8u8TxzNfLKv1jPVvPxiWWsZ0j1XTfzZzzvrWQHUC98Xz
sFY0ar8VzHnSoO/e6qD5/5dNmjTxjSUqhKUq
                    "], {{0, 25.5}, {40., 0}}, {0, 255}, ColorFunction -> 
                    RGBColor, ImageResolution -> 144.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {40., 25.5}, 
                    PlotRange -> {{0, 40.}, {0, 25.5}}, ImageSize -> 20], 
                    TraditionalForm]], {-9.999999999999996, 
                    2.679489702911784*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/4\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ElementwiseLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/4", Bold], 
                    Style[
                    ElementwiseLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 22), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-11.9999999732051, 1.000000321538764}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-11.9999999732051, 
                    1.000000321538764}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/5\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/5", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 23), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-8.999999999999996, 2.411540732620606*^-7}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-8.999999999999996, 
                    2.411540732620606*^-7}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/6\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/6", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 24), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], {
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    DiskBox[{-9.9999999732051, 1.00000026794897}, 
                    Offset[13.88888888888889]]}, {
                    DiskBox[{-9.9999999732051, 1.00000026794897}, 
                    Offset[11.666666666666668`]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Sort\"", 
                    GrayLevel[0.33], Bold, 9, StripOnInput -> False], 
                    TraditionalForm]], {-9.9999999732051, 1.00000026794897}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/8\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "FunctionLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/8", Bold], 
                    Style[
                    FunctionLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 25), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-8.9999999732051, 1.000000241154073}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[LeftDoubleBracket] \[RightDoubleBracket]\"", 
                    GrayLevel[0.33], 13, Bold, StripOnInput -> False], 
                    TraditionalForm]], {-8.9999999732051, 
                    1.000000241154073}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Net/SoftNet/9\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "PartLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Net/SoftNet/9", Bold], 
                    Style[
                    PartLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 26), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxTTMoPSmViYGCQAmIQ/fc/GOxPSpJyDD6aYxcTNvfj///v958PMWRnYPhg
z3C1joWBQetA5Jr5L/7/Fz5gFHqGkYFB44AV24aVIH1pq2Ywg+Q3R9hf/P+f
/8CZ+k1MIP4WMJ8dql7rQObGukUg9TO0njGA+NeS/rqA7PkHtl7zwIf8p0uC
E6bbQdwRYwdx13v7qaHpf0DmOgQflQG5ZxqYz34g/99kURBfd/W5HyBz569M
4gPxU65KArmqBz4tkfMH8ZPBfO0DSYs3pSDkNQ9M8muMBfFPrjIGOkH+QOOy
LksEX/rAhsBIIxD/FJgvfuDBH3VtBF/4gMCKb8ogPsT9qgcWKx+yWXl8sh2E
r3ygtnYDR8jviXYQ+9QPHPrpH4ZQr3gg/Pq8K//0JkDllQ8oBrx1R7hP8UDg
790OID4AzNXodQ==
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 8, 21, 8, 8, 8, 8, 8, 8, 21, 21, 21, 21, 21, 
                    21, 21, 25, 21, 21, 21, 21, 21, 21, 25, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {827.9999999999997, 378.00000147371924`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{29., 29.}, {29., 19.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], Scrollbars -> {True, False}, ImageSizeAction -> 
                    "Scrollable", ImageSize -> {800, Automatic}]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Acceptability\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Acceptability\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Acceptability"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Acceptability\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Acceptability"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"PurchasePrice\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"PurchasePrice\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"PurchasePrice"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"PurchasePrice\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"PurchasePrice"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"MaintenanceCost\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"MaintenanceCost\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"MaintenanceCost"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"MaintenanceCost\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"MaintenanceCost"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Doors\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Doors\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Doors"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Doors\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Doors"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Passengers\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Passengers\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Passengers"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Passengers\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Passengers"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Cargo\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Cargo\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Cargo"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Cargo\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Cargo"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Safety\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Safety\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Safety"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Safety\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Safety"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{5376}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {5376}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5376}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{65536}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {65536}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{65536}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {5376}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5376}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{5376}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    Clip[#, {0, 1}]& ], "$Dimensions" -> {65536}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{65536}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{65536}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{256, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{5376}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{256, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{65536}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/8" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> 256, "$InputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 11}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT], "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|"Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|"Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>|>, 
                    "$SequenceLength" -> 256, "$InputShape" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/12" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 128}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/13" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 64}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/Harden" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_951cb4ef_b9b8_4c03_b2dc_8300212e3af6", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
YvobnhhBW2Yonrz3Qp5/A0+HIEVav1gZFTryRmrz0ht0TIamFTuy+xU2bKe5
2b5liuF/3UW5vmx9+SoZRMLtxJrgdrqx0Ph/0KedtwV5zlTZLdCiGSg/HQDf
nDZBabF7Nigg7CbQEf8g/XEYlt1KN95EhKyPiZ07hyFNzfxbDArRBCvEur5u
3o153NWQkcXJFrJbefaVcmmepiXKz6vk19ONdxL8/iS6pDSS20LCA1TJPaN0
+cG532jpfLfupYNT0gsC4M2H90ptr12Dr85RnHOYjKtR8uGfLuL8ggXZ+t3E
yPmJ75Qd5U5K6csMTHBw1yrTv0Yv2kT1hbCsEOlAUvinKFF+CNKlOPq/dwXA
AaSpN4r2FCriwPd8VGJUv9XIVxlw75xSQD5tBwnKPHyJcKebd8wJL+2W8b40
JXy9T70coXsK1qondhHo7k6UKdG9c/lfKaGM56CPj36qfl6hwkHGo69hf+PO
vXdYtndpvV2TYl4X70tjgrDDRi9BApD13Ep/JuriTZzEH7Mn5BL9j3KS4Uqa
O4SIfXdrhpYq4kRyqRaeC95aCp54KhQcoUnjX9tQEFAX4J4c0jF7fN+pbRi8
O+EfYbabH9CaJrebh8eEcScSxpXZmPnk6OpNsEvqVm2/mPm9y+HW0Dyl2bMP
ZzXYK9pcohuVOPVrqLeBrtQmhYED/Y9yCbe3qv6jPywcMiNxe60H77RX6Z0q
a/v8O2ABEirGNTG/qTdeUXsdEk3TMc76RW6633FYwCU238IXcGvQDlpq754u
Hs0ClToLYHEzG28bgITkeyg0L5DxtuoqBe7krwDnupXYOUy4KnMeqb0JGj4H
7+HUzTMwxNCbnYm9dooBWIWHjMnTy+TSytnA1YFDcnA17mqDHgbX6YcvyTtv
4GhtMR6D9Z+wQn2HO1vZ9fS6y7ib6IU2pcOAtVI/vrKXwarRDF/MgS/PNMdL
4MLXr7UlNoU6P4x0QkorVk7cu3ukDdzafRN8xRQn433YKC+PoykXPzcPDyQt
rXUJcvyC2MZIr8M3PBGG0gn4Nt78Q3JpI57wOELEfYua5oF5v8d39m6A5sTh
L51hnfaEyIHABb+gXyp9HPTUna+IID9WDC8c+Nflu9p/X6k7TU52ZX6lT6rD
79YVDl8QZ7FSJi7C+q9Ss98MRsjL9nmnkQimdzqN1N5KP7FbHY2H/DtgSb9c
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
7wBMGA9gApdvc4MzzEL+sm5hAVgsA8AiUmE0J1cAM13y7NiZdADr8UCjTf/1
L+vq7zaHGf49DsAGENjJb6/Mpqw1azh25hKABawBsFuzxtVbt0yA0fo0Aew/
U4PX0Z7DaCk7AKz45pSwR74bn94IrpsLuPUZAJg7E8Cm7YfRJrkBCYcArLUK
RsvYyqAT3zVAd4jPUNAd4kQWukOsQ9whZosnWUjJM1nKC8RCw6Pey4+6jWMH
UsXYJiqXkYz+J1WUckhEkfGPgo9/UQHdL7b+fL/YD7X9Jhj/3+4XK6/rKh//
83vA/2sjEfeEbfhW/P9yTxhdAEbfbWAXZ+HXfrW2CzRT6XTrIF90iO4cRgvO
cFMfgysSa0ZbqE7QuXJ8SV3FEtvSrEBd/ApuX7k49Fk2ib2TWs1zK1m7wNpi
w5+80pernfTjy7BiAYvpKtEiH3BOCaS48hkBP6a4Cqdwzi/ctt+IvOR4eMbZ
gFtmZhTbzGDBtwFNAQH7sMypXNo8be03GjYtGZLDpZSSIub8zeo3Mw+vYx0M
zHpZR93EuRigsZi/P5yTasenoCtL9uorSzsp6msrE8jOmcEWh4m7P9mUQxMO
r03+2YhG1X4uTsbyuNrqyzRvMNXFn2/3BehsMTw2LfM1JmBF0bQnPgcgLuUw
dn7JTJa7vjOW8qVfijM3JZxT1KLdjobBdNTD9KuHebhPoL/F8JQFfm8p8J2g
VGP7say3+88wB1u0LdA1G3RJC7/tRNJX33byZ/gEHhOeJZ/C70e9E3Rq2HGn
CraAJ/1aIJ7yirwcaDw7DtFooaGicbsxeU1m8MUrOI2bf6csNW4KOCY+O1sw
h6/Bsefmo/tQqavU96GqzMT71u4PHY/f47F0rq4I1N4y7ko4x2K1hQa607RG
eacpy3D/fya4mlE6VlRPKaW5t9CoghgW15auukkj3lVsSXLA71W8kPRrb+d7
ZVfqNhQL7p2hh4t16gSL+HmSrwJqjPU1zU/zn6RYVOjupExIW7g+q5rNoZZr
3ESnsjn4mdk3ZPX9CR2hY4W1WMKhlmrRZlnUaF3K1iyeehcr1SLNyCy2TDE8
QdzX1KXFZ3VRZlboSkmrSdFCx6JsUpQGVXXMd2EWZV6F9UGhIXHydnMA/ceF
2cWWQsPY0iKp21x0+vKg+oZrspP6aOsUdm6pJWXSRZgD6r/TKNN186u13PZp
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
EX7j/wD8BtoP
                    "]]|>, "orcInstance" -> 103273936, "orcModuleId" -> 
                    100010224, "targetMachineId" -> 68627520|>, 
                    140585460954944, 140585460954800, 140585460954880, 
                    140585460948992, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_b508ab89_e6ef_43c0_8679_2d34b6de152a", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
FBb+HbZWwBY=
                    "]]|>, "orcInstance" -> 100380944, "orcModuleId" -> 
                    61934080, "targetMachineId" -> 104191520|>, 
                    140585460941344, 140585460940944, 140585460941024, 
                    140585460940800, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {4, 64},
                     "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "4e278e821357957f", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 64}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 64}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/Error" -> <|
                    "Type" -> "CrossEntropyLoss", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "TargetForm" -> "Probabilities", "$InputDimensions" -> {},
                     "$Classes" -> 4, "$IntegerType" -> 
                    NeuralNetworks`IndexIntegerT[1, 4]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Acceptability" -> <|"Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {
                    "\"unacceptable\"", "\"acceptable\"", "\"very good\"", 
                    "\"good\""}, "OutputForm" -> "IndicatorVector", 
                    "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4, 
                    "$Version" -> "13.1.3"|>, 
                    "PurchasePrice" -> <|"Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {
                    "\"very high\"", "\"low\"", "\"high\"", "\"medium\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                    "13.1.3"|>, 
                    "MaintenanceCost" -> <|
                    "Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {
                    "\"medium\"", "\"very high\"", "\"low\"", "\"high\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                    "13.1.3"|>, 
                    "Doors" -> <|"Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {2, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4, 3}, "OutputForm" -> 
                    "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                    False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                    "Passengers" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {2, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4}, "OutputForm" -> 
                    "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                    False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                    "Cargo" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {"\"small\"", "\"medium\"", "\"large\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 3, "$Version" -> 
                    "13.1.3"|>, 
                    "Safety" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {"\"high\"", "\"medium\"", "\"low\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 3, "$Version" -> 
                    "13.1.3"|>|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Acceptability"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Error", "Outputs", "Loss"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Acceptability"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Error"], 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate"], 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Harden"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftProbs"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/7"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/1"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/3"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/10"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/11"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/12"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/13"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/2"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/4"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/5"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/6"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/8"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/9"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Acceptability"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Error"], 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate"], 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/Harden"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftProbs"], 
                    NeuralNetworks`NetPath["Nodes", "Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/7"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/1"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/3"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/10"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/11"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/12"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/13"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/2"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/4"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/5"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/6"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/8"], 
                    NeuralNetworks`NetPath["Nodes", "Net/SoftNet/9"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.869651213615809*^9, 3.86965220947779*^9, {3.869652311213278*^9, 
   3.869652334509468*^9}},
 CellLabel->"Out[89]=",ExpressionUUID->"549ebfb0-acc0-4f27-a7b0-a551ea5706a7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}, {
   3.8685364797630873`*^9, 3.868536496883217*^9}, {3.868600076169417*^9, 
   3.868600076637474*^9}, {3.868600134889481*^9, 3.868600135284954*^9}, {
   3.868601255470386*^9, 3.8686012558943872`*^9}, {3.868602902814464*^9, 
   3.868602903232891*^9}, {3.868943377521962*^9, 3.868943381357031*^9}, {
   3.8689434141572866`*^9, 3.868943425164989*^9}, {3.868943586951866*^9, 
   3.8689436089616327`*^9}, {3.868944023717293*^9, 3.8689440271979637`*^9}, {
   3.868944083020088*^9, 3.868944086825481*^9}, {3.868947817163151*^9, 
   3.8689478172894077`*^9}, {3.868949946458611*^9, 3.868949960076432*^9}, {
   3.868977243682851*^9, 3.868977248732733*^9}, {3.868977291844462*^9, 
   3.8689773017254*^9}, {3.868977346389843*^9, 3.868977377673813*^9}, {
   3.868977408389917*^9, 3.868977427933148*^9}, {3.868977539952648*^9, 
   3.868977554029306*^9}, {3.868977819969697*^9, 3.8689778435338573`*^9}, {
   3.869023762591353*^9, 3.8690237633179893`*^9}, {3.869023837158021*^9, 
   3.869023876685935*^9}, {3.869110793308095*^9, 3.86911082542246*^9}, {
   3.869110910640922*^9, 3.869110910806432*^9}, {3.86912172241117*^9, 
   3.8691217224768143`*^9}, {3.869651243457945*^9, 3.8696512443590508`*^9}, {
   3.869652345237102*^9, 3.8696523460650587`*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{"\"\<TrainedNet\>\"", "->", 
         RowBox[{"NetDelete", "[", 
          RowBox[{
           RowBox[{"NetFlatten", "[", "#", "]"}], ",", "\"\<Loss/Error\>\""}],
           "]"}]}], "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      RowBox[{"HardenNet", "[", 
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}]}], "}"}]}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}, {3.86912103176339*^9, 3.869121111451393*^9}, 
   3.8691211481142063`*^9},
 CellLabel->"In[91]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", 
     RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}, {
   3.868964207787449*^9, 3.868964270803673*^9}, {3.869042816860148*^9, 
   3.869042853385454*^9}, {3.8691211223288383`*^9, 3.869121124951189*^9}, {
   3.869642753255953*^9, 3.869642753983399*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "e719d642-5517-4d0d-a3d9-156fec7e3314"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"84.7", "1.9"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    84.6820809248554979831`3., 1.9390370108970087504`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"69.4", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.3641618497109817554`3., 2.4818350129436712592`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.6098376005208353545`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0439148207683979219`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.5220079589840395107`3.", "\", \"", 
                    "0.6976672420576311984`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.5220079589840395107`3., ", ", 0.6976672420576311984`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.4945625859142877001`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0719485898541922519`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.3506654062059031962`3.", "\", \"", 
                    "0.6384597656226722595`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.3506654062059031962`3., ", ", 0.6384597656226722595`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"6.64`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"800.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                   FractionBox["\"Examples\"", "\"Seconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQ21ZPYHuC4Tv7N7L8jVrf3tgHJfdVeIS+sD+8+Ej/
oR9v7TNWFV22UHhjz3ST7eJpjWf2uNRHv5p9Vd/1rX3mp3bXlZUv7Ze8jtCd
1X7PngEMPmDQuMwJ4JAxkGh9a8+c8+WaWvYr+6DLbIEftj/E6R73Jl0D5tVv
7BPz/CvL7z2zn/PWbsEuviv2BVd9GJcwv7GPzkmIb2d6Yt+hfyX05vyD9jt2
RN/7l/nOvnDiaj2ZM2/tl7wVVTja+MreU7IyQ+XAW/snZtdU3b1e22/yq9f0
//MY7t6HVSLr3B/egvIZGGTvVPOv/fvG/tINn3/f3F/Yz+u6w9Iz5yZOd+Ky
FwBerbOB
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["223", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "223", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9139344262295082`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9291666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9214876033057852`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{223, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9139344262295082}], 
                    Row[{"Recall = ", 0.9291666666666667}], 
                    Row[{"FScore = ", 0.9214876033057852}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["19", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "19", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0778688524590164`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.24358974358974358`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{19, " examples of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.0778688524590164}], 
                    Row[{"Row fraction = ", 0.24358974358974358`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.00819672131147541`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.11764705882352941`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.00819672131147541}], 
                    Row[{"Row fraction = ", 0.11764705882352941`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.18055555555555555`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.05416666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.18055555555555555`}], 
                    Row[{"Row fraction = ", 0.05416666666666667}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["54", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "54", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.75`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6923076923076923`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.72`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{54, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.75}], 
                    Row[{"Recall = ", 0.6923076923076923}], 
                    Row[{"FScore = ", 0.72}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.027777777777777776`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.18181818181818182`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "very good", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.027777777777777776`}], 
                    Row[{"Row fraction = ", 0.18181818181818182`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.041666666666666664`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.17647058823529413`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.041666666666666664`}], 
                    Row[{"Row fraction = ", 0.17647058823529413`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.25`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.0125`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.25}], 
                    Row[{"Row fraction = ", 0.0125}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.08333333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.01282051282051282`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.08333333333333333}], 
                    Row[{"Row fraction = ", 0.01282051282051282}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5454545454545454`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5217391304347826`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.5}], 
                    Row[{"Recall = ", 0.5454545454545454}], 
                    Row[{"FScore = ", 0.5217391304347826}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.16666666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.11764705882352941`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.16666666666666666`}], 
                    Row[{"Row fraction = ", 0.11764705882352941`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.05555555555555555`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{
                    "\"Row fraction = \"", "0.004166666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.05555555555555555}], 
                    Row[{"Row fraction = ", 0.004166666666666667}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.2222222222222222`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.05128205128205128`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.2222222222222222}], 
                    Row[{"Row fraction = ", 0.05128205128205128}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.16666666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.2727272727272727`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "very good", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.16666666666666666`}], 
                    Row[{"Row fraction = ", 0.2727272727272727}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["10", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.5555555555555556`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5882352941176471`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5714285714285715`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{10, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.5555555555555556}], 
                    Row[{"Recall = ", 0.5882352941176471}], 
                    Row[{"FScore = ", 0.5714285714285715}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "240", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9291666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{240, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9291666666666667}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "78", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6923076923076923`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{78, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.6923076923076923}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5454545454545454`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{11, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.5454545454545454}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "17", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5882352941176471`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{17, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.5882352941176471}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "244", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9139344262295082`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{244, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.9139344262295082}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "72", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.75`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{72, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.75}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.5}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "18", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.5555555555555556`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{18, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.5555555555555556}]}], 
                    "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["240", TraditionalForm]}, {2.5, 
                    FormBox["78", TraditionalForm]}, {1.5, 
                    FormBox["11", TraditionalForm]}, {0.5, 
                    FormBox["17", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["244", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["72", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["12", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["18", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "acceptable" -> 0.25, "very good" -> 0.25,
              "good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"very high", "low", "high", "medium"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "very high", "low", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {2, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4, 3}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {2, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"small", "medium", "large"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"high", "medium", "low"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "acceptable", "very good", "good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {5376}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
LOGfOQGQhVgwtkDMwt2FMI91YXJnGS92CsXSvtGIULTi1jO2XBmaAd9N/lxs
EIXozX4IP23LC0ZufN/FgcmDSMUsJ2bbK/F3/BZ8vAc6u6zHPKs/Ql924k2V
f5B8smFkui3XTxR6R6dpvJrvgazhS7HnkT0Dnzsxfupoxl5xYNEQHySfX457
ET44+9aZKnnDuP7FBqQND0SfZ6SdjzMNTNy47oAjP/k4MLF2CSIPeOFsoCJ9
wqwxXmcbfrYtRPXQFRi01IkLGybBR2Ml3lcswZ1xzny5KRi+pc70FmpiyrMx
nPfXjj1zAlD9yQPNz1wY2c2KP8PcaaS9HCWTvSGkDvssc2Srzlps7zOGQb6h
6N/FkV0O2fPFKbJZ35kn14VgzRNH9j/oyd1uzhym4YtcX39k/EnDCpE3yluV
6AgF6op9EftzATyXeyI5mnxaOxfHTwQCkxz56oIDowLssM1jNXXuLkdZqQfo
PwfW/bZi4BxPPBjijyG/3WmLjVDtNxfTtfMxPqkdZ6Sm9HwnOKXreJ77EYnu
zbb8UuPMsEm+OFSxBtmBkfB09YDPByGWd/1wqXA6ykVKLCp14fXtMry84Mp7
znbU2OzGfncsWRzuwC2FizBtlz3bx0hh1iDM43/2bPJQZMTgMLjMVadXlgsC
3VwZebADC07a03/xJNitdaHr/RXIqdsMEztFnnlpy6E9nXjw6RIoXnLg7Tt+
6PLGlkdfBqOh1pKtA1fgpeDMrfleyDbzQ/JnBapP94LlE3tmHmiFyUdfnL/o
DJUua5F97C/Uqzoj+GQQPGY484v5YqgGzkOfFj+oeXsj1H803Sq24s/Vdqj7
kwOT7KhjNwdxUsGlo9bjx+HJcI1ci6//yL0bhJzQU6Dbupl4vGE2nHpOQ/Sl
jtRNXQCLDwEo7W3LGo3pbGwPR0qJM63DVuFONtm1OgCTuo6BuasbB2SSSqtd
qF23CX+POPD6c1s+a7Zj2ZKFmNFzPq49Wo6twpn2MorDSyEfshRdeG5rO248
cuLoi0FYsN4X7SkTkPmsGQsrAlHvpo8B6evxYcl2cMMi7A1w4GMdK96wCcLJ
RFs2fN6Iw0YB2PjQgd0nCDWjMwG+N5zpnu/ANaYjkHhtPJInKPCldStWN21B
UIMbbwUpcNwLK1pMduOxGy4MOzwGaoPs2fp2LVQbrTH7hy9EH1dAz3MqmpZv
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
Nr9m4dznYf2lLHTqb4mcjeas8RFT8ScDYpmadl1krHPVx5TTQp+WJWP5EA0a
ecvZrVcqOtoXwM/DgO12FOKQo4zvCs14S0uDCXUe/CL01lHoUfmlCriZKPks
Ox6abVT8NaQJJjuFmYxS0NPYksc05LSTmbPthkxE3c2HzogiJEUL160j9KxX
LrYuyEdwkxnLfjtz3NSXSGs/iZMD5PzyzYZ3U6Jh2Toe/Uw2Y+4JQ0bIMnF3
iQXHnpHSS9uQuz/LeejSdhSnRKiPbhVcsiYYgXXZuDoyBwvFrsQagRV+m1CU
4MZhPaT8W5mIX4uk3H1DyoCN6WiYcxH7RHlob1sAN9NkVJz9hfDDchYFZKCD
kIED92pSpZ0Dz/5SWgU5MLZVCLa0zIOXVh4OCGf63PYUxL9XUPFWySt/MnHT
KxNHCk3ZaogZ/VoWoeGmlJL4HLzqquIGIV/OaqdhdaoFPA6qWLunEE+7SamV
moGxfQqxdHQO3PbGYLybBq/450B3vA0b8gRmE5w2ME3JGVI5g4oTMNyiAIvP
L0DFajFVG+TMNZXR57uMXR0sqHNOqGN/OYeu2Ii+z1LxdkgGjnhY8FW+kHN9
kiDuYMkPS0S8UavgzopkbJgr55V8McdPysTI10qO7pmInZO24WapJZ2889FB
nivUxJmZjh8Q26kDG1pbM+ZIJv6WZcOnqzVthfOsupyPLyVZGD89HG3fC4/V
hkOxMRp5JkJdNATH3NGO95ZGQySKR8/VFjxV6Miye7Z0LLfl6U7D6e+XhGv6
0Rhup2LKQXDVOTD4WihOtbyBvP5qijfa8FpSEAb9DcT+X2HYlAuK95/Bxafh
GHQhHrbt49F+mJqGj8jwZjUXvo6Fst6BcyLVFKWouVsvBUGnlNzSE7TvFoP6
ndGY00xK04Xf28mG9bkh8DBMgFVrNXfExCLUAxwy0ZLVL6y5cRXpJvj9m2Q7
7DytwaMV1hw+bz1arVZR3t2a7W4kY9RrHX78koLFetYMX6Fip1GroL/Olp1c
JqDLXxUfhY6C3ewA7M7yxPTkMPxJUbLznUDE3hlHvQ4B+K2KRsx8NVW11mxw
JWeKbLjPG/wzVc3YTQlY8HsDos6eVvcIVfPtUhuedo1AZRttDtmjZs3EMIxq
EYgLneIw9I42Vdnh+Pd5Lrq2ixd40JKtmgMw9bWwK3va8m5YCCZPaU/pfRvu
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
ciLXhoFWBuw/G0zPGkjbDWGwqfNA579lbPNVwSUewh0UEXjRaQksqGGLdcYY
eUzLd6dEn3pkw6NeOoaOass+J8Ix66GWHTUjWLO+Hl+2GnBp8TYcM4+Bw/Rt
uOzgj4tL6rB1jx2NjtdDH6XnyxY6mohcWNPYGwGTnLj3aCxijhtQMU301E86
Rk1XIiQiDcWvHVh90ZH/dbHjp1ahWOLkxFufVOzwOgaqs2qu8rLggGXGHPu2
HFtmVuBUYyMe7WLGX3JzjpxqQuXoMsx9a8RmDfOQ4LMbU6sLsWizgrPTlmHr
7DKMGS3nrpOmbDVPyqFrytFucTHaXTdnJ3Fut7MWDJ5ZjqErjDhKW4i0XbvQ
7JEp5SnFeDDHnNuVZmx53IwPLM3YabE5lz8WbP+9FE4uplRNMWO2gxErs0rw
eYwZD5ipeM3cjB0KjdnlngmNb1lwm4k9H8w3pW6uCR/ONefKvpX4dKcMytXp
6NnDgiWirlrlWPDarjL0j7Ci9aYyWH6swMEjVaJvV2JiNyMWpJryymcTykKV
fHCmCMarZRydMYBjxaw17JQNKGX0yTRjwzUm7LQtH9cSy8Xs24WoRaXobVOB
eQlFOPrdmIafTFnvacqi6jK8cDNin3hLGnrYMmDafpi0NWUPlmNGq75UNy5B
RmY2xtntwuZHw3ivRSGmbCjF5SFW/DG6AkMb9KP+r3xEXiqBRbwp3+oq8HHC
bsgsTdlWO4zD1+Xh9pH+tAkuR0P7IsRLzdnbuRymftZcO8yc80WMvhwuQsXy
kWx3sRL3pBW4Jq3ElT3pmPz4f387Zka/0BIUBjkyfNYunHxkyT8xFsyLLcV/
H8tQtrMAGect+SC7FEsamHL8NHPmh5tRMqoMS+eXY5tPPnaOMuXgEcIVP2Zh
ynVwXCNxT50OQetWDKOZJYCb4PhH5rwcVgIbFzsaTDNlyCsLzpHsQQWPoLRp
NkpO+6J++xEMEi6woHQ/bt40ZdpOU0oOmtLdIB73jsg5e0A8GrSwZqez+Tj9
bTeeeu6CXS9LOgSVoeeyKrTxikK35XnoXJqLJ91KoGluzm36LFTlFeH8wRK0
Tha5bKhkyI9MfOywG7vdduGOcMrV/mWwiTVlA6/9aGhShOwaU367bcWJ2mr0
nrYX59aasPKKGVunCs+4WY6RbwRH3yT3X6/ABbE3BefNuPSfcsx/ZsSAkYcR
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
CP0+7se1v/xRd34DdpSGYWm5A9fcseeTPWFwVwWj5ywtE9trGGrkytDcCCSP
0nLgf07sfzIAJrd3w3u4jpvcHXhukTOfNU/Gs1tByLkVho4B9lxdEYRpjdVs
NVaM26NdaNbIns6eoWgREY+Qrg6cc0TLfevcaXVJzckbHNm7YRzaS705y8OV
NQ/U7PD5P8bMcWP+bkeusHRgG00dmi2LEvzrwhcvI1E30JnXrruwcn8Ixhg6
0aiTO2dqHqO1iTOb/QrC64n2nLTCldsy0vDTIxITnYLx2MaJb3IEnyaGoWh0
EKpjAnD9fAKCejpzxK/dSHbahoBvOQiarmBQUyV7BCpYeTwGe3878X67CbwX
HIlA5VSyYhf2d3CkrHUknlaP5e85TnxmHoYn3TdiyZkA3EiJxU+tM13XyBlq
5sQoE0dWfwvG8wXubKYxx6Y3Yp5yXFjloWTKGFcOEZ2l+wBn/nELgWN0ILS3
1qP+5BDIxLr8CNfxh1Ls5csIxHYOgcGzCOxfEIH3q0Pwt4majULIQ/1U0Dd3
YM8VwiPoxpNJm/E2shvDa5y5U+h6075u+G7gxHXznFiwKgo97NT8utiH96J6
osmU9Uz/G4pzp3cjvE7HdkInE67vhlu+lit+DeKcS7bc/M2J62dug9W5SKT7
6djqTwje2SzF1ifRuHkwHNsabEW/DVtwub4jXe4FY2HTYNQM0+O8zxEItEpE
RKEjR7UuhORVGD5GiIzL0FBPzEP+kG24mBmEtUYJ2HjBjfM/9eDOESt4eFQU
Rv6MhfuVHailI8s363hp2G7c2ZYGl546PhvmwtkRIehX8QETtjvQcVAd6i1z
ZpVM9NmuoVBt3IBHbbcj+78RzHgbhLJZ4cip6M4T46LwenYMmhgHo2GzRFQc
8qDypCMbyzbh4ZJwPP0ejHGvunPgXBd+au/Ini3cmHlfyykn/LG5vxNrPs0l
3jtxIZzYxX0LevpEY4nckf9Evxm9LxCFQU78vNiVK7Zo+fxvAppPqENVZzlr
7RxZ6eTKuyd1vGIbjolPapG63J7hHcq7Vf3aijVptjw5yZZ9GrRikkslRrff
C99TRrz/MAtvMgW7l1vQVCllL79szHcux7tWBZh9VMWuay25UWHNz/c/wz9B
RtProg98sKLFsDIctMrGofkSfjbMw4zEKqTp2zLMXfjylXycT7Bk/wOCHQ9W
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
PLlBwk77I7A+Mhlt3aJRsk3J42d9caahlktO6LhzcTaconMxvreCrU5mYkKh
luF9Fdzlnw7/iN/48V82jnmno7eF0KPr6bCITYXFAhVv/zRltUkqtol5cOio
5tn0HOTGyajt1YHXp2s45EkyVvVOxIWTMt6+ZsMDi6RU3g3DwMMqvmgXgHpV
Cnr1qof79SFcfkrKdTkFML+n4NXkOrR8l4uTy/vzy9+G3Do/DVkhltxumQGr
NXnYMawjPy4xo3d3JbftltGgYRLqWY2+R/4g/1Ue3H6KPoVIiC1aej9Usc3c
LTgUJnTnUE+emaxmcq8MHGuuoaaPBeuyZGz82oIBhmpe7yRny6pMzBMzcbhT
PtpNCsTxQ+44N0PBeSsVDL+s5JCGYVhWlYAz19JR9q+UKSPTMOJhBvR9EpHY
Ts5Qa3Mm7MzFy9L9CG0xh4pzGZh3JwMeV+Rs0lVBx8Vu6FcoZccnBdhuKGVU
SAaUEfoMHSTl03eZiD2g4M2j4bAWfagNseWcnjFoMD8Wr0s11H+iom6kmt3H
KbmylZwB/0k5+YgeDU5XYebfDPgdFPU4pOLrmGQ0DYpH4U85x4+xoIE8Fb4n
JHz8JAvfw9LRYFoW2vhkY0oXNY8czsW3iaU4WlCOb+3TcOK1Pv2DUxE/PxnO
3lKGhGrY+J2SjguDMEY8f/1HP2y9a8WsokI0109FemgdGrwpwAK1irX3fFH3
IR8tL5Qi19CBqx7JuNjZmvKbcej4OAOfbuuY2yoT9xun4+jSeLQ1SsVpOzXX
6NLhtb0cVyu/QGWp5PcuGm4qlnD1HCkz51ix1SUNWxUU4+siDZu/k7DbHBnP
ephxlFUw9trloGWRio8kch5YLRh3gYadtivZp4GMze8U4umGFiwfnYgJk9Tc
kqag/Iecj9/JWTA/Fe9fK/llhYy65jL2ctPQ75KMk4K1TBtpRWOx7y2uJ6ND
YirCcpV0n65gxeF0fPmiYNNaNV9mKmijSETVl3rol6XhSLSCwVda8HhwJvrE
ynnQMxsOT9T8MS0RdlZpOPu3ES8eVXJYuR4Pib9bNyAG6jkZMPuhZMwZOa+E
puFAV0sWeUThbKSSN2oUvDtUzMd7Ob0LJdT30PLkAxs6XU5HWmE0MsQcdAxw
5PlhejTtm44ezgl4vT8Ns5zisL+ZiqpUKyraFcFrWgbmbsyB6z9mTO2XgE/L
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
ccVcwQojDfxbwYt7h6vItBg0PR6K0H16dvmmZbtfybi735dRBQGomxGFA2O1
XPJNzT/Xk9DmkIE/7XoW/XTg1/IOfCm4/ZBTOT7al4CemfHo/iAeXyYlovcY
wQZdEjF3tGDEEDUDNsZjSmYqGrZT8vt5NdeI9QadiMbL3mpqlyYjNvooVj3f
japaOe06PesKFvknSM6fK43Y7afnGSpZ/UE0/OYlI0oehW5nPJi3NRFVivX8
2Kc9e8dGIGV/Apav8uTSTfEYtTsG3q3K85/aCjbyicW7Gnq+cddzzdRUWHsq
WbGPgSf26/nhXzkb5+lZe4QV046oOHyN4LBbPrwvcuVESCQcXWNRsdZf/P7o
wbn9HRjzUbD9UVd+EExFu5wabRqqWLIwJN2b80oT0WO44JBMV37pLqW9tpwO
w1TcLOZMhDQRTXp58MVUwcPDFZx53p1Rj+U0ZqRhnm86ohUa3hT3uOS5Hfml
Mp4craKfmFUOYmZ3DTDD/4aMqmVSrmwlYYWzKVikU3CGLg3+bsk4tkTFRjE2
9H4hZ+BuDfuImX10YyYazk6CpbWCjoMduOWznDVEDq1Pk7JfvJS7nNKwKlnk
U7qS/R8dQz0vFZ2qatk9OQXXCo+ij1MmnMMtaJ2Ug85LZFyab0ZTRxlD9wsf
+iFjyUkZJWfkvCvc8O18kQciW2c2zsKBvBD8XmbEnZXCfd5KqXuTiZ6bU3Dx
8j6Yr6nYqbKCLQcL9ptogdsJOY83c+O1Y6no1dGCFp4KXqmh4/r6JVCVs+CJ
axo+DVXyq0LJDufTsaKCnOXPWvG9tReHDRJsfyMdstkJGJAgeqN6LozRGkae
MeFFJRuMW614+SAb0VI7irocw4CrJtQ4J+cxkct7om1YJrxo1OF0eIle3nJP
zuDGVjSZpKFbuhKTz0n5elgaduRYMCpCzYrNC1HqZ8WshQr+99mV3xcq6bdV
uMJaDR0LlAwITEMvo5I3MjTM2poGhx8Ktt2m4Y2nUs7UiCxPF664Rcbdgyy4
cUnOvNQI7G4uYVhPC2QqF44Qa7m/ORmp9TV8NUvJ564qnloYhsaugtunCf49
K6dsfRA2jLSjcTlfPpgv46XNcl66lYpdL6QcsVbFJSEK2h5J+PpwNjyK5dza
MwtvCgVjjrHi0j4pm53QcHl1Ga83zUKd4kxkHRSsL9Ww6VQFE+VKjnii44Lk
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
npqF2ackPClq6uilFAy1Kfi8lYKj+klZeLgQHkWVeMfLipJDKtYaKaWnYM8R
xSJnTqu5JcSLWRFS/rdUyz4n7fj3K5hWyZse26ow97ueVv9vKL2Yg3KCPV+f
9KRP93TsWGNDxXGO3J6tpFX085ZPEtYVPTMvOQO9eqfgSL7gwToV2ep7KYq+
SRnbWssT2d/RYqSC25dkwLO+iquXG/GyJB7fK0vZt09lbtmXi15NFbQ4tWJV
awQ2f8rACuEDV+qlY9paOTNOl2Gp4BSHioLPtoWhm9SKV9+lzE21490UBa8a
C+D2RU7PATnweC2y2lPKKfEKxg/W8fYuOSfdVFHa2JPShDxsKzBjXr2GXH/e
gs6zVeydloX9n+QsJ+ba9ImCzRWCOcJFdgRdxLSqKla9rqC0ajlmK+UsCczB
b5PwojQn3tUpWc/XgR3bmNBtpBXGwQred9ex6yE3/nS1IifZkQ8a5uDVcCv2
n1Zw7Copy28zo1l0AlKPG1Flp5yHM+S06bNxZoOSq+Yq+OCTjI73j2PlFuGY
W+yoIBjEKOr2nxHCHwoyIWulpfFwHt4rZFy/xJWtSt3Zz9sKS8UE9NIdAvJd
2KxAwt4905Fpb8z3i2SUGeTcfSsDpmQtM+NN+Lw9DfNj3Vg7UC68RMoHRy7B
vbNYi6OEHV6dQXEjLR8qGlO9PgVJF23o30PGt2sV7ONqx/vVGh7u2ZnxXdIx
bKeURc1F/+YILhHXay6c8VxOOJYKTh96NxMhlTpxzM1sVLyai46OKrZlIlq8
lLFqk3YcP96OTi3teNIoCq+mqdlyfA6GnE/D397n8V/1HJwKzILEIKO/Qc9D
zToTvyVcF6Zg9R02vGyuZIlg9n03rEgur2Bovi/rCbbYMycRru4yzu8v4X9l
MnYV3Of4VM0d3ikI/ZiMaYtsSE5yo+6ZOx/1duGDJBn/xOTiqN2KB0kJWN1P
uEuJCf5xWfjPIOX6Zvlo8UvByK5yDtxgQ15CDi4OP4Lrp004U1XOLueT0HC0
hPnfJNwfKWFtXzGXnXxYMSsX+Y5Stn8szvRAFq7eScOVuWm48Dcdh6rUYMtf
Kib4ia+JbEltIOWQlnIOauTBTlkaTquv5JDN2fBenIyepSoOPZWOzlZR/9uy
sfVMJo6FN+OrLA8u7+PGw3OTsOyDGSOGG6g8pWDN31KueyxjqpOSV5XZyB+m
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
1hVOuFhLyc44nN2UhOleVgz8HYv7EguSTlswN8QI530lx48w4lzbeJxzynlh
k5z9BV8vaZ8EQ6iGzXs3Yq+tSdjjb0Lllxr2EZ4R9iOA7wSP9ZyShkGV05Er
1jeiSioyxmn46sZ+3OvowisDlbTBhQ97ZmPMHC0beQTw9dljaFQ+Ceu3uvBL
jg8v3NyH2uetmHE/DSNaivNpkoIygquuJgvOrSxlYayazgwjQhw7kdLcjKcD
/jynV7BV7fq0bbXje1sjPlY8ivsXLAgP1vKXfyoue2qpFvdcurWapcxa/tiV
hpJUDTuf1PB6TDo+2YUnLojHq/dd+CTAgivtBecFiaxv6MBRWNFiiJZVbu9E
Z8EFfq/0PDNQzVmdgvnptJIbon04bqWOXQb70dtoQ9MIf1480YwHNen4GZOP
gOLG3DpLzW5NrLiW7c8NYcmYflHJ9R834dYaLS1iTg+rloo3tlFoWdsIf/G7
zwjG2TrNn5LPwWwjOMI/PB2RVycgQeSd4aaBJU0F/57YgaU1bOjdzZ+1t2r4
5Fo6Jp2XsfyjdOwRLDNvoxnL/S34kiRc8XYiohuZ4L/kBIJHLkS9D2kotjkx
7rQJthlGeLZswoCnfqywzJ9B48DMY1pKK2g5pbySq1bFYdy3EsTdWIEDrkmQ
XUjGf3eKERoWjNdnFfxQRcfrgqVeVj2J4edTMGSGFcoMNcdvs6Jv/XR0Mqk5
ZpuaOqQhtGkAw+rEY3+jZGz+nIzbFg1brNmI7S3jkSm+3iBe1EuIE5fX5qCv
4FhZjhWV//BVJx1j7jahf810dP8oXPCWmA17nCKvO/BTGQuMo2xYUjsNOi8z
qjTQ8rY9Bn5HtByamow2Y1LxIceGGeKMM5Tp6D/PjK51DTSeMuOjVsvDsX5M
02dgUxsphzfy5W5RrxODc7HeqeYQg4aPDRacEnP62uxEZO9JQaNVviwsVvBx
Bz31KzdjlVjPsDnj0NY3AZunZcDrlqjzy2bcmjSQpTLFzBuvZXGvJDBHzd6b
LDDkHoQ9UUXXXjZktdGxXvkMDLJp+OWQFUO6REJRGA/fhxpeEBk85ngq7oqs
//eeBQuPyHk5eQ7Wy9XUP7Kg82IztvZPwsICBz49N3D4/BjsEtxT5oqcbqZ0
dEiMRYXxDvzskID583fi0mtROxkWXIrcig93jfh6LBq/tqh5V2Siy1lfTj6V
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
8FjLSgX/DyNktvs=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {65536}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {5376}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {65536}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/5" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{256, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{256, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/8" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 256, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 11}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 256, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/12" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 128}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/13" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 64}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>|>,
                     "Loss/Harden" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_951cb4ef_b9b8_4c03_b2dc_8300212e3af6", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
YvobnhhBW2Yonrz3Qp5/A0+HIEVav1gZFTryRmrz0ht0TIamFTuy+xU2bKe5
2b5liuF/3UW5vmx9+SoZRMLtxJrgdrqx0Ph/0KedtwV5zlTZLdCiGSg/HQDf
nDZBabF7Nigg7CbQEf8g/XEYlt1KN95EhKyPiZ07hyFNzfxbDArRBCvEur5u
3o153NWQkcXJFrJbefaVcmmepiXKz6vk19ONdxL8/iS6pDSS20LCA1TJPaN0
+cG532jpfLfupYNT0gsC4M2H90ptr12Dr85RnHOYjKtR8uGfLuL8ggXZ+t3E
yPmJ75Qd5U5K6csMTHBw1yrTv0Yv2kT1hbCsEOlAUvinKFF+CNKlOPq/dwXA
AaSpN4r2FCriwPd8VGJUv9XIVxlw75xSQD5tBwnKPHyJcKebd8wJL+2W8b40
JXy9T70coXsK1qondhHo7k6UKdG9c/lfKaGM56CPj36qfl6hwkHGo69hf+PO
vXdYtndpvV2TYl4X70tjgrDDRi9BApD13Ep/JuriTZzEH7Mn5BL9j3KS4Uqa
O4SIfXdrhpYq4kRyqRaeC95aCp54KhQcoUnjX9tQEFAX4J4c0jF7fN+pbRi8
O+EfYbabH9CaJrebh8eEcScSxpXZmPnk6OpNsEvqVm2/mPm9y+HW0Dyl2bMP
ZzXYK9pcohuVOPVrqLeBrtQmhYED/Y9yCbe3qv6jPywcMiNxe60H77RX6Z0q
a/v8O2ABEirGNTG/qTdeUXsdEk3TMc76RW6633FYwCU238IXcGvQDlpq754u
Hs0ClToLYHEzG28bgITkeyg0L5DxtuoqBe7krwDnupXYOUy4KnMeqb0JGj4H
7+HUzTMwxNCbnYm9dooBWIWHjMnTy+TSytnA1YFDcnA17mqDHgbX6YcvyTtv
4GhtMR6D9Z+wQn2HO1vZ9fS6y7ib6IU2pcOAtVI/vrKXwarRDF/MgS/PNMdL
4MLXr7UlNoU6P4x0QkorVk7cu3ukDdzafRN8xRQn433YKC+PoykXPzcPDyQt
rXUJcvyC2MZIr8M3PBGG0gn4Nt78Q3JpI57wOELEfYua5oF5v8d39m6A5sTh
L51hnfaEyIHABb+gXyp9HPTUna+IID9WDC8c+Nflu9p/X6k7TU52ZX6lT6rD
79YVDl8QZ7FSJi7C+q9Ss98MRsjL9nmnkQimdzqN1N5KP7FbHY2H/DtgSb9c
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
7wBMGA9gApdvc4MzzEL+sm5hAVgsA8AiUmE0J1cAM13y7NiZdADr8UCjTf/1
L+vq7zaHGf49DsAGENjJb6/Mpqw1azh25hKABawBsFuzxtVbt0yA0fo0Aew/
U4PX0Z7DaCk7AKz45pSwR74bn94IrpsLuPUZAJg7E8Cm7YfRJrkBCYcArLUK
RsvYyqAT3zVAd4jPUNAd4kQWukOsQ9whZosnWUjJM1nKC8RCw6Pey4+6jWMH
UsXYJiqXkYz+J1WUckhEkfGPgo9/UQHdL7b+fL/YD7X9Jhj/3+4XK6/rKh//
83vA/2sjEfeEbfhW/P9yTxhdAEbfbWAXZ+HXfrW2CzRT6XTrIF90iO4cRgvO
cFMfgysSa0ZbqE7QuXJ8SV3FEtvSrEBd/ApuX7k49Fk2ib2TWs1zK1m7wNpi
w5+80pernfTjy7BiAYvpKtEiH3BOCaS48hkBP6a4Cqdwzi/ctt+IvOR4eMbZ
gFtmZhTbzGDBtwFNAQH7sMypXNo8be03GjYtGZLDpZSSIub8zeo3Mw+vYx0M
zHpZR93EuRigsZi/P5yTasenoCtL9uorSzsp6msrE8jOmcEWh4m7P9mUQxMO
r03+2YhG1X4uTsbyuNrqyzRvMNXFn2/3BehsMTw2LfM1JmBF0bQnPgcgLuUw
dn7JTJa7vjOW8qVfijM3JZxT1KLdjobBdNTD9KuHebhPoL/F8JQFfm8p8J2g
VGP7say3+88wB1u0LdA1G3RJC7/tRNJX33byZ/gEHhOeJZ/C70e9E3Rq2HGn
CraAJ/1aIJ7yirwcaDw7DtFooaGicbsxeU1m8MUrOI2bf6csNW4KOCY+O1sw
h6/Bsefmo/tQqavU96GqzMT71u4PHY/f47F0rq4I1N4y7ko4x2K1hQa607RG
eacpy3D/fya4mlE6VlRPKaW5t9CoghgW15auukkj3lVsSXLA71W8kPRrb+d7
ZVfqNhQL7p2hh4t16gSL+HmSrwJqjPU1zU/zn6RYVOjupExIW7g+q5rNoZZr
3ESnsjn4mdk3ZPX9CR2hY4W1WMKhlmrRZlnUaF3K1iyeehcr1SLNyCy2TDE8
QdzX1KXFZ3VRZlboSkmrSdFCx6JsUpQGVXXMd2EWZV6F9UGhIXHydnMA/ceF
2cWWQsPY0iKp21x0+vKg+oZrspP6aOsUdm6pJWXSRZgD6r/TKNN186u13PZp
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
EX7j/wD8BtoP
                    "]]|>, "orcInstance" -> 103273936, "orcModuleId" -> 
                    100010224, "targetMachineId" -> 68627520|>, 
                    140585460954944, 140585460954800, 140585460954880, 
                    140585460948992, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_b508ab89_e6ef_43c0_8679_2d34b6de152a", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
FBb+HbZWwBY=
                    "]]|>, "orcInstance" -> 100380944, "orcModuleId" -> 
                    61934080, "targetMachineId" -> 104191520|>, 
                    140585460941344, 140585460940944, 140585460941024, 
                    140585460940800, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {4, 64},
                     "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "4e278e821357957f", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 436480, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 16, 16, 29, 1.178894`6.82404974624298}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "low", 3, 2, "medium", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "very high", "low", 3, 4, "medium", "low"}, {
          "low", "high", 2, 2, "small", "low"}, {
          "low", "high", 3, 2, "small", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "high", 4, 4, "large", "low"}, {
          "very high", "high", 3, 2, "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "very high", "low", 3, 2, "medium", "low"}, {
          "high", "high", 3, 2, "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "medium", "very high", 3, 4, "small", "low"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {
          "high", "medium", 2, 4, "large", "high"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "low", 3, 4, "medium", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "low", 2, 4, "small", "high"}, {
          "very high", "high", 2, 2, "medium", "high"}, {
          "high", "medium", 3, 4, "small", "high"}, {
          "medium", "high", 4, 4, "medium", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "medium", 3, 4, "large", "medium"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "high", 2, 4, "small", "low"}, {
          "medium", "very high", 3, 4, "small", "medium"}, {
          "medium", "very high", 3, 2, "large", "medium"}, {
          "medium", "high", 3, 2, "medium", "medium"}, {
          "low", "very high", 4, 2, "large", "high"}, {
          "medium", "medium", 2, 2, "small", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "very high", 2, 4, "medium", "low"}, {
          "medium", "very high", 2, 4, "small", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "low", "high", 2, 4, "large", "high"}, {
          "high", "low", 2, 4, "medium", "medium"}, {
          "high", "very high", 3, 2, "small", "medium"}, {
          "low", "medium", 4, 4, "small", "low"}, {
          "low", "medium", 2, 2, "small", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 4, "medium", "medium"}, {
          "very high", "low", 2, 2, "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "very high", 3, 2, "medium", "high"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "high", 3, 2, "large", "medium"}, {
          "low", "very high", 2, 4, "large", "low"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "medium", 3, 2, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "high", 4, 4, "small", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "low", 2, 2, "medium", "medium"}, {
          "medium", "high", 4, 4, "large", "high"}, {
          "very high", "low", 2, 4, "medium", "high"}, {
          "medium", "low", 4, 2, "large", "high"}, {
          "low", "low", 3, 4, "large", "medium"}, {
          "medium", "very high", 4, 4, "small", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "high", 4, 2, "medium", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "medium", 3, 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 3, 2, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "very high", "very high", 3, 4, "medium", "high"}, {
          "low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "high", 4, 2, "medium", "medium"}, {
          "high", "high", 2, 2, "large", "high"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 4, "medium", "high"}, {
          "low", "very high", 3, 4, "large", "low"}, {
          "medium", "low", 3, 4, "medium", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "very high", "low", 4, 4, "large", "low"}, {
          "very high", "very high", 2, 2, "small", "medium"}, {
          "low", "medium", 3, 2, "small", "low"}, {
          "low", "medium", 2, 2, "medium", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "low", 4, 2, "small", "low"}, {
          "high", "very high", 4, 2, "small", "low"}, {
          "very high", "medium", 3, 2, "medium", "medium"}, {
          "very high", "low", 2, 2, "small", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "medium", 3, 4, "large", "high"}, {
          "high", "low", 2, 2, "large", "low"}, {
          "high", "very high", 3, 2, "large", "high"}, {
          "high", "high", 2, 2, "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "high", 4, 2, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "low", "low", 4, 4, "small", "high"}, {
          "very high", "low", 4, 2, "large", "high"}, {
          "medium", "high", 4, 2, "large", "medium"}, {"high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 3, 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "low", 3, 4, "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 2, "medium", "low"}, {
          "very high", "medium", 4, 2, "large", "high"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "high", 4, 4, "medium", "low"}, {
          "medium", "low", 4, 2, "small", "low"}, {"very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "very high", 3, 4, "large", "medium"}, {
          "medium", "high", 3, 4, "small", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "medium", 4, 2, "medium", "medium"}, {
          "high", "high", 2, 2, "medium", "low"}, {
          "medium", "low", 2, 4, "medium", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "high", "high", 4, 2, "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "very high", 3, 4, "medium", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "high", 3, 4, "medium", "high"}, {
          "high", "low", 4, 4, "medium", "low"}, {"high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 2, 4, "large", "high"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 2, "small", "high"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 4, 4, "small", "low"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "high", 3, 2, "medium", "medium"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "high", 2, 2, "small", "high"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 2, 4, "small", "low"}, {
          "medium", "high", 2, 4, "small", "high"}, {
          "medium", "high", 4, 4, "medium", "medium"}, {
          "very high", "medium", 3, 2, "small", "medium"}, {
          "low", "high", 2, 2, "small", "medium"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "low", 2, 2, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "very high", 4, 2, "large", "low"}, {
          "medium", "medium", 4, 2, "large", "high"}, {
          "very high", "high", 4, 4, "medium", "medium"}, {
          "very high", "medium", 4, 4, "medium", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 3, 4, "small", "high"}, {
          "very high", "low", 3, 2, "small", "high"}, {
          "very high", "medium", 4, 2, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 4, 2, "medium", "medium"}, {
          "medium", "medium", 2, 2, "medium", "low"}, {
          "medium", "low", 4, 2, "medium", "medium"}, {
          "high", "high", 4, 4, "large", "medium"}, {"high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 4, 2, "large", "high"}, {
          "very high", "medium", 4, 4, "small", "medium"}, {
          "low", "medium", 4, 2, "small", "medium"}, {
          "medium", "high", 2, 2, "medium", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "low", "low", 2, 2, "large", "medium"}, {"medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "low", 3, 2, "medium", "medium"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "medium", 2, 2, "large", "medium"}, {
          "medium", "high", 3, 2, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "medium", "medium", 3, 4, "small", "high"}, {
          "low", "medium", 4, 2, "medium", "medium"}, {
          "low", "low", 3, 2, "large", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "very high", 2, 4, "large", "medium"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "high", 2, 4, "large", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "medium", 4, 4, "large", "high"}, {
          "medium", "very high", 3, 4, "medium", "medium"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "high", 4, 4, "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 2, "medium", "low"}, {
          "low", "high", 4, 2, "small", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "low", "low", 2, 4, "medium", "medium"}, {
          "low", "high", 4, 4, "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 3, 4, "medium", "medium"}, {
          "high", "high", 4, 4, "small", "high"}, {
          "high", "high", 3, 4, "medium", "medium"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {
          "very high", "medium", 2, 4, "medium", "high"}, {
          "very high", "very high", 4, 2, "small", "medium"}, {
          "very high", "high", 2, 2, "medium", "medium"}, {
          "very high", "high", 2, 2, "large", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "low", 3, 2, "small", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 2, 4, "large", "medium"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 3, 4, "small", "low"}, {
          "high", "very high", 4, 2, "medium", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "very high", 3, 2, "medium", "high"}, {
          "high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 4, 2, "small", "low"}, {
          "high", "high", 4, 2, "small", "low"}, {
          "high", "medium", 2, 4, "medium", "high"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 3, 4, "large", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "low", 3, 4, "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "very high", "high", 3, 2, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "low", 4, 2, "small", "low"}, {
          "very high", "very high", 3, 2, "large", "medium"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "high", 3, 2, "small", "high"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 2, 2, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "low", 4, 2, "medium", "high"}, {
          "high", "very high", 2, 2, "small", "medium"}, {
          "high", "high", 3, 4, "large", "high"}, {
          "low", "low", 2, 2, "small", "high"}, {
          "high", "low", 3, 4, "small", "medium"}, {
          "very high", "low", 4, 4, "small", "low"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "high", 4, 4, "small", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 4, 4, "medium", "high"}, {
          "medium", "medium", 4, 4, "medium", "low"}, {
          "high", "low", 2, 2, "small", "medium"}, {"medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 4, "medium", "medium"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "high", 3, 2, "large", "high"}, {
          "high", "high", 2, 4, "small", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "medium", "high", 4, 4, "large", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "low", 2, 4, "medium", "medium"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 4, 2, "large", "high"}, {
          "medium", "medium", 3, 4, "large", "medium"}, {
          "very high", "very high", 3, 2, "small", "medium"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "very high", 4, 2, "medium", "high"}, {
          "low", "very high", 4, 4, "medium", "low"}, {
          "low", "medium", 3, 4, "medium", "low"}, {
          "very high", "high", 3, 4, "large", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "very high", "very high", 2, 4, "large", "high"}, {
          "medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "low", 2, 2, "large", "medium"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "low", "medium", 4, 2, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "medium", 4, 2, "medium", "low"}, {
          "high", "low", 2, 4, "small", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "low", 4, 4, "small", "high"}, {
          "high", "high", 4, 2, "small", "medium"}, {
          "high", "very high", 3, 2, "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}}, 
        "Output" -> {
         "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "acceptable", 
          "acceptable", "very good", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", "good", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "very good", 
          "acceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", "good",
           "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable"}|>, 
      "Predictions" -> {
       "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", "good", 
        "unacceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", "good", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "acceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "acceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "good", "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable"}, "LogProbabilities" -> CompressedData["
1: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
X02kY16n8P8Bd2jQew==
       "], 
      "CountMatrix" -> {{223, 13, 3, 1, 0}, {19, 54, 1, 4, 0}, {0, 2, 6, 3, 
       0}, {2, 3, 2, 10, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwl0tlPDwAAAOBfpUilkGrLTUqpllUrKUVITKJ0zBnLXTPMhjk3DwobVpsx
nrBhM5uNmXmINowYS6wcD5hZ5ti8Ob7Nw/cffOMamhc3BQUCgbcEE8IAQglj
IIMIJ4JIohhCNDEMZRjDiWUEcSSQyCgmMJEkkkkhlTSmkE4GmWSRTQ655JHP
NAqYTiFFFFNCKXMpo5wFVFBJFdXUUEsd9SxjOStYySpW08Aa1tLIOtazgY1s
YjNbaKKZrWxjOzvYyS52s4e97GM/BzjIIQ5zhBZaOcoxjnOCk5yijXZOc4az
nOM8F7jIJS5zhatc4zo3uMktbnOHu3Rwj/t08oCHPOIxT+jiKc94zgu6eUkP
r3hNL328Cfy/9I73fOAjn/jMF/r5yje+84Of/OI3f/hLkJjBhBBKGOEMJoJI
oogmhljiSSCRkYxmDGMZTxKTSGYyaWSQSRZTySaXPPIpoJAZFFPCTGZRymzm
UMY8ypnPQipYRCVLqKKapdRQRz3/ADn/XE8=
         "], {25, 41, 48, 51, 69, 86, 155, 175, 228, 251, 260, 274, 298}, {
         190, 239, 292}, {332}, {}}, {{33, 125, 137, 144, 145, 162, 182, 192, 
         194, 199, 204, 245, 270, 273, 291, 296, 304, 309, 311}, {1, 10, 23, 
         26, 30, 31, 32, 55, 66, 67, 70, 73, 77, 78, 83, 101, 112, 118, 120, 
         133, 135, 158, 161, 164, 169, 170, 174, 177, 180, 183, 186, 193, 219,
          226, 227, 232, 234, 236, 244, 248, 249, 250, 252, 256, 263, 277, 
         278, 281, 300, 301, 307, 318, 327, 344}, {153}, {132, 149, 247, 
         275}, {}}, {{}, {213, 285}, {50, 114, 163, 210, 289, 314}, {34, 63, 
         179}, {}}, {{28, 91}, {188, 333, 338}, {165, 316}, {38, 75, 80, 82, 
         121, 136, 152, 200, 264, 282}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "acceptable", "very good", "good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0012559450867052023`, "SingleEvaluationTime" -> 
      0.006649, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "5a8e6879-4626-476e-9108-b8a4879371e4"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"84.7", "1.9"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    84.6820809248554979831`3., 1.9390370108970087504`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"69.4", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.3641618497109817554`3., 2.4818350129436712592`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.6098376005208353545`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0439148207683979219`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.5220079589840395107`3.", "\", \"", 
                    "0.6976672420576311984`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.5220079589840395107`3., ", ", 0.6976672420576311984`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.4945625859142877001`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0719485898541922519`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.3506654062059031962`3.", "\", \"", 
                    "0.6384597656226722595`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.3506654062059031962`3., ", ", 0.6384597656226722595`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"6.54`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"990.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                   FractionBox["\"Examples\"", "\"Seconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQ21ZPYHuC4Tv7N7L8jVrf3tgHJfdVeIS+sD+8+Ej/
oR9v7TNWFV22UHhjz3ST7eJpjWf2uNRHv5p9Vd/1rX3mp3bXlZUv7Ze8jtCd
1X7PngEMPmDQuMwJ4JAxkGh9a8+c8+WaWvYr+6DLbIEftj/E6R73Jl0D5tVv
7BPz/CvL7z2zn/PWbsEuviv2BVd9GJcwv7GPzkmIb2d6Yt+hfyX05vyD9jt2
RN/7l/nOvnDiaj2ZM2/tl7wVVTja+MreU7IyQ+XAW/snZtdU3b1e22/yq9f0
//MY7t6HVSLr3B/egvIZGGTvVPOv/fvG/tINn3/f3F/Yz+u6w9Iz5yZOd+Ky
FwBerbOB
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["223", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "223", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9139344262295082`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9291666666666667`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9214876033057852`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{223, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9139344262295082}], 
                    Row[{"Recall = ", 0.9291666666666667}], 
                    Row[{"FScore = ", 0.9214876033057852}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["19", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "19", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.0778688524590164`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.24358974358974358`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{19, " examples of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.0778688524590164}], 
                    Row[{"Row fraction = ", 0.24358974358974358`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.00819672131147541`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.11764705882352941`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.00819672131147541}], 
                    Row[{"Row fraction = ", 0.11764705882352941`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.18055555555555555`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.05416666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.18055555555555555`}], 
                    Row[{"Row fraction = ", 0.05416666666666667}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["54", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "54", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.75`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6923076923076923`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.72`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{54, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.75}], 
                    Row[{"Recall = ", 0.6923076923076923}], 
                    Row[{"FScore = ", 0.72}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.027777777777777776`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.18181818181818182`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "very good", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.027777777777777776`}], 
                    Row[{"Row fraction = ", 0.18181818181818182`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.041666666666666664`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.17647058823529413`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.041666666666666664`}], 
                    Row[{"Row fraction = ", 0.17647058823529413`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.25`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.0125`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.25}], 
                    Row[{"Row fraction = ", 0.0125}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.08333333333333333`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.01282051282051282`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.08333333333333333}], 
                    Row[{"Row fraction = ", 0.01282051282051282}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["6", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "6", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5454545454545454`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5217391304347826`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{6, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.5}], 
                    Row[{"Recall = ", 0.5454545454545454}], 
                    Row[{"FScore = ", 0.5217391304347826}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.16666666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.11764705882352941`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.16666666666666666`}], 
                    Row[{"Row fraction = ", 0.11764705882352941`}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.05555555555555555`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.004166666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.05555555555555555}], 
                    Row[{"Row fraction = ", 0.004166666666666667}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["4", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "4", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.2222222222222222`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.05128205128205128`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{4, " examples of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.2222222222222222}], 
                    Row[{"Row fraction = ", 0.05128205128205128}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["3", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "3", "\" examples of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.16666666666666666`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{
                    "\"Row fraction = \"", "0.2727272727272727`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{3, " examples of ", "very good", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.16666666666666666`}], 
                    Row[{"Row fraction = ", 0.2727272727272727}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["10", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.5555555555555556`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5882352941176471`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.5714285714285715`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{10, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.5555555555555556}], 
                    Row[{"Recall = ", 0.5882352941176471}], 
                    Row[{"FScore = ", 0.5714285714285715}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "240", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9291666666666667`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{240, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9291666666666667}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "78", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.6923076923076923`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{78, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.6923076923076923}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5454545454545454`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{11, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.5454545454545454}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "17", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.5882352941176471`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{17, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.5882352941176471}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "244", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9139344262295082`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{244, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 0.9139344262295082}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "72", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.75`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{72, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.75}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "0.5`"}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.5}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "18", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.5555555555555556`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{18, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.5555555555555556}]}], 
                    "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["240", TraditionalForm]}, {2.5, 
                    FormBox["78", TraditionalForm]}, {1.5, 
                    FormBox["11", TraditionalForm]}, {0.5, 
                    FormBox["17", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["244", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["72", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["12", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["18", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "acceptable" -> 0.25, "very good" -> 0.25,
              "good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"very high", "low", "high", "medium"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "very high", "low", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {2, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4, 3}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {2, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 4}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"small", "medium", "large"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"high", "medium", "low"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "acceptable", "very good", "good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJyllF2qXVUQhK8+hEzAATgFMwDJFOIIrqBPASE+hLw5dBMkcFjU91Wt44J7
996ru6ur+uf8/PtfH/788eXl5e+3X/99eP38/tOn1y+/vfn28cfrx3e/fPzh
6+vLT9/+/fPrf3/f38+79p1ivr8T3mOcYRhW8jN+lIt4kKYzB+VP5zGG/E+f
mxyEb9pTfSg/cbDaWL1JR8I/87Q+ktamrfW+1WupTcpHeLc7RL6Jk83V0lO7
T3novs3Zycd6aPUwzTezRbitpoZN2pqNsG534qxd6wX5LTVLsaetcbGnvadZ
SfYVL72nWiwzS9qXmU31sVlbZ+VW98nB8Jb6tJldZyvVKOFSfNux9Zm4NK7W
C7u3niZdVGu7e8RZdVsvaUesRoRPd/ZcdsHyEE7yoZhn5thwKdbwqYaUb9nd
9J6wbX4NJ81Pw6DnqsWexKlpWuffuJkPcbO4Ba/FL707fVsO6tNpNy0L5vJt
GDfnZk5SzMJlmYvT3jg0PS2m6Uv8DCflNm7Gw+rTfAzTZthiKHfr68JtqVvC
ofqctpuT4m3/TDe9/9+5s5iEb/nTWXUmDTdz0fBaL1vtLH/bj4RPeOdpOZNW
8n9Gn3E4ubTfEePb7G3+jBPZaYdO/zNm3eFVw6l7eSdsuiMNKXfLdca0vMn/
1u+8S/lXzW0OKNejzXg1XQ3PYiz3orPthukiretzrdfKd7W3O9Nqsaar1cFi
ml/Cbe9tno1n6yFpSPkXPW22Td+zfsQz1Wjhk2qQvhcuicPap3SWOScdhHFy
Mh6Wr+3Szb1poifdEXeyr5yWXizzvGDezMiZI+VOPuRn9V7yGs667wl/rZVx
StxJq2FYv0+b3S+/EcTZciUNhNHyrz1pd2t9ElebK+Pfam8clj1pM3LqIG3J
71Zzq8MN7jL76Sz1JpxbLqbb4i2HaWucbuaUcqdclKPNHc1pq43lW7kmXnS3
5k5+5x3Fp3uLTTluY+1ueV9qTHfpvj0Tj0curS7nt+0h8SSslV+bfZthm/Gb
faC6nlik8XbmW+wys1SfZReXmppusjdsqkmbm0VPq6vlTzbDoflJp/XzxDPO
68yuvSV+pq/ZEheKo+82X5TD/NYe2NwS7zOe4gjDNCy/DbQfpttmzmqY8p6Y
7beCdJp2ypHw6Nt0N54LdjqrBvMhHPJL/m03zxibmdZ3Og0z6TKMhU+Kb/NJ
O/fMzK378GxvDWfVYPmabtNAXCh309hqtvqd+AuPdVZIQ+Ky7OwyT8/s5GJP
/nSoX2anOhiXWx4pPuVafxeSP90t/V92sek1Da0XhJe0mMZW86XHC/9FGz3X
PV12gt5JY6vHsvePtjXutN3G3WhKWMv3M/G0G7bXS066u92f9L3slOW1O+Ns
/M0ncTtthEexVgfjl/Iux+ah/ZnWxr3NbeLYZpXizxyNp/UiaSY/si29Iz5J
yxlnNSSNlIe4tZ1cdtWwll6m+GRrOZu2lPfEX/i0mPMuxZCupRdWE9KQON3M
AeWg/KbLfJ+d56VfCSvxIoyU03iYvlbTZY9aP602pLXlWrgn7MR5mbu2U4mb
cU/nmR5ZrxIPm8uGlWJIx6rLaki+xo1+J+i0HTW7aVg1L7uQ8prvstOrv9V0
wUkYTV/bwTYTxMHerbbtt2LJf2KmnEutG9Zas2XXDffktOynYZ4YyW6HtBI3
wzV+p0/iQHgprtWAsK1XDbt9U97Wn4Wf9Yl86a7xSt9LbxPXlG/hT/amifif
2AnDcNfY5Ev5V132u2B1SLGm7+S47IVxIA0LP/MhPnZaj0kLxSYON3NPmAun
1te2N6emVqNFP/FKuVr9qC62U212Um7iYLbbPVk5r76NE8Wfdpulxfe0Jd9U
g2Q3v4RtXNqupNjb/icfmwuqqelpc9d2MHFu89XwW11P3PU0PcR32aObvTVd
ay/XWVvq0Thb3dedPvETj4RrfrRDSVviuu/lv2x5B9U=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {5376}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJytlE2uLt1SnC80ENPwFGAAlqcAI7hI0EKyBA2LHkO3rxDy1lLEE0/W/ko6
561aK38iIiP3//in//0P//LXf/rTn/79b//ff//w5//zv/7t3/78H//4N3/5
+Oc//+vf/92//tWf/vL85f///J//9e/n89/fP39/xvz8TjH//d7yf+ZRDarV
vlud1qvhaJzeHqnP2zPltPiEz/Zo9U3tVoOwvjkt/z1PmNKz5tHqLr9c8qhv
w2bO092L68sOtW/ivrzYcJFPUp92Tp59c9I3cU3Y6f7n3QWX8THVJt9dd2t5
x84t4W9YU13DPz20I5c9vHjsOo/F9cuuNO6tz9J5+YXq0K6198ZlYV9YSYs0
T4sr1U14F2bq23CSNo3L4kY9CceaB529z+KdatGsmw6t7+qZvmn2ZgdXr4aX
PGHqtPkuLX7GrfvWr/VdO7B2s/WjHaW/EavG+jUzMb61eCi26WOxvXVarxbf
MKeHZty8smo1HOQp0tDUfc+u3+vvQONrfZL4mBkvX6Q4s0vEx8zK+H/pavA3
HubezJr0tlzNnrQ74rX6Ea9Wx86Hclp8yifeVNvOpOFte2d24bKDb57NaVis
Pg1z4216m/5rP964VndxaNgNfluj8Uh4L/tteDUsCS9xuuxMOm+5je/aK1Of
8BIWiy/FXHbCzPGLLivuJ65Vz3JePkhatLOEizRbe9fqt1jDZ+0z4aH6DQ/h
XN61eO39y6t5fu2D2ZmmfdOh5ay4VHe9mx1uOMlrxCH1N3woxnhh7bTx4fLO
8nPSIH3bnWj8SVuaRcO2Zmk40k6tfjTD6/nKSb/tLD1Xbm/cl1ksblTTzjbh
TL1TDGG89CdfJE40V9rn5cWFqWFPOqwalufamZW7Hluv8W6crb7k8VXP9El1
zcys9stXSS/yM82MuKU4umtx1mtLS+N94rh82epesBi/G+8kvPRYTC+vL31p
lxqXN7fVb/5fnBbWy3wsT1O78TI70bgZL9Fj/E29Wj3r6ZRj814s5BOjo+Vk
ajd8F86rjvHk0iZxXRxpPsZDVN/sytq/Na9Un3KXp8k7FGvmlzRtGpN/Cd+K
Nf5OHFJsw91qpXODueU13S2+VtPgN3WpdsPXfq1m5Ivl66vnE4eEaX2buk1v
6y3af8KTcpMmTaeG4eLDxduevb3S8xsOKSZhSPet95e/BW2Xba33/FrT9CHP
Uz75c8U0PPR93dPENXF/3986Fy+8cXSWMKX3NfuGoXFcmi1+qQ/1b72Nb967
1Jfm2vITJtofW6PpsLCke/JR4/n2XD5evU3dVGPhpvg1P1ub8CTcLefKqdX7
ed44L82Nd+zOL26N1/Jn6kGY0/vq3XBavX6Tt+bZtDNn5Ne1AwkPxZMHaI9M
z3Zm9sdwp/5tB96HvLRqLvyt5qphdvXFbPxmdpse+7dj+Ym8kHhdtXhj2l3j
RFzT3fssnRt26rV0WnhMr/Z80Y288JtdXf8If+Jse1pupq/Rhnovb5jvhYU0
aXheLEurNTvy5cXPhNHMv/GgWgtXq9EwGR0Tv8Yn1ada1rtLf4ObfEccCPPF
86lu2yHC0TR4+1x4Lh+RLxv+5fGGqeEk/CnP+pC0Ss/aUavV+219a3ah9aHY
FJewUN3GpeFp/dd+rZ7r78vC2fq8tQm34WH6L17XnWr4G9bWg+pc8KfeCdOq
TZjSc9njVZfwLQxrdhd9qfbaWcK9PNz6rvlQn9W38bX+ue7+yiWchP/is9an
xazvi1YUd/Xi4mZ4Lk3pn8l/e7Xfphlx+KPwLZyky8/vdNdy3+fq+1aTdmLp
uvbhxUtnZhYJe+pP37QzTZcUs/xFWGi+lzkZTg1343j1VctvuGjvlgaN+5pJ
+6W6DceaD/lq1TN8Ul/imHJSf5rxxaOE29Rv76TZiyl9U/wXf5HfSJOE4+Jb
wtTu3jzC8MYtnYjn2omGw+Su/WjcGt+Go53R3q178vryA32vmdAs274QxxT7
tdcld9UzvC0GmqnxfqufnjVTs5/Ld8Y3Ddvy1UXrxjlxoXnbu1Z37TH1WRrY
eulpPain8cjq1frTucXTYl+8pNHaS/pu+qXaZkeNRlTD4Hx7trx21/pffNJi
Gq51TrpRfKq3dCLOZi/N3i2NTB+DP+Fpve3+rniD18ZT7MXvqZbdiYsWV24N
K3lv7ZbxldnbVJc4tH7JZ6mnmQfNnXS0vZcu5m/H2v8Xq50X7WvDnGpRbOPU
ML3niy/Nuel22XOze3ZPiV+rc/Hjpd7SK/UgDC221Wn57S5xM7u5/LHiVg3C
uXYzYV/cDNfGc/UnHpf5E74WR7XW99LA6tRqm9kuX7fdXM+aA90TllY/9V56
NH6EpXny6rcXG2FM9Rc+u8tLb6NZw0s6LJzNZ6bv8tbaIdLB5BkPNywL7zo3
s3nPaFZf+5p9WHVT7YY5fV/8+va3Xvkj9vTL73oo/4uv2vviarDTjM17q9nq
J1x0fvGA+btgdiVxSPUIe8q97lrq0R7aBdrRtd8Nu9kjwkrxyz9rdm+tpcPL
580lXMSxecTOqnFq2Na8vvJ8Y9u3qf3zjOaSMK8ZpvxWo9Vf/C1+miXlk66X
vWj4KY+eL3NMeeRLg/k9N3GJg5lXw5x4JQzWU4R3cViYF367e7a+8VJ67B61
mX89M1jeWNrFn7GXOa15LRyNm9GCtF8xlmfDsu5a7fb+5qyztccNz5u/dE6x
xMnkJ16kV6rTHvJg4khYzdnby+i8OCacDbvtRbXSt9Gx+XTNzuhs5td6pG/i
ZjE3zj+/l/7vWcpvZ40P1SaPpPOGZc2mzWvpRbE0u3bW7qzf7MyvfM3uv9wv
/jO7ld4TftP/4mWr5fJ/wrz83GpSf6tb8+vS5OrDxrvVb3hbbtMucV259r1p
t3q2vWvYvsavPUq12uwabtLa+KH5vnFcM7zoQVgJT+pp9sp6dulucBP3VqPV
bGerR+O68LScCy/Cs/aJcLVdWvvfahuvW3xtB4gn9bT+Mvmp3nVnaEfeOl93
ufG+7BHpsvRYHA2Xa23r29TX7Mvif+VHPOj8os/CTLNdvm53tlbLfWtQ3RR7
6bk8Qf1tzYSL5mg4NZ6EJfUztY0vWy/jE9KlPQtfw2XwG97XOV50ofjV48o5
9UweXLVTLHm51SedWs3F+X3s/JbmL5dU531f/Rvv1Mvwpr5m3ma2FgN5ouFo
9a571/AkXRqvlEvv6bH6mdrLV0vPxmedtzuKJ2+sma3dJ781Pi1v7aTZwYWr
4VicGw+LMX2nfnZv144mTMtPS8OUS55q/Ky3qKfF8sY1bkt78inV/do3PZZ3
65vqGH8Szov2lxpGp3We+i7+DW/jYLGnGq0W4fwNhot/1g61mg03adh+W/2E
/YqVtFl7dNGf6q86xJdiGub0vTgaT5BmCxvpQLkLx1df0hl5LfWy812zon5r
v1pvmsfCRHUTlsaFdiSdmdl+9azx30W31Mv6f+U1DglL8x/lrx1sHBaOpiHp
YnuZPUjni9PyRcq97kjKX14hvRdeg8Xs5fK9wZA4pvwWb2fUPEjzMd5u56Rb
yln62XksLm/8i+Gi+ZohcUvni6t5pz5mno3Hxaur7tKMNE7zN5zavFYN48vr
jjZMqX7DkbT+Em/0pfuGgXhcNH37p8fiMj4gDaleq2X9kXhYPqRD4mbulqYN
V+P2fq95rZo0t8SBPNfqGIwXLA0f4W75y3um16pFu/32aT5veBIm8ker0eqa
Gos37SvxJQ/avwkJXzt770iTFLdy1twaNprvwkL93+eqm9154/dUh2ovfMTn
2sv6jnoSrkvfN++ya+2+xVzmvvYoPcYfrZ7x1NKPcL+1EqYvM2nY6d74zWCn
WmsvWs7yO82feF81unIjLqsXeZB2y3qteazFN8zG54v/l/srV8OxeS31bvok
3j9z3vvWz3Cxeltv0S4bfnYm7SzVufgrcXprvD2aXqSFyUkcSIPGv/FMfK3n
Ux/C1OKbz6j/6tf8f8VB+q249L3yjQ8ShxX3PqRTuqc9uvRL2C1u65uEc+m6
YhY347eEK/E1+5byiE/rY3GSbvQYbEnrVvfLPtpZGj8vnFa/FtO+07POaVfN
XrfcdNfuW521g2/e8orRaHG76Jn4Ut56b3UXPjprOq7a5D/6W9DqGp2aj9Yu
2D2n2ZLHFtbWe/nb+rJ9J/wGB+Ub7un7MhvjLcJKnO1uN60Mr4tHTM/FueU2
zPSeai2vNj6JK83/jW/3Kc72MVwXtva+ZkW/DfPSp8WZuSSOy882h+qbPbQ7
Rx5IfRc26kVxv+Ha+rQel5r2X+pJfMyeE472kMcSx5W7Zp7qmV0iPuvvgMG2
doL2lGIaHtN7cVq7a+e+fEL4Wt2UbzlTTaPH+75wLa6Jw2Wvmw5XvyZMKT79
Lm1azVZnnaW6SzPjQbtLywekNe10w91qNo40m4YrYbJeIFzNv3YeNIuG4QuO
5dnmrXVP2Oi94fjai2Z43SVT48Vs8hbutRtmPwkn6ZQwNG9SP8JGMXanU72U
l/CT91q/tQ8JF+2l2cf1b2E2uEmr9qyZvLhSntFi9aW9vcyFMLaYVj/hp7mt
eadaVL9hoXkvzktbmkPTwzxf/Wyxtn7Ul3A2L60alGdn256Lvy741936l7it
OMqhh3BbDimWapNHW50UY+dm/mYkrpfdX387GqcWTztL2A22F4fRiPbBeJHw
rh1efIx2hGN9L8xG38bhMptW94194xruxGk9bTfWXrZz4znq07BfdPrq28b3
7U8x7SzVaLwW/oQ11TV+bLXM96px5dGwL281bpf+hOfS7+Vgvhfm1XNpdNnf
1oc0Mdouj6b65rnsBvG87GnKS/NtceaM8CVuNt56qvFemrR65G3yu/V0w7q8
+/ZpPdds03l61ryp3uJ5nZ3JW7o0rsaDbU6r3tLWepz0Xdoa3Majl1qWY/u3
dFhcqX6LI65tjqQH9TQY1ozarqyc5SXjPbNXiSPVSO9tXi0m9bb4jZ6p7sUz
xrNvnNmddP8Vs9nBxmHtQsLy4ln6m31P5wtTq0n3b1/zb/VYetv5JJyNC3ly
YSQ9Et73jLxhZmr5vHetr9mTxjmdt75mNo2P8dOaScJHWFdOw/5iSJjWLNtD
nFqPtW+p/sJ6mWV7X54z94YnnX3V87qPZgcXf6Plqts0SO+tT9ublnfhtHRK
39c9XXzXfNJjsF18RDUazobDar740c6RD0iby5y+1m75jZet+fJfdVuO2YWE
5Y0j3iau8UhP8/FlBsY7hKHFEObUb/nxMkd6NzpZn77nhh9xpB4NC/VMsV+e
tSMJu63RZmGwWG+vfobHZZ9Jb/KhnR15vvVJvNb+tV4t7uJx4tNil0+WN97Y
pUPDlHqle5tr/ka0WMK+sNpdol5vLfpe+eT1N4Z4vGerVsKTaicMdtdXT9rN
hqU9VstUi3ZwafnGGl9dNWo9En+qd/Ey1W01SQvy6fKW1TPxWftD8al30qdh
WnEpb2Gj/qnme3bRmrSgvWg8G/bUq2E28a1Hy10zJ/8sfOmdzhLW9+7rHEmX
Lztsdsp4pvFbOSmeeptdobkbTZtG5IE2wxRrejW+Zh52n1Y8zcrUXnOx+AjD
e7Z2vtVau9f6Et+FwWBdfmqYzN4bPOk94Wg+TfXaGe1dw0hY3pj1rD0nzHbH
KJ96Gx8nPum94Wj3y8MXv5m4xrPlJa7Uu9X7WWftfstr7xf+ifeqSz1M7VYz
5Rocv90fil19aB9bLPFoXnrjW7/2WB80LpRPvxe8VqMW+55TfzuLq4cSznTf
4td5mx+dXXY04Vvx9Fx8/GJf2My+2FldcgizmdnCS1qk/TQz/uIF0mTpRvXX
/hn+FL8wUq0vO7n4vrEJ7+K/dmfNutV7OaTfdme8arCnXsvnhNPsY3pv/Fot
w4F6tfer1y54zV6meOtzM+uFx3qm4W7arJ0weEzv5VGL8ze8lz/enIYn4Vr/
Ws7CbPFazdP90tXer78DhKW9m2/yFd1b7ydsxM/cGY8uvlRv1Vr57bfVsv2t
thevtxrmfOFcszFapXODs/H+7b6/9Q1G2nGLa/nA+mRxM1o0fI1j621rkD7U
g3Y25axfy+nNufibuJg9NzOm+stvjVPjT/gaZrtbF7982Y82L4pf/dLTPLv8
0WoRptXX9FwzJR1arRevnX2q8T7L5+8d4Ul1yU+pZ8Jsd79xIUzv+epLfL/o
kHo1/KlX8xTx+aJ54rj2+IsmNLeGk/RYeJaXjLcWb/P3YmEyc77UTHjbLBau
VaflNuwJf8olLi2v+XX5p+UvDUz95l+qQb/p3ezJ+iYdiHvin+6Xd5pGNo96
2vz1TlhbX7sny5vEK2G6aJC4GJ+/NZJGVNv6JuFN/C7zTTGXPSKeqX7zactN
/AzmVpP2K+VRjYX7rbM0TPGLR+ud+NHMFtZUk3gQr3VvfxN2M/+1I/S34a1p
ZvWep/vrbiy/pn6XPj9jyT8ttmG+aNi4rTkvjl/3gHYi5RnsLdfUTTVSH7P/
Fy3aDO1Otd6rp/HwBctFl1Xn7d/wfJnVF06NZ8JFu9L4kW62v+mT8q3/GrfL
rBuWxO/NNVq1/IvXEs+Fl/A3zsbDv9Uq1SefrV1berVZkU7LP4Yj1U9crvHL
/4mP2cnFZ3nAfpu5kn9bbuORsL78CePS6s1PdwnL8o65W71JR6td60EzXX3I
Rykm9Xwf2l/CRvUTT4PpytFoTvjJs5aziSXcy090Zvbz5fmbWa4+qRfVbH0p
tj3Lw8Rl8Vw+JUyN71vH7OY6azwMlxdbw7/0afdv7a/9TW3i13AQHsuBuKzv
1cfkvnd2d1qdVtt4rcXbOu3X9HtjjR5rvgm/jV89qU7Txex4+0dxqX/i1WKp
fqvT+i896Oznb+pFnCyOhXHNqMW3ua8+Zi6W18K66lDNFEexlP/b+VP/NqPF
Ze0JYUv1TC7xsTNt/Q0PmrmNbTFUh+JaHeqz8tpz0Yvu3xqmFuFJHqA5p/w3
j/7umNlc9rX1Iy0aPoOTMDcOdJZqLT1a36RReowO7SFOhMN6ftVtuSnuqrvt
nXhSjMFD/Azuxt1ioTqm9ppH20N6mkbkU9KS6hrOl3yqed2HxLHhbPdNPzML
8p7pn/LM3pg6DW/CmPqaHW19zdxbHuXQbi7uLb/pQpyNZrRr6+9AwkT+MH8D
7M4Zj7U6X/i9HMxumrx233K+YHzP3xjC1maZHur3xixsqbbBv7DTXiYey4Nm
1nTWtFi8m06U37z/xhL39k18qCdhTjkG06q19LH4yXspJuFZPrGzNGekSeL5
1SNNh/XYfW0ar15pBil+zcr44D1fPIlPwtb60q6vnWoP4aE6a24ttn1fMNpZ
tdz33O7S8v5l7y66JX4tJsWRb+xD3lw9CK/9bp5ZWK47mOLW7qXvhsXgoTjL
g2qunfjim6YFYWhxhP+6W9Rn6ZGeNcsWu3C23NSTcC++xme23s84ulveMF6x
vFOf9H31Q9KicWi60d+R1Ju0e8+sF5rPrTfNbrV5GR8vTI2P3Y/3uexDi6Ee
F03eHuaOeNBemDoN//I28aYneYCwJ95vHNWzXls+TjWWNxeehSn9Lgw/Y8gX
Dcva2ZbT+KX+hGXp33Jph8yzdi39Liy2XsKbZmCfpleqS9ql/r/5G7DmuvxI
Me8dYSEObx/7N4PujFctJ4qhXWn31rvG08T/xdFqW3yJW3tSjzaXlNN4tLgL
rvfXzoPqtdzlb7M/F28uDZd/zAwWN/IOxaa7xWV5oeH46mvLd81yzW55evFc
/C47ubhbP1/2Y+3gRd/EY/ls4fgN57dH04E4WY7WE41bq5P62j1bebRTKTfV
JW8TP5Nv3i8eSO+W79qDFkO+MDtk4hf/lGtwpfqtz6UeaX6Z66vVW2vhSvGN
/8qzfnmftSMp9u1x1b7VaPiuM12aE3fTc/V5YxrPpdHCZbRauFJ/oxPtwZpN
40LatTpLg4Qt9aKzVD/1MjNJdS9aNVypb+uzcFosaxeN1hZzw9PiCP/qT3Vp
9qu21SVhWFqnel/2yvZccdT74oV0tnz81m27QvNLtVp+4kDzX7xSbTpfZ6kH
eZZ2jLRvWM18F6eLz8076XH1WcNvfy/7tDgQxhbT5tTmZv41LjRL8izNZ2nX
uKScdvfek/bU9zrbFw/VWXgsf7NfFuvSzM7bzNZ69+3XtDA7tria+hYX6bf8
Tfq0mFUj1SL+L/Z2Znc91SHtaLbrjubUuDYcKb/pa31IO0O1W632azV7ayWs
VKf5enmDuKxdI1xUL323s4XLeDXVIW0W75cv4SLuqU7qQfe2f8OdztdM0/fC
TPoZfOlu8W3xCaeZjeWWOC1+5DnjecLS+rbZmof2N2GhvVoes7pc7ttdwtEw
tV7pPtUx/jfv7X75x+anfkt7qpvuSa+1h4urwbtmYXxN/Rcfq4nRifZp1SJN
02P4tX7GP8vT753dq1Qv3V00WNhTTMJu93TpefldvqfY9BC25rGvvU2dNv/G
g3BevWA4Ek9Tn/xt/GF2K2FZvV+sjSflL+yrVuPQar44W58U12JSnYTDemPt
UevVel+wNkyE772zvBvOVefSh/jTvtPONNxNh4SD+DaMSadUk2a6dEwcCPfq
3TCvfpf9bX0XjutMU73LThIn48HGddUgLl/7r716vwnH2tXLs/x19f6aAXnb
+iDVaxiIT7tbvBq2i2+XP4gf5Sy/Go0W1pb/xiYMLc/yaHlNb8LX5mT8QzXp
jHxCXE3Owr3w0P3y7df5p1zau1SzxdG+WD2+7ADhXN/Gk4vrz7Ord8xekQfM
DKyv1oy+7GXCuWqShvRL/AyOhN1oSj3a8xscdgfe+uls7eJlT9Z5wt94NP8R
LtJ+eXvFrl6kw1v7untXLvbe6NZwG07Ex2Jdd2Ymy9M/6y9+tPspj74bN9M/
3RMmqmF3yfR4z1t862VnRdqTFxcmwrd81nBc9pEwt7zU13qm8V7cqMbCYWdp
5rFwr35Gm4V11SNNFo6mA72v7+b5Fkc6Lj1ajxS75mr8unok7CaHzmk/Xpy0
k/Y8aZTw2Z2hWSbO1KPhJixrxpb/2j2qY3xMOYS31f0Zd/0b0PoQ11SXzihm
eTthsztO71cPtbkYbKm31Yr6ND7Uc/mr9SU/W05rHhRj9KB5mh38DR+jx/Ls
+5hZ0VxW/TdmaWP0uezWV0+R95ffGz/SpnEjbC2+/VL/5RmaFeFK79ccc7+0
Xngp/sKl4SL/pN7v79Lf+v9Sy/Bq960/4SINqG/CsPbB8G4arBmu+S0eLxaa
B/VvmJpuDXfCvGo1rNSPOJr8tQPkqcYnxbQc8kabVdMt9af7hrf1WLuQ6pr5
U+9Vw+znmvXiZmJTLnmv+YX83Ti074QxaZhwNC0apobrrdlyLC7DK8UvDITJ
5L7PRRPrtdaDZmR9QpjXni2PtZh2ljjQ98J44UEPaW1mvfqRZ5IfyIN27+ks
3a1Yw6XpkWq8Oe1pGBKWVaNxSPVpXoTf3F3+PlDfL1zoad5Z+ZTXaqxerYet
u/yS+JB3V582m1ZjYUl12izM34M1+9SHPEe5BtPFJ2suNOtU1/rZYGpYzLzX
jAxX8kTTgfjZ+RgMi+viR3Wo99Kxnb24lp6Lb8pLuJa2ts/Sj/CTZqlGw/HG
NG0b5jUrimmc1u5fPJvuaMaNt+3TYlLt1rt9m1m0s3RPuFf/9Ji/D00bwkh1
6X55Z3mCvE06XbVoOZZv+m33VNPsS8Pe6iQuxC/VW8/Cn2oZD77nb0/De+1k
q7V6Lx2N91se+aD5LGFsNVY+xS9+F51XXsNI8Sunxdk9XrxaDZpxO0u9Ur/E
ke6M1maHGsZUq/WwmAiD3ZlWa+2z8VrbZ3pazuX3qomJSxjb/Vu/edjiTvVW
3ze/xVCOnde1j/Ffq2VxGh0TzjX71O+6m6lvei6zNrnNP2tOpPtvZrpqUO8X
99rThL1h+HlP54TT+pP6GL/b2RK3htPUSryIx9uXdH3rGp6L39pB4wHC0zgZ
fO0s4bJ7Y7QyPEmb9Pu+v1zed/K64bb6pHPSpeWvvTQzMRq85+99475ymhbp
3mBM9SyulZPqLjzEsenw1U/kHYvd4jY7TTiWN1tPwtTOLphefMT3vVuxif/b
N+GkHWuaLy2SDuvvA/G/9jOa0DvpS/GE0fBa3L7M4zLn5RnDy9Rr+S22YWr+
pzyqQZxMvffezp52tMUkDnbniYfdvfe8nbWdsnvVcF+8TlgbNzoztYkrcWo6
0d4TnsVt4Wzcv9S0e7BqGb0I13tv5mQ5kWY0I9ObaicsDetX/Vp/W5+4rX8X
PRpumkHi8jOnxSydaba2fuJjd2/tzVsjcWjYL1xsn7ZPa75f/UQYje8aF6Pn
mm/jf62V7pevaPbr3O7X4pRqLC9bXxNm6vmVz/Jcw5swrPulCcW1eqv38mLr
/fZLXBuWtW/UL8W2nNb3Epe0ac+a5Yu11V+6/Sb/jac8s5Pv+Zptq0larb0g
jRf/91lzXhwojvCanbp6l3Sjubbz1HfpSDOl/kaTFm/2cPFLGNJz8SbtsvH/
27dhSPgIM+EmHGa37N+DxmfNjfJIR5qt2Zm37uLecKS41KOd014Rl4W74aIa
7Ulzodmv3pbHWy/hXf656Jw4GxyXPUh3tq7B1HolTu2OPGFwU87atYbNPOvv
Bd2tvwUNY8Np9q7Ni3oR11T34sFUn/A3Hsazrf/CaXVcutAZ/TaMDS+dpbyE
ucWsHnbuZj/f/ob3mmPjb/utmLVXNA/zN8Hktpy1v1deqVZ7zByMf5dGxv9X
H9p52b8j7d+b13rQQ3twrX/xsp1J6988uf7WNHyG7xuf6ts84kVcLd82l4vv
2z1pte7Jj62O8ZDhbri8cS2PeBpeZqdX78sOUL3mvYR/+YD8bbmtnsTva3zi
/EfgWrNJdd/45hPapcTN+IJwkefau+nxYqL52D0kHQ3nL75tOqT6jc/CYfRZ
eH/jw9SXcPxmluQ54rt6Uy+qa+MWJtrpN4b607n12Pq+YKT6a65XX9K5iTV6
pRrvQ3N94+yMmjap71v/wmF518zR1CP//MxbOqSaLY9iF/a032un1y/tLeG8
4lj7Qb5cfmhcaO4pxuxw49P6EM/mk3a28hfuhLG9U72E0+YRh9Tf7CbxSufk
6bfX0pI8s/oZj9vZrr87VIdwGr9SjtGqcU6z/+KBNcu130vLhKXVoFjiSHhb
rYQj8TT/Vm2D/+oRiiMeqZaJJa4J42U3jJcplr7X0/za8K8+xtcr5ue52YNU
x9xZrS+zv/qtnbWZGBxvfqplf82cG+4224WfPNmwLhyE++qdtTNrrxOm5rWG
Kd0bv168vPRIObQDCTv1fePWvqb4hC/lLa5Lx5bTsJv+CXvzwddzu59L+1Zv
8Wt6rNklPg3Xqr9mYc4bv/e56v71uWJ/c9Y8ja/MDNY+Juyr/spt+InXe0d1
2/xoFpbbZYcWpq99mk70vr6b3y9zblwN93b2swftZfNxw7v20OCw+7L0Wjga
V8qneZHHWj7VNRo3HInPb3okXWw+5TaNFj8zb9Ll4s/1GF7Gp6Q5fbfey/uk
Y+N12V87P/J143jVuWFNvInXm0v+px6thtFteSn1MPcv/vQsjxJe08dqQjo1
3Ma3xLHh/bJ36d4+TfuGi2aw9G85NP/G1cx89VgYSRvjLcP9rbH4pRrEpd2n
PhbDmstv9CA/rIc8c51b6t04WJ3SmdE/9Wlx5IGvPjG1CEfi3mquOTVdrN+b
TqYm+Zj0sVwJ/+Jlfdq4JmxG79XHYm+/a5ZXvQy2Fxfh/ILdeO/tb2qlp3mf
erzYmubLR+97w0a10v3ilPAvnRKv5SeqQe8JH3F775qfFw/CYXq0+hZrwpLe
EzbaqxdTq0U5rYbZT+OZS/5ltxv2lttyljbpPtX9o3Q2/vqtP77sIGFod0tD
wkz3713Dv7CsuxTT/Gaw2f18v82syN+Lc+NFO0k6kaeXf5sH274QPzPfhsnu
mamT+r3Yl9ff2PZOmOx83sdo2+bW8u39xXcvDor5Dd+lw8L69km9ly7poT1r
sc0HC6+dt8HWfNn6Lu2tDmsHlk9Nz+aN9X317IvTzMdwbPu6/NM4tx4GT8pZ
s2p3K954iXzetLnUXrNvOGhnW/7aD/OYvSPNUh75w2jy9lj1KG/VpxoNg9lV
w59mSzxS3daL/PtibZyaL1qNxqPlGPwL68Jne1LvVmvNy/wuP704bW3Dh3is
vw8tLvV+sVMMYW4YaYcb14Zp7b3pnzCsfuZ97XXTm7xpYg2exMnuRcNuPWZ4
mJkujG+txIHw03yWLg1jm33DZn7bLFofg7PVobk3TVL+Rd/G08RcOC2/LQxX
D36pS7v1PsYHLW/xSe8p/6opzT7VbJgbjpZL2lgNaS5f+NjdbD2pr3nWHi7M
CwthvPiC5knxlsOaQ8NtfZqeVTfhb9pf9Gzvy29r/1Js+35zlz/snpi/DQ2X
jUuYW72EJdVbcSu/+cbsAtVI+NZetNqJo/W69XTKXb3MfjdfpMfipnu7A9Tf
zjPhbmdLQ4O99bLnF5zNay2n9aXajfcFd8NCZ1c9DXerF/mKNDUarxwzC+LQ
apq9JT3fOg1XiyOfGR+ueTUcLZfilvdoptdeDTfVWfu3eizfL7+tnAsu42Oa
89Kq1bl4/cVs+1sdaKfMrhrcFkfDbWq8mhCP9+6i7zUmYTO8EofmG6pN/V+M
TbcUY2awvG7m3p6LX1bv95wwtl+qdd295ue1c61e42awtR6Ek/pSD8Jm4kzP
hqHN8uLFFW+9lOomzC2e/LNmSVqkOKPhwkLfLX9htjv66pXqtbOUc/GxmQXF
Gi3Ju4v/ZTZUv9UwPd97qmW0TPkJc+tvcJAWS7uFvXFZGBMGk2v6NX5Np6RD
20/jQYuDHuvvK2fCvub89m0xZuYpjurR91vvxbf0S7nt3xu7+ibOFsfC1WpQ
bsLT9CX8a55Gn1bH3Le4F0f6XrnvL3FcvljcTK1Wc+Favd6HZmM9k3qlmJbT
7ltMqpMw/Nb7Js76YfFJ/JqX1/ml3mVfDEezF8ZbDb/pa/lc+lvsrSftx9qB
ht3Mu83vzSct3zPDhbxGfRrPhbXd2Vopjzgbby9+6bG7YTCQBxrX9Syuid/C
Yvdq4aFY602amfFIu094l/eMB8kDizfxe2sa3qZP4mI1IBzt3uBafFqM9Wiq
1d4vO2p3hnzYcC8cVz1ox7/ktbt0bnok3rS7hC/VSnUuPd5eVk/jEbO31Kvd
N86Ly+LR5pq+U3/yU/o1vVoc1Uv3lnurm56lHc19cbdeXN5oGBOHlEOYL1zb
s7RpGBsey6vtEe0X8SKtqfaa5doZ46GGw8y4cVk81l41zIQh9V+8013Kfc8W
33ZGPjR+brje+9/wW5yappar8XzjS3NseIkrcaaeyxuJD+W3PWy4Gtc1X+LU
eBCHq3bvectpHJb3KCfhanlmVwyXhLXNevVu7xZDyjH8zS/tRPpeHjPnDcPa
GeOdltPuUu7a5eUJ6ts8ZGbQMLQeqZ/dh6Vx2o3LrqVey3+ptq1HdUn7L543
3rfza/1orqb2yrPzWLUveQtj0sLy+OLdiwZ2zxqGlUtnTZvWj7jQGeUYHmZW
LZ50N1q+j/VW04ZqfOVsfPtie/E0nu2xM1j1l0bvXYq74GoY3/OEd/1a71JN
W4fwNY2oduK9vJf6XTzTMLVerUfb64Qvxbe41Y92z/ifal34/ny/1KDdabXT
+8KxchsmmpPxh9Gp8SNchJf0Xz2bJ0zfFEMYCdebbx7iQlpYbGtPLvO13N9v
s990b/anzZw4JC5md0xfmr/xYbuzfxtobq3H8tel75pd25OVT/4kv6/zptHF
A2avjE8Xv6u36N+bSzkJA2my+BkMhC31WTM1vxYTPRceayftk3KMV6470vAv
ry1vJsyrP/ElT5J/Wo/lfcJCXFLM6mE8TbUXduJy3RXyUcojzCZmeWPVSnUT
3+XrFZcwLY/aGms3qbet03QyNRrHNeukA/mrnV3OWz3j6bWbl71e/Ym/vaP9
pXwzp5T7M2bt0cLddFseTDgav6873Oob3xPPpt3ql2LMXpA+a4arRsoxfVrs
egiXwWR9dtGgzWfxNHNM3N8+K3fxSz1oZxaXFEu9FhejTatLMWa36T31XL42
+9rwtfrv+5fYlEe9E8aFId3RHq5aS68vWv+sS/XNTtk+Lx+qZfxAPVpcqtfq
U71rj6U91Vx/K0iny98YmvXS3Pp7+Y/iDYfWx+xwwmI82H5p5rQbdr8oPnEg
jxpNVx7tYIs1flm1Um2zw2u/Vs/Fc9VONdasFi7yetNseZUwv3WaHtTP/K2w
nE3/dv/2blxNfqtFvZbmbZb2jDBRr3RuvHmZdeNn9/g9S79fYi4akz/f2gb7
ZY/f2u/T9ts8q9/ivvQyei4Oq/Z7R/HkV7MTFwzGX5T35pj41od8ZnR669Nv
wk19l0Ztbmt2hC3lLN++WFJu25sWa2eQOBHPpdHanRVjfNW0WfhoLuss3a2Z
NN8Sz8a9YaQeqV7DSThSjMG3/GV88fOcdnlxXvyobsNPPRNuqrX2xOTZXTez
NPVozuTvFPNyu+bZWZP/37P02JkmDSiWeib8ZqaNi9kB2m2Ta/KM15tH7G60
fqlP0rZ5zWAwu9hwtJ2gXguH3feUZziQhuT3r/tBGAjj4r1qrbprhwyONv+1
Y9c9aTMnrOkhra76tp7kLZtvNbS9rpzTY+bR/NdyL7tF2lHNtd9vzfW3gX6b
ltaT6WxpY2u9eXYGBhfhXRouf1/qrfc2c/pOz8Wvdn52bhRLO918287obs0v
YTUY3/qpV8OZelK+1Wvho77Giw3TyjM837oJe+tlcZIXFhbCnXJsb/N7/duR
zmzdl097X7NqtS4esPMhvyxtTO31d4A0JX1WfZqlwdx60bftlzitfSGPWF+k
vqbXhX/D9OYtfxK3xGPpQ1gTtq99Vq3m80vcOiNOC2PSLH0v3Be/WC6mx9KJ
/Ge9ujRa2N+zFEtnZuaUu/qsfWlzfc/WPi2cFw+2+xZr+rcc2k/Tq/U32Bf+
y0407NSzxRAv28v0tdq/saRf0qn9/TB1E97GwewG9Ww41/4Qv6RP69EwWj6r
18olLCk38Wgclq+J7+pNWMhrqd6qkWJb/y8efOtQ7sK+PJVwvM+6s3UTR/L3
hZ/RK723Z+1d49RwNowrv8Wn88bB7DTVXXvwapQwEF6jc7qnHVu8jfcWf+NB
i2fhex9zTvtGu/rWWr65xF48dvXI0i3lvvyJS4qnGb11V23S6srrEk+zu+z+
miP5vmFKGNfOJkyt7ptLPmvv5FfCnL4Je4ozu5jmtuZkahA/s+8pP+nwfi9d
iHPLIQzLN2/N5SXC9saYXfoyN/JKqmVxJOyNZ8u5zrftMe392onWk/olXJf5
tTjLa9VKPKh+iyX8iXe7a7jfvsSVfEjPmqF5zO68mIwnl3YG7/KB3bsvO0ke
Ip2o59Jg3TW86f2tRWeJh8XyR+615f7Vf9SzcWp1Tc+GoXFZPBcO6pU0W/vz
xi98xP2q/Yu/4TU9KWY9Zreb780+mP0mvheOaz8Sb5qZmVWLM/546371Ls3J
+s/wbD0X31Qjvb/P2qe1DwvrG5fq2nuq9wVv4kzzNTovTNdZ2t364vk3vuFv
vVN+q0lzSXhbfasxfaffVCc9SyPrNevdt6ed29rR5nnKp/MXD501PhRH3BPm
hPV9lgdWT+Nv0utLncbBYrPfF//SPNNvexYu4mw8dfGK3RniZmZpvEo70Xgl
7svvhG/FtZjE0dRuNQmLuV9amnPS1fZZ+Sn3Nz1bXOthsJvvtcNJ53S/NEh9
27wI89Keeq9dvsyIMKYey0fvs/rSfePb+hC25RWrdaqRcpoPW33CkPq2GOpN
+q/fhbFp3/4R/taPHtJlaZZ4LZ1M/S8+SjHp3uxle8z+mtnRe6p7nX2LIw7E
ffE2u/Bl34mb1bbpkOoR74b5soNLa6t/65G8njCYPUn3q57xs+W+8tY+ND7N
O28ts7MJ/+JN/xqf9qxZJGxLhws2uxcNB+1607vN5MVBsdZLi0/iZ3ZreYny
ls7Le6mvmePas4u3lg5rh1a/xKtp9X6T/9+YVOuiB2Exd8tH5Od0bu/S+Yq/
cHnjlv40t8ssjedTv3b28/x9b9yaRovP2jdTI/U0tYlz4mD5UozRofVPM7/y
aLjfe6Nzwtf6X+abMDV8DQOdGezLX+SH5rWmw+Lf6rQeCafF/OYTjua5NsPl
SfJ3O2v9l26rtplN40A1bG96TzUS9hRz3R3SJNVOWNJ7q2l9RBho9naWDX+r
YTzwxhGmVW/VsvhJp6XJwpryE873sbOhWldNU/11TrFNoxSz9vErltav9Unn
V7+suROu1Sc9C+OquzxCehN/U8fuiM01Hmmeszze+IaXdnj5p3mf7lM/0jD1
p9oUa/+l3gmz0Yb0ao/VIdWxGhu9W13iYvy1MLSzFmNjrV9XXer3895qfZlD
w0I+JI7prnGxj9EtxZl847nGx/jf6JruTQ+DP9Va/Vpf0o/wND62b6rV5mK/
kwaEvXFumN861/mb/bh4ifRYPFatF5PxzuppPJLqEAbb67Jzba5f6yW+K67l
kh4Ua8/MzNKz6qSezYu2L/mdYtu+tBlT/tov46XE4a1htDN6XryZNHmftUPp
LuEy3KxG9JD2hMXsvtmptVvJL43zyjG6t10xNVa84fFiIb+v3W0YaUffXKrd
9PhSs8Ul7KkO4Up3VI/4Ud03x/qZ5mm5mZyGN/Gk+1Sz4WlzpD7UY+3CW8O+
291vuNtz2Y2UQ355v+kuxSb+9r7Vb1jb3pjapMf7GJ9aH7/3FJP4t9o018bH
emTthNXm8r788HIxvU0vqtnuFoYW98ammsvDVJd8ZTClfik/1bpgJk2p/6vf
2pXEL3EhLVpd0t/6e/kuYW09Wm3L0XIlzOkx/ZceNGvyINVfGjS+qQ/hbpgJ
41un8TBzXn5tHAkf5S1/rFlSHj12d1IOaddmufbRzt5gJNzX99Z78WyxDe/a
N9pDim+9ki5Wj9bH+tjEG8zt1+x3OqNZrfppjlTDYnjjL3tDGFLc+7SZEO9L
rqmZMKe+tPOrV3u3u23m8DXv63xXH7u7tBPt7K1hOFH9lk/YCXPDlLiuXU/9
1y6sPSGNFrfF5c0nzIZ3e185TduGj/DSLjRM6bf1WP9a3YZj7YLZTVMjYVjY
E15bM8Uk3HS+9tW+Lzyp19qRho9m2mq2OonH8kzbN+PZpgd5uHFoGtkdNDzS
3YszcbHzW/hJg0ucuW/eTNh/9n/fDSczm4Wx5SdMK5cwNw7vnfFIw2t2jGKt
Vu9jMFznY/ba7l/jQPFNOzpfuFPvhMVyXj5pPmw1SP+1y6Qd1bZ3DQfpZneN
9Fr+aRxX3ysWqkOeSeeJx9Kv3S38ND/iYPIMBrtT6YxqkGdf/EbPxmHlkz/b
Y3aM6i9dEvaW2ziuPm/88mjj3p4VlzR8f+nvANUj37d6tp/xaYp7z8xuWI72
rs3WzOp9v+7tqmH4Lq+S5knry94T/sal3V16X/Bb//+Mb5iW/4nbyl/zXn+L
Gu9Wg/RfXlx7leIWf8LdnjZ3M9uGh7he8ZLu7zdxaXMhToTlMt8UR/isH9bM
zH3Dds39jUbG9407+bRx/FKTPHaZ52XOpEN62vwu+9P0SXcJU4tb/SjP4jVz
MxiWb1vsi2NhIc+kc6p/1af9s8/S5sVJudanKb/p0fq9+Npc23eqTRwT31Zj
YV+78jVv+en9pTml3sZfbZ4LX8pP9ZbXFm7Cl7i89ah+w2hq0hnVSJq1O8K0
9veNpR6pNmFbGJf26aGY5X3SiPCvnaO7VSPFvLjeHq1O4kO+u7xf8aU6Zl8X
R/IFYTN43ljaA8Jv8V59TPVXTsPeahhdGj/jjXZutGuxRsufeZcdvHAiLque
yaE9WjM0mK332v2ag/Wh6dM4mPeEh7BQ/ppLe9r+NAwJU/PlF38TZsur9SGc
F+2SPin2ot/ybop9e9pc0uTCdeE2NRa/t0aLWzWIf+u38tfd8tRbg+6otsFz
3YkUR5otHBd/XDBe6r+9fqMl3TduVMv4dsVQ34YlfTfdFkfD/70jLmbOZu+u
XC4517PGf2m4+CwOF0+Rpo2j8STxJ+wLP+Fr+YaHmU3iRHiWtyim9bB+TvwM
tsVh+af5fOFLtVtcwnjdlVQnxVqPkL+N39aOtZot9+VluKSHsKe4hpX6WC3M
Hq3a13qm7poz9WwP7ULLJZ40A+OzxrfNjuoZnRIful/78mJbvjeYG+4v/dud
mSFhu+ye3Yd1vrxx3XPiu3iTj1fvxcVga2fEl2ZO+2Z9mjDTnFIN0qvVt7Uu
vEmHhc/wWVwM7pS/6hCnxoN60M4szy3sLW7lXPyTvteeGL6NH/UzPEnT33qQ
cum7cSBuRj+7ewl/86jV+eXR8FB/wmW4Ll7Ut3ExXn3xpHi7p4vbdeamttmJ
drY4Nl+1uhRH+lNd0oXqtZ50Z/Yo9af3xKPhpdoXf9DuXDRKz8WfC6PFQPOm
HW49aW7Gr2sWi5vVxvq77UyrS3ypZqrR7q0X1gwS/8sv8Vgc7d7Srtl9aRhS
7PLFe55m27ReMyXPEBfi1vpS73Sf9KDeF/8ujRv2S+4Ff6v51iBvpjjjEepD
+0KYL7OlHaG9bn2I2+K+/hZ88b3dT4uh1XwxLBzGF+2edLc103vjS7FfuKf4
dfaFf+JFWIgfYbB6WLzLj4R36dOwEMfL/NZdq7H4G18SBoqjnJ+5pD3FGXwt
v9Wx+2UxJxz00K4RpsS7cbc7ufbP7PlVh+Xb1v/tR7Mg3SwHwmj8k3AnHhSX
sJvaluuL3/hx9TN6GD52hktX4rf8dZl540M8qfbilN5Nzz+ih51Z6tnwvpit
Ll/60R4Qttbb7D+dpzviY3Zu1ae/CS23YUn5iUP6btpdeCfcdL92w2ChHikn
cX37t2f1XHthfG5mQjjtPCjPeNvyM/WuOiRexI16kjdTbvtemJc25I2mz3oI
l9nLy56YHOLS/PrWTjHLG4tjw5h6JkxmFxY2izc9y3eGT+K08tfumt2m86XR
8mbzDcW+5y2GdGr5DTf9DTA7Sjwab+LY4i7+oPp0Tj2s99o74Ws1Uj55qu0f
xa84sy80I8Ji89cOLPzElzy79pdwmL19a6Q+NJPlJ9pT0sPgtt9mVwgTcSEN
Vjz5s2G+xC9vNY4UQ/6mPVj7ZLg2XmZXE3ZTh7SjmOU54/fUL+FIPrC8TD+z
g1/8Qs/iZPISh4bPYDN7vPQjTAkbzfHls/oY3FSD6iZMhNnkmTrEZ+3z2r+m
l/HiV38sr5MuSx/qt3g1DrSjrXc7W/5cnrBafPEY8V71Wz16Jzym19KwYfoj
6jYP036tXVkzo92xnjD4ml7pvWlDeqS4Vpv4US3C1+IbxjWPhO+iyYpvcQYD
PQsTcTZ+Ia9ZXrSLNJfE68V62SnyKsVeOC+M1NdiTphod9r3e9Y8kXq3eqmW
3bP1t+BnLL0TP+pntKUZG+6pBn0TZtP7rZFy0tP2eM004Uiclh4Xf3+d12//
NrT5vvGEaXE3vKyeK3Z5p3FtPFO/xjHVIwzExXjvknf5bRjJPy/vppPRzno7
YUn9Gw46X1wSLppV+m76JlxmR5ee7X1pQ/wJ7xvTcBp/Gb++j8G/cJJOa97G
m1+4mTklLdJz3UHqQ/uw+i9MRu/Ut2FNNdcutJpXLxK/1dvmLV1anPUJYaB+
6W7FLmwrhuZkvPPeGw+0s2t/+vvQnuaXxZ/2kGIJl9EjYV+51reXmr/Ja/Nd
9ZsHSKPWI2FNOa3HwmF+124s7Itnwkq7dZlPyzN7nDAnvAZP4/LmtdgWt2a/
MC4+NKPWY+FK/L7gIwxrdy5+It9YjI2b1cc8y+8XjxjOFjfhb7GmR/pNtZsG
pEN7T5iIK828cXnrrvkTH/I+9VheNb5NXBfet3fCRDNZMzJ+MjNrfMxOGPxf
+Ldfyz29W18krsSD9pf29o257KnB1zzeMBgdDN/Vv/GmmsZzL17SJH3TrJYv
Gg/CYDxAeK4939/LfiQMb571k9ldeii36ZfuVs8vel/ijZ7N680XpjbxN3uz
NP6q19vnzaH35qnEzXInvVud5nPjx1aXNH3xGs/RQ9qQ5uaO/NIwNM60S3SW
6q55mnvjW+prZ2381LBSnXTXclqdn2eEZc3/PV8aL5+1d4PpisPWT7WJy4pp
HEjfFJti2p63fPJ4q2P3yNRpmC2W1OsyjxZ31Ya4UQ+KtxyMl9YOrHkZvahP
uic8LabFNZ3MXFJNownxtfonnNYDxLPhMFhbTapHPE3f38y9/dodT/Xtbqz9
phqEnzR549r58urCZWZJNVrMW/Oyoy3e+Gl57a1tZ0FYDOb03TDbeoSHdor+
DjTPUw7VsU/bMZp7mxfdrRiq13IJR+vZZkJ+MX5anO3Z2vc3t+F/axqupHXK
N3vRcCztyEdmhqvW2pmmhfVQ42z2nGKIa8ozuAjv6k9zpG/al8Zp4TB4Lr5O
961e4rf8kmo0/ul79aDaxKnVb9xJd/JTi1146H09K9Z4a3Gnc+JFe7v2teFv
/JbvTL2lz8vVar80b9xSvYShYSQtDeY3x2hDWMzuLF2Wd1PO4rq4UQyd/8Ry
9YHV4uXRuBn8qRbhaP6mnbx+v1xb/xRPepmH9Kd5Gi5GB4ttzdM8V6//rE15
Zgatj8HZelo/E451n3C1M9Mv5Vz4/8whLYxfr5qu91b/xdz4Ev90fo2xviCu
5NlWi/JanS8ciL+Z+/JB83nSa/mi1Vv7lLRaGIzfE8Y1P+rTcL593jPi3nRf
HFJMeyeu5Km33prZdcZrXgmX1ZBmQRqvGSYdzExe3qvOG9e0TPXTOc1w9SHt
jAdbH8v3ommq37yzeF3ijPcvHlr73Oq0s3S/dsHk/fxeO2d8b7Q0tRpGiiEs
jT/tjvVN26k1g/SQ1qRJ4784tmftQdvj1PetZ3fA9Hj70b/Gz/5bPFdf8vyX
msZDS4eUSzWpV4u1vkv86OytTX1XXTpvOnyZY4pN8euM+rb9b3kGK/lv7W+r
1XqaHTS7Rlr9ll+qSdiIP3m45bVcg6nFEqYXG/mXNE65iXeq3zBbjzQtqGd6
jOfWTqWYVMPuZMJIeVccLc70WHlG53a2Zrlmf53hy4PqGWztbO30W894qNUw
Gqd4s1Opb5vD+2tnY7S67NjiZ3a79U4YCEeqs3xoNCSPJMyrttF75VrsSQ+a
T6v3PhedCHPD9p63vo1vq9f2r80m3V32LeFJ+JYnUo/GgXiYnV2czKxTb4o1
XrO7Z/OsL9Y+kB4JizmzOTTLhn/5iTQgzk2Tqz4Ge+tDXC58V+2GZX2bvUs4
3nrk0d/M8uKdhtXOe/mp9SLMTTfDpeFdfVoP0nP1b1pRrYV56dIwrDkuzBet
qJb16cLetGq8qM911qRZev7IOS7upE/jv3okjktr0sX63dRKeJYeZg8pd3lv
+ZjeU43Wp/VbWjRu69vuwvIXeZP6ECazuzavabR20+xhq90wUg/C1naG5tnq
tl5vjzW3xIXOjO5fMLb8pcfisHKbpot7qt/iDM+fMdazy69tDu9DGtDZ8sCb
R/hMbVOreb3NzsYnbOShVDNhpjvjBcJynWnzy2UWqU/LpV2yvjCzaDWsd1qv
dmfnlHoknRqW9NBs2zlp3Poar6zeKbfFLZ837oRv9SMcFJNqtnk1bhSzfNb4
EhbjOepl7y57t2a9dvKNSxhpB2zvpoHRyNR+a6XH8F38Wj2Da+n4xjZetAMt
xzwtfs2PMK5440vCS3MkHBd9TZ90buZjPJXumtdoLstDxrsNN9W67knDbnd2
/c14Mab3hfP/3/9fMb6v3A==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {65536}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {5376}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {65536}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/5" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{256, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{5376}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{256, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{65536}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`AtomT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/8" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 256, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{21}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 11}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (Map[Sort, #]& ), 
                    "Net" -> <|
                    "Type" -> "NetMap", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Net" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Sort, "Net" -> None|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256}, 
                    NeuralNetworks`RealT]|>|>, "$SequenceLength" -> 256, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/12" -> <|
                    "Type" -> "Part", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> NeuralNetworks`ValidatedParameter[{
                    Span[1, -1], 128}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 256}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/13" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 64}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>|>,
                     "Loss/Harden" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_951cb4ef_b9b8_4c03_b2dc_8300212e3af6", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
YvobnhhBW2Yonrz3Qp5/A0+HIEVav1gZFTryRmrz0ht0TIamFTuy+xU2bKe5
2b5liuF/3UW5vmx9+SoZRMLtxJrgdrqx0Ph/0KedtwV5zlTZLdCiGSg/HQDf
nDZBabF7Nigg7CbQEf8g/XEYlt1KN95EhKyPiZ07hyFNzfxbDArRBCvEur5u
3o153NWQkcXJFrJbefaVcmmepiXKz6vk19ONdxL8/iS6pDSS20LCA1TJPaN0
+cG532jpfLfupYNT0gsC4M2H90ptr12Dr85RnHOYjKtR8uGfLuL8ggXZ+t3E
yPmJ75Qd5U5K6csMTHBw1yrTv0Yv2kT1hbCsEOlAUvinKFF+CNKlOPq/dwXA
AaSpN4r2FCriwPd8VGJUv9XIVxlw75xSQD5tBwnKPHyJcKebd8wJL+2W8b40
JXy9T70coXsK1qondhHo7k6UKdG9c/lfKaGM56CPj36qfl6hwkHGo69hf+PO
vXdYtndpvV2TYl4X70tjgrDDRi9BApD13Ep/JuriTZzEH7Mn5BL9j3KS4Uqa
O4SIfXdrhpYq4kRyqRaeC95aCp54KhQcoUnjX9tQEFAX4J4c0jF7fN+pbRi8
O+EfYbabH9CaJrebh8eEcScSxpXZmPnk6OpNsEvqVm2/mPm9y+HW0Dyl2bMP
ZzXYK9pcohuVOPVrqLeBrtQmhYED/Y9yCbe3qv6jPywcMiNxe60H77RX6Z0q
a/v8O2ABEirGNTG/qTdeUXsdEk3TMc76RW6633FYwCU238IXcGvQDlpq754u
Hs0ClToLYHEzG28bgITkeyg0L5DxtuoqBe7krwDnupXYOUy4KnMeqb0JGj4H
7+HUzTMwxNCbnYm9dooBWIWHjMnTy+TSytnA1YFDcnA17mqDHgbX6YcvyTtv
4GhtMR6D9Z+wQn2HO1vZ9fS6y7ib6IU2pcOAtVI/vrKXwarRDF/MgS/PNMdL
4MLXr7UlNoU6P4x0QkorVk7cu3ukDdzafRN8xRQn433YKC+PoykXPzcPDyQt
rXUJcvyC2MZIr8M3PBGG0gn4Nt78Q3JpI57wOELEfYua5oF5v8d39m6A5sTh
L51hnfaEyIHABb+gXyp9HPTUna+IID9WDC8c+Nflu9p/X6k7TU52ZX6lT6rD
79YVDl8QZ7FSJi7C+q9Ss98MRsjL9nmnkQimdzqN1N5KP7FbHY2H/DtgSb9c
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
7wBMGA9gApdvc4MzzEL+sm5hAVgsA8AiUmE0J1cAM13y7NiZdADr8UCjTf/1
L+vq7zaHGf49DsAGENjJb6/Mpqw1azh25hKABawBsFuzxtVbt0yA0fo0Aew/
U4PX0Z7DaCk7AKz45pSwR74bn94IrpsLuPUZAJg7E8Cm7YfRJrkBCYcArLUK
RsvYyqAT3zVAd4jPUNAd4kQWukOsQ9whZosnWUjJM1nKC8RCw6Pey4+6jWMH
UsXYJiqXkYz+J1WUckhEkfGPgo9/UQHdL7b+fL/YD7X9Jhj/3+4XK6/rKh//
83vA/2sjEfeEbfhW/P9yTxhdAEbfbWAXZ+HXfrW2CzRT6XTrIF90iO4cRgvO
cFMfgysSa0ZbqE7QuXJ8SV3FEtvSrEBd/ApuX7k49Fk2ib2TWs1zK1m7wNpi
w5+80pernfTjy7BiAYvpKtEiH3BOCaS48hkBP6a4Cqdwzi/ctt+IvOR4eMbZ
gFtmZhTbzGDBtwFNAQH7sMypXNo8be03GjYtGZLDpZSSIub8zeo3Mw+vYx0M
zHpZR93EuRigsZi/P5yTasenoCtL9uorSzsp6msrE8jOmcEWh4m7P9mUQxMO
r03+2YhG1X4uTsbyuNrqyzRvMNXFn2/3BehsMTw2LfM1JmBF0bQnPgcgLuUw
dn7JTJa7vjOW8qVfijM3JZxT1KLdjobBdNTD9KuHebhPoL/F8JQFfm8p8J2g
VGP7say3+88wB1u0LdA1G3RJC7/tRNJX33byZ/gEHhOeJZ/C70e9E3Rq2HGn
CraAJ/1aIJ7yirwcaDw7DtFooaGicbsxeU1m8MUrOI2bf6csNW4KOCY+O1sw
h6/Bsefmo/tQqavU96GqzMT71u4PHY/f47F0rq4I1N4y7ko4x2K1hQa607RG
eacpy3D/fya4mlE6VlRPKaW5t9CoghgW15auukkj3lVsSXLA71W8kPRrb+d7
ZVfqNhQL7p2hh4t16gSL+HmSrwJqjPU1zU/zn6RYVOjupExIW7g+q5rNoZZr
3ESnsjn4mdk3ZPX9CR2hY4W1WMKhlmrRZlnUaF3K1iyeehcr1SLNyCy2TDE8
QdzX1KXFZ3VRZlboSkmrSdFCx6JsUpQGVXXMd2EWZV6F9UGhIXHydnMA/ceF
2cWWQsPY0iKp21x0+vKg+oZrspP6aOsUdm6pJWXSRZgD6r/TKNN186u13PZp
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
EX7j/wD8BtoP
                    "]]|>, "orcInstance" -> 103273936, "orcModuleId" -> 
                    100010224, "targetMachineId" -> 68627520|>, 
                    140585460954944, 140585460954800, 140585460954880, 
                    140585460948992, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_b508ab89_e6ef_43c0_8679_2d34b6de152a", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
FBb+HbZWwBY=
                    "]]|>, "orcInstance" -> 100380944, "orcModuleId" -> 
                    61934080, "targetMachineId" -> 104191520|>, 
                    140585460941344, 140585460940944, 140585460941024, 
                    140585460940800, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {4, 64},
                     "$Batched" -> False, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "4e278e821357957f", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>|>,
                     "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 64}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/Harden", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 436480, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 16, 16, 29, 1.757447`6.997457225592082}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "low", 3, 2, "medium", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "very high", "low", 3, 4, "medium", "low"}, {
          "low", "high", 2, 2, "small", "low"}, {
          "low", "high", 3, 2, "small", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "high", 4, 4, "large", "low"}, {
          "very high", "high", 3, 2, "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "very high", "low", 3, 2, "medium", "low"}, {
          "high", "high", 3, 2, "medium", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "medium", "very high", 3, 4, "small", "low"}, {
          "medium", "medium", 2, 2, "medium", "medium"}, {
          "high", "medium", 2, 4, "large", "high"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "low", 3, 4, "medium", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "low", 2, 4, "small", "high"}, {
          "very high", "high", 2, 2, "medium", "high"}, {
          "high", "medium", 3, 4, "small", "high"}, {
          "medium", "high", 4, 4, "medium", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "medium", 3, 4, "large", "medium"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "high", 2, 4, "small", "low"}, {
          "medium", "very high", 3, 4, "small", "medium"}, {
          "medium", "very high", 3, 2, "large", "medium"}, {
          "medium", "high", 3, 2, "medium", "medium"}, {
          "low", "very high", 4, 2, "large", "high"}, {
          "medium", "medium", 2, 2, "small", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "very high", 2, 4, "medium", "low"}, {
          "medium", "very high", 2, 4, "small", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "low", "high", 2, 4, "large", "high"}, {
          "high", "low", 2, 4, "medium", "medium"}, {
          "high", "very high", 3, 2, "small", "medium"}, {
          "low", "medium", 4, 4, "small", "low"}, {
          "low", "medium", 2, 2, "small", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 4, "medium", "medium"}, {
          "very high", "low", 2, 2, "large", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "very high", 3, 2, "medium", "high"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "high", 3, 2, "large", "medium"}, {
          "low", "very high", 2, 4, "large", "low"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "medium", 3, 2, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "high", 4, 4, "small", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "low", 2, 2, "medium", "medium"}, {
          "medium", "high", 4, 4, "large", "high"}, {
          "very high", "low", 2, 4, "medium", "high"}, {
          "medium", "low", 4, 2, "large", "high"}, {
          "low", "low", 3, 4, "large", "medium"}, {
          "medium", "very high", 4, 4, "small", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "high", 4, 2, "medium", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "medium", 3, 2, "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "medium", 3, 2, "medium", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "very high", "very high", 3, 4, "medium", "high"}, {
          "low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "high", 4, 2, "medium", "medium"}, {
          "high", "high", 2, 2, "large", "high"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 4, "medium", "high"}, {
          "low", "very high", 3, 4, "large", "low"}, {
          "medium", "low", 3, 4, "medium", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "very high", "low", 4, 4, "large", "low"}, {
          "very high", "very high", 2, 2, "small", "medium"}, {
          "low", "medium", 3, 2, "small", "low"}, {
          "low", "medium", 2, 2, "medium", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "low", 4, 2, "small", "low"}, {
          "high", "very high", 4, 2, "small", "low"}, {
          "very high", "medium", 3, 2, "medium", "medium"}, {
          "very high", "low", 2, 2, "small", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "low", "medium", 3, 4, "large", "high"}, {
          "high", "low", 2, 2, "large", "low"}, {
          "high", "very high", 3, 2, "large", "high"}, {
          "high", "high", 2, 2, "large", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "high", 4, 2, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "low", "low", 4, 4, "small", "high"}, {
          "very high", "low", 4, 2, "large", "high"}, {
          "medium", "high", 4, 2, "large", "medium"}, {"high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 3, 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "low", 3, 4, "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 2, "medium", "low"}, {
          "very high", "medium", 4, 2, "large", "high"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "high", 4, 4, "medium", "low"}, {
          "medium", "low", 4, 2, "small", "low"}, {"very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "very high", 3, 4, "large", "medium"}, {
          "medium", "high", 3, 4, "small", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "high", "medium", 4, 2, "medium", "medium"}, {
          "high", "high", 2, 2, "medium", "low"}, {
          "medium", "low", 2, 4, "medium", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "high", "high", 4, 2, "small", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "very high", 3, 4, "medium", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "high", 3, 4, "medium", "high"}, {
          "high", "low", 4, 4, "medium", "low"}, {"high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 2, 4, "large", "high"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 4, 2, "small", "high"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 4, 4, "small", "low"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "high", 3, 2, "medium", "medium"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "high", 2, 2, "small", "high"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 2, 4, "small", "low"}, {
          "medium", "high", 2, 4, "small", "high"}, {
          "medium", "high", 4, 4, "medium", "medium"}, {
          "very high", "medium", 3, 2, "small", "medium"}, {
          "low", "high", 2, 2, "small", "medium"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "low", 2, 2, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "very high", 4, 2, "large", "low"}, {
          "medium", "medium", 4, 2, "large", "high"}, {
          "very high", "high", 4, 4, "medium", "medium"}, {
          "very high", "medium", 4, 4, "medium", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 3, 4, "small", "high"}, {
          "very high", "low", 3, 2, "small", "high"}, {
          "very high", "medium", 4, 2, "medium", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 4, 2, "medium", "medium"}, {
          "medium", "medium", 2, 2, "medium", "low"}, {
          "medium", "low", 4, 2, "medium", "medium"}, {
          "high", "high", 4, 4, "large", "medium"}, {"high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "very high", 4, 2, "large", "high"}, {
          "very high", "medium", 4, 4, "small", "medium"}, {
          "low", "medium", 4, 2, "small", "medium"}, {
          "medium", "high", 2, 2, "medium", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "low", "low", 2, 2, "large", "medium"}, {"medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "high", "low", 3, 2, "medium", "medium"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "high", "medium", 2, 2, "large", "medium"}, {
          "medium", "high", 3, 2, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "medium", "medium", 3, 4, "small", "high"}, {
          "low", "medium", 4, 2, "medium", "medium"}, {
          "low", "low", 3, 2, "large", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "medium", "very high", 2, 4, "large", "medium"}, {
          "high", "very high", 3, 4, "medium", "high"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "high", 2, 4, "large", "high"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {
          "very high", "medium", 4, 4, "large", "high"}, {
          "medium", "very high", 3, 4, "medium", "medium"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "high", 4, 4, "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 2, "medium", "low"}, {
          "low", "high", 4, 2, "small", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "low", "low", 2, 4, "medium", "medium"}, {
          "low", "high", 4, 4, "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 3, 4, "medium", "medium"}, {
          "high", "high", 4, 4, "small", "high"}, {
          "high", "high", 3, 4, "medium", "medium"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 3, 4, "medium", "low"}, {
          "very high", "medium", 2, 4, "medium", "high"}, {
          "very high", "very high", 4, 2, "small", "medium"}, {
          "very high", "high", 2, 2, "medium", "medium"}, {
          "very high", "high", 2, 2, "large", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "low", 3, 2, "small", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 2, 4, "large", "medium"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 3, 4, "small", "low"}, {
          "high", "very high", 4, 2, "medium", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "very high", 3, 2, "medium", "high"}, {
          "high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 4, 2, "small", "low"}, {
          "high", "high", 4, 2, "small", "low"}, {
          "high", "medium", 2, 4, "medium", "high"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 3, 4, "large", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "low", 3, 4, "large", "high"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "very high", "high", 3, 2, "small", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {"medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "low", 4, 2, "small", "low"}, {
          "very high", "very high", 3, 2, "large", "medium"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "high", 3, 2, "small", "high"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 2, 2, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "low", 4, 2, "medium", "high"}, {
          "high", "very high", 2, 2, "small", "medium"}, {
          "high", "high", 3, 4, "large", "high"}, {
          "low", "low", 2, 2, "small", "high"}, {
          "high", "low", 3, 4, "small", "medium"}, {
          "very high", "low", 4, 4, "small", "low"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "high", "high", 4, 4, "small", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "medium", 4, 4, "medium", "high"}, {
          "medium", "medium", 4, 4, "medium", "low"}, {
          "high", "low", 2, 2, "small", "medium"}, {"medium", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 4, "medium", "medium"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "high", 3, 2, "large", "high"}, {
          "high", "high", 2, 4, "small", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "medium", "high", 4, 4, "large", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "low", 2, 4, "medium", "medium"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "low", 4, 2, "large", "high"}, {
          "medium", "medium", 3, 4, "large", "medium"}, {
          "very high", "very high", 3, 2, "small", "medium"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "very high", 4, 2, "medium", "high"}, {
          "low", "very high", 4, 4, "medium", "low"}, {
          "low", "medium", 3, 4, "medium", "low"}, {
          "very high", "high", 3, 4, "large", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "very high", "very high", 2, 4, "large", "high"}, {
          "medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "low", 2, 2, "large", "medium"}, {
          "very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "low", "medium", 4, 2, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "medium", 4, 2, "medium", "low"}, {
          "high", "low", 2, 4, "small", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "low", 4, 4, "small", "high"}, {
          "high", "high", 4, 2, "small", "medium"}, {
          "high", "very high", 3, 2, "medium", "high"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}}, 
        "Output" -> {
         "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "acceptable", 
          "acceptable", "very good", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", "good", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "good", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "very good", 
          "acceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "good", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", "good",
           "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable"}|>, 
      "Predictions" -> {
       "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", "good", 
        "unacceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", "good", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "acceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "acceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "good", "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable"}, "LogProbabilities" -> CompressedData["
1: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
X02kY16n8P8Bd2jQew==
       "], 
      "CountMatrix" -> {{223, 13, 3, 1, 0}, {19, 54, 1, 4, 0}, {0, 2, 6, 3, 
       0}, {2, 3, 2, 10, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwl0tlPDwAAAOBfpUilkGrLTUqpllUrKUVITKJ0zBnLXTPMhjk3DwobVpsx
nrBhM5uNmXmINowYS6wcD5hZ5ti8Ob7Nw/cffOMamhc3BQUCgbcEE8IAQglj
IIMIJ4JIohhCNDEMZRjDiWUEcSSQyCgmMJEkkkkhlTSmkE4GmWSRTQ655JHP
NAqYTiFFFFNCKXMpo5wFVFBJFdXUUEsd9SxjOStYySpW08Aa1tLIOtazgY1s
YjNbaKKZrWxjOzvYyS52s4e97GM/BzjIIQ5zhBZaOcoxjnOCk5yijXZOc4az
nOM8F7jIJS5zhatc4zo3uMktbnOHu3Rwj/t08oCHPOIxT+jiKc94zgu6eUkP
r3hNL328Cfy/9I73fOAjn/jMF/r5yje+84Of/OI3f/hLkJjBhBBKGOEMJoJI
oogmhljiSSCRkYxmDGMZTxKTSGYyaWSQSRZTySaXPPIpoJAZFFPCTGZRymzm
UMY8ypnPQipYRCVLqKKapdRQRz3/ADn/XE8=
         "], {25, 41, 48, 51, 69, 86, 155, 175, 228, 251, 260, 274, 298}, {
         190, 239, 292}, {332}, {}}, {{33, 125, 137, 144, 145, 162, 182, 192, 
         194, 199, 204, 245, 270, 273, 291, 296, 304, 309, 311}, {1, 10, 23, 
         26, 30, 31, 32, 55, 66, 67, 70, 73, 77, 78, 83, 101, 112, 118, 120, 
         133, 135, 158, 161, 164, 169, 170, 174, 177, 180, 183, 186, 193, 219,
          226, 227, 232, 234, 236, 244, 248, 249, 250, 252, 256, 263, 277, 
         278, 281, 300, 301, 307, 318, 327, 344}, {153}, {132, 149, 247, 
         275}, {}}, {{}, {213, 285}, {50, 114, 163, 210, 289, 314}, {34, 63, 
         179}, {}}, {{28, 91}, {188, 333, 338}, {165, 316}, {38, 75, 80, 82, 
         121, 136, 152, 200, 264, 282}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "acceptable", "very good", "good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0010118121387283235`, "SingleEvaluationTime" -> 
      0.006542125, "Version" -> {13.1, 0}|>]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9, 
   3.8685204529294043`*^9, 3.8685215146011333`*^9, 3.8685301612497177`*^9, 
   3.868530590591856*^9, 3.86853261496434*^9, 3.8685338436228123`*^9, {
   3.868535643570589*^9, 3.868535653266458*^9}, 3.86853620504729*^9, 
   3.868536647435892*^9, 3.8685368910591183`*^9, 3.868536956624065*^9, 
   3.868537492992119*^9, {3.8685379158969793`*^9, 3.868537942476584*^9}, 
   3.8685921415849247`*^9, 3.868599486276321*^9, 3.86860013955028*^9, 
   3.8686009455378437`*^9, 3.868601165154408*^9, 3.868602872755411*^9, 
   3.868604168888167*^9, 3.8686705600345984`*^9, 3.868672040003127*^9, 
   3.868681397928339*^9, 3.868938938636381*^9, 3.8689425626275787`*^9, 
   3.868943546605094*^9, 3.86894388526086*^9, 3.868944114037065*^9, 
   3.868944544993232*^9, 3.868945583119274*^9, 3.868945795964314*^9, 
   3.868946090455439*^9, 3.868946301277932*^9, 3.868946812077159*^9, 
   3.868947529554852*^9, 3.868948234247651*^9, 3.868949916263268*^9, 
   3.86895035411582*^9, 3.868950591820963*^9, 3.868955715946851*^9, 
   3.8689590912506847`*^9, 3.868961292873067*^9, {3.868964211642971*^9, 
   3.868964271971294*^9}, 3.8689658659417048`*^9, 3.868975187773774*^9, 
   3.868975807387333*^9, 3.869030236615261*^9, 3.869030576485284*^9, 
   3.8690318983554163`*^9, 3.8690322955085077`*^9, 3.8690328949105043`*^9, 
   3.869033235901104*^9, 3.869033495671227*^9, 3.869034576712833*^9, 
   3.869035610130576*^9, 3.8690361433581657`*^9, 3.869036324430427*^9, 
   3.869036425981944*^9, 3.8690403482379503`*^9, 3.869040564944063*^9, 
   3.869041421524418*^9, 3.869041561340787*^9, 3.869041673839971*^9, 
   3.8690421991522627`*^9, 3.869042855424157*^9, 3.86904326803651*^9, 
   3.869043554339016*^9, 3.869043746795423*^9, 3.869105420473537*^9, 
   3.869105653283306*^9, 3.869105982326734*^9, 3.869107184493881*^9, 
   3.869108234728773*^9, 3.869111749761622*^9, {3.869111919016803*^9, 
   3.8691119399060993`*^9}, 3.869112356812172*^9, 3.869112702187408*^9, {
   3.869112904171596*^9, 3.869112930067875*^9}, {3.8691133852077427`*^9, 
   3.869113414126828*^9}, {3.869121126953014*^9, 3.8691211520853*^9}, {
   3.869121847143949*^9, 3.86912185561662*^9}, 3.869203188780602*^9, {
   3.8692071057867537`*^9, 3.86920713930786*^9}, 3.869207400202592*^9, {
   3.869207739721821*^9, 3.8692077456111937`*^9}, {3.869207952002699*^9, 
   3.869207963437224*^9}, 3.8692080125106792`*^9, {3.869208714713435*^9, 
   3.869208729773431*^9}, 3.869209077756652*^9, 3.8692094954446297`*^9, {
   3.869210938078933*^9, 3.8692109446365433`*^9}, 3.869211902166511*^9, {
   3.869213234631062*^9, 3.8692133334937763`*^9}, {3.869214218655706*^9, 
   3.869214223564402*^9}, 3.869215458371559*^9, {3.869215992069166*^9, 
   3.869216010528124*^9}, 3.869216652211252*^9, 3.8692170070767508`*^9, 
   3.8692173280534887`*^9, {3.869217675130456*^9, 3.869217685513886*^9}, {
   3.8692180388130713`*^9, 3.8692180459383907`*^9}, {3.869219076882539*^9, 
   3.8692191672841787`*^9}, 3.869219428759843*^9, {3.869219704836887*^9, 
   3.869219710189546*^9}, {3.869281650336409*^9, 3.869281656282543*^9}, 
   3.869292838989414*^9, 3.8696410838252277`*^9, {3.869642408118239*^9, 
   3.8696424286143847`*^9}, 3.869642755347784*^9, 3.8696432269045877`*^9, 
   3.869643433213999*^9, 3.869643780899444*^9, 3.869645951169808*^9, 
   3.869650675377988*^9, 3.869651296119297*^9, 3.869652542480788*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"537f68ac-abd2-4a29-90d1-3bb14dea0053"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedHardNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}, {3.869121279126927*^9, 
   3.869121279479135*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "testData", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"featureLayer", "[", 
       RowBox[{"KeyDrop", "[", 
        RowBox[{"#", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "&"}], ",", 
     RowBox[{
      RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}], "&"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.869292984681349*^9, 3.8692931365040483`*^9}, {
  3.869293202450193*^9, 3.869293235535232*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"3da3f85d-50c5-45aa-934b-1a84fa5781af"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"eval", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}, {
   3.868530047989657*^9, 3.868530063111247*^9}, {3.868530190826717*^9, 
   3.868530196600292*^9}, {3.86853144384466*^9, 3.868531451560924*^9}, {
   3.868532766824644*^9, 3.8685327949413958`*^9}, 3.868532945602283*^9, {
   3.868533874444491*^9, 3.8685338747929583`*^9}, {3.868604441984084*^9, 
   3.8686044511364*^9}, {3.8689602387396393`*^9, 3.8689602481032057`*^9}, {
   3.868960681250607*^9, 3.8689606824317408`*^9}, {3.868963143100669*^9, 
   3.868963145210929*^9}, 3.86896321844506*^9, {3.868976255892177*^9, 
   3.868976256410039*^9}, 3.8689764091880903`*^9, {3.869034393625832*^9, 
   3.86903439400725*^9}, {3.869043275878063*^9, 3.8690432774187603`*^9}, {
   3.86921972941183*^9, 3.869219743506506*^9}, {3.869281678616239*^9, 
   3.8692816957755537`*^9}, {3.869292976318449*^9, 3.869292982925337*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[BoxData["0.8410404624277457`"], "Output",
 CellChangeTimes->{
  3.8690345877152042`*^9, 3.869035626521063*^9, 3.869036152783195*^9, 
   3.8690363341385193`*^9, 3.869036436421172*^9, 3.869040357729239*^9, 
   3.869040576634907*^9, 3.869041433742779*^9, 3.8690415722677*^9, 
   3.8690416867128763`*^9, 3.86904220858243*^9, 3.8690432824600554`*^9, 
   3.869043562445753*^9, 3.869043754721044*^9, {3.869047065454893*^9, 
   3.869047090738934*^9}, 3.8690471518063593`*^9, 3.869047184930591*^9, 
   3.8690472207124777`*^9, 3.8690472595671577`*^9, 3.8690473069192467`*^9, 
   3.869047356173808*^9, 3.869104541974283*^9, 3.8691049803090754`*^9, 
   3.869105042273468*^9, 3.869105162486998*^9, 3.8691054315005198`*^9, 
   3.8691056671929417`*^9, 3.869105994037698*^9, 3.869107195753681*^9, 
   3.8691117585270443`*^9, 3.8691119669156637`*^9, 3.869121285329372*^9, 
   3.869208833562628*^9, 3.869209098161392*^9, 3.8692095035118723`*^9, 
   3.869210954522581*^9, 3.869211920142223*^9, 3.869213356256194*^9, 
   3.869214236948101*^9, 3.869215471853537*^9, 3.869216022517696*^9, 
   3.86921666275205*^9, 3.869217020007245*^9, 3.8692173416096373`*^9, 
   3.869217703374105*^9, 3.869218056194668*^9, 3.8692194468167562`*^9, {
   3.869219736012184*^9, 3.869219746378594*^9}, 3.869281699345985*^9, 
   3.869293239954982*^9, 3.869641122184824*^9, 3.869642458072299*^9, 
   3.869642787808694*^9, 3.869643257866144*^9, 3.869643479013624*^9, 
   3.869643821805698*^9, 3.869646089554126*^9, 3.869650749932865*^9, 
   3.8696507885668716`*^9, 3.8696509605982437`*^9, 3.869651313092507*^9, 
   3.869652663887562*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"6abd5548-024e-4dda-bfca-f8cca1bc0601"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Association", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Prediction\>\"", "->", 
         RowBox[{"trainedHardNet", "[", 
          RowBox[{
           RowBox[{"KeyDrop", "[", 
            RowBox[{"{", "\"\<Acceptability\>\"", "}"}], "]"}], "@", "#"}], 
          "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "->", 
         RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}]}]}], "}"}], "]"}], 
     "&"}], "/@", 
    RowBox[{"Normal", "[", "testData", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eval2", "=", 
   RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "[", "\"\<Accuracy\>\"", "]"}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}, {3.869121310826304*^9, 3.869121313255774*^9}, {
  3.869219749034794*^9, 3.869219752143724*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],

Cell[BoxData["0.8410404624277457`"], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9, 
   3.869105434085964*^9, 3.869105669300963*^9, 3.869105996859831*^9, 
   3.869107199042075*^9, 3.869111759364867*^9, 3.869111970506278*^9, {
   3.869121299804845*^9, 3.869121316611709*^9}, 3.8692088360902042`*^9, 
   3.86920910005622*^9, 3.869209505631686*^9, 3.869210957184381*^9, 
   3.869211922653748*^9, 3.869213358735955*^9, 3.869214238649056*^9, 
   3.8692154737290087`*^9, 3.869216025505147*^9, 3.8692166649342213`*^9, 
   3.8692170219382353`*^9, 3.869217343847763*^9, 3.8692177067848663`*^9, 
   3.869218058215096*^9, 3.869219448602796*^9, 3.869219753147689*^9, 
   3.8692817014660397`*^9, 3.8692932434109373`*^9, 3.869641124299802*^9, 
   3.8696424595787277`*^9, 3.869642789251828*^9, 3.8696432594825153`*^9, 
   3.869643480889119*^9, 3.869643823403762*^9, 3.8696460912872143`*^9, 
   3.8696509625586653`*^9, 3.869651314560199*^9, 3.869652665647365*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"efc7f34e-72b7-498e-8c00-98d6f037059b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],

Cell[BoxData[
 TemplateBox[{"0.65625`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9, 
   3.869105674742872*^9, 3.8692091039680862`*^9, 3.869210963050486*^9, 
   3.8692119248338833`*^9, 3.869213361375114*^9, 3.869215475324996*^9, 
   3.869219517507464*^9, 3.869219756735735*^9, 3.869281703543564*^9, 
   3.869293245157888*^9, 3.869646098493256*^9, 3.8696513177817183`*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"99db01da-efb3-4742-9bfa-7a8ebe87128d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNetBooleanExpression", "[", 
   RowBox[{"hnf", ",", "inputSize"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
   3.869031937904567*^9, 3.869031943129614*^9}, {3.869121341559927*^9, 
   3.869121348104578*^9}, {3.869210965421191*^9, 3.869210971914925*^9}, 
   3.869219529425714*^9, 3.869219571948317*^9, 3.8696461009999447`*^9, 
   3.869646142576202*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"85881d34-aa2c-47a4-9cef-\
231d0c092462"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Acceptability\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Memory\>\"", ",", "\"\<Quality\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}, {
  3.8692109926431*^9, 3.869210996642137*^9}},
 CellLabel->
  "In[421]:=",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1382", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
           "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
           "Doors" -> <|"Type" -> "Nominal"|>, 
           "Passengers" -> <|"Type" -> "Nominal"|>, 
           "Cargo" -> <|"Type" -> "Nominal"|>, 
           "Safety" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
                  "Cargo", "Safety"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1382, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                   0.5381047338323698, 0.31349173058168534`}, {
                   0.2878959194482099, 
                   0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                   0.2578066194971254, 
                   0.4093083635172316, -0.7050063333319737, 
                   0.08206678121922453, -0.2152687718915405, 
                   0.46464274419035045`}, {
                   0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                   0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                   0.3669612074237795, -0.03875817355088801, 
                   0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                   0.5767907589006783, 0.1852877321886701, 
                   0.21134659605041434`, 0.33089384854127}}, 
                  "Precisions" -> {11.396708918937332`, 11.702295237769018`, 
                   11.751709980827822`, 12.269447018561033`, 
                   12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                  None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Mean" -> {-0.0027242377292722524`, -0.0004734344948340772,
                     0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                   "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 6, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   7052420854593502203|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 1301520, 
                  "DataMemory" -> 446480, "FunctionMemory" -> 62320, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.5374646114340518`, -1.5374646114340518`, \
-1.4481495799387802`, -1.3901532053842829`, -1.3900959198753926`, \
-1.3059537438182822`, -1.239089852169043, -1.2261733685503937`, \
-1.2132739652746585`, -1.169323039076807, -1.1079994773194297`}, 
                   "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                   0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[7.816606057704673, 0.25703225729782303`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Index" -> {<|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                   DirectedInfinity[1]}] -> 4|>, <|
               2 -> 1, 4 -> 2, Interval[{5, 
                   DirectedInfinity[1]}] -> 3|>, <|
               "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.12314196676015854`, -0.861851692199707, 
                0.10532767325639725`}, {
                0.8298183679580688, -0.28949323296546936`, 
                0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                0.38437455892562866`, -0.8375512361526489, 
                0.1422276645898819}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                0.4795919358730316}, {
                0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                0.2534555494785309, -0.4526385962963104}, {
                0.3543681204319, -0.37547722458839417`, 
                0.5876661539077759}, {-1.1276206970214844`, 
                0.17602579295635223`, -1.0098364353179932`}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.24657385051250458`, -0.8256815671920776, 
                0.8846340179443359}, {0.6182233691215515, 
                0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.34666627645492554`, -0.5679200291633606, 
                0.10750995576381683`}, {
                0.6412044167518616, -0.1759643256664276, 
                0.6604856848716736}, {-0.8092290163040161, 
                0.12987354397773743`, -1.1753407716751099`}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                0.12715618312358856`, 0.1291729062795639}, {
                0.21379514038562775`, -0.6005780100822449, 
                0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
             272386066020895428|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                "very good" -> 4|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113, 
        "unacceptable" -> 0.7012987012987013, "very good" -> 
        0.03896103896103896|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Acceptability", 
          "Order" -> {
           "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", "Cargo",
             "Safety", "Acceptability"}|>], "PreferLabeled" -> True, 
       "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> None, 
    "ImputationStrategy" -> Automatic, "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
    Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                 0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                 0.09347633272409439, 0.20684024691581726`, 
                 0.00729140592738986, -0.3824177384376526, 
                 0.2153223156929016, -0.46700865030288696`, 
                 0.21194063127040863`, 
                 0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                 0.07883942127227783, -0.375686913728714, 
                 0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                 0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                 0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                 0.1690395474433899, -0.28660914301872253`, 
                 0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                 0.17016777396202087`, -0.32100844383239746`, 
                 0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               18, "$InputDimensions" -> {18}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                "], "Biases" -> 
               RawArray["Real32",{-0.23329688608646393`, 0.1376294195652008, 
                 0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                 0.1361909657716751, -0.07115011662244797, 
                 0.0030301439110189676`, 0.04029219597578049, 
                 0.05379099026322365, 
                 0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                 0.0140318488702178, 
                 0.18612468242645264`, -0.17168177664279938`, 
                 0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                 0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                 0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                 0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                 0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                 0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "7" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                "], "Biases" -> 
               RawArray["Real32",{-0.30062639713287354`, 0.12008462101221085`,
                  0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                 0.09417349845170975, -0.10099706798791885`, 
                 0.08236243575811386, -0.2349618673324585, 0.1114811822772026,
                  0.2365228235721588, -0.1581137776374817, 
                 0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                 0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                 0.08413115888834, -0.2386404424905777, 
                 0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                 0.017599068582057953`, -0.16277392208576202`, 
                 0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                 0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                 0.048794329166412354`, -0.2748609185218811, 
                 0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                 0.15255072712898254`, -0.054961107671260834`, 
                 0.12484297901391983`, -0.013735197484493256`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "10" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{-0.18632154166698456`, -0.05518893152475357,
                  0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                 0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                 0.12943300604820251`, 
                 0.21619535982608795`, -0.12615013122558594`, 
                 0.12520363926887512`, 0.1943180412054062, 
                 0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                 0.12467250972986221`, -0.3208949565887451, 
                 0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                 0.16070689260959625`, -0.07001221925020218, 
                 0.07522184401750565, 
                 0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                 0.24120552837848663`, -0.04254811629652977, 
                 0.19626277685165405`, 0.04852093756198883}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "11" -> <|
            "Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "12" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                "], "Biases" -> 
               RawArray["Real32",{0.18740198016166687`, -0.1249600350856781, 
                 0.03215433284640312, -0.2378043681383133}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
        19653.548073458904`|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "Mean" -> {0.23124615267859935`, -0.72822837729203, 
              0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
              0.10517240908924025`, -0.24024309043728495`, 0.3074998656424723,
               0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
              0.3879769949206493}, 
             "StandardDeviation" -> {0.42336656209659007`, 0.2672799034098392,
               0.07124798075524297, 0.36989547912470067`, 
              0.17138659393602926`, 0.5155818183543911, 0.688893371869374, 
              0.24977193740899778`, 0.6403849334448501, 0.4897664046907167, 
              0.46819109868519837`, 0.43423173863577835`, 0.6276718952348702, 
              0.28383206529853633`, 0.7719651260033509, 0.09756213850198994, 
              0.2950767752080472, 0.22147755480753964`}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, "Key" -> 
             "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
         Around[0.9926698116140742, 0.007247173785702781], "EvaluationTime" -> 
         0.0002390132437947042, "TestSize" -> 276, "ModelMemory" -> 101904, 
         "ModelUtility" -> 5.3529526868256205`, "TrainingSize" -> 1106, 
         "TrainingTime" -> 50.11872336272725, "TrainingMemory" -> 1025056, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.021350027675851042`, 0.008527240234488089]}, 
         "AccuracyHistory" -> {
           Around[0.9926698116140742, 0.005124525728307819]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           4, "NumberOfParameters" -> 8600, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
              Around[0.5039356498747214, 0.011280914837970198`], 
              "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 2744, 
              "ModelMemory" -> 101904., "ModelUtility" -> -5.255034068743364, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 474568., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[3.3682246428941447`, 0.11709052181782027`], 
                Around[5.718797544659934, 0.1974406032409913]}, 
              "AccuracyHistory" -> {
                Around[0.4977980114632854, 0.013422541870627485`], 
                Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
              Around[0.7731731038259634, 0.010538572727576656`], 
              "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 2532, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
              461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.0207920682675256`, 0.13567904919872614`], 
                Around[1.989358115693642, 0.12729332292504641`]}, 
              "AccuracyHistory" -> {
                Around[0.7666435334598815, 0.01212548962300386], 
                Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
              Around[0.8754721532521594, 0.013799020363039234`], 
              "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.6640374106578726`,
               "TrainingSize" -> 250, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 580856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7727930479153965, 0.07355983104423623]}, 
              "AccuracyHistory" -> {
                Around[0.8754721532521594, 0.009757380872436296]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.021350027675851042`, 0.012059338789226588`], 
              "Accuracy" -> Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.021350027675851042`, 0.008527240234488089]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
             Around[0.021350027675851042`, 0.012059338789226588`], 
             "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
             "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1638549337103177`, 0.10037145501929841`], "Accuracy" -> 
              Around[0.5492390926678674, 0.023756280779855192`], 
              "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 1300, 
              "ModelMemory" -> 62416., "ModelUtility" -> -2.4356505013181984`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 315949.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0659744269130655`, 0.06346538833801657], 
                Around[1.2617354405075698`, 0.023724306617050557`]}, 
              "AccuracyHistory" -> {
                Around[0.5686355009414037, 0.0494049938117882], 
                Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
              Around[0.34906013350595955`, 0.01773043247078872], 
              "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 2744,
               "ModelMemory" -> 62416., 
              "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
              288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.7284854644248697`, 0.024470278570364008`], 
                Around[1.7449836721317225`, 0.02985267016659267]}, 
              "AccuracyHistory" -> {
                Around[0.333797137166834, 0.012654176408351573`], 
                Around[0.364323129845085, 0.01286858453924453]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7297176649588678, 0.030635251566725513`], "Accuracy" -> 
              Around[0.7731352673792209, 0.01749760840751051], 
              "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.4608603411176038`,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 430312, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7297176649588678, 0.021662394126187413`]}, 
              "AccuracyHistory" -> {
                Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
              Around[0.8462070332421717, 0.03062402709723611], 
              "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> -0.1999951890132391, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 882408, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.38327177587574507`, 0.029923508235575796`]}, 
              "AccuracyHistory" -> {
                Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020558565549557822`, "MeanCrossEntropy" -> 
             Around[0.38327177587574507`, 0.0423182311805343], "ModelMemory" -> 
             62416, "TrainingMemory" -> 882408, "TrainingTime" -> 
             1.2870992522366111`|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.35435313401532587`, 0.026162924108051638`], "Accuracy" -> 
              Around[0.8602959769418544, 0.016276096618821716`], 
              "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900, 
              "ModelMemory" -> 58320, 
              "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 250,
               "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35435313401532587`, 0.018499981052472317`]}, 
              "AccuracyHistory" -> {
                Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
              Around[0.4905470789487266, 0.05942169230008629], 
              "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 2672,
               "ModelMemory" -> 58320., "ModelUtility" -> -4.197660943845806, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 273552., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5949653673903932`, 0.05337852556796832], 
                Around[3.769761211170389, 0.12190065068836999`]}, 
              "AccuracyHistory" -> {
                Around[0.549197732950539, 0.013394029354165352`], 
                Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
              Around[0.7442585992282589, 0.013337895880245353`], 
              "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 2632,
               "ModelMemory" -> 58320., 
              "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              308650.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7090566921048821, 0.029587871638874982`], 
                Around[0.9267562156706394, 0.048804806717094945`]}, 
              "AccuracyHistory" -> {
                Around[0.7339496000489554, 0.012070557593356287`], 
                Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
              Around[0.9791671208169963, 0.012128533944401654`], 
              "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07118410180594256, 0.013542997191503502`]}, 
              "AccuracyHistory" -> {
                Around[0.9791671208169963, 0.008576168597937634]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
             Around[0.07118410180594256, 0.01915269030340499], "ModelMemory" -> 
             58320, "TrainingMemory" -> 945064, "TrainingTime" -> 
             6.2334652825440156`|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
              Around[0.838474265252356, 0.01562338483938151], 
              "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 1100, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 250, 
              "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 845536, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4150311982338223, 0.022874520429674614`]}, 
              "AccuracyHistory" -> {
                Around[0.838474265252356, 0.011047401365013764`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.9363303357963932`, 0.22063573174865092`], "Accuracy" -> 
              Around[0.6016657435215405, 0.009931734042792198], 
              "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 2400, 
              "ModelMemory" -> 187664., "ModelUtility" -> -4.394526005243066, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.8628854898161876, 
              "TrainingMemory" -> 768069.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7328302955198254`, 0.11030764480200886`], 
                Around[3.1398303760729616`, 0.1343428411885501]}, 
              "AccuracyHistory" -> {
                Around[0.6013282055836575, 0.014050468348716146`], 
                Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
              Around[0.7771993076355267, 0.016090257916624478`], 
              "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.4133613417100643`,
               "TrainingSize" -> 50, "TrainingTime" -> 1., "TrainingMemory" -> 
              768752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0883077850611167`, 0.06546404015990553]}, 
              "AccuracyHistory" -> {
                Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
             Around[1.0883077850611167`, 0.09258013344187536], "ModelMemory" -> 
             187664, "TrainingMemory" -> 768752, "TrainingTime" -> 
             16.33188643150958|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.06349687324568681, 0.020314194118190455`], "Accuracy" -> 
              Around[0.9752187821898789, 0.013178658637319573`], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.1990832337140014`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 1031984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06349687324568681, 0.014364304415312347`]}, 
              "AccuracyHistory" -> {
                Around[0.9752187821898789, 0.009318718889391335]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
              Around[0.5614696628952743, 0.02316984504064622], 
              "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 1900, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.375448364812931, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 588357.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2425860137311924`, 0.09670887865815357], 
                Around[3.472752094517207, 0.15761956845763322`]}, 
              "AccuracyHistory" -> {
                Around[0.5412325518696653, 0.01645230430382249], 
                Around[0.5817067739208833, 0.01550253065862414]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
              Around[0.7822399753364762, 0.011053793618809461`], 
              "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 2632, 
              "ModelMemory" -> 164368., "ModelUtility" -> -3.09292339195906, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.9314427449080938, 
              "TrainingMemory" -> 599973.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1299535489778723`, 0.07202244880796001], 
                Around[1.862147339889153, 0.11678580277280175`]}, 
              "AccuracyHistory" -> {
                Around[0.7898676324542127, 0.011253506706433129`], 
                Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.42705750837440937`, 0.035076829136806445`], "Accuracy" -> 
              Around[0.8446730233225903, 0.015135382766381485`], 
              "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 1132, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.5213181632194831, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 668632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.42705750837440937`, 0.024803063745157707`]}, 
              "AccuracyHistory" -> {
                Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
             Around[0.42705750837440937`, 0.035076829136806445`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
             "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.29713763668876286`, 0.029783149124946628`], "Accuracy" -> 
              Around[0.8857231716276136, 0.013316951171936615`], 
              "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.27080207566416914`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 518544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.29713763668876286`, 0.02105986671133995]}, 
              "AccuracyHistory" -> {
                Around[0.8857231716276136, 0.00941650647840652]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
              Around[0.4534728434064575, 0.03657154854139636], 
              "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 2200, 
              "ModelMemory" -> 93800., "ModelUtility" -> -4.7036563931676705`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.5848931924611134`, 
              "TrainingMemory" -> 372712., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.8582879282812748`, 0.09593272842945073], 
                Around[4.168810776492888, 0.14832220789749126`]}, 
              "AccuracyHistory" -> {
                Around[0.4184413958301533, 0.015453697183599058`], 
                Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
              Around[0.769971120234303, 0.0162893024591907], "EvaluationTime" -> 
              0.00006291890573589659, "TestSize" -> 1332, "ModelMemory" -> 
              93800, "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 
              50, "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2977572298050588`, 0.07725242580096887]}, 
              "AccuracyHistory" -> {
                Around[0.769971120234303, 0.01151827622969245]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
             Around[1.2977572298050588`, 0.1092514282939514], "ModelMemory" -> 
             93800, "TrainingMemory" -> 386192, "TrainingTime" -> 
             25.884295625347566`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5879853515835944`, 0.14718023198397873`], "Accuracy" -> 
              Around[0.7939162815913106, 0.015646642549432373`], 
              "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -3.152069743372218, 
              "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 600288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5879853515835944`, 0.10407214009248054`]}, 
              "AccuracyHistory" -> {
                Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
              Around[0.5705716928210636, 0.02387696402198573], 
              "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 2100, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.803632164263322, 
              "TrainingSize" -> 10, "TrainingTime" -> 5.444439372449127, 
              "TrainingMemory" -> 583613.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.6845044721043254`, 0.10447663667270932`], 
                Around[4.364677185562806, 0.2100094842353753]}, 
              "AccuracyHistory" -> {
                Around[0.5492372585429602, 0.014247131834686502`], 
                Around[0.591906127099167, 0.01628060211969826]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38151664752165954`, 0.03977608365046414], "Accuracy" -> 
              Around[0.8740940349402928, 0.013875001085229821`], 
              "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 250, 
              "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
              683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.38151664752165954`, 0.028125938478286556`]}, 
              "AccuracyHistory" -> {
                Around[0.8740940349402928, 0.009811107356336711]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00037881779653037317`, "MeanCrossEntropy" -> 
             Around[0.38151664752165954`, 0.03977608365046414], "ModelMemory" -> 
             164368, "TrainingMemory" -> 683480, "TrainingTime" -> 
             92.6247680155231|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2846789544300572`, 0.10135837559026044`], "Accuracy" -> 
              Around[0.7374636238433064, 0.017014953179959547`], 
              "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.6005267903937916`,
               "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 341168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2846789544300572`, 0.07167119470992618]}, 
              "AccuracyHistory" -> {
                Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
              Around[0.5152833374237896, 0.07249298936486862], 
              "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 2744,
               "ModelMemory" -> 58320., "ModelUtility" -> -5.074385087421649, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 295925.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.5190643035821725`, 0.1028129894230038], 
                Around[5.812425858174743, 0.191466359358563]}, 
              "AccuracyHistory" -> {
                Around[0.5871646538577457, 0.013267469359568705`], 
                Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020244886234998508`, "MeanCrossEntropy" -> 
             Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
             58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
              Around[0.8717062863197803, 0.01777595950885693], 
              "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.10702789819239966`, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 374688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3301382275974658, 0.02068135393911543]}, 
              "AccuracyHistory" -> {
                Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
              Around[0.7363490438369396, 0.017031507261842195`], 
              "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.3231968082428875`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 338064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6791528095168373, 0.027387263849560993`]}, 
              "AccuracyHistory" -> {
                Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
              Around[0.4863596829810406, 0.04278093185210315], 
              "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 2744, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.180492238404206, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5444439372449126, 
              "TrainingMemory" -> 322133.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.508549842629893, 0.04605766705211905], 
                Around[3.771470810362135, 0.12018564135103059`]}, 
              "AccuracyHistory" -> {
                Around[0.5280828090172973, 0.013434097226343747`], 
                Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
             Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
             9.109108405185806|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5038386117534089, 0.041784890614198204`], "Accuracy" -> 
              Around[0.828465928965194, 0.02654031530216917], 
              "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 400, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.7882946404845459, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 528184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5038386117534089, 0.029546379504437673`]}, 
              "AccuracyHistory" -> {
                Around[0.828465928965194, 0.018766836924992914`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
              Around[0.3679296647759494, 0.07392752974250799], 
              "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 2744,
               "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
              449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.148424842980697, 0.03780978285236538], 
                Around[1.4568966776552688`, 0.026077841742531138`]}, 
              "AccuracyHistory" -> {
                Around[0.2945557228909562, 0.012245543527860529`], 
                Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
              Around[0.6180757845356775, 0.05382602805907864], 
              "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 2632, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
              461714.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.155425119141791, 0.02396130422338247], 
                Around[1.0610392976248695`, 0.02621811203957636]}, 
              "AccuracyHistory" -> {
                Around[0.5650696245779578, 0.013556795434539574`], 
                Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23257721592841687`, 0.03163453421313113], "Accuracy" -> 
              Around[0.908886547057971, 0.024356212382520913`], 
              "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 0.7369941836531197, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1045880, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23257721592841687`, 0.022368993661782865`]}, 
              "AccuracyHistory" -> {
                Around[0.908886547057971, 0.017222442939700294`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
             Around[0.23257721592841687`, 0.03163453421313113], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1045880, "TrainingTime" -> 
             1.4937384274690055`|>, "Index" -> 10|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
              Around[0.7457728338345587, 0.018472683364634448`], 
              "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.7509502414499094`, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 309112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8371599125387441, 0.047884777618598134`]}, 
              "AccuracyHistory" -> {
                Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
              Around[0.8882989940963734, 0.013145309817848845`], 
              "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.48100284988718467`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 469432, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2722926005782066, 0.022605846381320353`]}, 
              "AccuracyHistory" -> {
                Around[0.8882989940963734, 0.009295137712999018]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04678344173247784, 0.020786249475512084`], "Accuracy" -> 
              Around[0.9851396376350638, 0.010281268792086398`], 
              "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 3.8798539588000582`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 972672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04678344173247784, 0.014698097959569912`]}, 
              "AccuracyHistory" -> {
                Around[0.9851396376350638, 0.007269954882085916]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
              Around[0.502464111857925, 0.07130486561817233], 
              "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 2200, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.6637320197127625`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299269.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8332223163074313`, 0.08054167103388306], 
                Around[4.86043648706169, 0.16818929238262642`]}, 
              "AccuracyHistory" -> {
                Around[0.572995990979411, 0.015538960918031978`], 
                Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
             Around[3.3468294016845603`, 1.5153492244478233`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 299269.3333333333, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 11|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
              Around[0.762381947001795, 0.01642868812328819], 
              "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -1.7030510878983651`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 600016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7752070403907262, 0.03017334558439825]}, 
              "AccuracyHistory" -> {
                Around[0.762381947001795, 0.011616836777975974`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.39447704061745437`, 0.03234768531334908], "Accuracy" -> 
              Around[0.8594906763316973, 0.01476170763807768], 
              "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 1100, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.3625496870271967, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 675000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.39447704061745437`, 0.02287326764075762]}, 
              "AccuracyHistory" -> {
                Around[0.8594906763316973, 0.01043810357277798]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
              Around[0.9455603955460657, 0.019279136977717354`], 
              "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 1.404009915150804, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1142080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15855325263059325`, 0.025484079405049796`]}, 
              "AccuracyHistory" -> {
                Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
              Around[0.5116939418989973, 0.07010685788967808], 
              "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 2400, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              586421.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.521906370483909, 0.03515613181787799], 
                Around[1.5882755791735657`, 0.05563504596868172]}, 
              "AccuracyHistory" -> {
                Around[0.442311083421225, 0.014256465737770922`], 
                Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
             Around[1.5550909748287374`, 0.04454750436345691], "ModelMemory" -> 
             164368., "TrainingMemory" -> 586421.3333333333, "TrainingTime" -> 
             5.818068863066169|>, "Index" -> 12|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9007091827219887, 0.030008702121127984`], "Accuracy" -> 
              Around[0.6760965348587569, 0.018079481767156038`], 
              "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.8723329888169609`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9007091827219887, 0.02121935676445673]}, 
              "AccuracyHistory" -> {
                Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.43111245312757496`, 0.025345577264303743`], "Accuracy" -> 
              Around[0.8330426045067885, 0.015571490015669136`], 
              "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 1132,
               "ModelMemory" -> 58320, "ModelUtility" -> -0.4088030140985044, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 364536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.43111245312757496`, 0.01792202955667676]}, 
              "AccuracyHistory" -> {
                Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.1842923793671783, 0.025304164192749383`], "Accuracy" -> 
              Around[0.9457395297710746, 0.019169568233064083`], 
              "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 891920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1842923793671783, 0.01789274609295091]}, 
              "AccuracyHistory" -> {
                Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
              Around[0.43385363675367183`, 0.011415114317526467`], 
              "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 2472, 
              "ModelMemory" -> 58320., "ModelUtility" -> -3.5149737403880033`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 273418.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4396046101139186`, 0.029031135765925187`], 
                Around[2.475712680707863, 0.06775654619883521]}, 
              "AccuracyHistory" -> {
                Around[0.439498971976867, 0.014905537896345295`], 
                Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
             Around[1.9576586454108909`, 0.5187408468073508], "ModelMemory" -> 
             58320., "TrainingMemory" -> 273418.6666666666, "TrainingTime" -> 
             4.386881933034051|>, "Index" -> 13|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8419793893936219, 0.040743862542620725`], "Accuracy" -> 
              Around[0.7373831716775224, 0.01693418574125903], 
              "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.8856361050895067`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 782064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8419793893936219, 0.02881026149561968]}, 
              "AccuracyHistory" -> {
                Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
              Around[0.8250320562814308, 0.01594299951984108], 
              "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, "ModelUtility" -> -0.6112985333219293,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 848080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4432056724888078, 0.02238507759095115]}, 
              "AccuracyHistory" -> {
                Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.16858329728652338`, 0.029069351611494675`], "Accuracy" -> 
              Around[0.945560395546066, 0.01927913697771735], 
              "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 1.2824675838731772`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 1207096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.16858329728652338`, 0.020555135649183976`]}, 
              "AccuracyHistory" -> {
                Around[0.945560395546066, 0.013632408492368258`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
             Around[0.16858329728652338`, 0.029069351611494675`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
             "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3249962292171797`, 0.12170206901231112`], "Accuracy" -> 
              Around[0.793195580192614, 0.015828005629622638`], 
              "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300, 
              "ModelMemory" -> 164368, "ModelUtility" -> -2.7896299497840076`,
               "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 589096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3249962292171797`, 0.08605635828303838]}, 
              "AccuracyHistory" -> {
                Around[0.793195580192614, 0.011192090113365015`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 250, 
              "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 686536,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00044256629018744604`, "MeanCrossEntropy" -> 
             Around[0.3701221449474526, 0.03366489354688038], "ModelMemory" -> 
             164368, "TrainingMemory" -> 686536, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 15|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1227673790868702`, 0.10368611279141937`], "Accuracy" -> 
              Around[0.757173277714323, 0.018196954510351714`], 
              "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.342528378471589, 
              "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 309656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1227673790868702`, 0.07331715346968586]}, 
              "AccuracyHistory" -> {
                Around[0.757173277714323, 0.012867189931212827`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33220140414624993`, 0.047853257302163214`], "Accuracy" -> 
              Around[0.8965085805171233, 0.012697194170323252`], 
              "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.07288974716187491, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 510104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33220140414624993`, 0.03383736274022428]}, 
              "AccuracyHistory" -> {
                Around[0.8965085805171233, 0.00897827209987787]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.029497520149122013`, 0.01667491875741592], "Accuracy" -> 
              Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 4.7583398302297795`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 39.810717055349734`, 
              "TrainingMemory" -> 948200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.029497520149122013`, 0.011790948129103553`]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.2949671588281193`, 0.14749235577106196`], "Accuracy" -> 
              Around[0.5835796437000327, 0.02088503617561304], 
              "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -3.761313256061099, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 297120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2949671588281193`, 0.10429284493889672`]}, 
              "AccuracyHistory" -> {
                Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
             Around[2.2949671588281193`, 0.14749235577106196`], "ModelMemory" -> 
             62416, "TrainingMemory" -> 297120, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 16|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
              Around[0.7677501064780398, 0.00816276162917491], 
              "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 2664,
               "ModelMemory" -> 93800., 
              "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 386088.,
               "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.5973296386447973`, 0.09710009617968923], 
                Around[1.6944960008299512`, 0.10490120341267964`]}, 
              "AccuracyHistory" -> {
                Around[0.7682281016221508, 0.011537187632355594`], 
                Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33249143642424983`, 0.02780494761566639], "Accuracy" -> 
              Around[0.8613277396783116, 0.014507674452371017`], 
              "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 1132,
               "ModelMemory" -> 93800, "ModelUtility" -> 0.05248807658590138, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 502672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33249143642424983`, 0.01966106700957443]}, 
              "AccuracyHistory" -> {
                Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04443140001711353, 0.021314953380441544`], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.92776201569796, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 970336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04443140001711353, 0.01507194807598534]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00046938966244621503`, "MeanCrossEntropy" -> 
             Around[0.04443140001711353, 0.021314953380441544`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
             "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
              Around[0.7384665234825579, 0.010719276135332273`], 
              "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 2432, 
              "ModelMemory" -> 93800., "ModelUtility" -> -1.9350890275488193`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.37788092188698263`, 
              "TrainingMemory" -> 378786.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7726332524190396, 0.028941631998749596`], 
                Around[1.0060756456836646`, 0.05024424270156515]}, 
              "AccuracyHistory" -> {
                Around[0.7324400373766513, 0.0120571885743892], 
                Around[0.7444930095884645, 0.01307837056160318]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.34782344779765667`, 0.025712507033831242`], "Accuracy" -> 
              Around[0.8557374599745653, 0.014686070676875251`], 
              "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, 
              "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 250,
               "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.34782344779765667`, 0.018181488084928872`]}, 
              "AccuracyHistory" -> {
                Around[0.8557374599745653, 0.0103846201646034]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15276622770087278`, 0.028666652684449675`], "Accuracy" -> 
              Around[0.9498135082589592, 0.018508440411731872`], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 1.5673860415737628`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 907872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15276622770087278`, 0.02027038450709391]}, 
              "AccuracyHistory" -> {
                Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.15276622770087278`, 0.028666652684449675`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
             "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7753042739299817, 0.039969593621796584`], "Accuracy" -> 
              Around[0.7375401740439216, 0.01714466436223822], 
              "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 1300, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.637907986699601, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 461800, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7753042739299817, 0.02826277069124294]}, 
              "AccuracyHistory" -> {
                Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35554695739060116`, 0.027033696117590978`], "Accuracy" -> 
              Around[0.8470897173852533, 0.01508748965454944], 
              "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.08838018962147687,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 567400, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.35554695739060116`, 0.01911570984528502]}, 
              "AccuracyHistory" -> {
                Around[0.8470897173852533, 0.01066846624581379]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15410934185340477`, 0.03040532289461026], "Accuracy" -> 
              Around[0.9596068784743268, 0.016667152171683092`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 1.5363925902488362`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1024944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15410934185340477`, 0.0214998100029455]}, 
              "AccuracyHistory" -> {
                Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.15410934185340477`, 0.03040532289461026], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1024944, "TrainingTime" -> 
             2.891283046943182|>, "Index" -> 19|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.9025240498596048`, 0.17368396265702707`], "Accuracy" -> 
              Around[0.7888324315844696, 0.015739599038312638`], 
              "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -3.5329225623661613`,
               "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 780096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9025240498596048`, 0.12281310777813492`]}, 
              "AccuracyHistory" -> {
                Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
              Around[0.8854786750958584, 0.013351117434256547`], 
              "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, 
              "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 250, 
              "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
              837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6454807954277998, 0.062000766216747265`]}, 
              "AccuracyHistory" -> {
                Around[0.8854786750958584, 0.009440665674180743]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00022514047861176898`, "MeanCrossEntropy" -> 
             Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
             187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
             115.3099731077524|>, "Index" -> 20|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
              Around[0.5296860458536663, 0.019284927181766578`], 
              "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -2.44789502640578, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2036312536280331`, 0.01921988365429954]}, 
              "AccuracyHistory" -> {
                Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8399174549925484, 0.024903779896598206`], "Accuracy" -> 
              Around[0.7369045920343117, 0.018395727422659554`], 
              "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.7311181711686499`, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 351208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8399174549925484, 0.017609631642061807`]}, 
              "AccuracyHistory" -> {
                Around[0.7369045920343117, 0.0130077436054219]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
             Around[0.8399174549925484, 0.024903779896598206`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 351208, "TrainingTime" -> 
             2.4002626703166206`|>, "Index" -> 21|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
              Around[0.7313061583954904, 0.017144680944532857`], 
              "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.028995426006972, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 313112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9663976578750052, 0.05017890964418109]}, 
              "AccuracyHistory" -> {
                Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35008419981942934`, 0.024708646909891732`], "Accuracy" -> 
              Around[0.8568009346457361, 0.014673031432912107`], 
              "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> 
              0.0029327369312612817`, "TrainingSize" -> 250, "TrainingTime" -> 
              3.981071705534973, "TrainingMemory" -> 398384, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35008419981942934`, 0.017471651783928475`]}, 
              "AccuracyHistory" -> {
                Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.042170347467092334`, 0.016000630897312476`], 
              "Accuracy" -> Around[0.9907604816520923, 0.008121627376877738], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 825792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.042170347467092334`, 0.011314154610752645`]}, 
              "AccuracyHistory" -> {
                Around[0.9907604816520923, 0.00574285779246056]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
              Around[0.5804592460589959, 0.018783072828788897`], 
              "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
              "ModelMemory" -> 58320, "ModelUtility" -> -3.4638943660534287`, 
              "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.987919142262011, 0.07603787179768637]}, 
              "AccuracyHistory" -> {
                Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
             Around[1.987919142262011, 0.10753378955027475`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 299984, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 22|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9403941167153582, 0.030071559648660914`], "Accuracy" -> 
              Around[0.6590202792143492, 0.018327916017389055`], 
              "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.9641702588327155`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 318200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9403941167153582, 0.021263803748423883`]}, 
              "AccuracyHistory" -> {
                Around[0.6590202792143492, 0.01295979370091334]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.45576172147997035`, 0.02603166210338864], "Accuracy" -> 
              Around[0.8256280537105091, 0.015920374420882354`], 
              "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -0.525479429825631, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 420072, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45576172147997035`, 0.01840716479886297]}, 
              "AccuracyHistory" -> {
                Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
              Around[0.9385178062088241, 0.020368186136795634`], 
              "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 1.0349935743091963`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 933232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.20578142008052, 0.019371630008387233`]}, 
              "AccuracyHistory" -> {
                Around[0.9385178062088241, 0.01440248253779802]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041974250697322877`, "MeanCrossEntropy" -> 
             Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
             62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
             2.29662775876662|>, "Index" -> 23|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5041540185761222`, 0.12792697018320168`], "Accuracy" -> 
              Around[0.7491330451581357, 0.01676873732368961], 
              "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 1332,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5041540185761222`, 0.09045802811319117]}, 
              "AccuracyHistory" -> {
                Around[0.7491330451581357, 0.01185728787351688]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3551338319540449, 0.027278187743878263`], "Accuracy" -> 
              Around[0.8473263359267194, 0.015089820198610777`], 
              "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 1132,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 250, 
              "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 527408,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3551338319540449, 0.01928859153217609]}, 
              "AccuracyHistory" -> {
                Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
              Around[0.9895518014074794, 0.008620653342748424], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 4.258968427388813, 
              "TrainingSize" -> 1106, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 932288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.03734914821299343, 0.013125775259394882`]}, 
              "AccuracyHistory" -> {
                Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
              Around[0.46102332820255726`, 0.018987327336901637`], 
              "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 1372,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10, 
              "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.678346364097339, 0.08174114510413875]}, 
              "AccuracyHistory" -> {
                Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00029572208708069134`, "MeanCrossEntropy" -> 
             Around[2.678346364097339, 0.11559943601018015`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 449640, "TrainingTime" -> 
             18.983242383456506`|>, "Index" -> 24|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
              Around[0.7762423210420635, 0.014329340894644918`], 
              "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 2432, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              605098.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8208265202024376, 0.05283642239438791], 
                Around[1.4514603795294685`, 0.08835215155478726]}, 
              "AccuracyHistory" -> {
                Around[0.7878452988653784, 0.012263467049955281`], 
                Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, "ModelUtility" -> -0.2386147056327178,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 680424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.06082621292123911, 0.019650473295384628`], "Accuracy" -> 
              Around[0.9770146234585061, 0.012716008303818851`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.2838445796528624`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1099664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06082621292123911, 0.013894982920691632`]}, 
              "AccuracyHistory" -> {
                Around[0.9770146234585061, 0.008991575701254757]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.06082621292123911, 0.019650473295384628`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
             "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
              Around[0.7627369072147341, 0.011750893611347561`], 
              "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 2664, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              468021.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0095607638414457`, 0.05525446612282441], 
                Around[1.1842784010456864`, 0.07075909436910463]}, 
              "AccuracyHistory" -> {
                Around[0.7543389604118015, 0.011774622135660197`], 
                Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35804951443350097`, 0.026655439166062223`], "Accuracy" -> 
              Around[0.8488505284229317, 0.014960827173881168`], 
              "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
              527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35804951443350097`, 0.018848241789828087`]}, 
              "AccuracyHistory" -> {
                Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 3.3814381242084908`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 959184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.05985945373078884, 0.01350088664315196]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.05985945373078884, 0.01909313699480727], "ModelMemory" -> 
             101904, "TrainingMemory" -> 959184, "TrainingTime" -> 
             6.89353199975045|>, "Index" -> 26|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3358149900117273`, 0.12222648201044096`], "Accuracy" -> 
              Around[0.7862467400481814, 0.01602150238466662], 
              "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 1300, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.825724619026342, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 781952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3358149900117273`, 0.08642717427015836]}, 
              "AccuracyHistory" -> {
                Around[0.7862467400481814, 0.01132891298099421]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
              Around[0.8858609662855659, 0.013283721779471411`], 
              "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.3445805711537584`,
               "TrainingSize" -> 250, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 845640, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6317653258849528, 0.05961837551263815]}, 
              "AccuracyHistory" -> {
                Around[0.8858609662855659, 0.009393009749659667]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
             Around[0.6317653258849528, 0.08431311521662489], "ModelMemory" -> 
             187664, "TrainingMemory" -> 845640, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 27|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1154980744941485`, 0.034353683515180075`], "Accuracy" -> 
              Around[0.5814498430933545, 0.019088672339769665`], 
              "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 1332, 
              "ModelMemory" -> 93800, "ModelUtility" -> -2.347503593111097, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 386152, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1154980744941485`, 0.02429172257232034]}, 
              "AccuracyHistory" -> {
                Around[0.5814498430933545, 0.01349772965529921]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5546183182382579, 0.026395794652472045`], "Accuracy" -> 
              Around[0.8135685469111952, 0.016337844310188795`], 
              "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> -0.9566176476083332, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 451760, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5546183182382579, 0.01866464539357059]}, 
              "AccuracyHistory" -> {
                Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
              Around[0.9299868058195125, 0.021652291921408842`], 
              "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.7601699845170374, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 918608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23091679939394155`, 0.02259715579830503]}, 
              "AccuracyHistory" -> {
                Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041019731090850185`, "MeanCrossEntropy" -> 
             Around[0.23091679939394155`, 0.0319572042010208], "ModelMemory" -> 
             93800, "TrainingMemory" -> 918608, "TrainingTime" -> 
             1.3087789598585713`|>, "Index" -> 28|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
              Around[0.7681507374150377, 0.016318407378901893`], 
              "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 1332,
               "ModelMemory" -> 93800, "ModelUtility" -> -2.137795388853302, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 386256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9948450772059008, 0.05585599851339633]}, 
              "AccuracyHistory" -> {
                Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
              Around[0.8617176768356566, 0.014429545856984168`], 
              "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.052922354317971765`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 497976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3326799470819294, 0.018734832919486785`]}, 
              "AccuracyHistory" -> {
                Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07021180454193646, 0.026976812427827776`], "Accuracy" -> 
              Around[0.9710277520559213, 0.014250347362805026`], 
              "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.0477874334351047`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 966920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07021180454193646, 0.01907548700251455]}, 
              "AccuracyHistory" -> {
                Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
             Around[0.07021180454193646, 0.026976812427827776`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
             "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
              Around[0.7911413261337976, 0.015627505897240296`], 
              "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 2332,
               "ModelMemory" -> 187664., 
              "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
              774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.7558990910227044, 0.037970217663081576`], 
                Around[0.9594474328704059, 0.07043483754789011]}, 
              "AccuracyHistory" -> {
                Around[0.7779594452749371, 0.011355683387275856`], 
                Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
              Around[0.8389781853611775, 0.015335274506302916`], 
              "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4042669758821077, 0.022272205006115358`]}, 
              "AccuracyHistory" -> {
                Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.10406413363415194`, 0.020899367441681686`], "Accuracy" -> 
              Around[0.9736914348517792, 0.013553043838557063`], 
              "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 2.2363622110324752`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 1218600, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.10406413363415194`, 0.014778084440522468`]}, 
              "AccuracyHistory" -> {
                Around[0.9736914348517792, 0.009583449203962254]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
             Around[0.10406413363415194`, 0.020899367441681686`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
             "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 1382, 
      "PreprocessorEvaluationTime" -> 3.9375*^-6, "PreprocessorMemory" -> 
      94088, "InputDimension" -> 18, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.869215141896656`16.340197867844974*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
          "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
          "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 40|>, <|
         "TrainingSizes" -> 250, "TimeBudgets" -> 138.0795097872658, 
          "ElapsedTimes" -> 151.156252, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
          "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 21|>}, 
        
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
             Interval[{5, 
               DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
           5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
           8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
      "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
      "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, "Instant",
         "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9, 3.869210988494907*^9, 3.869211542035791*^9},
 CellLabel->
  "Out[421]=",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}},
 CellLabel->
  "In[422]:=",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "19034f41-be4d-4eaa-9650-6c15422c87b6"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"99.1", "0.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.1329479768786114846`3., 0.4991396165558288911`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"69.1", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.0751445086705189169`3., 2.4883140570071944353`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9564305105930941409`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0303164048540168762`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8957977008850603884`3.", "\", \"", 
                   "1.0170633203011278933`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8957977008850603884`3., 
                   ", ", 1.0170633203011278933`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0445471424083839287`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0316921409220950537`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "0.0188371394358061786`3."}], "\", \"", 
                   "0.107931424252574043`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -0.0188371394358061786`3.,
                    ", ", 0.107931424252574043`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"7.04`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.43`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKL96k7RRV8dY+KOjpDQbrV/Z9e/5HbLZ6
aH9Nxp6Fze2dvdmLST56Lm/tC4SvXDFReEnQvIdVIuvcH96yZ0ABxLvnafFu
1ROib+2tl7O8S9z4wr5rUTe/tvVtkv11gumH1M2Pr+13x6+w3LHlsb2OQUn3
hPJ9JJtT+e0aU/7Lt/Zlp+/u8Xv22v7VOq5H6pOe2gMAbTJnmQ==
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.9815950920245398`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9876543209876543}], 
                    Row[{"Recall = ", 0.975609756097561}], 
                    Row[{"FScore = ", 0.9815950920245398}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.012345679012345678`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0041841004184100415`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.012345679012345678`}], 
                    Row[{"Row fraction = ", 0.0041841004184100415`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9979035639412998`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.99581589958159}], 
                    Row[{"FScore = ", 0.9979035639412998}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.024390243902439025`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.024390243902439025`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.923076923076923`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8571428571428571}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.923076923076923}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{82, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.975609756097561}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{239, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.99581589958159}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9876543209876543}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{14, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8571428571428571}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["82", TraditionalForm]}, {2.5, 
                    FormBox["13", TraditionalForm]}, {1.5, 
                    FormBox["239", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["81", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["13", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["238", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["14", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
              "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
              "Doors" -> <|"Type" -> "Nominal"|>, 
              "Passengers" -> <|"Type" -> "Nominal"|>, 
              "Cargo" -> <|"Type" -> "Nominal"|>, 
              "Safety" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|
                  "FeatureNames" -> {
                    "PurchasePrice", "MaintenanceCost", "Doors", "Passengers",
                     "Cargo", "Safety"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 6|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 1382, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                    0.5381047338323698, 0.31349173058168534`}, {
                    0.2878959194482099, 
                    0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                    0.2578066194971254, 
                    0.4093083635172316, -0.7050063333319737, 
                    0.08206678121922453, -0.2152687718915405, 
                    0.46464274419035045`}, {
                    0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                    0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                    0.3669612074237795, -0.03875817355088801, 
                    0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                    0.5767907589006783, 0.1852877321886701, 
                    0.21134659605041434`, 0.33089384854127}}, 
                    "Precisions" -> {11.396708918937332`, 11.702295237769018`,
                     11.751709980827822`, 12.269447018561033`, 
                    12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                    None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 6, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 
                    1301520, "DataMemory" -> 446480, "FunctionMemory" -> 
                    62320, "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-1.5374646114340518`, \
-1.5374646114340518`, -1.4481495799387802`, -1.3901532053842829`, \
-1.3900959198753926`, -1.3059537438182822`, -1.239089852169043, \
-1.2261733685503937`, -1.2132739652746585`, -1.169323039076807, \
-1.1079994773194297`}, "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                    0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[7.816606057704673, 0.25703225729782303`], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5495059474424677337|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Index" -> {<|
                  "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                  2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                  "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                  "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.12314196676015854`, -0.861851692199707, 
                   0.10532767325639725`}, {
                   0.8298183679580688, -0.28949323296546936`, 
                   0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                   0.38437455892562866`, -0.8375512361526489, 
                   0.1422276645898819}}], 
                  RawArray["Real32",{{0., 0., 
                   0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                   0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                   0.4795919358730316}, {
                   0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                   0.2534555494785309, -0.4526385962963104}, {
                   0.3543681204319, -0.37547722458839417`, 
                   0.5876661539077759}, {-1.1276206970214844`, 
                   0.17602579295635223`, -1.0098364353179932`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.24657385051250458`, -0.8256815671920776, 
                   0.8846340179443359}, {0.6182233691215515, 
                   0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.34666627645492554`, -0.5679200291633606, 
                   0.10750995576381683`}, {
                   0.6412044167518616, -0.1759643256664276, 
                   0.6604856848716736}, {-0.8092290163040161, 
                   0.12987354397773743`, -1.1753407716751099`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                   0.12715618312358856`, 0.1291729062795639}, {
                   0.21379514038562775`, -0.6005780100822449, 
                   0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
                272386066020895428|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                   "very good" -> 4|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {4}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113,
            "unacceptable" -> 0.7012987012987013, "very good" -> 
           0.03896103896103896|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Acceptability", 
             "Order" -> {
              "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
               "Cargo", "Safety", "Acceptability"}|>], "PreferLabeled" -> 
          True, "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> 
       None, "ImputationStrategy" -> Automatic, "Prior" -> Automatic, 
       "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
       "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
       Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                    0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                    0.09347633272409439, 0.20684024691581726`, 
                    0.00729140592738986, -0.3824177384376526, 
                    0.2153223156929016, -0.46700865030288696`, 
                    0.21194063127040863`, 
                    0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                    0.07883942127227783, -0.375686913728714, 
                    0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                    0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                    0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                    0.1690395474433899, -0.28660914301872253`, 
                    0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                    0.17016777396202087`, -0.32100844383239746`, 
                    0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 18, "$InputDimensions" -> {18}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                   "], "Biases" -> 
                  RawArray["Real32",{-0.23329688608646393`, 
                    0.1376294195652008, 
                    0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                    0.1361909657716751, -0.07115011662244797, 
                    0.0030301439110189676`, 0.04029219597578049, 
                    0.05379099026322365, 
                    
                    0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                    0.0140318488702178, 
                    0.18612468242645264`, -0.17168177664279938`, 
                    0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                    0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                    0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                    0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                    0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                    0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "7" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                   "], "Biases" -> 
                  RawArray["Real32",{-0.30062639713287354`, 
                    0.12008462101221085`, 
                    0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                    0.09417349845170975, -0.10099706798791885`, 
                    0.08236243575811386, -0.2349618673324585, 
                    0.1114811822772026, 
                    0.2365228235721588, -0.1581137776374817, 
                    0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                    0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                    0.08413115888834, -0.2386404424905777, 
                    0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                    0.017599068582057953`, -0.16277392208576202`, 
                    0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                    0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                    0.048794329166412354`, -0.2748609185218811, 
                    0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                    0.15255072712898254`, -0.054961107671260834`, 
                    0.12484297901391983`, -0.013735197484493256`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "10" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1: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
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.18632154166698456`, -0.05518893152475357, 
                    0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                    0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                    0.12943300604820251`, 
                    0.21619535982608795`, -0.12615013122558594`, 
                    0.12520363926887512`, 0.1943180412054062, 
                    0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                    0.12467250972986221`, -0.3208949565887451, 
                    0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                    0.16070689260959625`, -0.07001221925020218, 
                    0.07522184401750565, 
                    0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                    0.24120552837848663`, -0.04254811629652977, 
                    0.19626277685165405`, 0.04852093756198883}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "11" -> <|
               "Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "12" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.18740198016166687`, -0.1249600350856781, 
                    0.03215433284640312, -0.2378043681383133}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
           19653.548073458904`|>, "InputType" -> "NumericalVector", 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "Mean" -> {0.23124615267859935`, -0.72822837729203, 
                 0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
                 0.10517240908924025`, -0.24024309043728495`, 
                 0.3074998656424723, 
                 0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
                 0.3879769949206493}, 
                "StandardDeviation" -> {0.42336656209659007`, 
                 0.2672799034098392, 0.07124798075524297, 
                 0.36989547912470067`, 0.17138659393602926`, 
                 0.5155818183543911, 0.688893371869374, 0.24977193740899778`, 
                 0.6403849334448501, 0.4897664046907167, 0.46819109868519837`,
                  0.43423173863577835`, 0.6276718952348702, 
                 0.28383206529853633`, 0.7719651260033509, 
                 0.09756213850198994, 0.2950767752080472, 
                 0.22147755480753964`}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
            Around[0.9926698116140742, 0.007247173785702781], 
            "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
            "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
            "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
            "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.021350027675851042`, 0.008527240234488089]}, 
            "AccuracyHistory" -> {
              Around[0.9926698116140742, 0.005124525728307819]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 4, "NumberOfParameters" -> 8600, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
                 Around[0.5039356498747214, 0.011280914837970198`], 
                 "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -5.255034068743364, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 474568., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[3.3682246428941447`, 0.11709052181782027`], 
                   Around[5.718797544659934, 0.1974406032409913]}, 
                 "AccuracyHistory" -> {
                   Around[0.4977980114632854, 0.013422541870627485`], 
                   Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
                 Around[0.7731731038259634, 0.010538572727576656`], 
                 "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 
                 2532, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
                 461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.0207920682675256`, 0.13567904919872614`], 
                   Around[1.989358115693642, 0.12729332292504641`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7666435334598815, 0.01212548962300386], 
                   Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
                 Around[0.8754721532521594, 0.013799020363039234`], 
                 "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.6640374106578726`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 580856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7727930479153965, 0.07355983104423623]}, 
                 "AccuracyHistory" -> {
                   Around[0.8754721532521594, 0.009757380872436296]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.021350027675851042`, 0.012059338789226588`], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 5.3529526868256205`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 1025056, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.021350027675851042`, 0.008527240234488089]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
                Around[0.021350027675851042`, 0.012059338789226588`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
                "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1638549337103177`, 0.10037145501929841`], 
                 "Accuracy" -> 
                 Around[0.5492390926678674, 0.023756280779855192`], 
                 "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 
                 1300, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -2.4356505013181984`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 315949.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0659744269130655`, 0.06346538833801657], 
                   Around[1.2617354405075698`, 0.023724306617050557`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5686355009414037, 0.0494049938117882], 
                   Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
                 Around[0.34906013350595955`, 0.01773043247078872], 
                 "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
                 288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.7284854644248697`, 0.024470278570364008`], 
                   Around[1.7449836721317225`, 0.02985267016659267]}, 
                 "AccuracyHistory" -> {
                   Around[0.333797137166834, 0.012654176408351573`], 
                   Around[0.364323129845085, 0.01286858453924453]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7297176649588678, 0.030635251566725513`], 
                 "Accuracy" -> 
                 Around[0.7731352673792209, 0.01749760840751051], 
                 "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.4608603411176038`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 430312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7297176649588678, 0.021662394126187413`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
                 Around[0.8462070332421717, 0.03062402709723611], 
                 "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.1999951890132391, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 882408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38327177587574507`, 0.029923508235575796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020558565549557822`, 
                "MeanCrossEntropy" -> 
                Around[0.38327177587574507`, 0.0423182311805343], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 882408, 
                "TrainingTime" -> 1.2870992522366111`|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.35435313401532587`, 0.026162924108051638`], 
                 "Accuracy" -> 
                 Around[0.8602959769418544, 0.016276096618821716`], 
                 "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35435313401532587`, 0.018499981052472317`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
                 Around[0.4905470789487266, 0.05942169230008629], 
                 "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 
                 2672, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -4.197660943845806, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 273552., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5949653673903932`, 0.05337852556796832], 
                   Around[3.769761211170389, 0.12190065068836999`]}, 
                 "AccuracyHistory" -> {
                   Around[0.549197732950539, 0.013394029354165352`], 
                   Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
                 Around[0.7442585992282589, 0.013337895880245353`], 
                 "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 
                 2632, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 308650.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7090566921048821, 0.029587871638874982`], 
                   Around[0.9267562156706394, 0.048804806717094945`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7339496000489554, 0.012070557593356287`], 
                   Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
                 Around[0.9791671208169963, 0.012128533944401654`], 
                 "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
                 "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
                 "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
                 "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.07118410180594256, 0.013542997191503502`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9791671208169963, 0.008576168597937634]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
                Around[0.07118410180594256, 0.01915269030340499], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 945064, 
                "TrainingTime" -> 6.2334652825440156`|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
                 Around[0.838474265252356, 0.01562338483938151], 
                 "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 
                 1100, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 
                 250, "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 845536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4150311982338223, 0.022874520429674614`]}, 
                 "AccuracyHistory" -> {
                   Around[0.838474265252356, 0.011047401365013764`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.9363303357963932`, 0.22063573174865092`], 
                 "Accuracy" -> 
                 Around[0.6016657435215405, 0.009931734042792198], 
                 "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 
                 2400, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -4.394526005243066, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.8628854898161876, "TrainingMemory" -> 
                 768069.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.7328302955198254`, 0.11030764480200886`], 
                   Around[3.1398303760729616`, 0.1343428411885501]}, 
                 "AccuracyHistory" -> {
                   Around[0.6013282055836575, 0.014050468348716146`], 
                   Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
                 Around[0.7771993076355267, 0.016090257916624478`], 
                 "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.4133613417100643`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1., "TrainingMemory" -> 768752, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0883077850611167`, 0.06546404015990553]}, 
                 "AccuracyHistory" -> {
                   Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
                Around[1.0883077850611167`, 0.09258013344187536], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 768752, 
                "TrainingTime" -> 16.33188643150958|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.06349687324568681, 0.020314194118190455`], 
                 "Accuracy" -> 
                 Around[0.9752187821898789, 0.013178658637319573`], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.1990832337140014`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 6.309573444801933, "TrainingMemory" -> 1031984, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06349687324568681, 0.014364304415312347`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9752187821898789, 0.009318718889391335]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
                 Around[0.5614696628952743, 0.02316984504064622], 
                 "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 
                 1900, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.375448364812931, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 588357.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.2425860137311924`, 0.09670887865815357], 
                   Around[3.472752094517207, 0.15761956845763322`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5412325518696653, 0.01645230430382249], 
                   Around[0.5817067739208833, 0.01550253065862414]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
                 Around[0.7822399753364762, 0.011053793618809461`], 
                 "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 
                 2632, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.09292339195906, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.9314427449080938, "TrainingMemory" -> 
                 599973.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.1299535489778723`, 0.07202244880796001], 
                   Around[1.862147339889153, 0.11678580277280175`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7898676324542127, 0.011253506706433129`], 
                   Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.42705750837440937`, 0.035076829136806445`], 
                 "Accuracy" -> 
                 Around[0.8446730233225903, 0.015135382766381485`], 
                 "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.5213181632194831, "TrainingSize" -> 250,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 668632, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.42705750837440937`, 0.024803063745157707`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
                Around[0.42705750837440937`, 0.035076829136806445`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
                "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.29713763668876286`, 0.029783149124946628`], 
                 "Accuracy" -> 
                 Around[0.8857231716276136, 0.013316951171936615`], 
                 "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.27080207566416914`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 518544, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.29713763668876286`, 0.02105986671133995]}, 
                 "AccuracyHistory" -> {
                   Around[0.8857231716276136, 0.00941650647840652]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
                 Around[0.4534728434064575, 0.03657154854139636], 
                 "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 
                 2200, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -4.7036563931676705`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.5848931924611134`, "TrainingMemory" -> 
                 372712., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.8582879282812748`, 0.09593272842945073], 
                   Around[4.168810776492888, 0.14832220789749126`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4184413958301533, 0.015453697183599058`], 
                   Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
                 Around[0.769971120234303, 0.0162893024591907], 
                 "EvaluationTime" -> 0.00006291890573589659, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2977572298050588`, 0.07725242580096887]}, 
                 "AccuracyHistory" -> {
                   Around[0.769971120234303, 0.01151827622969245]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
                Around[1.2977572298050588`, 0.1092514282939514], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 386192, 
                "TrainingTime" -> 25.884295625347566`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5879853515835944`, 0.14718023198397873`], 
                 "Accuracy" -> 
                 Around[0.7939162815913106, 0.015646642549432373`], 
                 "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -3.152069743372218, "TrainingSize" -> 50, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 600288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5879853515835944`, 0.10407214009248054`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
                 Around[0.5705716928210636, 0.02387696402198573], 
                 "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 
                 2100, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.803632164263322, "TrainingSize" -> 10, 
                 "TrainingTime" -> 5.444439372449127, "TrainingMemory" -> 
                 583613.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.6845044721043254`, 0.10447663667270932`], 
                   Around[4.364677185562806, 0.2100094842353753]}, 
                 "AccuracyHistory" -> {
                   Around[0.5492372585429602, 0.014247131834686502`], 
                   Around[0.591906127099167, 0.01628060211969826]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38151664752165954`, 0.03977608365046414], 
                 "Accuracy" -> 
                 Around[0.8740940349402928, 0.013875001085229821`], 
                 "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38151664752165954`, 0.028125938478286556`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8740940349402928, 0.009811107356336711]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00037881779653037317`, 
                "MeanCrossEntropy" -> 
                Around[0.38151664752165954`, 0.03977608365046414], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 683480, 
                "TrainingTime" -> 92.6247680155231|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2846789544300572`, 0.10135837559026044`], 
                 "Accuracy" -> 
                 Around[0.7374636238433064, 0.017014953179959547`], 
                 "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.6005267903937916`, "TrainingSize" -> 50,
                  "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 341168, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2846789544300572`, 0.07167119470992618]}, 
                 "AccuracyHistory" -> {
                   Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
                 Around[0.5152833374237896, 0.07249298936486862], 
                 "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 
                 2744, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -5.074385087421649, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 295925.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.5190643035821725`, 0.1028129894230038], 
                   Around[5.812425858174743, 0.191466359358563]}, 
                 "AccuracyHistory" -> {
                   Around[0.5871646538577457, 0.013267469359568705`], 
                   Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020244886234998508`, 
                "MeanCrossEntropy" -> 
                Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
                58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
                58.99948267602831|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
                 Around[0.8717062863197803, 0.01777595950885693], 
                 "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.10702789819239966`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 374688, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3301382275974658, 0.02068135393911543]}, 
                 "AccuracyHistory" -> {
                   Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
                 Around[0.7363490438369396, 0.017031507261842195`], 
                 "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.3231968082428875`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 338064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6791528095168373, 0.027387263849560993`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
                 Around[0.4863596829810406, 0.04278093185210315], 
                 "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.180492238404206, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5444439372449126, "TrainingMemory" -> 
                 322133.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.508549842629893, 0.04605766705211905], 
                   Around[3.771470810362135, 0.12018564135103059`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5280828090172973, 0.013434097226343747`], 
                   Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
                Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
                62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
                9.109108405185806|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5038386117534089, 0.041784890614198204`], 
                 "Accuracy" -> Around[0.828465928965194, 0.02654031530216917],
                  "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 
                 400, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.7882946404845459, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 528184, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5038386117534089, 0.029546379504437673`]}, 
                 "AccuracyHistory" -> {
                   Around[0.828465928965194, 0.018766836924992914`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
                 Around[0.3679296647759494, 0.07392752974250799], 
                 "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
                 449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.148424842980697, 0.03780978285236538], 
                   Around[1.4568966776552688`, 0.026077841742531138`]}, 
                 "AccuracyHistory" -> {
                   Around[0.2945557228909562, 0.012245543527860529`], 
                   Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
                 Around[0.6180757845356775, 0.05382602805907864], 
                 "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 
                 2632, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
                 461714.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.155425119141791, 0.02396130422338247], 
                   Around[1.0610392976248695`, 0.02621811203957636]}, 
                 "AccuracyHistory" -> {
                   Around[0.5650696245779578, 0.013556795434539574`], 
                   Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23257721592841687`, 0.03163453421313113], 
                 "Accuracy" -> 
                 Around[0.908886547057971, 0.024356212382520913`], 
                 "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 0.7369941836531197, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1045880, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23257721592841687`, 0.022368993661782865`]}, 
                 "AccuracyHistory" -> {
                   Around[0.908886547057971, 0.017222442939700294`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
                Around[0.23257721592841687`, 0.03163453421313113], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1045880, 
                "TrainingTime" -> 1.4937384274690055`|>, "Index" -> 10|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
                 Around[0.7457728338345587, 0.018472683364634448`], 
                 "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.7509502414499094`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 309112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8371599125387441, 0.047884777618598134`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
                 Around[0.8882989940963734, 0.013145309817848845`], 
                 "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.48100284988718467`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 469432, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2722926005782066, 0.022605846381320353`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8882989940963734, 0.009295137712999018]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04678344173247784, 0.020786249475512084`], 
                 "Accuracy" -> 
                 Around[0.9851396376350638, 0.010281268792086398`], 
                 "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 3.8798539588000582`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 972672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04678344173247784, 0.014698097959569912`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9851396376350638, 0.007269954882085916]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
                 Around[0.502464111857925, 0.07130486561817233], 
                 "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 
                 2200, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.6637320197127625`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299269.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.8332223163074313`, 0.08054167103388306], 
                   Around[4.86043648706169, 0.16818929238262642`]}, 
                 "AccuracyHistory" -> {
                   Around[0.572995990979411, 0.015538960918031978`], 
                   Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
                Around[3.3468294016845603`, 1.5153492244478233`], 
                "ModelMemory" -> 62416., "TrainingMemory" -> 
                299269.3333333333, "TrainingTime" -> 18.65727460278956|>, 
              "Index" -> 11|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
                 Around[0.762381947001795, 0.01642868812328819], 
                 "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -1.7030510878983651`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 600016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7752070403907262, 0.03017334558439825]}, 
                 "AccuracyHistory" -> {
                   Around[0.762381947001795, 0.011616836777975974`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.39447704061745437`, 0.03234768531334908], 
                 "Accuracy" -> 
                 Around[0.8594906763316973, 0.01476170763807768], 
                 "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 
                 1100, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.3625496870271967, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 675000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.39447704061745437`, 0.02287326764075762]}, 
                 "AccuracyHistory" -> {
                   Around[0.8594906763316973, 0.01043810357277798]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
                 Around[0.9455603955460657, 0.019279136977717354`], 
                 "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 1.404009915150804, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1142080, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15855325263059325`, 0.025484079405049796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
                 Around[0.5116939418989973, 0.07010685788967808], 
                 "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 
                 2400, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 586421.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.521906370483909, 0.03515613181787799], 
                   Around[1.5882755791735657`, 0.05563504596868172]}, 
                 "AccuracyHistory" -> {
                   Around[0.442311083421225, 0.014256465737770922`], 
                   Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
                Around[1.5550909748287374`, 0.04454750436345691], 
                "ModelMemory" -> 164368., "TrainingMemory" -> 
                586421.3333333333, "TrainingTime" -> 5.818068863066169|>, 
              "Index" -> 12|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9007091827219887, 0.030008702121127984`], 
                 "Accuracy" -> 
                 Around[0.6760965348587569, 0.018079481767156038`], 
                 "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.8723329888169609`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9007091827219887, 0.02121935676445673]}, 
                 "AccuracyHistory" -> {
                   Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.43111245312757496`, 0.025345577264303743`], 
                 "Accuracy" -> 
                 Around[0.8330426045067885, 0.015571490015669136`], 
                 "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.4088030140985044, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 364536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.43111245312757496`, 0.01792202955667676]}, 
                 "AccuracyHistory" -> {
                   Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.1842923793671783, 0.025304164192749383`], 
                 "Accuracy" -> 
                 Around[0.9457395297710746, 0.019169568233064083`], 
                 "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 891920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.1842923793671783, 0.01789274609295091]}, 
                 "AccuracyHistory" -> {
                   Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
                 Around[0.43385363675367183`, 0.011415114317526467`], 
                 "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 
                 2472, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -3.5149737403880033`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 273418.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.4396046101139186`, 0.029031135765925187`], 
                   Around[2.475712680707863, 0.06775654619883521]}, 
                 "AccuracyHistory" -> {
                   Around[0.439498971976867, 0.014905537896345295`], 
                   Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
                Around[1.9576586454108909`, 0.5187408468073508], 
                "ModelMemory" -> 58320., "TrainingMemory" -> 
                273418.6666666666, "TrainingTime" -> 4.386881933034051|>, 
              "Index" -> 13|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8419793893936219, 0.040743862542620725`], 
                 "Accuracy" -> 
                 Around[0.7373831716775224, 0.01693418574125903], 
                 "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.8856361050895067`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 782064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8419793893936219, 0.02881026149561968]}, 
                 "AccuracyHistory" -> {
                   Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
                 Around[0.8250320562814308, 0.01594299951984108], 
                 "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.6112985333219293, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 848080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4432056724888078, 0.02238507759095115]}, 
                 "AccuracyHistory" -> {
                   Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.16858329728652338`, 0.029069351611494675`], 
                 "Accuracy" -> Around[0.945560395546066, 0.01927913697771735],
                  "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 
                 276, "ModelMemory" -> 187664, "ModelUtility" -> 
                 1.2824675838731772`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.2589254117941673`, "TrainingMemory" -> 1207096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.16858329728652338`, 0.020555135649183976`]}, 
                 "AccuracyHistory" -> {
                   Around[0.945560395546066, 0.013632408492368258`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
                Around[0.16858329728652338`, 0.029069351611494675`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
                "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3249962292171797`, 0.12170206901231112`], 
                 "Accuracy" -> 
                 Around[0.793195580192614, 0.015828005629622638`], 
                 "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -2.7896299497840076`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 589096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3249962292171797`, 0.08605635828303838]}, 
                 "AccuracyHistory" -> {
                   Around[0.793195580192614, 0.011192090113365015`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 686536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00044256629018744604`, 
                "MeanCrossEntropy" -> 
                Around[0.3701221449474526, 0.03366489354688038], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 686536, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 15|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1227673790868702`, 0.10368611279141937`], 
                 "Accuracy" -> 
                 Around[0.757173277714323, 0.018196954510351714`], 
                 "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.342528378471589, "TrainingSize" -> 50, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 309656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1227673790868702`, 0.07331715346968586]}, 
                 "AccuracyHistory" -> {
                   Around[0.757173277714323, 0.012867189931212827`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33220140414624993`, 0.047853257302163214`], 
                 "Accuracy" -> 
                 Around[0.8965085805171233, 0.012697194170323252`], 
                 "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.07288974716187491, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 510104, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33220140414624993`, 0.03383736274022428]}, 
                 "AccuracyHistory" -> {
                   Around[0.8965085805171233, 0.00897827209987787]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.029497520149122013`, 0.01667491875741592], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 4.7583398302297795`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 39.810717055349734`, "TrainingMemory" -> 948200, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.029497520149122013`, 0.011790948129103553`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.2949671588281193`, 0.14749235577106196`], 
                 "Accuracy" -> 
                 Around[0.5835796437000327, 0.02088503617561304], 
                 "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -3.761313256061099, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 297120, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.2949671588281193`, 0.10429284493889672`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
                Around[2.2949671588281193`, 0.14749235577106196`], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 297120, 
                "TrainingTime" -> 58.99948267602831|>, "Index" -> 16|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
                 Around[0.7677501064780398, 0.00816276162917491], 
                 "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 
                 2664, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 
                 386088., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5973296386447973`, 0.09710009617968923], 
                   Around[1.6944960008299512`, 0.10490120341267964`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7682281016221508, 0.011537187632355594`], 
                   Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33249143642424983`, 0.02780494761566639], 
                 "Accuracy" -> 
                 Around[0.8613277396783116, 0.014507674452371017`], 
                 "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.05248807658590138, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 502672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33249143642424983`, 0.01966106700957443]}, 
                 "AccuracyHistory" -> {
                   Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04443140001711353, 0.021314953380441544`], 
                 "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.92776201569796, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 970336, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04443140001711353, 0.01507194807598534]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00046938966244621503`, 
                "MeanCrossEntropy" -> 
                Around[0.04443140001711353, 0.021314953380441544`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
                "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
                 Around[0.7384665234825579, 0.010719276135332273`], 
                 "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 
                 2432, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -1.9350890275488193`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.37788092188698263`, "TrainingMemory" -> 
                 378786.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7726332524190396, 0.028941631998749596`], 
                   Around[1.0060756456836646`, 0.05024424270156515]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324400373766513, 0.0120571885743892], 
                   Around[0.7444930095884645, 0.01307837056160318]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.34782344779765667`, 0.025712507033831242`], 
                 "Accuracy" -> 
                 Around[0.8557374599745653, 0.014686070676875251`], 
                 "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.34782344779765667`, 0.018181488084928872`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8557374599745653, 0.0103846201646034]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15276622770087278`, 0.028666652684449675`], 
                 "Accuracy" -> 
                 Around[0.9498135082589592, 0.018508440411731872`], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 93800, "ModelUtility" -> 
                 1.5673860415737628`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 907872, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15276622770087278`, 0.02027038450709391]}, 
                 "AccuracyHistory" -> {
                   Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.15276622770087278`, 0.028666652684449675`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
                "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7753042739299817, 0.039969593621796584`], 
                 "Accuracy" -> 
                 Around[0.7375401740439216, 0.01714466436223822], 
                 "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 
                 1300, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.637907986699601, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 461800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7753042739299817, 0.02826277069124294]}, 
                 "AccuracyHistory" -> {
                   Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35554695739060116`, 0.027033696117590978`], 
                 "Accuracy" -> 
                 Around[0.8470897173852533, 0.01508748965454944], 
                 "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08838018962147687, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 567400, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35554695739060116`, 0.01911570984528502]}, 
                 "AccuracyHistory" -> {
                   Around[0.8470897173852533, 0.01066846624581379]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15410934185340477`, 0.03040532289461026], 
                 "Accuracy" -> 
                 Around[0.9596068784743268, 0.016667152171683092`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 1.5363925902488362`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1024944, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15410934185340477`, 0.0214998100029455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.15410934185340477`, 0.03040532289461026], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1024944, 
                "TrainingTime" -> 2.891283046943182|>, "Index" -> 19|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.9025240498596048`, 0.17368396265702707`], 
                 "Accuracy" -> 
                 Around[0.7888324315844696, 0.015739599038312638`], 
                 "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -3.5329225623661613`, "TrainingSize" -> 50,
                  "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 780096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.9025240498596048`, 0.12281310777813492`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
                 Around[0.8854786750958584, 0.013351117434256547`], 
                 "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 
                 250, "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
                 837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6454807954277998, 0.062000766216747265`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8854786750958584, 0.009440665674180743]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00022514047861176898`, 
                "MeanCrossEntropy" -> 
                Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
                187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
                115.3099731077524|>, "Index" -> 20|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
                 Around[0.5296860458536663, 0.019284927181766578`], 
                 "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.44789502640578, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2036312536280331`, 0.01921988365429954]}, 
                 "AccuracyHistory" -> {
                   Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8399174549925484, 0.024903779896598206`], 
                 "Accuracy" -> 
                 Around[0.7369045920343117, 0.018395727422659554`], 
                 "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.7311181711686499`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 351208, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8399174549925484, 0.017609631642061807`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7369045920343117, 0.0130077436054219]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
                Around[0.8399174549925484, 0.024903779896598206`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 351208, 
                "TrainingTime" -> 2.4002626703166206`|>, "Index" -> 21|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
                 Around[0.7313061583954904, 0.017144680944532857`], 
                 "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.028995426006972, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 313112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9663976578750052, 0.05017890964418109]}, 
                 "AccuracyHistory" -> {
                   Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35008419981942934`, 0.024708646909891732`], 
                 "Accuracy" -> 
                 Around[0.8568009346457361, 0.014673031432912107`], 
                 "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, "ModelUtility" -> 
                 0.0029327369312612817`, "TrainingSize" -> 250, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 398384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35008419981942934`, 0.017471651783928475`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.042170347467092334`, 0.016000630897312476`], 
                 "Accuracy" -> 
                 Around[0.9907604816520923, 0.008121627376877738], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 825792, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.042170347467092334`, 0.011314154610752645`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9907604816520923, 0.00574285779246056]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
                 Around[0.5804592460589959, 0.018783072828788897`], 
                 "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
                 "ModelMemory" -> 58320, 
                 "ModelUtility" -> -3.4638943660534287`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.987919142262011, 0.07603787179768637]}, 
                 "AccuracyHistory" -> {
                   Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
                Around[1.987919142262011, 0.10753378955027475`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 299984, 
                "TrainingTime" -> 18.65727460278956|>, "Index" -> 22|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9403941167153582, 0.030071559648660914`], 
                 "Accuracy" -> 
                 Around[0.6590202792143492, 0.018327916017389055`], 
                 "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.9641702588327155`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 318200, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9403941167153582, 0.021263803748423883`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6590202792143492, 0.01295979370091334]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.45576172147997035`, 0.02603166210338864], 
                 "Accuracy" -> 
                 Around[0.8256280537105091, 0.015920374420882354`], 
                 "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.525479429825631, "TrainingSize" -> 250, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 420072, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.45576172147997035`, 0.01840716479886297]}, 
                 "AccuracyHistory" -> {
                   Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
                 Around[0.9385178062088241, 0.020368186136795634`], 
                 "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, "ModelUtility" -> 
                 1.0349935743091963`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 933232, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.20578142008052, 0.019371630008387233`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9385178062088241, 0.01440248253779802]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041974250697322877`, 
                "MeanCrossEntropy" -> 
                Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
                62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
                2.29662775876662|>, "Index" -> 23|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5041540185761222`, 0.12792697018320168`], 
                 "Accuracy" -> 
                 Around[0.7491330451581357, 0.01676873732368961], 
                 "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 
                 1332, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5041540185761222`, 0.09045802811319117]}, 
                 "AccuracyHistory" -> {
                   Around[0.7491330451581357, 0.01185728787351688]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3551338319540449, 0.027278187743878263`], 
                 "Accuracy" -> 
                 Around[0.8473263359267194, 0.015089820198610777`], 
                 "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 
                 250, "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3551338319540449, 0.01928859153217609]}, 
                 "AccuracyHistory" -> {
                   Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
                 Around[0.9895518014074794, 0.008620653342748424], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 101904, "ModelUtility" -> 
                 4.258968427388813, "TrainingSize" -> 1106, "TrainingTime" -> 
                 15.848931924611142`, "TrainingMemory" -> 932288, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.03734914821299343, 0.013125775259394882`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
                 Around[0.46102332820255726`, 0.018987327336901637`], 
                 "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.678346364097339, 0.08174114510413875]}, 
                 "AccuracyHistory" -> {
                   Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00029572208708069134`, 
                "MeanCrossEntropy" -> 
                Around[2.678346364097339, 0.11559943601018015`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 449640, 
                "TrainingTime" -> 18.983242383456506`|>, "Index" -> 24|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
                 Around[0.7762423210420635, 0.014329340894644918`], 
                 "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 
                 2432, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 605098.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8208265202024376, 0.05283642239438791], 
                   Around[1.4514603795294685`, 0.08835215155478726]}, 
                 "AccuracyHistory" -> {
                   Around[0.7878452988653784, 0.012263467049955281`], 
                   Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.2386147056327178, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 680424, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.06082621292123911, 0.019650473295384628`], 
                 "Accuracy" -> 
                 Around[0.9770146234585061, 0.012716008303818851`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.2838445796528624`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1099664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06082621292123911, 0.013894982920691632`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9770146234585061, 0.008991575701254757]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.06082621292123911, 0.019650473295384628`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
                "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
                 Around[0.7627369072147341, 0.011750893611347561`], 
                 "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 
                 2664, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 468021.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0095607638414457`, 0.05525446612282441], 
                   Around[1.1842784010456864`, 0.07075909436910463]}, 
                 "AccuracyHistory" -> {
                   Around[0.7543389604118015, 0.011774622135660197`], 
                   Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35804951443350097`, 0.026655439166062223`], 
                 "Accuracy" -> 
                 Around[0.8488505284229317, 0.014960827173881168`], 
                 "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35804951443350097`, 0.018848241789828087`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 3.3814381242084908`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 959184, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.05985945373078884, 0.01350088664315196]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.05985945373078884, 0.01909313699480727], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 959184, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 26|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3358149900117273`, 0.12222648201044096`], 
                 "Accuracy" -> 
                 Around[0.7862467400481814, 0.01602150238466662], 
                 "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 
                 1300, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.825724619026342, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 781952, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3358149900117273`, 0.08642717427015836]}, 
                 "AccuracyHistory" -> {
                   Around[0.7862467400481814, 0.01132891298099421]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
                 Around[0.8858609662855659, 0.013283721779471411`], 
                 "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3445805711537584`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 845640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6317653258849528, 0.05961837551263815]}, 
                 "AccuracyHistory" -> {
                   Around[0.8858609662855659, 0.009393009749659667]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
                Around[0.6317653258849528, 0.08431311521662489], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 845640, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 27|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1154980744941485`, 0.034353683515180075`], 
                 "Accuracy" -> 
                 Around[0.5814498430933545, 0.019088672339769665`], 
                 "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.347503593111097, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 386152, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1154980744941485`, 0.02429172257232034]}, 
                 "AccuracyHistory" -> {
                   Around[0.5814498430933545, 0.01349772965529921]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5546183182382579, 0.026395794652472045`], 
                 "Accuracy" -> 
                 Around[0.8135685469111952, 0.016337844310188795`], 
                 "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.9566176476083332, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 451760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5546183182382579, 0.01866464539357059]}, 
                 "AccuracyHistory" -> {
                   Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
                 Around[0.9299868058195125, 0.021652291921408842`], 
                 "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.7601699845170374, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 918608, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23091679939394155`, 0.02259715579830503]}, 
                 "AccuracyHistory" -> {
                   Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041019731090850185`, 
                "MeanCrossEntropy" -> 
                Around[0.23091679939394155`, 0.0319572042010208], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 918608, 
                "TrainingTime" -> 1.3087789598585713`|>, "Index" -> 28|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
                 Around[0.7681507374150377, 0.016318407378901893`], 
                 "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.137795388853302, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 386256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9948450772059008, 0.05585599851339633]}, 
                 "AccuracyHistory" -> {
                   Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
                 Around[0.8617176768356566, 0.014429545856984168`], 
                 "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.052922354317971765`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 497976, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3326799470819294, 0.018734832919486785`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07021180454193646, 0.026976812427827776`], 
                 "Accuracy" -> 
                 Around[0.9710277520559213, 0.014250347362805026`], 
                 "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
                 "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.0477874334351047`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 966920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.07021180454193646, 0.01907548700251455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
                Around[0.07021180454193646, 0.026976812427827776`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
                 Around[0.7911413261337976, 0.015627505897240296`], 
                 "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 
                 2332, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
                 774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.7558990910227044, 0.037970217663081576`], 
                   Around[0.9594474328704059, 0.07043483754789011]}, 
                 "AccuracyHistory" -> {
                   Around[0.7779594452749371, 0.011355683387275856`], 
                   Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
                 Around[0.8389781853611775, 0.015335274506302916`], 
                 "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4042669758821077, 0.022272205006115358`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.10406413363415194`, 0.020899367441681686`], 
                 "Accuracy" -> 
                 Around[0.9736914348517792, 0.013553043838557063`], 
                 "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276,
                  "ModelMemory" -> 187664, "ModelUtility" -> 
                 2.2363622110324752`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 2.51188643150958, "TrainingMemory" -> 1218600, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.10406413363415194`, 0.014778084440522468`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9736914348517792, 0.009583449203962254]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
                Around[0.10406413363415194`, 0.020899367441681686`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
                "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 
         1382, "PreprocessorEvaluationTime" -> 3.9375*^-6, 
         "PreprocessorMemory" -> 94088, "InputDimension" -> 18, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.869215141896656`16.340197867844974*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
             "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
             "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 
             40|>, <|"TrainingSizes" -> 250, "TimeBudgets" -> 
             138.0795097872658, "ElapsedTimes" -> 151.156252, 
             "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
             "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 
             21|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, 
       "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              2846111867015398573|>, 
            "f2" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, 
              "ID" -> 41728420326286313|>, 
            "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                Interval[{5, 
                  DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
            "f4" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
              536027689597629633|>, 
            "f5" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
              5753609278033805624|>, 
            "f6" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
              8080186329754682489|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
         "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
         "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|"Input" -> {{"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "high", 4, 4, "medium", "low"}, {
        "medium", "medium", 2, 2, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "high", "very high", 2, 4, "large", "low"}, {
        "high", "high", 4, 2, "small", "medium"}, {
        "low", "high", 3, 4, "large", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 4, "small", "medium"}, {
        "medium", "high", 4, 2, "medium", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "high", 3, 4, "small", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "high", 2, 2, "large", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "low", 4, 4, "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "medium"}, {
        "very high", "very high", 3, 4, "small", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "low", 4, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "medium", "very high", 3, 2, "small", "medium"}, {
        "high", "very high", 2, 2, "medium", "high"}, {
        "high", "medium", 4, 2, "large", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 4, "medium", "high"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "medium", "high", 4, 4, "medium", "medium"}, {
        "low", "high", 3, 2, "medium", "high"}, {
        "medium", "high", 2, 4, "large", "low"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "medium", 2, 2, "small", "medium"}, {
        "low", "very high", 2, 2, "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "low", 4, 2, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "medium", 4, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "high", 2, 4, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "very high", "low", 3, 4, "small", "high"}, {
        "low", "high", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "medium", "very high", 2, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "medium", 3, 2, "medium", "low"}, {
        "high", "high", 2, 4, "large", "high"}, {
        "high", "medium", 2, 4, "medium", "high"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "medium", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "high", 4, 4, "large", "medium"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "very high", 4, 4, "large", "low"}, {
        "low", "very high", 2, 2, "medium", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "medium", 2, 4, "small", "high"}, {"low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "medium", 3, 4, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "very high", "medium", 4, 4, "large", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {
        "low", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 4, "large", "high"}, {
        "high", "low", 3, 4, "medium", "high"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 2, 4, "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "low", "medium", 4, 4, "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 3, 4, "small", "medium"}, {
        "high", "medium", 2, 2, "large", "medium"}, {
        "medium", "high", 4, 2, "medium", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 2, 2, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "medium", 3, 4, "small", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "medium", "medium", 3, 4, "medium", "medium"}, {
        "high", "low", 2, 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "low", "medium", 3, 4, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 4, 2, "small", "high"}, {
        "very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "very high", 2, 2, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "low", 2, 4, "large", "medium"}, {
        "low", "medium", 4, 4, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {
        "high", "very high", 3, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "high", 4, 2, "medium", "low"}, {
        "high", "medium", 4, 4, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "medium", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "low", 4, 2, "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 3, 4, "large", "medium"}, {
        "very high", "medium", 4, 2, "large", "high"}, {
        "high", "high", 4, 2, "large", "medium"}, {
        "high", "medium", 2, 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "high", 4, 4, "small", "low"}, {
        "low", "low", 2, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "medium", 2, 4, "medium", "medium"}, {
        "medium", "medium", 3, 2, "large", "low"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "very high", 3, 2, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 4, "small", "high"}, {
        "low", "medium", 4, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "low", 4, 2, "small", "medium"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "very high", 3, 4, "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "large", "low"}, {
        "very high", "low", 4, 4, "large", "high"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 4, "medium", "high"}, {
        "medium", "very high", 4, 4, "small", "high"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "low", 3, 2, "large", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "very high", 4, 4, "large", "medium"}, {
        "high", "high", 3, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 2, 2, "large", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "medium", 4, 4, "large", "medium"}, {
        "medium", "very high", 2, 4, "medium", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 2, 2, "small", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 2, 2, "medium", "medium"}, {
        "medium", "low", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 2, "large", "high"}, {
        "very high", "very high", 4, 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 4, "small", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "medium", "medium", 2, 2, "medium", "high"}, {
        "very high", "very high", 4, 4, "medium", "high"}, {
        "medium", "very high", 4, 2, "large", "high"}, {
        "medium", "very high", 4, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "large", "medium"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 2, "large", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {
        "low", "high", 2, 4, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 4, "small", "medium"}, {
        "high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "high", "low", 2, 4, "large", "low"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 4, "medium", "medium"}, {
        "high", "high", 2, 4, "small", "medium"}, {
        "very high", "medium", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "medium", "low"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "medium", "low"}, {
        "low", "low", 4, 4, "small", "low"}, {
        "very high", "low", 3, 4, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 3, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 2, 2, "medium", "high"}, {
        "very high", "very high", 3, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "high", 4, 2, "medium", "high"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 4, 2, "medium", "low"}, {
        "medium", "very high", 4, 2, "small", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 4, 2, "small", "low"}, {
        "medium", "high", 3, 2, "medium", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "high", 3, 2, "large", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "very high", 2, 2, "medium", "medium"}, {
        "very high", "low", 2, 2, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "very high", "low", 2, 4, "small", "low"}, {
        "low", "low", 2, 2, "medium", "high"}, {
        "medium", "medium", 4, 4, "small", "low"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "high", 3, 2, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "very high", "very high", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 2, "medium", "low"}, {
        "medium", "high", 2, 2, "small", "medium"}, {
        "medium", "medium", 2, 4, "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "low", "very high", 3, 4, "medium", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "very high", "very high", 3, 4, "large", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "high", "low", 3, 2, "medium", "high"}, {
        "low", "high", 2, 4, "large", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "low", 2, 4, "small", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 3, 2, "large", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 4, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "low"}, {
        "high", "medium", 4, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "medium"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "low", 3, 2, "large", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "high"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}}, 
      "Output" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}|>, 
    "Predictions" -> {
     "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
      "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", "very good",
       "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", "very good", 
      "very good", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "very good", "good", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", "good", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable"}, 
    "LogProbabilities" -> CompressedData["
1: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
9XRNEKE4i9l9otgfv2sXmh9tWi3aJ2iuwyjz1xX9GQr7/Y8edMqmSY9Xb74y
Qe4LifGmRe9TrIDgYwevMsn2jZP+Q/KV79WkyLdrV4lq/6iarrqf+dxG2X+w
rwvQvjA9aCaan8LjBmX/bC8eTeyfn95/Sii1h9v9lwQ2JSzYk7ls64/lZ3GC
ywp2I/nwX55D+4eQfmc+Zfylrmh/hMLlKG+VrxycQ5Ff6RWUl9eNWaGKY2uW
UOJX178abAg/srQ/e/1k2Lbwn31rroaDb22EVStTghM84N0KZDe0bSbo/Mi9
d49yPhKm8NJhx+Ix7R3fXEnETgn8QefC1dPbF3vjd2oNFK1fgqHvR7X5Cz07
yPc/HhttFA7HTRR5/sebcIIb7roeCpn6hdmm+SG484C1LLbNFUgcbHED0/xR
dTabkV8rpt9HcUDuFknZ//sORiG5gkkIqmdNMqHEf/EKrUhYRNjprko/8CT4
2tRwmN1P2PeDFAnBBexGdP8mZ2HIPoTfmin6eR62NxQYPVr9k+g38a6dAobB
BkcgEHviOxm+R7HMuM984MXAXumze1Z49js9zpS3bkAgI221N4kyzi3V/UmW
yj/prnkU/5exytD85ZdxFF/5qwLU9QvSEnwGvH82qPxaKpOMm4CxLmWHAzMY
M3601YtEr29PfeAeuSGUBUmMCPszmBkGVhh2fohNAIm/luEBwDX9eGtF9VPc
+UjI+otfbMCs9cAbZaAHicebP/mAR1VHTNCaSbCn5Vus2UwmiUazA91BcLna
bvySf3G6s7whU28SEBg+bZcdCE0VY2PnuEOyr0auRqASf629RjjXZiq+bW8i
M/gWEUf3JooOTfUgkX9RjPJ/2qETyG7kzRaU/I7uvxHZLytyEpK/YkIUxb+x
NtdY8HOHiSbdDPjDnCdeVxAOZ8f8WluknYET5e0p3T4w85/K3NcXVuBmaVG5
wGMAgcmuo70RytYj/82pK0FxgtHwmaJf2dgJaNy6hyr9CJ7Pptz/iHz4CXBm
FNalxJnQrodxb5qHAztAqRxxpkZCcFpys+r++nUDiiv0BO8U9efvvfBG66lc
4o5QXH9cPT4JTCreciCK91W5kvafRGepBuOS1BsI7JJN8yMxy+SRB9meM1Ib
+a186GFKfBO1rUfxJYNvi/yUwVgXrb7/idrdUfwWrKlX7Q8nqfdPhzcZRkPD
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
     "], "CountMatrix" -> {{80, 0, 0, 2, 0}, {0, 13, 0, 0, 0}, {1, 0, 238, 0, 
     0}, {0, 0, 0, 12, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwt0KFOAgEAgOETvHndYnAyt2MGNpkkZYZjYzNoACYEIDhnMEExa3Qjsjkf
gAew6IZuBhPB4pwmghQ3SRJsBv0C4at/+NePu7XOQhAEFUKWiFhljZgsG+TY
pMA2O+ySUKLMPgfzXpU6TVq0OeKEU84454JLevS54poBN9xyx5B7HnjkiRHP
vPDKG++M+WDCJ19M+WbGD7/8kTIgzSIhEcuskCEmS54tChRJ2OOQBv+qkSTf

       "], {}, {}, {142, 188}, {}}, {{}, {19, 21, 27, 49, 62, 66, 70, 99, 109,
        207, 235, 250, 266}, {}, {}, {}}, {{107}, {}, CompressedData["
1:eJwl0ulrDgAAwOF3aBq7rNlsjL1b7bKx2oWZxRqzmc07bFOUFUXaHLkpdxQh
Uu4jc5Oj+IZcIZSUK5QjvqCQUMizfHj6/QO/YEtbqDUsEAh8pqOd6EwXwomg
G5FEEU0MsfQgjngSSKQXSSSTQj9SCZJGOhlkkU0OueQxkHwKKKSIYkoYQill
lFNBJaOooppaxlJHiAbGM5FGmmhmMlOYSgvTmM4MZjKLVtqYzRzmMo/5LGAh
i1jMEpayjOWsYCWrWM0a1rKO9WxgI5vYzBa2so3t7GAnu9jNHvayj/0c4CCH
OEw7RzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7zgIc8
4jFPeMoznvOCl7ziNW94yzve84GPfAr8f+8LX/nGd37wk1/85g9/6Zg0jHC6
EkF3IokimhhiiSOeniSQSBLJ9KYPKfQllSBppJNBJllkk0N/csljAPkUUEgR
xZQwiMGUMpQyhlHOcEZQQSUjqWI01dQwhlrqqGccIRqYQCNNNDOJf4h0Y6U=

       "], {}, {}}, {{}, {}, {}, {11, 73, 95, 103, 139, 152, 187, 234, 246, 
       273, 324, 334}, {}}}, 
    "ExtendedClasses" -> {"acceptable", "good", "unacceptable", "very good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006979190751445086, "SingleEvaluationTime" -> 
    0.00704475, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{3.86896617348654*^9, 3.868966311492532*^9, 
  3.8689668453138514`*^9, 3.869211547634626*^9},
 CellLabel->
  "Out[422]=",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],

Cell[BoxData[
 TemplateBox[{"753.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.868966455151699*^9, 3.868966522419289*^9, {3.868966572943582*^9, 
   3.868966625736467*^9}, 3.868966851157722*^9, 3.8692115560464487`*^9, 
   3.8692119399774446`*^9},
 CellLabel->
  "Out[438]=",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 775, 15, 29, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1597, 47, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[1826, 55, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[2294, 66, 127832, 2375, 652, "Output",ExpressionUUID->"6eb431cb-b644-4d20-964e-26caf3939935"]
}, Open  ]],
Cell[130141, 2444, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138671, 2651, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[138991, 2658, 2756, 68, 154, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[141750, 2728, 1775, 41, 195, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[143562, 2774, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[143920, 2782, 6896, 111, 154, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[150819, 2895, 2087, 41, 195, "Input",ExpressionUUID->"0ae7b8a4-1a49-48e1-8a8e-1fac0abce9af"],
Cell[152909, 2938, 1441, 26, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[154353, 2966, 1091, 24, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"],
Cell[CellGroupData[{
Cell[155469, 2994, 223, 3, 29, "Input",ExpressionUUID->"e3cb48ad-a12a-496b-9c22-75c7753cdb0f"],
Cell[155695, 2999, 495418, 10113, 601, "Output",ExpressionUUID->"549ebfb0-acc0-4f27-a7b0-a551ea5706a7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[651162, 13118, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[651520, 13126, 2184, 38, 133, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[653741, 13169, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[654200, 13178, 2095, 41, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[656320, 13223, 1124, 19, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[657447, 13244, 697285, 12413, 495, "Output",ExpressionUUID->"537f68ac-abd2-4a29-90d1-3bb14dea0053"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1354781, 25663, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[1355291, 25673, 919, 15, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[1356213, 25690, 701, 16, 29, "Input",ExpressionUUID->"3da3f85d-50c5-45aa-934b-1a84fa5781af"],
Cell[CellGroupData[{
Cell[1356939, 25710, 1162, 18, 51, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[1358104, 25730, 1676, 24, 33, "Output",ExpressionUUID->"6abd5548-024e-4dda-bfca-f8cca1bc0601"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1359817, 25759, 1293, 30, 71, "Input",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],
Cell[1361113, 25791, 1436, 20, 56, "Output",ExpressionUUID->"efc7f34e-72b7-498e-8c00-98d6f037059b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1362586, 25816, 570, 14, 32, "Input",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],
Cell[1363159, 25832, 682, 10, 44, "Output",ExpressionUUID->"99db01da-efb3-4742-9bfa-7a8ebe87128d"]
}, Open  ]],
Cell[1363856, 25845, 520, 9, 29, "Input",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1364413, 25859, 412, 6, 69, "Chapter",ExpressionUUID->"85881d34-aa2c-47a4-9cef-231d0c092462"],
Cell[CellGroupData[{
Cell[1364850, 25869, 702, 15, 29, "Input",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],
Cell[1365555, 25886, 215647, 3688, 68, "Output",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1581239, 29579, 346, 7, 29, "Input",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],
Cell[1581588, 29588, 313627, 5620, 495, "Output",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1895252, 35213, 368, 7, 29, "Input",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],
Cell[1895623, 35222, 377, 8, 44, "Output",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

