(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1382562,      25245]
NotebookOptionsPosition[   1377598,      25152]
NotebookOutlinePosition[   1378036,      25169]
CellTagsIndexPosition[   1377993,      25166]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}, {3.869042727278556*^9, 3.869042728153739*^9}},
 CellLabel->
  "In[276]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["DifferentiableHardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "DifferentiableHardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardeningLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardeningLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassScores", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassScores", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "NeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "DifferentiableHardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardenNet", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardenNet", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "NeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "DifferentiableHardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetTransformWeights", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetTransformWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralReshapeLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralReshapeLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["RandomBalancedNormalSoftBits", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "RandomBalancedNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["ExtractWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "ExtractWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomNormalSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "RandomNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetNetArrays", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "GetNetArrays", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanExpression", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetBooleanExpression", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralChain", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralChain", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomUniformSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "RandomUniformSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "GetWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetBooleanFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralCount", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralCount", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Require", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "Require", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralExactlyK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralExactlyK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBalanced", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "InitializeBalanced", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "SoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClassificationLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardClassificationLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassify", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassify", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralLTEK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralLTEK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToOne", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "InitializeNearToOne", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Soften", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "Soften", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassifyEvaluation", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassifyEvaluation", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToZero", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "InitializeNearToZero", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["HardDropoutLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardDropoutLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassPrediction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassPrediction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeToConstant", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "InitializeToConstant", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassProbabilities", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNetClassProbabilities", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "HardNeuralNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LogisticClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-93d75620-0fe4-4bcb-bea3-d053f2f0be91", {
                   "LogisticClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{
  3.86479111604138*^9, 3.8647911657240562`*^9, 3.864791620800887*^9, 
   3.86479194597997*^9, 3.86479198092934*^9, 3.864792204697258*^9, 
   3.864792687703233*^9, 3.864793105592959*^9, 3.864793526801218*^9, 
   3.864793732850697*^9, 3.864794507927494*^9, 3.864796071752219*^9, 
   3.864825438485825*^9, 3.864825531891514*^9, 3.8648260962141314`*^9, 
   3.864830162877289*^9, 3.8648755408909893`*^9, 3.865049480919162*^9, 
   3.865050046751976*^9, 3.865051042066378*^9, 3.8650523426134*^9, 
   3.8650543558693867`*^9, 3.865058337414798*^9, 3.8650584086343327`*^9, 
   3.86505947338*^9, 3.86506885830449*^9, 3.865397062515942*^9, 
   3.86539822002991*^9, 3.865414037240362*^9, 3.865415448442546*^9, 
   3.865415610582356*^9, 3.8654172214829617`*^9, 3.865417469191354*^9, 
   3.865419590403018*^9, 3.865420075554387*^9, 3.865428054175325*^9, 
   3.8654793173710623`*^9, 3.8655665906709213`*^9, 3.865591995941038*^9, 
   3.865658579968223*^9, 3.865772215681147*^9, 3.865779562552833*^9, 
   3.8658370145359364`*^9, 3.86584060155225*^9, 3.8659992094486027`*^9, 
   3.866003652107215*^9, 3.8660161651613417`*^9, 3.8661754677644978`*^9, 
   3.866258657623454*^9, 3.866285693609187*^9, 3.86635057486532*^9, 
   3.866512485808078*^9, 3.866512816932197*^9, 3.866553529720395*^9, 
   3.8666025113336687`*^9, 3.866606144536639*^9, 3.866608546326232*^9, 
   3.866609704076623*^9, 3.8666137219288273`*^9, 3.86671285229326*^9, 
   3.866788776837541*^9, 3.866788812552528*^9, 3.866794689702251*^9, 
   3.8667979035574636`*^9, 3.8667996941084146`*^9, 3.866800686995532*^9, 
   3.866801936715271*^9, 3.866865563143631*^9, 3.8671595128431797`*^9, 
   3.867322056244096*^9, 3.8674794507502613`*^9, 3.8675828633257*^9, 
   3.867669743397482*^9, 3.867732450434094*^9, 3.867751859422694*^9, 
   3.867752571591299*^9, 3.867811509870346*^9, 3.8678117360040903`*^9, 
   3.8678203831872883`*^9, 3.867843695133718*^9, 3.867850373374954*^9, 
   3.86800725388065*^9, 3.868015027015581*^9, 3.868070609148181*^9, 
   3.8680707782820997`*^9, 3.868071504515008*^9, 3.868078566976554*^9, 
   3.868079276409031*^9, 3.8680936161674767`*^9, 3.868332595482695*^9, 
   3.868343297990016*^9, {3.868434780605877*^9, 3.86843479524651*^9}, 
   3.868445566107071*^9, 3.868519876174618*^9, 3.86853009787873*^9, 
   3.868533409155756*^9, 3.868591470469123*^9, 3.868591573510869*^9, 
   3.8686703712738132`*^9, 3.868674802626226*^9, 3.868944309055069*^9, 
   3.8690237136048*^9, 3.869041334767592*^9, 3.869042729449026*^9, 
   3.8691052086388483`*^9, {3.869119717935349*^9, 3.8691197334997396`*^9}},
 CellLabel->"Out[2]=",ExpressionUUID->"74597de4-2dc4-487b-b151-4a7edeb6169d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11076105470534810197118379094598868411612764393858557893032], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11076105470534810197118379094598868411612764393858557893032,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9, 3.8685300999400797`*^9, 3.868533465833148*^9, 
  3.868591722379105*^9, 3.868670373439299*^9, 3.868944316441147*^9, 
  3.869023715466254*^9, 3.869041339373542*^9, 3.869119740136602*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"f5e09500-4f17-4b40-ba88-1e46fd210c2d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "featureValues"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}, {3.868682465592621*^9, 3.868682467103612*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9, {
   3.8686824585003*^9, 3.86868246003918*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"256", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize", ",", 
           RowBox[{
            RowBox[{"RandomUniformSoftBits", "[", "#", "]"}], "&"}], ",", 
           RowBox[{
            RowBox[{"RandomUniformSoftBits", "[", "#", "]"}], "&"}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}, {
   3.868520025904859*^9, 3.868520026662962*^9}, {3.868520165374518*^9, 
   3.868520172724663*^9}, {3.868520227657476*^9, 3.8685202280400333`*^9}, {
   3.868520278697311*^9, 3.868520283147401*^9}, {3.8685206145298347`*^9, 
   3.8685206150078983`*^9}, {3.868537004723915*^9, 3.868537005683709*^9}, {
   3.8686716248609867`*^9, 3.86867162498657*^9}, {3.8689423409409943`*^9, 
   3.868942344276237*^9}, {3.868947806296569*^9, 3.868947806625355*^9}, 
   3.868955246204385*^9, {3.868957393208212*^9, 3.8689574013451433`*^9}, {
   3.868957440249872*^9, 3.8689574443738937`*^9}, {3.8689577953130703`*^9, 
   3.868957801168947*^9}, {3.868958026730661*^9, 3.8689580269562798`*^9}, {
   3.868960876079372*^9, 3.8689608783682137`*^9}, {3.868964831153708*^9, 
   3.868964831513155*^9}, {3.868965437993729*^9, 3.868965438129128*^9}, {
   3.868975240520047*^9, 3.868975267560664*^9}, {3.8690319933178453`*^9, 
   3.8690319942928963`*^9}, {3.869034512435259*^9, 3.869034512808312*^9}, {
   3.869034610772094*^9, 3.869034611688615*^9}, {3.86903620618801*^9, 
   3.869036206373323*^9}, {3.8690363476068773`*^9, 3.869036349769408*^9}, {
   3.869036449105991*^9, 3.869036450054133*^9}, {3.8691058271725616`*^9, 
   3.86910585030811*^9}, {3.869106008681794*^9, 3.86910601769174*^9}, {
   3.869106118542383*^9, 3.869106126708026*^9}, {3.869106300198392*^9, 
   3.869106310243504*^9}, {3.869106550008959*^9, 3.8691065502511663`*^9}, {
   3.8691066023696003`*^9, 3.8691066409269953`*^9}, {3.869106728726873*^9, 
   3.869106732707152*^9}, {3.869106781369624*^9, 3.869106781690955*^9}, {
   3.869107221769636*^9, 3.869107224150084*^9}, {3.8691076647349586`*^9, 
   3.8691076791551533`*^9}, 3.869108111159465*^9, {3.869111253542173*^9, 
   3.869111266704829*^9}, 3.8691114531763678`*^9, {3.8691115014501963`*^9, 
   3.8691115024350452`*^9}, {3.8691115775921707`*^9, 
   3.8691115787758913`*^9}, {3.8691116899369087`*^9, 3.869111690538197*^9}, {
   3.8691117691600723`*^9, 3.8691117876982183`*^9}, {3.8691121802378807`*^9, 
   3.8691121836826277`*^9}, 3.869112387993538*^9, {3.8691125616997557`*^9, 
   3.8691125907168922`*^9}, {3.86911270806533*^9, 3.869112723740849*^9}, {
   3.869112956528831*^9, 3.869112966025186*^9}, {3.869113141057391*^9, 
   3.869113142033929*^9}, 3.869115743191606*^9, {3.869117545424532*^9, 
   3.869117552560911*^9}, 3.8691197572896433`*^9, {3.869121698753475*^9, 
   3.8691217122755747`*^9}, 3.86919713699297*^9, {3.869203795640698*^9, 
   3.8692038057553377`*^9}, {3.8692077554756203`*^9, 3.869207760735105*^9}, {
   3.869208079942*^9, 3.869208085087775*^9}, {3.8692088553125353`*^9, 
   3.86920886120012*^9}, {3.869209158678213*^9, 3.869209159292757*^9}, {
   3.8692095136217213`*^9, 3.869209514533951*^9}, {3.869211601191217*^9, 
   3.869211602739736*^9}},
 CellLabel->
  "In[426]:=",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->
  "In[427]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->
  "In[428]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}, {
   3.8685364797630873`*^9, 3.868536496883217*^9}, {3.868600076169417*^9, 
   3.868600076637474*^9}, {3.868600134889481*^9, 3.868600135284954*^9}, {
   3.868601255470386*^9, 3.8686012558943872`*^9}, {3.868602902814464*^9, 
   3.868602903232891*^9}, {3.868943377521962*^9, 3.868943381357031*^9}, {
   3.8689434141572866`*^9, 3.868943425164989*^9}, {3.868943586951866*^9, 
   3.8689436089616327`*^9}, {3.868944023717293*^9, 3.8689440271979637`*^9}, {
   3.868944083020088*^9, 3.868944086825481*^9}, {3.868947817163151*^9, 
   3.8689478172894077`*^9}, {3.868949946458611*^9, 3.868949960076432*^9}, {
   3.868977243682851*^9, 3.868977248732733*^9}, {3.868977291844462*^9, 
   3.8689773017254*^9}, {3.868977346389843*^9, 3.868977377673813*^9}, {
   3.868977408389917*^9, 3.868977427933148*^9}, {3.868977539952648*^9, 
   3.868977554029306*^9}, {3.868977819969697*^9, 3.8689778435338573`*^9}, {
   3.869023762591353*^9, 3.8690237633179893`*^9}, {3.869023837158021*^9, 
   3.869023876685935*^9}, {3.869110793308095*^9, 3.86911082542246*^9}, {
   3.869110910640922*^9, 3.869110910806432*^9}, {3.86912172241117*^9, 
   3.8691217224768143`*^9}},
 CellLabel->
  "In[429]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{"\"\<TrainedNet\>\"", "->", 
         RowBox[{"NetDelete", "[", 
          RowBox[{
           RowBox[{"NetFlatten", "[", "#", "]"}], ",", "\"\<Loss/Error\>\""}],
           "]"}]}], "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", "}"}], ",", 
       RowBox[{"\"\<Output\>\"", "->", 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      RowBox[{"HardenNet", "[", 
       RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}]}], "}"}]}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}, {3.86912103176339*^9, 3.869121111451393*^9}, 
   3.8691211481142063`*^9},
 CellLabel->
  "In[430]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"#", ",", 
     RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}], "&"}], "/@", 
  RowBox[{"{", 
   RowBox[{"trainedSoftNet", ",", "trainedHardNet"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}, {
   3.868964207787449*^9, 3.868964270803673*^9}, {3.869042816860148*^9, 
   3.869042853385454*^9}, {3.8691211223288383`*^9, 3.869121124951189*^9}},
 CellLabel->
  "In[431]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "d9f33189-401d-4b98-9ac4-bac1681f6a3d"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"98.8", "0.6"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    98.8439306358381486461`3., 0.5755160004611364899`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"69.1", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.0751445086705189169`3., 2.4883140570071944353`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.9712191969434376126`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0093119523053471487`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.9525952923327433153`3.", "\", \"", 
                    "0.98984310155413191`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.9525952923327433153`3., ", ", 0.98984310155413191`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.0292030926619580578`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0095877528670207934`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.0100275869279164709`3.", "\", \"", 
                    "0.0483785983959996446`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.0100275869279164709`3., ", ", 0.0483785983959996446`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"5.88`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"990.`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                   FractionBox["\"Examples\"", "\"Seconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2BNLK9po5P4wfmefUzCr/tv/N/afo7//Opz3
wt7a9NLtbpe39v2pLstsy1/ac284fpqp+h5OcwRMV14JPvrW/vHtN0r3Y1/b
f7YP1HPTf0KyObjoEyJ7ww6wvrGvnHgr8BD3E/uqN2UPSl4cxOl+QuY9rBJZ
5/7wlj0DCiDePbhoAMbRdDU=
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["239", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{239, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["81", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9759036144578314`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9878048780487805`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9818181818181818`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9759036144578314}], 
                    Row[{"Recall = ", 0.9878048780487805}], 
                    Row[{"FScore = ", 0.9818181818181818}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.024096385542168676`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.15384615384615385`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.024096385542168676`}], 
                    Row[{"Row fraction = ", 0.15384615384615385`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.07692307692307693`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.012195121951219513`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.07692307692307693}], 
                    Row[{"Row fraction = ", 0.012195121951219513`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8461538461538461}], 
                    Row[{"Recall = ", 0.8461538461538461}], 
                    Row[{"FScore = ", 0.8461538461538461}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.07692307692307693`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.08333333333333333`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.07692307692307693}], 
                    Row[{"Row fraction = ", 0.08333333333333333}]}], 
                    "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["11", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9166666666666666`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9565217391304347`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9166666666666666}], 
                    Row[{"FScore = ", 0.9565217391304347}]}], "Tooltip"]& ]}, 
                    
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{239, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9878048780487805`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{82, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9878048780487805}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 0.8461538461538461}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9166666666666666`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.9166666666666666}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{239, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "83", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9759036144578314`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{83, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9759036144578314}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8461538461538461`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.8461538461538461}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{11, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["239", TraditionalForm]}, {2.5, 
                    FormBox["82", TraditionalForm]}, {1.5, 
                    FormBox["13", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["239", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["83", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["13", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["11", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "acceptable" -> 0.25, "good" -> 0.25, 
             "very good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "medium", "very high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"very high", "low", "medium", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}], 4, 2, 3}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "large", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "high"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "acceptable", "good", "very good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
IxQnPWU/ZoygCJuHHBcr0JaVf2E+5iy791SZFOaPIOvpA1h07i+a1H6zSB9x
+uTYj38H8zDJcABuGoPYbi1GmWsHIKfCJ0/1fojf51PdDBF67tbwHu2owIXX
5qiz5VPwkD7cKfvD019ejOpJSqKaOClh/dHCwvlHeoWrHPlkFJcueD/PWKi9
JVAwzgWiFUPMhLsSNwoXGk4RLq+XEhpbbhXqFaYLEo4OF46ZO0s4LJ1PH6qS
BTIcD6yKCxIq6/3/u3bTReIPnggGG26JbHVMhbvVNossTfj0jBcl/P74mHCn
pVAovSda1Pb7ksj8+Kji8o3XhAULHUS7x/0T+rWaC0dGnhOctwwR7L4WKTAr
49PBKdz66y4VTP2SKgjsNxcUn+bTAoOlwofbkoS2m0KFJmMqig+3mwgV50Zx
bndNqN9fKTzM+ZrfvPDi3ToFgpUazsLckuqi308cixoXygp/fXejvgWxmLcu
Ch4c253ZrYXq7DD4MD71NsQg+mQs3nSd4v0cVsQuZPJJ+kIk1H7EwlY8Eh8t
4vCGy8sOp5PIVY/GQMB4lGW9Yqe4/Gs10sCmryrsg6ERk379D5Ndu6G2oIMX
1G/HJJ37EWTTgmmlvahv2Et/u2Mx6xqfvOvuY+2jn9h5pB3OMj8x7mYszpy4
y6RXzuQJkw2xenoODq1p4zVuScfST/OYvAufXOQMiEznkNIsPhmMXk3/bRCj
ij9j8emOFZyOvIJxRhN0R8pieFwkfMr/8pLzlmD6iTzsN3MgY2k9utiih8Lc
Kxi5sBnnvj5D7NKbbJO/CTm07mHjuw3wsFubhrVY0+IefTpC8dBaYYYZsyzo
/Js2zJ87g+y38KlG+hJLWieLdyFFiEg9j3V/BvAzZwvLm8rth6fJGH9xKg3v
CsPUa65oWCdA+jQ+2d/vg4nTJ6zN+ofHO01pj3godMfrYkFsCFKXXmMWWgmI
m/UfDliORvVAN8Y1/mLZJe3Mt6eHFVnxaaL+azawvptd3/mSLY7i0y73Lt5E
3S9MRa2DKcl/YvN9PzFn13pmJ97CpP7+YOn9jcyy7DtzEu9iHxN72OnX3Yzu
TsfWf/3s+B11EpZ2wk76O8YL69ndUZ+xgNszPqVLeMZ7NWiafRiW2HYhzusb
EuQDydpYDcM/z6Fz0/TQffYbFpeZobTmK77zBrG1+gre/biCU8uTUKZ1FdEL
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
i3Nv8zBn8wvIW8vRlkqO4n2D0WYlR74iHxS+ruc8Lx9AwFcrvJwvR4eXyNHc
kRb0YqqQ/vzKQ0OkHy7lvMLnqL3UMX8bqe7KRJ2zFAlap5H7YTfaveQGdh40
JzjYsRkHilC0OxR3vYIRr7UL028PIve7MnxeCUmJ7/tTZA1Jw3wuzeyzJ+PI
ccTi9qBzljQdj+Dd94oClRgl44lBH2bqSWCPdg9iB9/E9DlCunj3GxvuksHK
5fja8qAL8WNv4b8loXCP3ID1P91hM+syUhYMoPonWowiFTiTk+eZQ/VkOlIK
khm7EknC/9j7LiP6Q9UYNM4aj3xn0tTwa1zGJlNyThLSpj0mZLLAlDo+mlO9
tjpNujOAbXyaisq9w+ln9He4X/mBuqR59CCnnzkva8DB74lsRtMGOrqyAUnx
DfgvYDXd+NOADt+veDv/I44lasF40HucdToM6eMN8Azi+ccpEv+kNzPPycvo
6yw/BPTOgiDAkPr/E1J8vCHVNORBQW0RqV4zJNMTt1Eo0Y6HPSoID3HgtssY
0WoVQ/q2TQlfNwgpd1owtj9+wo7tNySpq4a0uMCQVA7EsX11ybgu/xC+t5MQ
rPEQes8e4vmIRNjcuoMDox9Ab84dDOpMxPHUJJx87Ae/CfEIcufdNCUZem3J
+PQuGc7Xk5E7PAhZvXcx2uclJp/+iew9cVA604TH94X4aO9Okbtf4QX3B83+
zfhW04oC/TXYwLNci207m2Zgwbn1r8N/Ny3RH9KEuPtSdPLoTgwL+gMbBQ8q
+cj3Du1zaVdONYkWzDmR3mc6TZxnsVf8zWy46FDRE1HV/+45PcFYXLfnjGju
IV1RW4ufeJb/IvGyKNe0Ap65/SSVxSPP3053ct2Z3jFYSIfMDUVeLkswZ8IY
Sv50C9PWjuUe9M+kRwqNmDRdh+wVlKnTbRQNk7VHr6UKTVg8lALNb2Nu4iM2
yrEY/fkfcN8wC33mGujmY/kDz8nZX0eQ272NtGuYkIyWCEnrggyOXFjDDv5r
R7rGSwz0kaOajQrkmngWMgITmL43op0ln9AaO5e5qCrQHZ7F5fvTMKh/EnX6
CsmrSYvMv6yl/5IOsKmXw1hPRRhr1BaS2uxwVhUVziQF4Uz5VTjbtjucPf8c
ziJ3hjPxsBtsf2A4ex8Qwow8wtjXKTfZ2P/CWOddfzZH5RYr9wln/5mFs4b4
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

                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {21504}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
30mvnljPXLAVzx2/cNJsJ87cl+vFLsyQHSsUiJp1E+aXfEWceTQ2hEshta8R
Gt5HIKHYBCXfPxjy9B76rjTBbr4EHaL+FacGFpPJ7f2wMf4wpWDSNQyQVHzf
nIelySyd2xCCj66ZsD+TC/+RsbCL4MjnnznoTmnED81cNCfvQoZROqwCWu2N
jB/C9+pGyBqGQsU9G3e2mNA252x0GKzB65vy6OpcihdfNsD5+hZYKK7CjqpK
MumNJOmu86eDXtUSE8V1mLh7IdwPsjTS2wtLktbhavo/bOPWYum2+WDuekPi
v6U03W0loiLC0HbwKFwalyNS7J6xC0OxqT0U8Rf+kApDlhpl2RL39eK1viUM
MyZ2k/W7jkK5LgzHyFHsLwzB4ldh4M2LyT4TN6RtriUWAfqMuWMVqS8qJgE9
ApkksFTNupMZ9fsaKV8sjRtZFcSVppHEC1+YfReXMPcTFanrBWU6Tj6HnAso
IVueytBL2y6R/e8zif5yO3L4tRJ1VC4jqSeaYGg4E9v7NpF6a55kyWYjdLcu
DUUBKRavNb3HP9GT9JZcXFsMX6VX8AzgSGXMd+jv+oWU3d9gv7ADNj+uQGVU
O+i0duj8bhYzZSVeDX2KmTtYuiPwBWb/V4VlktNpkfFzlEa+xPW/Vfj1eyjU
u55hkOUjFCR14POxZ9hgdBNeMcng2SooWD0lfU8qIHVnJjVtr0KY2Wmi03yK
XJt/kjArA6lFfRgRhkeQtGWBZHrTUjK5LIzkhJwkQ1bFkK0HT5DdEXGkZesF
8t+uncSBP02WrDhAWi8upD2qJ0kNs4pGTThLbO+MQ+vPk5iN/WTCv7NoSo2G
jXhskq1OYt2pRDDVUZD9Nh9LvyZjZu5paG5mqdzQUKwLOYZjk76TX3mnMDot
AepvdmNl9Wn0hJ+GjMoRkY7eDP5ChqtwcN5qod0jkG7o3CEY3C7nMrt8hb3j
lAXdjvn85rqVfFLRPFry3YcuODVCCLnjw9nsXUBXZ2/he5tUhN1rY0WvHntQ
88fPuS3JFYx20nemaqMM0R91hwmV1SZfDpQwK6/2MrUxOsQh1oKMHmRKiv/U
MMcXRWLrnE4m8RtL636PI9dmsHRE3xRC1EcQuaVWJNHpOIaJ6+wrS3VhQYMD
1zE3AIG+o/msnTHC8HkpnEbbO5HNuFahfWcdLxHjJvJYVsvrypkLZuI1fNMg
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
/CI/SNj1bJYoadlC0a1n0wrm7LIXbdM3FJ8c0XxbY3kNs2l4iFUfnKjKfjD5
TOdo9zCOLty3o1SJyeRdO5akXiogqdeZVuxaRyem5zDr/5wofd9UMu17xmZ9
bscjtzqE14ymWcutKCjakTzeBsL8+VzoOtwR3OJmYYWOB+wtZ2DpxrXUXT4J
u6smYYSXBwpfnMGGTa54KB+O5x6zsO/zf+zSOVcU3pyDkPoU6G4rYluKea53
c0G/xGFMc21BtZM+TovBfDdehc9lJXpxdSBJvYtgX3Pk6bjqPxwtr0Vc3A7a
kqFNx0ZxtAzaJDk5Hu9Sx9INa476V4ym6B4XctjG1/sRjq6FbsJtg5WYoaQL
pZO78HnKHFw57E9XJXciYsIeBNWuQiHPiF5ft2O34yo827wVEf3r8fHeFoQu
4qhEeyfO/N6JTQ1lMP+0E5//vYdSnS5d8z4OZb1YdsDiKt5edSfbtQfIgGeu
xIX2FPbHEQ2nXEh1uTs1SS1HzU/g+FFbOpV8WJDwdSU2aFlTtHQWysyU6Vh2
OCYqbYGyYgUztK2BDc+hPsvDULypCtunVGKKxVC4TqrB4qwqbHy9jp3WrER8
ZRWKUI39vx5BNvdOQXJbJHLOcySfeABLp3J0IHKS46PPETjtbE6KFyRJefEo
9k5jFv2LM4PePmPSyx1Lhom2ML2xhf58GAWlLxr4bw9/r5uVMH61PdXoahHC
ouG4VodyV5hS5ygVMlh2E2/1OOot/YmFz7/jdFMSOu5/4edIPFNpa2RFAzoh
F9ODayYctcYuhu3Rb/jZ3wF3O1PITDjHdFw4mlSWCvvgLrwaXYAJOtMgutaD
wPP+zEZZltbpuaLVRpY2Xj2KcjtZqi6cjs3DZelYjQw9tJclFf69L70cGQlk
6dQ0WYqR7YGzkyx9XW6I4IbjsPfieffwPyZwkCXrpNkU+XYExUXMooy+IGZz
woUG+Ax2qHrVxoouKVN7itBhrcRYiuTn2RkPjrykX6L9RgouyPWwsoJZdM6L
0TZZV/pe6EVZbeVMz2UmLZt+jkX3b6adC/8wDYu3zLK4mem7d7GuF52saUYf
ay1pYoa97Uyfuth8PmtWZf1iHnwv/8p/z/rn+ZL7gz9s0rQ/jEvrZup7Z+DZ
eA/WcyAWe8QpWKCehGo+DxOWhWDI5nS4pyxgmnrnsf5fEmIkz2JoqTbtfeXP
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
OD46BsubOG/ttRkrRPX4wfnms7l6xEvQo3Vy+hQ81BJfButTlLYe/d08mnZ8
6kPQP0/sfWsNF64O6IXq0qNqXQoqUadko8XU6DOfbZmyhtlKzmOqHLeHPlnK
kpWMmee9pUy4w42dmujOzu1ZxZZ8XcWO+k5kOrojmfUSNzZPcgULll7Drn1Y
xSDryIJejmdvfXjM/2MT9jl7s6o+J/Zux0FmX8GnNXc2M7HFIdb6fT8zunCA
xUz1Zmte72Mil2FsYfp+9nb8f2zOl5lsqO4+NjVkEXuhd4jldx9gJVXbmVfI
f+ybrxy9C7gpWNP91m7uUXneuysqvH1eyryWxGG8me1P7fbcVuCpjwu1e9c5
zO41afMmd74WLT+91m7vz+W2Czlvvc6423aqxUc7/ZP37UxUlXgKhwLs/vqL
sKShBvtq3DBTKRsN0kKM3yaA8hEPzPUVYDXHqzpxuZh6VIDZewXY9WMivVup
RZ/+jEBB8Gk2vfk1ahMEGCgSoOrmXfx8IECh6wD80gPQOs8HSX272IlXQ2C1
0x/eUwRYuPcR3IO2sJcOjRhvz+cdbpYku4QG/N63kcmU3cBz1oBbzz5AyHnL
50lNkHlXj10ShWjTC6BLq4fT2VYDeuJnRMPOKfH6PIzJKVGZ5p6zhZXcYHIx
XkrLro6gCUlDsCGET3G/z7Pa/6LZM9Xr2Kv5Fsnjp9Bg4TIMzBpO7otsyLrS
iKZ+MyB7+RrYu7zFvXGvse4x1/Q1EehZi5XXtqMUfJLDC5i/rMSYyRuYY74E
1Wx9CyuNNxgznNPic2/wwboO6a91UXr+NUzHHmJXNIRsr0Ii03tyiZUdvMdk
udx5E5TOzk24zboT77El0Tlso9VNJvPlNquUvcPkh2Wwqb13Wd7KXPbxeDbL
1RKxHwVWvOFeuSyTf4eJGl3o3KXlMHpqRmf1H+BnowUt3n4MSikiRCrySGLZ
cnopHYT9mQqQ3qdLb/7I8/77cZjGTB9E9pf20HVkwtrnOCvvnYRbpq50zmsE
9uyOxfOQYCjPTYXCmdvYPBCNgtYM6M3xBZ43sY/7MmD/NwvzirMgv4tPbr/u
YODUC9ZkI02Vjnex9dYmPM/IQhD/DjoeLsduq1y8iS7ASOeppOX7l9d+rYwX
HP+P97lGghV8lmDBWp28pS/9oCVu58lO+MWTDJNgqvH3eee/DfBO3eDT5JxP
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
cViuTX9P6UGqhx5pjgioLSkGa1YGsf8DM29QnA==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {21504}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/3" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    UniformDistribution[{0, 1}]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`RealT]|>|>,
                     "Net/SoftNet/4" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
50s=
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1024}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
h/8BhpztIQ==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1024}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "RandomArray", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Distribution" -> NeuralNetworks`ValidatedParameter[
                    UniformDistribution[{0, 1}]]|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {21504}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {21504}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/9" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {1024}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {1024}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (
                    Slot["A"] + (Slot["B"] - Slot["A"]) Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #3 
                    Subtract[#2, #]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|
                    "A" -> NeuralNetworks`TensorT[{21504}, 
                    NeuralNetworks`AtomT], "B" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|
                    "A" -> NeuralNetworks`TensorT[{21504}, 
                    NeuralNetworks`AtomT], "B" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/12" -> <|
                    "Type" -> "Function", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> (
                    Slot["A"] + (Slot["B"] - Slot["A"]) Slot["Random"]& ), 
                    "Net" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# + #3 
                    Subtract[#2, #]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]|>, 
                    "Inputs" -> <|
                    "A" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT], "B" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Inputs" -> <|
                    "A" -> NeuralNetworks`TensorT[{1024}, 
                    NeuralNetworks`AtomT], "B" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT], 
                    "Random" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/13" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1024, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/14" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/15" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/16" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_413305b3_51cf_4b38_96a4_54ea71a67fb4", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
MCtLi2PHrTTniltoJPtCfyKoT5czEjYeFY7fapbxJlPAkmgMVv2dPGnzmEDJ
BjPBrCrUJdAMdZF86TLEuL/x6JnxYUSXY9Dln42zN4/ZKllnJuAPaDGgj78Z
F9v1HZaLzfOvFUu/E2P7jKgfsGQiNbkomOSRtoa2rmqv//FksrB0fLerXCcj
Y/KtvcASl3k7kpOw3EzUkYO4xKpUc2n64cL5mw13FBngXDq8rlDnoJvXxqMC
g7wAh/09DB1NMjX5o1jJpgn3ycJNBt3JzEXUiSuT5te62kdtvGXG0eFnBGGw
2sT5tQv4pZ+7fw3ZLzOSkT62ngJCisJZLNZRsfjhwiR5RpBFajR0wVhuVcIW
37Z5ZYu0zxntEzjX4rg6q3HtwnEdA7j+frhwwWbDYqFxEjs5kCzkV20tzTQX
bB5TGpBpziomkVLH9sFsjElcMZviCu8vRrm5uW06GmBcZsaxspgCqZiW+5E1
5Cjuc0DsMwKtwREbUCP2uztZ71iQR2osQUs5aYHtxODv1iRFc2uhiwsVurzA
u3DYqi7TvcjjjgX50+MZOxDn3Uy6XSl6HzIm+6bG6Lyu1L1Tgnskp+bU8VNa
rTybtd30QN/3g74H6OEGbUFWObFji7vNs5mwxgTPI3Dt8NHNtvKJLKycG4Ke
ZZVzxX+GQOjOydb+D98I4nnnpZJvyu8L7kmcOiImZgtvsbkpRiTrei4Voh5f
p5fwS6WUhK1h5hOyqf9UaZVsKC37FvmlKobaLx1U+6UY3d4yS9f59a7gl85w
k3T+jJ461eUtm2vQhqD/ZiP3l8VTub9Vp6iB1o/SdeTENLUwzY7lME2/YDt0
6UVdQvEu3V+6nKZutn5UqDPMiinxH/I4hDCRjlHnHMfUmJzVvfSnZcmCFDfC
Q+oMnNn7UAoekvLCTeyPTUEestlNgDXwYzaTp+iDJwom45EIIThFPdvv1Cjr
R1zdSUTG2gsIXiw2yqYOg38OvbT4GJr91pfZT6hnv6Jb/6el6+ITxOxk3YEz
1x8aluumlKKkh/HVpO8ubcVdG09ievw/mUWWpMUxJYXmkX/gmMSoMfGfqk5q
LlNFwCrdGQQmGdSErdn/ACZTIeMOrx1zAmHSpsak+JQak1xd6UNLiuctN0DZ
+P3ik3iS9gXli2rAu7onHlqWeJYqGQYof3x4qFz3kps98yo2fRcsINbxp6sj
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
2mFJv0xJfvvQcCu4pFjcOUEAewarrJ8MlMuL3Q0KSBJujLaUj86BZXjM9AZG
NOEbpfkQUd+gdd6n9eDtP+AlUbVzVAWho815+R1Dfk0gz99GLV9joNuj0aEB
GLQXz5Q/Q95zEGfV7lOgIWinuCUP1oQniXy7US4N1TUex2q4VXH6O9sR23uv
eONSr7UE/PHdUELJowHbhjmp2dW94426vlob9q9M5jpk7y30Ubu3cZ288zPx
DFkk493kYIQ/l9kP94AzKhvlFqsLYBmQjzvtG2HgtDOicPNrBZVQLq7yYTF9
EBe7HSS870Y7jBvgn41VBpM3VNMHS3PC7ORgdhNQqR+MbTXKXVLa87t4fXhb
+25wlJjS4Tl6w4K93vP/K37dwOPXc8Icc8GACVOOl/Em7bW2KDaakfyL5+7o
H6b/8p8fouW/Rwbs3p08o8Tzl+hjyRs9f9kekBy92KlcvHWulDbt77VXo4dk
8aa5z8XSrbRzt3aevPmx4PxuU8dXWDB6H5PfLhu62lnvfsC++Texx9XdjYnm
xe57SpfTT2hK/znVKCo9H2t67e6vZPM7d4NP9x3uSZZuFnx7u+ajkaK/0f29
L/c3scXN6JfuB/hQYjzorHMPs+WaHydN6z35JlR+9V29+yV7f2Jg9z1tDynn
3nEnnCuM3S2TFdzfaWrVIzlHPjvvarCp1SrSNm6K1F+6+TPvLOv4uyui0kzK
RQnLPMns+Ls0qcvW8xP6D9fpbEWz/1wjOzUc/Wicx3RucfzE/sOtOhHnk7em
v+rquS1LbCijf68pjbpTI2pjULhnDdPJNbKh84nDfexW/fTp3IfyvP7T0u7D
x2+KSu00EI13z4vOvdluarUoCVBZ9xiQkmEXyGfvPNhu+lt/nfv7YKBQtv0l
YB9BYH9LvuexrOBKpOm1BoS98c3tpo77vxON3/QSG8O+cY99pK5LcbyPbaQN
+D0Mvt3P7kGYPgx16meXjM+kuUgZ+7aeX2CueeZYxEv38gXiCQwzc87ZY8NS
i5TNf4SbXrsvPkc2PyHbbnrtHRr/xM3dprkPCGl217/pGII3VnKcbzUgR+u5
A0uSIs3fK7aYR23wPyNVyBX6LP1AdGV4+EdsvIli++lb6b+9gTF+x4focq55
N/w43DS3EEMKUdiz++aH01dFbbssgFdJjyM3XFDUuf9t0n84milGzN7zILZ+
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
a6Q6EX7j/wDb6Nl1
                    "]]|>, "orcInstance" -> 71659360, "orcModuleId" -> 
                    75163792, "targetMachineId" -> 67236336|>, 
                    139848107697984, 139848107697840, 139848107697920, 
                    139848107692032, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_21288d38_4d30_45c5_b415_b4e841199417", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJytWAtYU9eW3icJOQcM4QSjBgl4wsOipfQkBAiCNiFBo4INSKe09ZYkJKlo
gBAQAV95SaLFGpXrRWvbaG3H22nnw/q4Xm8fCaClFTtQatWrV0HwMa3PatVW
7zj7nCTKODPfN/PN5Puy19lrr7XX2mv9e+2zj0hfW6pHAACkAIACpf9cFh+A
CNjXc8iUea98YVr1YH/FuBJbESUj4gDwMwuAcQwRYMD+RPhH7cmbFL2suWxc
krsZcXFSI7C4RNabepugkFGweVxBDy7hyzDB/CiJ3qO29IiSVbHuNlyxmWHo
xfbyCeVsD/E1ItG7BNPTpnvFKzsXbSKO9sJ51xEAzIRUkuSJJPSzgejZlA6B
KBU2cc9w1u72avWGRUSKyeGLaQWXMLndkcsgO5LlHv/87UnzOlZW/XZ8i96D
8fanMTrbQQHJUWpYhn7xHFyj94zIuK/2eVMis5LB7Caug1PHscs3T3t3Fxa7
aw/ZpR0wrt+JfeyQZOY7C+Nf/45f0jVaz71NjOM1l4yqvpSm6gR73k62eTd/
6In98L1D716ZtMOUtH3uPIVts7Swnfy15xcoBB8+0N/HGLu9qsymC+rdcZ/p
iEHsX+R7psXWYXjp8aHoiXtn4zHWYguej2tdcz7c5poGCrDvHQ7rhcVoCczF
C3Dt8Z6hR/CHyv9qwxAvGCevlrMRtS1iTzbRA1L8DE38jgu0gJ8P5f8NeEHU
FWd06y2Kx9RGyQVm8i2k3LaE6XxIscB+RBtlmwJi+9F4bwqI1SJXtMydOJhi
tmylxqeAheAhsDGHYkAknIc9nrJITGaUZ+NckBLvfYZS+SianQIiO83eXU+r
YExfDJhxiphLDbwAPgT3EYD6oTkNogN3AmzTb9QA4mH6Y2wvgBRfTDa/DGf1
tu6KdYDT8nLEwo73vAm+1TLtkf44MBfGAIcxGO+RCzyRCrGInIodFcNEKbYR
6V2sJO1bJgfOGc++bJ/KGnDJt+NF413+bSSrLEuBfRypIEWHprJOufyM8Ykr
/cy8+xF5Pme2zV23mNmoRpfvQVee0kZd7Gdf86GwvUmgywHaQqJWH1pPoNUg
xmpB6+hnihkUgM9atMGHNsrRai8XtlS3n33Jhlp8aB2BNvWzr9vQFhxtDCrS
o/tw1GpD58VgvNiC1rZ2gEgLOnZcDxzIXfmn4arGV7jrjy8ST+IYVh9T9O3/
y1vocF02/s3spesG7/CxDz7+yzFfx4aIzQHDp+0/fXtOhBwVlTEBkMOg4AI/
92tvrH0yfIYb0eYHrWWCvcGAYTbYAIHfu75+MgFYIPxjCkr/qGAhCEnJgJDM
khhpJEZNIac51DwHvCVywH+sxiZ3W925h2CBgB0WLcbRqidM1LCBH9YEgi4E
WqD86JAnG6ihA7R5jDK37qiKDUAK5SMRmuqjDb0cGxBQU4HQVMZE3mSA+MZ6
9eOsxCx6XnpB0LRN9Pt1ZWbA8gPKIghZTFh3NqjzxHnzp3I54ASjErR4eAvG
tYHysRbXTjeQqJxeUGiNxF6F72Y+AuQTMTZVcxI7+HG8Im9b5NQ5R1nKebPB
FQFV//ZCx9+BNBOzCXuGhSY+MtOjlLm62wpsaHMTWt9Rx7kEYq7h3Ds2bian
ILErkPDtTqGJjKDFnPF9zJm9ypltzJl9TW0NFnQFhjar3RYL2mJhNja5LYQ7
ro/HverlDpMxNWTMyE3uTQ03E+9JOCcSnhIldOkSTeS6vM+cef3K3P3M/M+c
+S5mXt9NfqMWXbEYzVnstsLW5rZ43RYt2piGNt6PgNMut7krMHedwG3tcDd3
2NOv3+ReH+L+4udeJZn63p3C0Z3CPro9qxN+IxL22BO+0bF/8Cpze5W5HXR7
qFvWrpR5mHnt3c9Dow8ded8z8zq7OV9VuS3lbqvF2bAYbdK6GwTuBp877tuF
MddBzM8a7qiXOyKPGSa4V+EqiLSEs4HELkXidyLhWXvi2SHh6HDCj0iiSVAi
61TO2OHM69OkhBaidS9vQps6SorueGOoCCQuSfxGJ7wiSjgXSFiNJFIOixJu
6thla52yvu68TuVMGJCHXfmjyjwP7Ha3HYmCK3Uvh/5gaEsaau2wLxrBuVf9
3Isa7m0yOfCdInF0eNKp4YRz0AF1XF6nc+Z+Z7yrW9amzO3rzj8UyO3thmvM
71Pvr8NQ6FUdDGC5O+7MUe5Vbcy1IVgPYi6SMReJmLsabg3OHSG5sHt7iP2v
Q9xRDfc+mXzhqk7YZU84NTzpqijhkiihR5QAM3hFNMVEvJP3mXLmIWZuuzO3
r/wzmH242Bbop9q93AKj5+ZexLk3aW9vkNzbXu4dDZfCaDPE/WuQWhPVhNLD
iYu0StREsr1t06YBlQ9PM+SLJQVveUXvNxFJjIXx2g+GonoYL9eaTVZdNaGs
rbZUmY1WQpIhzswQZ5CEqdZKFFXVLGsimmTZRFq29Dl9VcM0Im3eshojIc5O
JySkRDLtZaOBEJOEYtkbdJ8QS2ZIcmdkZlYs0DVUNRorKoqXNej0Veaqhmal
ubbGWDG7okKjq1xqNCisVl1zRalRZ86WVkj+a+b/xyQziNRGnVUslRXrqmqo
f5AhgXuUFeDYSSXZq9Y6SnWV+5bWz01+tv79+FTZz39eUZm5ZdzS+r3Pbnl7
/or6+FR56eEQi/dP8yuTH+yav/TZ+FQ1+CPc7yIY83FR1jS4j9CWcksHzF03
RGxuf7fjkvDozugrCmqbX6KSS+FzonREy72sgbCPGaXAH3NZw73TabOjzWn0
rmxy1wUxWW7Z0S3bj+Ttds5s72YshRtceHZYeJYQjuqo9oo9sUsn7N8p7A0C
CRmApZCqTWhf/m5n3g64GZkzfc58uDG93VRt0kF81FLnJaswnaqa1Dscvw3w
FXHfyyP7NdyIEkZhCayMt2DZg6cIeNa1tlxMzt8r0sISzUbjxGkAZzlzPf9s
4hwv0BBenvN9eIp6/T6tw8TxbtFovCYOcz9N2ts1uHfc7nixfAfOYv7IwZL7
D4vTTygV8gyf9pRNwGAIavA0UiAmbXDKo9GM2q0i3MFzXoAT2s6C7an4YbF0
cqFC3hrP4HJmczgEK+Db5JRzTHHsJIE47V04q5q76xWG/n0LQVXp7MoyueHM
wYBgAn56f83z/XKMF8CP35mjEkkHI2WqTOLI8Z+yqm88WsXiDnDUdfdais/f
e++1thJkU/G9xl1l8rLLK6ofeAYo9XvVKeoIVda5B54P0ibgJ1pWjczSJ82O
UC3beCaqFCn55PIsfToUOPDFA8/vCSjQfD35Hyjr53+LyB9USNV1t5uLz/xW
e96fmaBy8pe/d/JO9aNDL+FQ0qSgnIwoQQZWAbcUGbhz8pIecgZlACBimDe4
jtdah7UHOawuc1yb87SEwPYZNVzTMT/BCZ1DVA6T6Bwq6RxSh5i0DbSD1Czg
StVRUbSvR3gcrZPnZGAKUu78R4GYgEFmyjSt0VgGYdMx9ckM7VYCQyldqnA8
Y+P7k3gvrK6wJck4I9LVqiLUQoLvHjZVx8V+R4xnpKvZRZ7BhgXKjtnJIYEv
bo/xp3UMpthBTLXLee2K6MeYSqZlKVyxaVwdgbg6trdgsWeCc5AfzzAph8y4
kP05PjnVuWKaHIt4jLVOaYHT2Sbg45gjIFz0aiYbmZeG93oCAy5CoDb55IrM
Vr01LU2d2brTQZNRaxrWG/HDBgGxAHMgJ9gunk2R01r4PsUVcOJxpRx0RzNQ
djKbzXdo+/sVcvY+jh2HJl6E8iq0P93ev2Hnr5IohuQs7kIEbQKBBnMonCgy
uU/CUZF6Tb4IY+OJqn0s1Wbk0262iuD5lwzLs+C6tjppDG48xS1FNq36aZZ+
BoTJ3VUPPO/w5YaHv0SraHTcay4+f3fjg15EyLFJ1xyfotAz1CPjJ0le2SDF
C1SkKvPvvBLs+GjyJLwYHYCwvZxV/dOX15IP0iD988b7niM0Kq8nz9JPnxfE
6cZT4xZCYJ7MoZjPFUGofnHyIJT8mpL8jWJKoSfZGx70RsqfbIVrySbK4cHD
G09Fl1L7YJY+TU3B/IHnVhqDKH7kmtkTTeEymsYlo+4gpxeBkGD9VZKO7jcu
xhcfuyns3yoq8D3X7ZK91hoFBeIumONkPaclNuTCE3ys/e9qDp8RfVGDp2r4
R/4H2BA8jQ0fKXmCjbJyiI2CJ9gweFUUNpYEsdESxMYSCgUnQ9g4ALHR9DfB
xOpdBDHJQJrlHATh5GBx4ZQno3ZBn4RVEEq5VyjfxyrIab3UDSexKHG2ltRr
5XBgQwLLRB4j8YBHcQtaljfix2Pxz/Fe/7Gh16NwiVnO4iOLZdTaM8MYOX94
o4DGyPlZVuZAAx5denbV64N/+jssNKkReNyXq1jrIokNLy7qbQAokzhecS87
OdqF8zgDRWtU/ILMX3sjVGMKTahONVN5fh4i4sC7EBGC9bBUbbg360LyD10Q
OD/9soGCSRSEyTs3DlyDkuS8YAnb2MGhkj8yy8rAqcp4u6X4zIM1DzwnYGk7
3XAjuTEEagGNEQjqqUGMYMGa9X/FxjkaGy/R2MDC2Ij8Xh7HL5jGZ0anatgR
YoaGX6jBRjdQOgb23A6jwKX1fRXvasWYlVxvqcZk3762ysljMmG9I5kv5poi
HaHix4ypGtYUFzLd2nl01gh7IF2pYMHNjzu0WnalT7aPFShSJXKmTLuzEvv0
Y3tXiZHMiEjatk7WupHfMkuQ+IfA53CPk7jfg8TaCcEe+2T8+5w+iXA2zD4g
MLapn12ePR/X1HnZUZo/BA7xPYapFwSzSq/8enOHPc5gudEJizGL1NtUUHgJ
iarc7O50pYNyAVAuNOLsv6Ur5EcUk9MMRu9YfVsAiX9a34+64noC5LHOtIDH
jtgIQUdgCnSpL5ZVJgzrDZ1WCB/rjQ9ET5lmENzMgzBkILD+MabDpdhFcCmd
gbQehYCTwzIDWAKLxvfXwQOdARSkxVmKHRZjq+UonzXqmEUdGBimPaS4zyQ7
jJZ3ffFMgYeRSJ3vBUhrtEdE2IbZOr5fuxVZD+OuZ8AT/FXFttQmOLZQjWm3
+uCGnQoPoD0TeuGx8+PRzm2MKZT2vMfaw5S2YntYWz/8dmrHYXH5RyCK8qDs
sQflEdADn0Pb4+uQ4xzfq/0w0xYCFEFcTD2Yz7tFnfYL14z7il/Ss2bwK0sR
r/Dh8lVcuns+eKRlr8Lp7mXTByH5wbnChSreo8+nHBEX8m+d/3tEmqObXDAy
p6chWo2kx946f3cmEdGp7lkzMslOHZOPPjnPKgVvqh7m1JKu50sC0ZT6l9UV
AUr9zP0EuvtJRRfdfRhJ69aebEwSRUtEfofB75IVX5b28IL883cnjN3Yt96g
T+Iv34mf9+SgFTJoc3drXhsY81KzZXUU7d6Zz3+nYIpULKV0cApvbX9R9tSx
E57YX/Xci6qH1IHS/vbJn1U9tExe6OyuI4I1V8LFk1yMG6wm8LoNc7E7/E22
qC3BmzYwwhePNyGNZbZrqdsx9V5ohi+Tz0NKxZ16rywPzUfR8dT1O3izBm/D
wRhIP4I0L/RuAMaMg5A89Qvf98OU/hiVAoAw9I4SphQfSwdgOnzmgSeU5qcE
7VCfPMI0zH8JPseBJzQ8T02oLodp2O5OEPyyEKZh/kUk6PPeMXYBfH/rCq0l
TMPyJ0JyJ57y81Kof+kp/j0QjFmYhvlsaHcCeELD/HgkqB+mYX467I8DT2iY
nxOSy3lKXo0EP8OEaTg+YEze2OF1he4ZseAJDfOp3+8gZuxBzNyn8EJdv2Sy
qpqqhiqduaoF3ulqa1TwGkddxszmxuoMY5PFWNmQUSWebTUaixcsqzZaqyrp
W1zpspqGqmpjhdJq1DUYx47QitXG6kpLc4aFrJIFm6ps6dz/YKdCIpbIZIZM
WYXUkElWSLMqsyr0UjHVGGVSsTg3VyrOoRypUM6taaytpJXo/stWncVitFYo
dWYzzShsslifyCwwLq8IX5oLrdZaa72xobCp0mihBhc2NJuNZcb6hjnGhori
MmNNfa0VqlUufiyh1tUYoGZwXSEJygAdgWD3DThhg9FaozOHGI9jZYUhqWnQ
mTNqauFCdfUZ9ZW1FmOGwVhphpd3MkNMGAy6TJk+U5eZmy0zZmVWGvU5BqlE
Rmbl5ugqsyplhsps0pRt0MGrfQW82VsqnzNTV/2Xix9/B/hffQXIWG7OKPpP
UaOw8O/w577f
                    "]]|>, "orcInstance" -> 71044128, "orcModuleId" -> 
                    71137664, "targetMachineId" -> 69217536|>, 
                    139848107684384, 139848107683984, 139848107684064, 
                    139848107683840, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {1024}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "29f3a80c5f77d11a", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/17" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/18" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_413305b3_51cf_4b38_96a4_54ea71a67fb4", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
MCtLi2PHrTTniltoJPtCfyKoT5czEjYeFY7fapbxJlPAkmgMVv2dPGnzmEDJ
BjPBrCrUJdAMdZF86TLEuL/x6JnxYUSXY9Dln42zN4/ZKllnJuAPaDGgj78Z
F9v1HZaLzfOvFUu/E2P7jKgfsGQiNbkomOSRtoa2rmqv//FksrB0fLerXCcj
Y/KtvcASl3k7kpOw3EzUkYO4xKpUc2n64cL5mw13FBngXDq8rlDnoJvXxqMC
g7wAh/09DB1NMjX5o1jJpgn3ycJNBt3JzEXUiSuT5te62kdtvGXG0eFnBGGw
2sT5tQv4pZ+7fw3ZLzOSkT62ngJCisJZLNZRsfjhwiR5RpBFajR0wVhuVcIW
37Z5ZYu0zxntEzjX4rg6q3HtwnEdA7j+frhwwWbDYqFxEjs5kCzkV20tzTQX
bB5TGpBpziomkVLH9sFsjElcMZviCu8vRrm5uW06GmBcZsaxspgCqZiW+5E1
5Cjuc0DsMwKtwREbUCP2uztZ71iQR2osQUs5aYHtxODv1iRFc2uhiwsVurzA
u3DYqi7TvcjjjgX50+MZOxDn3Uy6XSl6HzIm+6bG6Lyu1L1Tgnskp+bU8VNa
rTybtd30QN/3g74H6OEGbUFWObFji7vNs5mwxgTPI3Dt8NHNtvKJLKycG4Ke
ZZVzxX+GQOjOydb+D98I4nnnpZJvyu8L7kmcOiImZgtvsbkpRiTrei4Voh5f
p5fwS6WUhK1h5hOyqf9UaZVsKC37FvmlKobaLx1U+6UY3d4yS9f59a7gl85w
k3T+jJ461eUtm2vQhqD/ZiP3l8VTub9Vp6iB1o/SdeTENLUwzY7lME2/YDt0
6UVdQvEu3V+6nKZutn5UqDPMiinxH/I4hDCRjlHnHMfUmJzVvfSnZcmCFDfC
Q+oMnNn7UAoekvLCTeyPTUEestlNgDXwYzaTp+iDJwom45EIIThFPdvv1Cjr
R1zdSUTG2gsIXiw2yqYOg38OvbT4GJr91pfZT6hnv6Jb/6el6+ITxOxk3YEz
1x8aluumlKKkh/HVpO8ubcVdG09ievw/mUWWpMUxJYXmkX/gmMSoMfGfqk5q
LlNFwCrdGQQmGdSErdn/ACZTIeMOrx1zAmHSpsak+JQak1xd6UNLiuctN0DZ
+P3ik3iS9gXli2rAu7onHlqWeJYqGQYof3x4qFz3kps98yo2fRcsINbxp6sj
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
2mFJv0xJfvvQcCu4pFjcOUEAewarrJ8MlMuL3Q0KSBJujLaUj86BZXjM9AZG
NOEbpfkQUd+gdd6n9eDtP+AlUbVzVAWho815+R1Dfk0gz99GLV9joNuj0aEB
GLQXz5Q/Q95zEGfV7lOgIWinuCUP1oQniXy7US4N1TUex2q4VXH6O9sR23uv
eONSr7UE/PHdUELJowHbhjmp2dW94426vlob9q9M5jpk7y30Ubu3cZ288zPx
DFkk493kYIQ/l9kP94AzKhvlFqsLYBmQjzvtG2HgtDOicPNrBZVQLq7yYTF9
EBe7HSS870Y7jBvgn41VBpM3VNMHS3PC7ORgdhNQqR+MbTXKXVLa87t4fXhb
+25wlJjS4Tl6w4K93vP/K37dwOPXc8Icc8GACVOOl/Em7bW2KDaakfyL5+7o
H6b/8p8fouW/Rwbs3p08o8Tzl+hjyRs9f9kekBy92KlcvHWulDbt77VXo4dk
8aa5z8XSrbRzt3aevPmx4PxuU8dXWDB6H5PfLhu62lnvfsC++Texx9XdjYnm
xe57SpfTT2hK/znVKCo9H2t67e6vZPM7d4NP9x3uSZZuFnx7u+ajkaK/0f29
L/c3scXN6JfuB/hQYjzorHMPs+WaHydN6z35JlR+9V29+yV7f2Jg9z1tDynn
3nEnnCuM3S2TFdzfaWrVIzlHPjvvarCp1SrSNm6K1F+6+TPvLOv4uyui0kzK
RQnLPMns+Ls0qcvW8xP6D9fpbEWz/1wjOzUc/Wicx3RucfzE/sOtOhHnk7em
v+rquS1LbCijf68pjbpTI2pjULhnDdPJNbKh84nDfexW/fTp3IfyvP7T0u7D
x2+KSu00EI13z4vOvdluarUoCVBZ9xiQkmEXyGfvPNhu+lt/nfv7YKBQtv0l
YB9BYH9LvuexrOBKpOm1BoS98c3tpo77vxON3/QSG8O+cY99pK5LcbyPbaQN
+D0Mvt3P7kGYPgx16meXjM+kuUgZ+7aeX2CueeZYxEv38gXiCQwzc87ZY8NS
i5TNf4SbXrsvPkc2PyHbbnrtHRr/xM3dprkPCGl217/pGII3VnKcbzUgR+u5
A0uSIs3fK7aYR23wPyNVyBX6LP1AdGV4+EdsvIli++lb6b+9gTF+x4focq55
N/w43DS3EEMKUdiz++aH01dFbbssgFdJjyM3XFDUuf9t0n84milGzN7zILZ+
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
a6Q6EX7j/wDb6Nl1
                    "]]|>, "orcInstance" -> 71659360, "orcModuleId" -> 
                    75163792, "targetMachineId" -> 67236336|>, 
                    139848107697984, 139848107697840, 139848107697920, 
                    139848107692032, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_21288d38_4d30_45c5_b415_b4e841199417", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJytWAtYU9eW3icJOQcM4QSjBgl4wsOipfQkBAiCNiFBo4INSKe09ZYkJKlo
gBAQAV95SaLFGpXrRWvbaG3H22nnw/q4Xm8fCaClFTtQatWrV0HwMa3PatVW
7zj7nCTKODPfN/PN5Puy19lrr7XX2mv9e+2zj0hfW6pHAACkAIACpf9cFh+A
CNjXc8iUea98YVr1YH/FuBJbESUj4gDwMwuAcQwRYMD+RPhH7cmbFL2suWxc
krsZcXFSI7C4RNabepugkFGweVxBDy7hyzDB/CiJ3qO29IiSVbHuNlyxmWHo
xfbyCeVsD/E1ItG7BNPTpnvFKzsXbSKO9sJ51xEAzIRUkuSJJPSzgejZlA6B
KBU2cc9w1u72avWGRUSKyeGLaQWXMLndkcsgO5LlHv/87UnzOlZW/XZ8i96D
8fanMTrbQQHJUWpYhn7xHFyj94zIuK/2eVMis5LB7Caug1PHscs3T3t3Fxa7
aw/ZpR0wrt+JfeyQZOY7C+Nf/45f0jVaz71NjOM1l4yqvpSm6gR73k62eTd/
6In98L1D716ZtMOUtH3uPIVts7Swnfy15xcoBB8+0N/HGLu9qsymC+rdcZ/p
iEHsX+R7psXWYXjp8aHoiXtn4zHWYguej2tdcz7c5poGCrDvHQ7rhcVoCczF
C3Dt8Z6hR/CHyv9qwxAvGCevlrMRtS1iTzbRA1L8DE38jgu0gJ8P5f8NeEHU
FWd06y2Kx9RGyQVm8i2k3LaE6XxIscB+RBtlmwJi+9F4bwqI1SJXtMydOJhi
tmylxqeAheAhsDGHYkAknIc9nrJITGaUZ+NckBLvfYZS+SianQIiO83eXU+r
YExfDJhxiphLDbwAPgT3EYD6oTkNogN3AmzTb9QA4mH6Y2wvgBRfTDa/DGf1
tu6KdYDT8nLEwo73vAm+1TLtkf44MBfGAIcxGO+RCzyRCrGInIodFcNEKbYR
6V2sJO1bJgfOGc++bJ/KGnDJt+NF413+bSSrLEuBfRypIEWHprJOufyM8Ykr
/cy8+xF5Pme2zV23mNmoRpfvQVee0kZd7Gdf86GwvUmgywHaQqJWH1pPoNUg
xmpB6+hnihkUgM9atMGHNsrRai8XtlS3n33Jhlp8aB2BNvWzr9vQFhxtDCrS
o/tw1GpD58VgvNiC1rZ2gEgLOnZcDxzIXfmn4arGV7jrjy8ST+IYVh9T9O3/
y1vocF02/s3spesG7/CxDz7+yzFfx4aIzQHDp+0/fXtOhBwVlTEBkMOg4AI/
92tvrH0yfIYb0eYHrWWCvcGAYTbYAIHfu75+MgFYIPxjCkr/qGAhCEnJgJDM
khhpJEZNIac51DwHvCVywH+sxiZ3W925h2CBgB0WLcbRqidM1LCBH9YEgi4E
WqD86JAnG6ihA7R5jDK37qiKDUAK5SMRmuqjDb0cGxBQU4HQVMZE3mSA+MZ6
9eOsxCx6XnpB0LRN9Pt1ZWbA8gPKIghZTFh3NqjzxHnzp3I54ASjErR4eAvG
tYHysRbXTjeQqJxeUGiNxF6F72Y+AuQTMTZVcxI7+HG8Im9b5NQ5R1nKebPB
FQFV//ZCx9+BNBOzCXuGhSY+MtOjlLm62wpsaHMTWt9Rx7kEYq7h3Ds2bian
ILErkPDtTqGJjKDFnPF9zJm9ypltzJl9TW0NFnQFhjar3RYL2mJhNja5LYQ7
ro/HverlDpMxNWTMyE3uTQ03E+9JOCcSnhIldOkSTeS6vM+cef3K3P3M/M+c
+S5mXt9NfqMWXbEYzVnstsLW5rZ43RYt2piGNt6PgNMut7krMHedwG3tcDd3
2NOv3+ReH+L+4udeJZn63p3C0Z3CPro9qxN+IxL22BO+0bF/8Cpze5W5HXR7
qFvWrpR5mHnt3c9Dow8ded8z8zq7OV9VuS3lbqvF2bAYbdK6GwTuBp877tuF
MddBzM8a7qiXOyKPGSa4V+EqiLSEs4HELkXidyLhWXvi2SHh6HDCj0iiSVAi
61TO2OHM69OkhBaidS9vQps6SorueGOoCCQuSfxGJ7wiSjgXSFiNJFIOixJu
6thla52yvu68TuVMGJCHXfmjyjwP7Ha3HYmCK3Uvh/5gaEsaau2wLxrBuVf9
3Isa7m0yOfCdInF0eNKp4YRz0AF1XF6nc+Z+Z7yrW9amzO3rzj8UyO3thmvM
71Pvr8NQ6FUdDGC5O+7MUe5Vbcy1IVgPYi6SMReJmLsabg3OHSG5sHt7iP2v
Q9xRDfc+mXzhqk7YZU84NTzpqijhkiihR5QAM3hFNMVEvJP3mXLmIWZuuzO3
r/wzmH242Bbop9q93AKj5+ZexLk3aW9vkNzbXu4dDZfCaDPE/WuQWhPVhNLD
iYu0StREsr1t06YBlQ9PM+SLJQVveUXvNxFJjIXx2g+GonoYL9eaTVZdNaGs
rbZUmY1WQpIhzswQZ5CEqdZKFFXVLGsimmTZRFq29Dl9VcM0Im3eshojIc5O
JySkRDLtZaOBEJOEYtkbdJ8QS2ZIcmdkZlYs0DVUNRorKoqXNej0Veaqhmal
ubbGWDG7okKjq1xqNCisVl1zRalRZ86WVkj+a+b/xyQziNRGnVUslRXrqmqo
f5AhgXuUFeDYSSXZq9Y6SnWV+5bWz01+tv79+FTZz39eUZm5ZdzS+r3Pbnl7
/or6+FR56eEQi/dP8yuTH+yav/TZ+FQ1+CPc7yIY83FR1jS4j9CWcksHzF03
RGxuf7fjkvDozugrCmqbX6KSS+FzonREy72sgbCPGaXAH3NZw73TabOjzWn0
rmxy1wUxWW7Z0S3bj+Ttds5s72YshRtceHZYeJYQjuqo9oo9sUsn7N8p7A0C
CRmApZCqTWhf/m5n3g64GZkzfc58uDG93VRt0kF81FLnJaswnaqa1Dscvw3w
FXHfyyP7NdyIEkZhCayMt2DZg6cIeNa1tlxMzt8r0sISzUbjxGkAZzlzPf9s
4hwv0BBenvN9eIp6/T6tw8TxbtFovCYOcz9N2ts1uHfc7nixfAfOYv7IwZL7
D4vTTygV8gyf9pRNwGAIavA0UiAmbXDKo9GM2q0i3MFzXoAT2s6C7an4YbF0
cqFC3hrP4HJmczgEK+Db5JRzTHHsJIE47V04q5q76xWG/n0LQVXp7MoyueHM
wYBgAn56f83z/XKMF8CP35mjEkkHI2WqTOLI8Z+yqm88WsXiDnDUdfdais/f
e++1thJkU/G9xl1l8rLLK6ofeAYo9XvVKeoIVda5B54P0ibgJ1pWjczSJ82O
UC3beCaqFCn55PIsfToUOPDFA8/vCSjQfD35Hyjr53+LyB9USNV1t5uLz/xW
e96fmaBy8pe/d/JO9aNDL+FQ0qSgnIwoQQZWAbcUGbhz8pIecgZlACBimDe4
jtdah7UHOawuc1yb87SEwPYZNVzTMT/BCZ1DVA6T6Bwq6RxSh5i0DbSD1Czg
StVRUbSvR3gcrZPnZGAKUu78R4GYgEFmyjSt0VgGYdMx9ckM7VYCQyldqnA8
Y+P7k3gvrK6wJck4I9LVqiLUQoLvHjZVx8V+R4xnpKvZRZ7BhgXKjtnJIYEv
bo/xp3UMpthBTLXLee2K6MeYSqZlKVyxaVwdgbg6trdgsWeCc5AfzzAph8y4
kP05PjnVuWKaHIt4jLVOaYHT2Sbg45gjIFz0aiYbmZeG93oCAy5CoDb55IrM
Vr01LU2d2brTQZNRaxrWG/HDBgGxAHMgJ9gunk2R01r4PsUVcOJxpRx0RzNQ
djKbzXdo+/sVcvY+jh2HJl6E8iq0P93ev2Hnr5IohuQs7kIEbQKBBnMonCgy
uU/CUZF6Tb4IY+OJqn0s1Wbk0262iuD5lwzLs+C6tjppDG48xS1FNq36aZZ+
BoTJ3VUPPO/w5YaHv0SraHTcay4+f3fjg15EyLFJ1xyfotAz1CPjJ0le2SDF
C1SkKvPvvBLs+GjyJLwYHYCwvZxV/dOX15IP0iD988b7niM0Kq8nz9JPnxfE
6cZT4xZCYJ7MoZjPFUGofnHyIJT8mpL8jWJKoSfZGx70RsqfbIVrySbK4cHD
G09Fl1L7YJY+TU3B/IHnVhqDKH7kmtkTTeEymsYlo+4gpxeBkGD9VZKO7jcu
xhcfuyns3yoq8D3X7ZK91hoFBeIumONkPaclNuTCE3ys/e9qDp8RfVGDp2r4
R/4H2BA8jQ0fKXmCjbJyiI2CJ9gweFUUNpYEsdESxMYSCgUnQ9g4ALHR9DfB
xOpdBDHJQJrlHATh5GBx4ZQno3ZBn4RVEEq5VyjfxyrIab3UDSexKHG2ltRr
5XBgQwLLRB4j8YBHcQtaljfix2Pxz/Fe/7Gh16NwiVnO4iOLZdTaM8MYOX94
o4DGyPlZVuZAAx5denbV64N/+jssNKkReNyXq1jrIokNLy7qbQAokzhecS87
OdqF8zgDRWtU/ILMX3sjVGMKTahONVN5fh4i4sC7EBGC9bBUbbg360LyD10Q
OD/9soGCSRSEyTs3DlyDkuS8YAnb2MGhkj8yy8rAqcp4u6X4zIM1DzwnYGk7
3XAjuTEEagGNEQjqqUGMYMGa9X/FxjkaGy/R2MDC2Ij8Xh7HL5jGZ0anatgR
YoaGX6jBRjdQOgb23A6jwKX1fRXvasWYlVxvqcZk3762ysljMmG9I5kv5poi
HaHix4ypGtYUFzLd2nl01gh7IF2pYMHNjzu0WnalT7aPFShSJXKmTLuzEvv0
Y3tXiZHMiEjatk7WupHfMkuQ+IfA53CPk7jfg8TaCcEe+2T8+5w+iXA2zD4g
MLapn12ePR/X1HnZUZo/BA7xPYapFwSzSq/8enOHPc5gudEJizGL1NtUUHgJ
iarc7O50pYNyAVAuNOLsv6Ur5EcUk9MMRu9YfVsAiX9a34+64noC5LHOtIDH
jtgIQUdgCnSpL5ZVJgzrDZ1WCB/rjQ9ET5lmENzMgzBkILD+MabDpdhFcCmd
gbQehYCTwzIDWAKLxvfXwQOdARSkxVmKHRZjq+UonzXqmEUdGBimPaS4zyQ7
jJZ3ffFMgYeRSJ3vBUhrtEdE2IbZOr5fuxVZD+OuZ8AT/FXFttQmOLZQjWm3
+uCGnQoPoD0TeuGx8+PRzm2MKZT2vMfaw5S2YntYWz/8dmrHYXH5RyCK8qDs
sQflEdADn0Pb4+uQ4xzfq/0w0xYCFEFcTD2Yz7tFnfYL14z7il/Ss2bwK0sR
r/Dh8lVcuns+eKRlr8Lp7mXTByH5wbnChSreo8+nHBEX8m+d/3tEmqObXDAy
p6chWo2kx946f3cmEdGp7lkzMslOHZOPPjnPKgVvqh7m1JKu50sC0ZT6l9UV
AUr9zP0EuvtJRRfdfRhJ69aebEwSRUtEfofB75IVX5b28IL883cnjN3Yt96g
T+Iv34mf9+SgFTJoc3drXhsY81KzZXUU7d6Zz3+nYIpULKV0cApvbX9R9tSx
E57YX/Xci6qH1IHS/vbJn1U9tExe6OyuI4I1V8LFk1yMG6wm8LoNc7E7/E22
qC3BmzYwwhePNyGNZbZrqdsx9V5ohi+Tz0NKxZ16rywPzUfR8dT1O3izBm/D
wRhIP4I0L/RuAMaMg5A89Qvf98OU/hiVAoAw9I4SphQfSwdgOnzmgSeU5qcE
7VCfPMI0zH8JPseBJzQ8T02oLodp2O5OEPyyEKZh/kUk6PPeMXYBfH/rCq0l
TMPyJ0JyJ57y81Kof+kp/j0QjFmYhvlsaHcCeELD/HgkqB+mYX467I8DT2iY
nxOSy3lKXo0EP8OEaTg+YEze2OF1he4ZseAJDfOp3+8gZuxBzNyn8EJdv2Sy
qpqqhiqduaoF3ulqa1TwGkddxszmxuoMY5PFWNmQUSWebTUaixcsqzZaqyrp
W1zpspqGqmpjhdJq1DUYx47QitXG6kpLc4aFrJIFm6ps6dz/YKdCIpbIZIZM
WYXUkElWSLMqsyr0UjHVGGVSsTg3VyrOoRypUM6taaytpJXo/stWncVitFYo
dWYzzShsslifyCwwLq8IX5oLrdZaa72xobCp0mihBhc2NJuNZcb6hjnGhori
MmNNfa0VqlUufiyh1tUYoGZwXSEJygAdgWD3DThhg9FaozOHGI9jZYUhqWnQ
mTNqauFCdfUZ9ZW1FmOGwVhphpd3MkNMGAy6TJk+U5eZmy0zZmVWGvU5BqlE
Rmbl5ugqsyplhsps0pRt0MGrfQW82VsqnzNTV/2Xix9/B/hffQXIWG7OKPpP
UaOw8O/w577f
                    "]]|>, "orcInstance" -> 71044128, "orcModuleId" -> 
                    71137664, "targetMachineId" -> 69217536|>, 
                    139848107684384, 139848107683984, 139848107684064, 
                    139848107683840, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {1024}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "29f3a80c5f77d11a", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/19" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "Random"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "A"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "B"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "A"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Inputs", "B"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 393160, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 11, 14, 5, 1.103718`6.795433114193202}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 4, 4, "medium", "low"}, {
          "medium", "medium", 2, 2, "large", "medium"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 2, 4, "large", "low"}, {
          "high", "high", 4, 2, "small", "medium"}, {
          "low", "high", 3, 4, "large", "high"}, {"very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 2, 4, "small", "medium"}, {
          "medium", "high", 4, 2, "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 2, "small", "high"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "high", 3, 4, "small", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 2, 2, "large", "medium"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "low", 4, 4, "medium", "medium"}, {
          "low", "very high", 2, 4, "large", "medium"}, {
          "very high", "very high", 3, 4, "small", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 4, 2, "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "very high", 3, 2, "small", "medium"}, {
          "high", "very high", 2, 2, "medium", "high"}, {
          "high", "medium", 4, 2, "large", "medium"}, {
          "very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "high", 4, 4, "medium", "high"}, {
          "very high", "medium", 4, 2, "small", "low"}, {
          "medium", "high", 4, 4, "medium", "medium"}, {
          "low", "high", 3, 2, "medium", "high"}, {
          "medium", "high", 2, 4, "large", "low"}, {
          "very high", "high", 2, 2, "large", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "medium", 2, 2, "small", "medium"}, {
          "low", "very high", 2, 2, "large", "low"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 4, 2, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "medium", 4, 2, "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "high", 2, 4, "small", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "low", 2, 2, "large", "low"}, {
          "very high", "low", 3, 4, "small", "high"}, {
          "low", "high", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "low", 3, 4, "medium", "low"}, {
          "medium", "very high", 2, 4, "large", "low"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "very high", 3, 2, "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "medium", 4, 4, "medium", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "medium", 3, 2, "medium", "low"}, {
          "high", "high", 2, 4, "large", "high"}, {
          "high", "medium", 2, 4, "medium", "high"}, {
          "very high", "high", 4, 4, "large", "high"}, {
          "medium", "low", 4, 2, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "high", 4, 4, "large", "medium"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "very high", 4, 4, "large", "low"}, {
          "low", "very high", 2, 2, "medium", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 2, 4, "small", "high"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "low"}, {
          "low", "medium", 2, 4, "medium", "high"}, {
          "very high", "medium", 4, 4, "large", "medium"}, {
          "high", "low", 4, 2, "large", "low"}, {
          "low", "medium", 2, 2, "medium", "medium"}, {
          "low", "low", 3, 4, "large", "high"}, {
          "high", "low", 3, 4, "medium", "high"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "high", 2, 4, "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "low", "medium", 4, 4, "small", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 3, 2, "medium", "medium"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 2, "large", "medium"}, {
          "medium", "high", 4, 2, "medium", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 2, 2, "large", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 3, 4, "small", "medium"}, {
          "high", "low", 2, 4, "small", "medium"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 3, 4, "medium", "medium"}, {
          "medium", "medium", 3, 4, "medium", "medium"}, {
          "high", "low", 2, 4, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "low"}, {
          "low", "medium", 3, 4, "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 4, 2, "small", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 2, "medium", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 2, 4, "large", "medium"}, {
          "low", "medium", 4, 4, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "high", 4, 2, "large", "low"}, {
          "high", "very high", 3, 4, "small", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "low", 4, 4, "small", "medium"}, {
          "very high", "high", 4, 2, "medium", "low"}, {
          "high", "medium", 4, 4, "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "low", 4, 2, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "very high", 3, 2, "medium", "low"}, {
          "very high", "high", 3, 4, "large", "medium"}, {
          "very high", "medium", 4, 2, "large", "high"}, {
          "high", "high", 4, 2, "large", "medium"}, {
          "high", "medium", 2, 4, "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "high", 4, 4, "small", "low"}, {
          "low", "low", 2, 4, "medium", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "medium", 2, 4, "medium", "medium"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "high", "very high", 2, 2, "small", "low"}, {
          "medium", "very high", 4, 4, "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 3, 2, "medium", "low"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 2, 4, "small", "high"}, {
          "low", "medium", 4, 4, "small", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 4, 2, "small", "medium"}, {"high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 3, 4, "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "medium", "high", 2, 2, "large", "low"}, {
          "very high", "low", 4, 4, "large", "high"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 4, "medium", "high"}, {
          "medium", "very high", 4, 4, "small", "high"}, {
          "very high", "low", 2, 2, "small", "low"}, {
          "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "low", 3, 2, "large", "medium"}, {
          "medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "very high", 4, 4, "large", "medium"}, {
          "high", "high", 3, 4, "medium", "low"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "medium", 2, 2, "large", "medium"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 4, 4, "large", "medium"}, {
          "medium", "very high", 2, 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 2, 2, "small", "high"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "high", 2, 2, "medium", "medium"}, {
          "medium", "low", 3, 4, "small", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 3, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "small", "low"}, {
          "high", "medium", 2, 2, "small", "high"}, {
          "medium", "low", 4, 4, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "medium", "medium", 2, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "medium", "high"}, {
          "medium", "very high", 4, 2, "large", "high"}, {
          "medium", "very high", 4, 4, "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "large", "medium"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 2, 2, "large", "medium"}, {
          "very high", "very high", 2, 4, "large", "high"}, {
          "low", "high", 2, 4, "large", "medium"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 4, "small", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "low", 2, 4, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 4, 4, "medium", "medium"}, {
          "high", "high", 2, 4, "small", "medium"}, {
          "very high", "medium", 2, 4, "small", "low"}, {
          "medium", "very high", 4, 4, "medium", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "medium", "low"}, {
          "low", "low", 4, 4, "small", "low"}, {
          "very high", "low", 3, 4, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 3, 4, "large", "low"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "very high", "very high", 3, 2, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "medium", 2, 2, "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "high", 2, 2, "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "large", "medium"}, {
          "very high", "high", 4, 2, "medium", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 4, 2, "medium", "low"}, {
          "medium", "very high", 4, 2, "small", "medium"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 4, 2, "small", "low"}, {
          "medium", "high", 3, 2, "medium", "medium"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "high", 3, 4, "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 2, "large", "medium"}, {
          "high", "low", 3, 4, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "very high", 2, 2, "medium", "medium"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "high", 4, 4, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 2, 4, "small", "low"}, {
          "low", "low", 2, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "high", 3, 2, "large", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 4, 2, "large", "low"}, {
          "very high", "very high", 2, 4, "small", "low"}, {
          "medium", "very high", 4, 2, "medium", "low"}, {
          "medium", "high", 2, 2, "small", "medium"}, {
          "medium", "medium", 2, 4, "small", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "low", "very high", 3, 4, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "very high", "very high", 3, 4, "large", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "low", 3, 2, "medium", "high"}, {
          "low", "high", 2, 4, "large", "high"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "medium", "low", 2, 4, "small", "medium"}, {
          "low", "low", 3, 2, "medium", "high"}, {"medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 2, 4, "small", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 3, 2, "large", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "high", 2, 4, "medium", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 2, 4, "large", "low"}, {
          "high", "medium", 4, 2, "medium", "medium"}, {
          "low", "low", 3, 2, "medium", "medium"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "low", 3, 2, "large", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 2, 2, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}}, 
        "Output" -> {
         "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "good", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "very good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "very good", "acceptable", "acceptable",
           "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "very good", "good", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable"}|>, 
      "Predictions" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "very good", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "very good", "good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}, "LogProbabilities" -> CompressedData["
1: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
       "], 
      "CountMatrix" -> {{239, 0, 0, 0, 0}, {0, 81, 1, 0, 0}, {0, 2, 11, 0, 
       0}, {0, 0, 1, 11, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwV0ulrDgAAwOF3aBq7m83G2LvVbLOx2oWZxRozm/EO2xRlRTnaHLkpdxQh
Upgz95Wj+IZcIZSUK5QjvjhCQiHPPjz9/oFfsLk11BIWCAS+0N4OdKQT4UTQ
hUiiiCaGWOKIJ4FEkuhOMimk0ps0gqSTQSZZZJNDLnn0J58CCimimBIGUUoZ
5VRQyQiqqKaW0dQRop5xTKCBRpqYxGSm0MxUpjGdGcxkFi20Mps5zGUe81nA
QhaxmCUsZRnLWcFKVrGaNaxlHevZwEY2sZktbGUb29nBTnaxmzb2sJd97OcA
BznEYY5wlGMc5wQnOcVpznCWc5znAhe5xGWucJVrXOcGN7nFbe5wl3vc5wEP
ecRjnvCUZzznBS95xWve8JZ3vOcDH/nEZ77yje/84Ce/+M0f/vKP9lHDCKcz
EXQlkiiiiSGWeBLoRiJJJJNCD3qSSi/SCJJOBpn0IYtscuhLLnn0I58CCimi
mBIGMJBSBlPGEMoZyjAqqGQ4VYykmlHUUEsdYxhLiHrG00AjTUzkP+uzZBE=

         "], {}, {}, {}, {}}, {{}, CompressedData["
1:eJwt0KFOQgEAQNGHwqRbDAzGBjO4wXwJmQE3NoMEdWpAA3MGkxSyRjeCgY3x
AXyABTdhGkgGi2OSCFrYIGk3wAmGU2+46cv68U0kCIIjYqwRJ0GSDFk22SJH
SIEddimxR5kDKhz+N0+pcs4FNa64psEtd9zT5IEWbTp0eaTHE8/0GfDCK0Pe
eOeDEZ+MmfDFN1NmzPnhlz8WrJiwSpQYcdbZIEWGLHm2CSlSYp8TzlgCKQwl
Ng==
         "], {244}, {}, {}}, {{}, {250, 266}, {19, 21, 27, 49, 62, 66, 70, 99,
          109, 207, 235}, {}, {}}, {{}, {}, {152}, {11, 73, 95, 103, 139, 187,
          234, 246, 273, 324, 334}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "acceptable", "good", "very good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.0010120982658959536`, "SingleEvaluationTime" -> 
      0.00588725, "Version" -> {13.1, 0}|>]], ",", 
   InterpretationBox[
    TagBox[
     StyleBox[
      FrameBox[GridBox[{
         {
          ItemBox[
           FrameBox[
            StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
             StripOnInput->False,
             FontSize->12],
            FrameMargins->{{10, 5}, {-4, 2}},
            FrameStyle->None,
            StripOnInput->False],
           Alignment->{Left, Bottom},
           Background->RGBColor[0.96, 0.96, 0.96],
           Frame->{{False, False}, {True, False}},
           FrameStyle->Opacity[0.1],
           ItemSize->{Automatic, 1},
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            FrameBox[
             TagBox[GridBox[{
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Classifier method"], 
                    TextCell["Classifier method"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 
                 InterpretationBox[Cell[
                  "Net",ExpressionUUID->
                   "7cf5031d-d68c-4402-846a-f39436004ea7"],
                  TextCell["Net"]]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Number of test examples"], 
                    TextCell["Number of test examples"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], "346"},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Accuracy"], 
                    TextCell["Accuracy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"99.71", "0.29"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.7109826589595371615`3., 0.2890173410404845988`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    TagBox[
                    TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, 
                    "Accuracy if predicting the commonest class", 
                    "Tooltip"]& ], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{
                   RowBox[{"(", 
                    InterpretationBox[
                    
                    TemplateBox[{"69.1", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.0751445086705189169`3., 2.4883140570071944353`3.]], 
                    ")"}], "\"%\"", "percent", "\"Percent\""},
                  "QuantityPostfix"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Geometric mean of probabilities"], 
                    TextCell["Geometric mean of probabilities"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.9788623276168627596`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0092393640669489741`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.9603835994829648115`3.", "\", \"", 
                    "0.9973410557507607077`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.9603835994829648115`3., ", ", 0.9973410557507607077`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Mean cross entropy"], 
                    TextCell["Mean cross entropy"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TagBox[
                  TooltipBox[
                   TemplateBox[{"0.021364271859359029`3.", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0094387398706039446`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                    "RowDefault"],
                   
                   TemplateBox[{
                    "\"95% confidence interval: [\"", 
                    "0.0024867921181511397`3.", "\", \"", 
                    "0.0402417516005669218`3.", "\"]\""}, "RowDefault"],
                   TooltipStyle->{}],
                  Annotation[#, 
                   
                   Row[{"95% confidence interval: [", 
                    0.0024867921181511397`3., ", ", 0.0402417516005669218`3., 
                    "]"}], "Tooltip"]& ]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Single evaluation time"], 
                    TextCell["Single evaluation time"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"5.76`", 
                   
                   RowBox[{
                    "\"ms\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"example\""}], 
                   "milliseconds per example", 
                   FractionBox["\"Milliseconds\"", "\"Examples\""]},
                  "Quantity"]},
                {
                 TemplateBox[{
                   TemplateBox[{5}, "Spacer1"], 
                   StyleBox[
                    InterpretationBox[
                    Cell["Batch evaluation speed"], 
                    TextCell["Batch evaluation speed"]], 
                    GrayLevel[0.4], StripOnInput -> False]},
                  "RowDefault"], 
                 TemplateBox[{"2.09`", 
                   
                   RowBox[{
                    "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                    "\[InvisibleSpace]", "\"ms\""}], 
                   "examples per millisecond", 
                   FractionBox["\"Examples\"", "\"Milliseconds\""]},
                  "Quantity"]},
                {
                 ItemBox[
                  GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKL9iWGtG17q19ZZ7N08Psr+3PhE477+v/
mGRzXJ5MAep6ax/hkRW4OPWlfWaNqWiB/D2SzVmz7rutGNMb+39bNjzf/fux
/Sc3Zbu0rINk++9hlcg694e37GEhdr3g2p+vxu/sL98r9Xj7/4195IOFTGvy
XpBsLgC9w2I1
                    "], {{0, 0}, {4, 4}}, {0, 1}],
                   Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9979035639412998`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.99581589958159}], 
                    Row[{"FScore = ", 0.9979035639412998}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.012048192771084338`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0041841004184100415`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.012048192771084338`}], 
                    Row[{"Row fraction = ", 0.0041841004184100415`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["82", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9879518072289156`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9939393939393939`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{82, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9879518072289156}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.9939393939393939}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ]}, 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{239, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.99581589958159}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{82, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "83", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9879518072289156`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{83, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9879518072289156}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ]},
                   Frame->True,
                   FrameLabel->{
                    FormBox["\"predicted class\"", TraditionalForm], 
                    FormBox["\"actual class\"", TraditionalForm]},
                   FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["239", TraditionalForm]}, {2.5, 
                    FormBox["82", TraditionalForm]}, {1.5, 
                    FormBox["13", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["238", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["83", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["13", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["12", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                   FrameTicksStyle->13,
                   GridLinesStyle->Directive[
                    GrayLevel[0.5, 0.4]],
                   ImageSize->212.4,
                   
                   Method->{
                    "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                   PlotRangePadding->None],
                  Alignment->Center,
                  StripOnInput->False], "\[SpanFromLeft]"}
               },
               AutoDelete->False,
               ColumnsEqual->False,
               
               GridBoxAlignment->{
                "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
               GridBoxDividers->{"Columns" -> {False, {
                    Opacity[0.15]}, False}},
               
               GridBoxItemSize->{
                "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], 
                   Offset[1.1199999999999999`], {
                    Offset[1.75]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}],
              "Grid"],
             FrameMargins->{{10, 10}, {10, 5}},
             FrameStyle->None,
             StripOnInput->False],
            Deploy,
            DefaultBaseStyle->"Deploy"],
           Alignment->Center,
           
           BaseStyle->{
            FontWeight -> "Light", FontSize -> 11, FontFamily -> 
             "DejaVu Sans", NumberMarks -> False, Deployed -> False},
           StripOnInput->False]}
        },
        DefaultBaseStyle->"Column",
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.5599999999999999]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], 
            Offset[0.8], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       Background->GrayLevel[1],
       FrameMargins->{{0, 0}, {0, 0}},
       FrameStyle->GrayLevel[0.85],
       RoundingRadius->5,
       StripOnInput->False],
      StripOnInput->False,
      LineBreakWithin->False],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    ClassifierMeasurementsObject[<|
     "Model" -> ClassifierFunction[<|
        "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
         "Input" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "ToMLDataset", <|
             "Input" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, 
              "Output" -> <|
               "PurchasePrice" -> <|"Type" -> "Expression"|>, 
                "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
                "Doors" -> <|"Type" -> "Expression"|>, 
                "Passengers" -> <|"Type" -> "Expression"|>, 
                "Cargo" -> <|"Type" -> "Expression"|>, 
                "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
              MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> 
              False, "Invertibility" -> "Perfect", "StructurePreserving" -> 
              False, "Missing" -> "Allowed"|>], "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
         "Output" -> <|
          "Preprocessor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "Processor" -> 
           MachineLearning`MLProcessor[
            "Identity", <|
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
           "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
           "Marginal" -> <|
            "unacceptable" -> 0.25, "acceptable" -> 0.25, "good" -> 0.25, 
             "very good" -> 0.25|>|>, "LabelSplitter" -> 
         MachineLearning`MLProcessor[
          "FeatureLabelSplit", <|
           "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
            "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
         "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
         "Prior" -> Automatic, "Utility" -> 
         SparseArray[
          Automatic, {4, 5}, 0., {
           1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
         "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
         Automatic, "BatchProcessing" -> 
         MachineLearning`PackageScope`$BatchProcessing, 
         "Model" -> <|
          "Method" -> "Net", "Net" -> 
           NetGraph[<|
             "Type" -> "Graph", 
              "Inputs" -> <|
               "PurchasePrice" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "high", "medium", "very high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"very high", "low", "medium", "high"}, 
                   "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                   "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                   "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
                NetEncoder["Class", <|"Labels" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}], 4, 2, 3}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 4, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
                NetEncoder["Class", <|"Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"medium", "large", "small"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
                NetEncoder[
                 "Class", <|
                  "Labels" -> {"low", "medium", "high"}, "OutputForm" -> 
                   "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                   False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{3}, 
                   NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
              "Outputs" -> <|
               "Output" -> 
                NetDecoder[
                 "Class", <|
                  "Labels" -> {
                    "unacceptable", "acceptable", "good", "very good"}, 
                   "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                   4, "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
              "Nodes" -> <|
               "TrainedNet" -> <|
                 "Type" -> "Graph", 
                  "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                  "Outputs" -> <|
                   "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                  "Nodes" -> <|
                   "Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJzVVl2qbkkNvfogTsMp6ADEKbROoIX2qUFoH8Q3h243eGBbZP0lqX2OgXvP
t6tSyapUspLf/fXv3/3t19++ffvHb3/+77vv//mnn376/l9//s0vHz98/+Mf
fv/jr37++e0v3/4r//7jtxVJ7Tz1b2A4bbo+mN7HXte28tXxvSnO/ZT/X/af
/5A9ZfO04fh3cd7Ivak9532dmHV8ds9U71ztV+cqnQrTG3nfkU087C3fvPcG
f6Z+3rDv2E4xobyuaqHismpPnUd3QzxZrTMdVL+TXHT6RaU3yYevmEuu3lv1
jvy4953kwg1uu2nT/U5soppTuugM4xt1rrqL4o5UbnDHqXdzruvI9ryGzif3
Z/z+XNvAp7C8Yc/p4R27rp3PvHtiK5lbqnnltOGsVXgUJnYPd9ZwfE/lRn+8
/fauPjqj3nqSMwk2V27291v6XXtdXG/w58dZ11fFT2y2qX4n96r2tvt5pwar
NZfH2Hyo4ojmSwevs4d0PpP/urZv2Gf+XJ5G74zyQtnq4mVrm7amM+O0rjp4
uv1vY1ZydFhMOj08nd/QLIG+t6SbS5uc43Iv6pUIz7nvzGsMRxc/0k9tqzuo
+YHpKP58riF9ZkfpVbqOT/cuaI+Jm+9btZpyxrZ9pJfOPje4K+XvW31EYXD8
uTa2bKXvN/Gr7N3qcVtv6GJBXLXls3Of7RnhNh85dqY9VfWU57fznmze+Ay5
4ftNTujaSeK/wQ3OnKnyCv3tYpkIq5cNX1sz2ARTVdNTeau/qDO3697Nj3Nv
C2MyY29xUlW7aL36x85u5yLqaS7/VNyFbCc4XIwd7tyaHW/XcDo3TTkWxfWp
x/J1Khv9dWJrI35duw4vTey7fqd2XKzpHMTq2OGmp49pTqC16TxyS9JeW93F
0UE2N2Wzntk7ojye9OEUu+q7bF6o1hR25bPSm9zRkc48gc6gO7EYutyxmfNT
O5t99LTZ3e/4+Gw+3Zohkl7O7Hysd2rCtT218Vnizh/qvNJhvZHNJs6buT23
+nf6de+U6N06t9FHunedck7ia1PYOyd5sMEF6Xk1X275cXXfyAFV2+fe7Tyc
9POvMOfczE9H/0bOdPPz7Th2Y6f6lprbT5tuf6zOMN+duzGcztnUF/OtZhR1
321uRvxW5YHzN/Htrqc6t2SzljuzoGvb9Ve9HZpXlX6Kz8HJzr6ZB12euDUn
M/0b83uC441ZUZ2bztdviIMb9eJKB+1X9m/w2GRm7fq/Mee5vic6lX7Cc7d5
hZ2fzIsqP1MMHTuJsDe5kc/Oemq7eqPT/mSWU/qbb+XiZ+dVvCd8lti4OedU
783wsZlviqU6e3v2ddZT7nH+IfvdN9zQ6fhz7bq5ksZc1UanvqayheFW79rq
F+e36t3nGuKQt3oEk7Sm3swvx6bibfZ+lT7y+RX46o0ewXS6/dnpB+fZqs7Q
WnUurdMTa/Wb3akSlUeTWmL9tto/7XZ6vivojqpfqHiz7w18ClvHfrLn4EDr
Kh9Zb0oxdPhxwp/qDbq5gPqDi0vtqTxzcXdyrxtvxinOWYbp9FFhdmK7zQ2b
3ILOu3V8S5jfbj9+/nZyx+m3HWzJHRUeR9wenthJ9re5lM0NqF4TbkjwMRwK
t2tf9U6Wf90e6PYyhHVL2Jsm++fv86xzjtW3q4NwoHuf5yph+XY7591zTo4k
uYvOoD3GGQqv8rcRYze2aV9RPMG+03dIagT5RndK5NYbVX7SOzuxRL6q390z
nXxjXFv9U346PitOZtie9lL87B6JJPk9zdNbOe/EB/HLed7BnuBSmE89lU/q
zTv1x9ZVPCv8yH73zVmczn3Gr6pGXRzueoUdvSnD4+YButtzH51P82YjbmiP
caTjk+Wpip2SJIdVvlZYnTdUeJI83eL01I7iD6SrbKVnp5LiRfqo/zixUdyi
MDlYnbzr6N4QhU1xIOsnrD7dXOhwLeKyShfZ6ryZY9fFqHwyP450zzq1x+x3
+ojCs3G+wyeJ/WrdzYMOnySzBrPv5PLHXzeWyrbjKzmnzjhxmNj/2E96F8uP
BGMqSc9lPNh5I9cuigfzj/KUxZ3hVTmJMCvfzCeS7jmkO3m7c4/xQxU71beT
WqjqqHp/Vm+VLXbf6v4oHzu86/hEeo6+4ljnzRM9V7Z4L8WV+tnoc+4Zlqen
jlsDlY1TD+kk0r3fhqgcd7FM88V9P8Wlznshn1t11RXWf7v9QvG4wuLkxzRO
N+LsvLeLJektKOZOn92MQ1oDTg/e6AkO1s3z7pugc5Ud53wqrHYRLtW3XF9s
H51nueH0RoQTnXX43uFK9qbJG7iYkC9kz+Et118lN2ot5dkOL08xsf2EBzrC
+gDzj+ra6RspD6A1VhtKX9Uv00e2VdxYrTBxeBWtK13mk327wnJZ4WD5uCHO
Hdn7pX5UDjFcKZcqLNW6W19oj9nZfLcTi/Pt6m7E0+F3lBPPNcahE3znXsWf
iPOc3qDWGBc5fUPdS0man64v9W5JL1BxYBzPsJ3+US5Wd2GY2W+EXd3b5bsU
gzpb4TztOPFnuc3eosMpStwcd3mS2VB6TKb3ZLZS2+wtN+wzf9tnGS90fTNu
qtZUnif1zuoWnVfcqOpU2U/9Mj2Xa6s9Jclbb+SHwy2btcO4LukJ6ruTqwif
6yORW/yE6hhxZPXvuVf5YT7YP4azwlbZPPfduKg1dsfqnLoHux/ir8p/pZ/E
08kBhQnFXtVPkuPqvZF+ah/5ZLpTfmXxe66hmqnsOfhcnqpwVJgqm0wH2U/E
vUNqc8OeykH0jiyWFU5mx9Fx8HffqGM/FVYvzBeLZ8c/slnpKz5U+B1+6/Br
usdE2UTxRlzGcrxrl/HShji8fuo792fcz3y6vLAlLE83an5DOndXMWNveK67
MXJqvlqf8IKSCVcmutP3VueTd6/+Tmy6vti+4kaHRyv7Kjc7/IXu5exVnMXs
OJgS6XBXNw+SekfnWe6wvDn9oVzr8E9HprFwztzo/0pu+HRsqvpHa8+9Kn9S
HBWWRKb6GxzN4ufWn6N34mX8yngOvSNaU3d3ZbteExvOO7l53LnzFn85vjq2
HXxJ77sRS9fPzbhOznTu7rxp1aO7slXP03dm93a+HW5zOeEGb2281QaOiY0t
7G4stuuw4w/14Y+/rCc7PhNJ8Ce1ivYZz6iZw5HNXq++ET9UZxhGlAfq3ERU
jB2MG7635DYHpv5YXjAdlndbmNFbKp5h9XkL65v2uv32jfnR8Yc4iM0o6Deb
e5h+Zd+dl9DdnP2OfFVbU583udvB4r6hU0fsfIqrI6y21RzgzBDo28WWxj2p
c3VP9q/Cw7hjU9gdXW5DHKXu6cZO7bH7qD32zgivslXZdt9a4anOK+lwAbNT
2WK2nVpH73or3zdj4eqw/EDfU0lxTnyqs13bE7vu/VmdOrW7Ie47JPFAHOnU
HMrTylYHh4M/2dvE8KHvxJJ93xbWj5j+Df+oV5/6Kt8cf1P5anY6NlM9xWOq
xtNcRxzD/rIzav5Afly5xWMuX7MYqzdgc0Qqb/EHutPU121O3rTv8KSqoW6+
V1gUzvM30nPf1KlzVgPM3813V/e7VX9b4nBEh+ucc85bbdfYVLZq7LSHvj9D
nJlA9eDnuRvcvi1JTX/8ZvfrzAqTPlf5Y3zY7SEuJ0/nMHQnhMWxp87d6J8b
b7/BEU48O6LeZau/IOydd01rFc0b1X7lw60N9O+0gzAluFks1Bnm38FV+U2F
8Z2KE4qBeuNTx6nZ5E2rNZWzLP6OHyYbHLHFM9u2NuypnFI8g+pE5azDLcwH
y2HFQ+5+FRMVC3SGnXf5CtlxBZ3dzCGlh3KMYXPs34jL1HYnH1QtubFy7LCz
To9gdeTmrYoJ2kP18vytcDHfLi6my3gF3cXlV1fSsylHIA7s4HHfgOWp41/V
ksoTlF/sLl1BeavqlcWLrSteYBg6d+ue7fhh+1MMb90B5VmVi+pMtTfF5+go
/4kttc5ioeoH1Uc317v3dnXVmsu9CUd3ddRZxk0pb0x6UtfOdtynwjj8+TvN
QZdvHJ5yfLJ1tK/654kdxQj5drijuneKL4nvue/crbLJeocSxcVdmWB4y19a
12/24a49lMcqL53e2X3Tm/d11jd8MH5A8XNqc6MPd3TcukdcmvpyeEzhcGOe
2GW2EH50F3f/qwjD85lYb/eDN97GmQtUPjO+2cSOaoRxGptXtnCg3yw+aC+p
15SnFL850u2tm/5cuw7Ps97n5rPqGSnuVNLeyX53/Dz3WB9jfTB5A1TjlT46
h3w69bnJJTeFxSG5h9MXNjBu5OGp5/KtqnOH3xUGtFfhrLCod3PikvQB1EMq
bJUPdIcKC/J9S27YV++gOE7lmWvDwdCJ+XbMnDhNfDKuq/QYhqRWlb3qO5Fb
ZxPMKh4o5m/WuuLx55qbK1MM27Jpn8Xm+e1icM5OxHnLp57KB4c/kf+NuyW1
+Vxjdz71nvqu/7d4v2MH3Vflm8qNKa7qt3t2O6+UvzfOdOxNe8XW3W73p+ks
9lmzxKa9ZD7amqWSeeDUd3rJaQ/5Qd+nH2dGQbFJ55ppXmzVkZotWAyR7lb+
dHC/ZWOzDm/1Rscvqz81r7H5yMXX4dmt2mEcUOlu5fZn9NiuvVvzkorjRoxu
8pBbxw62KrfUN/O9wTHOu7v4mI3nWQcjqs23xKkFNsN0fXXlVs5vx7xr++1Z
Q/VIVtes76RYktp0bXYxnbaqe6IZ8VY/2dLdwvHWbKNsTecJ9LaVbdbXtrBV
NjZ60RYe1+//m73uzHV7fnRmKKdvv5EDqAYYb556t+poYjPBNNVN9T6jL759
tnv/t3rxdq++wYGs9p46rv4trEzS/EVz7HMfzbuMd6fi5NOER27WxOZsjexO
bLB/lR77drBN6vmz+1piU8Wo0mNzxy3e2OjL5371F+XOeZ7xC4uV4mol2z1p
IpO3v8Vlb9YeqoEbwnjL4TRVJ7fr2u21SS3ejv82v6uc374HygvFaVUeoL9b
OJlf1dOV7U2c5+8Us9NfHNwpf97kKNf2JqfcqMG3RHG5k9+MJx2/KVaWy0iv
+uti6dwD9bNqvTr39rx0YkIxdvja8dedDSbizCapnTfOTew7uavyM+0dbr10
667jy/Wp/HR75PSsa9vhD8WZqJYTH6l0+/aGr8+o541ccPNb9WJkY5Lzk1nS
7T3d+aKaadjsMqltV7Z7wy08t2u+26Mn80ViI+1Zm7nTnZnc/u30AGYf+aq+
K3toX509/Sbi1Lp7j8oW+96Uzr3V74/v6i3R37djkNQo0+3UeiIOr6E4oRje
xNzhLfat7sx6vHq3Tp9wuYTNCZW9s14cftkU5J/hqu65heXEdf4+dVUvcfsK
ulPCVRuiamRqE+UZ0kVn3Bx9M5e7flz8Xf0Nux2bqv8qG2/03uRMUhsoTxMu
Ud8uFlc6deTWsOung21ii/VLlYuMyz47b52zbDZQfffUZzaqs1u61R2rN1R9
B8k0fye6Ts0xfGhPxcR5F+etNmXLJutJygeqixMfs8XystrviptLWzY3RPHJ
x1/GTRv3VPhu2574UlyouPy55/Cqi0PtTXNS9Yw3ZJuj3hDFU+eaw3mqRs/z
jFcZLmabnXVmg9Q2wsjWNiXFh7jW7W/It8PDikdUHqCzSe64onj4K9f8mzyi
hOWIk2eqdpkeyzeUr7ffldXQpp+prbQ/ODbR/uQOLmbGewiH6g0Vjv+18x+H
KwQh
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {21504}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJyllF1KA0EQhFeR4DW8gh5AcoV4ghXiU0CIDyFvHt3kSWn6q6o2A7s7O9NT
XdU/8/T+ufu4X5bl6/Hy2q2n7fG4nt8215/9enh5PtxdpsvD9fX9+vt0I9mv
34kt+fqLQ9iEU/Gqfd3r7Doeypb8kp5u32lyuDRIR7VR692/0q60drYUj4Sb
ynHHLcFVGogD5Szx784rP2md0t4U38WQOLs4Oo7pSLWqNarTCb7q6aQnHA/C
JHxVYxTraW+6+iZ90xru/uu5pN8dN+I60UV6nC7CJs2Epfqw4+Vy2PnpfCb1
SDydNlU35M+NSXwp94pLXfvvGeKjOCfxcfVPWN06YSXckxpRWia9mOZg4psG
1VDHyfmc3g0UD9f3qTY64/woHPVN7pNb564nXe6UbT1X58Qj5ebwXO9R75MP
d4eQvcJL+q3yUrF1/OjuSGKhYnCrLsXBYeoe+gFqDm7y
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {1024}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/3" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {21504}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>|>,
                     "Net/SoftNet/4" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[Clip[#, {0, 1}]& ], 
                    "$Dimensions" -> {1024}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/5" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{1024, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{21504}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "Net/SoftNet/6" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>|>, 
                    "Net/SoftNet/7" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 21}, 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/8" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_413305b3_51cf_4b38_96a4_54ea71a67fb4", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
MCtLi2PHrTTniltoJPtCfyKoT5czEjYeFY7fapbxJlPAkmgMVv2dPGnzmEDJ
BjPBrCrUJdAMdZF86TLEuL/x6JnxYUSXY9Dln42zN4/ZKllnJuAPaDGgj78Z
F9v1HZaLzfOvFUu/E2P7jKgfsGQiNbkomOSRtoa2rmqv//FksrB0fLerXCcj
Y/KtvcASl3k7kpOw3EzUkYO4xKpUc2n64cL5mw13FBngXDq8rlDnoJvXxqMC
g7wAh/09DB1NMjX5o1jJpgn3ycJNBt3JzEXUiSuT5te62kdtvGXG0eFnBGGw
2sT5tQv4pZ+7fw3ZLzOSkT62ngJCisJZLNZRsfjhwiR5RpBFajR0wVhuVcIW
37Z5ZYu0zxntEzjX4rg6q3HtwnEdA7j+frhwwWbDYqFxEjs5kCzkV20tzTQX
bB5TGpBpziomkVLH9sFsjElcMZviCu8vRrm5uW06GmBcZsaxspgCqZiW+5E1
5Cjuc0DsMwKtwREbUCP2uztZ71iQR2osQUs5aYHtxODv1iRFc2uhiwsVurzA
u3DYqi7TvcjjjgX50+MZOxDn3Uy6XSl6HzIm+6bG6Lyu1L1Tgnskp+bU8VNa
rTybtd30QN/3g74H6OEGbUFWObFji7vNs5mwxgTPI3Dt8NHNtvKJLKycG4Ke
ZZVzxX+GQOjOydb+D98I4nnnpZJvyu8L7kmcOiImZgtvsbkpRiTrei4Voh5f
p5fwS6WUhK1h5hOyqf9UaZVsKC37FvmlKobaLx1U+6UY3d4yS9f59a7gl85w
k3T+jJ461eUtm2vQhqD/ZiP3l8VTub9Vp6iB1o/SdeTENLUwzY7lME2/YDt0
6UVdQvEu3V+6nKZutn5UqDPMiinxH/I4hDCRjlHnHMfUmJzVvfSnZcmCFDfC
Q+oMnNn7UAoekvLCTeyPTUEestlNgDXwYzaTp+iDJwom45EIIThFPdvv1Cjr
R1zdSUTG2gsIXiw2yqYOg38OvbT4GJr91pfZT6hnv6Jb/6el6+ITxOxk3YEz
1x8aluumlKKkh/HVpO8ubcVdG09ievw/mUWWpMUxJYXmkX/gmMSoMfGfqk5q
LlNFwCrdGQQmGdSErdn/ACZTIeMOrx1zAmHSpsak+JQak1xd6UNLiuctN0DZ
+P3ik3iS9gXli2rAu7onHlqWeJYqGQYof3x4qFz3kps98yo2fRcsINbxp6sj
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
2mFJv0xJfvvQcCu4pFjcOUEAewarrJ8MlMuL3Q0KSBJujLaUj86BZXjM9AZG
NOEbpfkQUd+gdd6n9eDtP+AlUbVzVAWho815+R1Dfk0gz99GLV9joNuj0aEB
GLQXz5Q/Q95zEGfV7lOgIWinuCUP1oQniXy7US4N1TUex2q4VXH6O9sR23uv
eONSr7UE/PHdUELJowHbhjmp2dW94426vlob9q9M5jpk7y30Ubu3cZ288zPx
DFkk493kYIQ/l9kP94AzKhvlFqsLYBmQjzvtG2HgtDOicPNrBZVQLq7yYTF9
EBe7HSS870Y7jBvgn41VBpM3VNMHS3PC7ORgdhNQqR+MbTXKXVLa87t4fXhb
+25wlJjS4Tl6w4K93vP/K37dwOPXc8Icc8GACVOOl/Em7bW2KDaakfyL5+7o
H6b/8p8fouW/Rwbs3p08o8Tzl+hjyRs9f9kekBy92KlcvHWulDbt77VXo4dk
8aa5z8XSrbRzt3aevPmx4PxuU8dXWDB6H5PfLhu62lnvfsC++Texx9XdjYnm
xe57SpfTT2hK/znVKCo9H2t67e6vZPM7d4NP9x3uSZZuFnx7u+ajkaK/0f29
L/c3scXN6JfuB/hQYjzorHMPs+WaHydN6z35JlR+9V29+yV7f2Jg9z1tDynn
3nEnnCuM3S2TFdzfaWrVIzlHPjvvarCp1SrSNm6K1F+6+TPvLOv4uyui0kzK
RQnLPMns+Ls0qcvW8xP6D9fpbEWz/1wjOzUc/Wicx3RucfzE/sOtOhHnk7em
v+rquS1LbCijf68pjbpTI2pjULhnDdPJNbKh84nDfexW/fTp3IfyvP7T0u7D
x2+KSu00EI13z4vOvdluarUoCVBZ9xiQkmEXyGfvPNhu+lt/nfv7YKBQtv0l
YB9BYH9LvuexrOBKpOm1BoS98c3tpo77vxON3/QSG8O+cY99pK5LcbyPbaQN
+D0Mvt3P7kGYPgx16meXjM+kuUgZ+7aeX2CueeZYxEv38gXiCQwzc87ZY8NS
i5TNf4SbXrsvPkc2PyHbbnrtHRr/xM3dprkPCGl217/pGII3VnKcbzUgR+u5
A0uSIs3fK7aYR23wPyNVyBX6LP1AdGV4+EdsvIli++lb6b+9gTF+x4focq55
N/w43DS3EEMKUdiz++aH01dFbbssgFdJjyM3XFDUuf9t0n84milGzN7zILZ+
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
a6Q6EX7j/wDb6Nl1
                    "]]|>, "orcInstance" -> 71659360, "orcModuleId" -> 
                    75163792, "targetMachineId" -> 67236336|>, 
                    139848107697984, 139848107697840, 139848107697920, 
                    139848107692032, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_21288d38_4d30_45c5_b415_b4e841199417", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
UaOw8O/w577f
                    "]]|>, "orcInstance" -> 71044128, "orcModuleId" -> 
                    71137664, "targetMachineId" -> 69217536|>, 
                    139848107684384, 139848107683984, 139848107684064, 
                    139848107683840, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {1024}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "29f3a80c5f77d11a", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/9" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/10" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_413305b3_51cf_4b38_96a4_54ea71a67fb4", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
MCtLi2PHrTTniltoJPtCfyKoT5czEjYeFY7fapbxJlPAkmgMVv2dPGnzmEDJ
BjPBrCrUJdAMdZF86TLEuL/x6JnxYUSXY9Dln42zN4/ZKllnJuAPaDGgj78Z
F9v1HZaLzfOvFUu/E2P7jKgfsGQiNbkomOSRtoa2rmqv//FksrB0fLerXCcj
Y/KtvcASl3k7kpOw3EzUkYO4xKpUc2n64cL5mw13FBngXDq8rlDnoJvXxqMC
g7wAh/09DB1NMjX5o1jJpgn3ycJNBt3JzEXUiSuT5te62kdtvGXG0eFnBGGw
2sT5tQv4pZ+7fw3ZLzOSkT62ngJCisJZLNZRsfjhwiR5RpBFajR0wVhuVcIW
37Z5ZYu0zxntEzjX4rg6q3HtwnEdA7j+frhwwWbDYqFxEjs5kCzkV20tzTQX
bB5TGpBpziomkVLH9sFsjElcMZviCu8vRrm5uW06GmBcZsaxspgCqZiW+5E1
5Cjuc0DsMwKtwREbUCP2uztZ71iQR2osQUs5aYHtxODv1iRFc2uhiwsVurzA
u3DYqi7TvcjjjgX50+MZOxDn3Uy6XSl6HzIm+6bG6Lyu1L1Tgnskp+bU8VNa
rTybtd30QN/3g74H6OEGbUFWObFji7vNs5mwxgTPI3Dt8NHNtvKJLKycG4Ke
ZZVzxX+GQOjOydb+D98I4nnnpZJvyu8L7kmcOiImZgtvsbkpRiTrei4Voh5f
p5fwS6WUhK1h5hOyqf9UaZVsKC37FvmlKobaLx1U+6UY3d4yS9f59a7gl85w
k3T+jJ461eUtm2vQhqD/ZiP3l8VTub9Vp6iB1o/SdeTENLUwzY7lME2/YDt0
6UVdQvEu3V+6nKZutn5UqDPMiinxH/I4hDCRjlHnHMfUmJzVvfSnZcmCFDfC
Q+oMnNn7UAoekvLCTeyPTUEestlNgDXwYzaTp+iDJwom45EIIThFPdvv1Cjr
R1zdSUTG2gsIXiw2yqYOg38OvbT4GJr91pfZT6hnv6Jb/6el6+ITxOxk3YEz
1x8aluumlKKkh/HVpO8ubcVdG09ievw/mUWWpMUxJYXmkX/gmMSoMfGfqk5q
LlNFwCrdGQQmGdSErdn/ACZTIeMOrx1zAmHSpsak+JQak1xd6UNLiuctN0DZ
+P3ik3iS9gXli2rAu7onHlqWeJYqGQYof3x4qFz3kps98yo2fRcsINbxp6sj
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
2mFJv0xJfvvQcCu4pFjcOUEAewarrJ8MlMuL3Q0KSBJujLaUj86BZXjM9AZG
NOEbpfkQUd+gdd6n9eDtP+AlUbVzVAWho815+R1Dfk0gz99GLV9joNuj0aEB
GLQXz5Q/Q95zEGfV7lOgIWinuCUP1oQniXy7US4N1TUex2q4VXH6O9sR23uv
eONSr7UE/PHdUELJowHbhjmp2dW94426vlob9q9M5jpk7y30Ubu3cZ288zPx
DFkk493kYIQ/l9kP94AzKhvlFqsLYBmQjzvtG2HgtDOicPNrBZVQLq7yYTF9
EBe7HSS870Y7jBvgn41VBpM3VNMHS3PC7ORgdhNQqR+MbTXKXVLa87t4fXhb
+25wlJjS4Tl6w4K93vP/K37dwOPXc8Icc8GACVOOl/Em7bW2KDaakfyL5+7o
H6b/8p8fouW/Rwbs3p08o8Tzl+hjyRs9f9kekBy92KlcvHWulDbt77VXo4dk
8aa5z8XSrbRzt3aevPmx4PxuU8dXWDB6H5PfLhu62lnvfsC++Texx9XdjYnm
xe57SpfTT2hK/znVKCo9H2t67e6vZPM7d4NP9x3uSZZuFnx7u+ajkaK/0f29
L/c3scXN6JfuB/hQYjzorHMPs+WaHydN6z35JlR+9V29+yV7f2Jg9z1tDynn
3nEnnCuM3S2TFdzfaWrVIzlHPjvvarCp1SrSNm6K1F+6+TPvLOv4uyui0kzK
RQnLPMns+Ls0qcvW8xP6D9fpbEWz/1wjOzUc/Wicx3RucfzE/sOtOhHnk7em
v+rquS1LbCijf68pjbpTI2pjULhnDdPJNbKh84nDfexW/fTp3IfyvP7T0u7D
x2+KSu00EI13z4vOvdluarUoCVBZ9xiQkmEXyGfvPNhu+lt/nfv7YKBQtv0l
YB9BYH9LvuexrOBKpOm1BoS98c3tpo77vxON3/QSG8O+cY99pK5LcbyPbaQN
+D0Mvt3P7kGYPgx16meXjM+kuUgZ+7aeX2CueeZYxEv38gXiCQwzc87ZY8NS
i5TNf4SbXrsvPkc2PyHbbnrtHRr/xM3dprkPCGl217/pGII3VnKcbzUgR+u5
A0uSIs3fK7aYR23wPyNVyBX6LP1AdGV4+EdsvIli++lb6b+9gTF+x4focq55
N/w43DS3EEMKUdiz++aH01dFbbssgFdJjyM3XFDUuf9t0n84milGzN7zILZ+
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
a6Q6EX7j/wDb6Nl1
                    "]]|>, "orcInstance" -> 71659360, "orcModuleId" -> 
                    75163792, "targetMachineId" -> 67236336|>, 
                    139848107697984, 139848107697840, 139848107697920, 
                    139848107692032, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_21288d38_4d30_45c5_b415_b4e841199417", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
UaOw8O/w577f
                    "]]|>, "orcInstance" -> 71044128, "orcModuleId" -> 
                    71137664, "targetMachineId" -> 69217536|>, 
                    139848107684384, 139848107683984, 139848107684064, 
                    139848107683840, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {1024}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "29f3a80c5f77d11a", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>|>, 
                    "Net/SoftNet/11" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 256}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 256}, 
                    NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 256}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                  "Edges" -> {
                   NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/FeatureLayer/Catenate", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Net/SoftNet/11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
              "Edges" -> {
               NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
                NeuralNetworks`NetPath["Inputs", "Cargo"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
                NeuralNetworks`NetPath["Inputs", "Doors"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
                NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
                NeuralNetworks`NetPath["Inputs", "Passengers"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
                NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
                NeuralNetworks`NetPath["Inputs", "Safety"], 
                NeuralNetworks`NetPath["Outputs", "Output"] -> 
                NeuralNetworks`NetPath[
                 "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
             "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
           MachineLearning`MLProcessor["Identity"]|>, 
         "Log" -> <|
          "FunctionMemory" -> 271184, "LanguageVersion" -> {13.1, 0}, "Date" -> 
           DateObject[{2022, 8, 11, 14, 5, 1.594051`6.955077200968781}, 
             "Instant", "Gregorian", 1.]|>|>], 
      "TestSet" -> <|"Input" -> {{"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "high", 4, 4, "medium", "low"}, {
          "medium", "medium", 2, 2, "large", "medium"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "high", "very high", 2, 4, "large", "low"}, {
          "high", "high", 4, 2, "small", "medium"}, {
          "low", "high", 3, 4, "large", "high"}, {"very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 2, 4, "small", "medium"}, {
          "medium", "high", 4, 2, "medium", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 2, "small", "high"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "high", 3, 4, "small", "low"}, {"medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "low", "high", 2, 2, "large", "medium"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "low", 4, 4, "medium", "medium"}, {
          "low", "very high", 2, 4, "large", "medium"}, {
          "very high", "very high", 3, 4, "small", "medium"}, {
          "low", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "low", 4, 2, "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {
          "medium", "very high", 3, 2, "small", "medium"}, {
          "high", "very high", 2, 2, "medium", "high"}, {
          "high", "medium", 4, 2, "large", "medium"}, {
          "very high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "high", 4, 4, "medium", "high"}, {
          "very high", "medium", 4, 2, "small", "low"}, {
          "medium", "high", 4, 4, "medium", "medium"}, {
          "low", "high", 3, 2, "medium", "high"}, {
          "medium", "high", 2, 4, "large", "low"}, {
          "very high", "high", 2, 2, "large", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "medium", 2, 2, "small", "medium"}, {
          "low", "very high", 2, 2, "large", "low"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "low", 4, 2, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "medium", 4, 2, "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "high", 2, 4, "small", "high"}, {"low", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "low", 2, 2, "large", "low"}, {
          "very high", "low", 3, 4, "small", "high"}, {
          "low", "high", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "high", "low", 3, 4, "medium", "low"}, {
          "medium", "very high", 2, 4, "large", "low"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "very high", 3, 2, "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "medium", 4, 4, "medium", "low"}, {
          "medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {
          "high", "medium", 3, 2, "medium", "low"}, {
          "high", "high", 2, 4, "large", "high"}, {
          "high", "medium", 2, 4, "medium", "high"}, {
          "very high", "high", 4, 4, "large", "high"}, {
          "medium", "low", 4, 2, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "very high", "high", 4, 4, "large", "medium"}, {
          "low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "very high", 4, 4, "large", "low"}, {
          "low", "very high", 2, 2, "medium", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "medium", 2, 4, "small", "high"}, {
          "low", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "low"}, {
          "medium", "medium", 3, 4, "large", "low"}, {
          "low", "medium", 2, 4, "medium", "high"}, {
          "very high", "medium", 4, 4, "large", "medium"}, {
          "high", "low", 4, 2, "large", "low"}, {
          "low", "medium", 2, 2, "medium", "medium"}, {
          "low", "low", 3, 4, "large", "high"}, {
          "high", "low", 3, 4, "medium", "high"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "high", 2, 4, "small", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "low", "medium", 4, 4, "small", "high"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "low", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 3, 2, "medium", "medium"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 3, 4, "small", "medium"}, {
          "high", "medium", 2, 2, "large", "medium"}, {
          "medium", "high", 4, 2, "medium", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "low", "very high", 2, 2, "large", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "high", "medium", 3, 4, "small", "medium"}, {
          "high", "low", 2, 4, "small", "medium"}, {
          "very high", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 3, 4, "medium", "medium"}, {
          "medium", "medium", 3, 4, "medium", "medium"}, {
          "high", "low", 2, 4, "large", "medium"}, {
          "very high", "very high", 2, 2, "large", "low"}, {
          "low", "medium", 3, 4, "large", "low"}, {
          "very high", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "very high", 4, 2, "small", "high"}, {
          "very high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 2, 2, "medium", "high"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 2, 4, "large", "medium"}, {
          "low", "medium", 4, 4, "medium", "high"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "high", 4, 2, "large", "low"}, {
          "high", "very high", 3, 4, "small", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "high"}, {
          "very high", "low", 4, 4, "small", "medium"}, {
          "very high", "high", 4, 2, "medium", "low"}, {
          "high", "medium", 4, 4, "small", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "medium", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "low", 4, 2, "large", "medium"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "very high", "very high", 3, 2, "medium", "low"}, {
          "very high", "high", 3, 4, "large", "medium"}, {
          "very high", "medium", 4, 2, "large", "high"}, {
          "high", "high", 4, 2, "large", "medium"}, {
          "high", "medium", 2, 4, "small", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "high", 4, 4, "small", "low"}, {
          "low", "low", 2, 4, "medium", "low"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "medium", 2, 4, "medium", "medium"}, {
          "medium", "medium", 3, 2, "large", "low"}, {
          "high", "very high", 2, 2, "small", "low"}, {
          "medium", "very high", 4, 4, "large", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "medium", "very high", 3, 2, "medium", "low"}, {
          "very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 2, 4, "small", "high"}, {
          "low", "medium", 4, 4, "small", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "low", "low", 4, 2, "small", "medium"}, {"high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "low", "very high", 3, 4, "small", "high"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "high"}, {
          "medium", "high", 2, 2, "large", "low"}, {
          "very high", "low", 4, 4, "large", "high"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 4, "medium", "high"}, {
          "medium", "very high", 4, 4, "small", "high"}, {
          "very high", "low", 2, 2, "small", "low"}, {
          "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "medium"}, {
          "very high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "very high", "low", 3, 2, "large", "medium"}, {
          "medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "very high", 4, 4, "large", "medium"}, {
          "high", "high", 3, 4, "medium", "low"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "very high", "medium", 2, 2, "large", "medium"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "medium", "medium", 4, 4, "large", "medium"}, {
          "medium", "very high", 2, 4, "medium", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "medium", "very high", 2, 2, "small", "high"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "high", 2, 2, "medium", "medium"}, {
          "medium", "low", 3, 4, "small", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "very high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "low", "high", 3, 2, "large", "high"}, {
          "very high", "very high", 4, 4, "small", "low"}, {
          "high", "medium", 2, 2, "small", "high"}, {
          "medium", "low", 4, 4, "small", "medium"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "medium"}, {
          "high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "medium"}, {
          "medium", "medium", 2, 2, "medium", "high"}, {
          "very high", "very high", 4, 4, "medium", "high"}, {
          "medium", "very high", 4, 2, "large", "high"}, {
          "medium", "very high", 4, 4, "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "large", "medium"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "medium", "very high", 2, 2, "large", "medium"}, {
          "very high", "very high", 2, 4, "large", "high"}, {
          "low", "high", 2, 4, "large", "medium"}, {"high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "very high", "very high", 2, 4, "small", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "high"}, {
          "high", "low", 2, 4, "large", "low"}, {"very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "high", 4, 4, "medium", "medium"}, {
          "high", "high", 2, 4, "small", "medium"}, {
          "very high", "medium", 2, 4, "small", "low"}, {
          "medium", "very high", 4, 4, "medium", "low"}, {"high", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "low", "low", 4, 4, "medium", "low"}, {
          "low", "low", 4, 4, "small", "low"}, {
          "very high", "low", 3, 4, "medium", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "medium", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "medium", "medium", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "very high", "medium", 3, 4, "large", "low"}, {"low", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "very high", "very high", 2, 2, "medium", "high"}, {
          "very high", "very high", 3, 2, "large", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "medium", 2, 2, "small", "medium"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "medium"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "very high", "high", 2, 2, "small", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "very high", 4, 4, "large", "medium"}, {
          "very high", "high", 4, 2, "medium", "high"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "medium", 4, 2, "medium", "low"}, {
          "medium", "very high", 4, 2, "small", "medium"}, {
          "medium", "high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 4, 2, "small", "low"}, {
          "medium", "high", 3, 2, "medium", "medium"}, {"high", "high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {
          "high", "high", 3, 4, "small", "low"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "high", 3, 2, "large", "medium"}, {
          "high", "low", 3, 4, "small", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "very high", "medium", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "high"}, {
          "high", "very high", 2, 2, "medium", "medium"}, {
          "very high", "low", 2, 2, "large", "high"}, {
          "low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "low", "high", 4, 4, "small", "low"}, {"medium", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "small", "high"}, {
          "very high", "low", 2, 4, "small", "low"}, {
          "low", "low", 2, 2, "medium", "high"}, {
          "medium", "medium", 4, 4, "small", "low"}, {"low", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "high"}, {
          "high", "high", 3, 2, "large", "high"}, {"medium", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {"high", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "very high", "low", 4, 2, "large", "low"}, {
          "very high", "very high", 2, 4, "small", "low"}, {
          "medium", "very high", 4, 2, "medium", "low"}, {
          "medium", "high", 2, 2, "small", "medium"}, {
          "medium", "medium", 2, 4, "small", "medium"}, {
          "medium", "very high", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "medium", "low"}, {"very high", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "low", "very high", 3, 4, "medium", "low"}, {"medium", "high", 
           Interval[{5, 
             DirectedInfinity[1]}], 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "medium", "medium"}, {
          "very high", "very high", 3, 4, "large", "low"}, {"low", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 2, "large", "low"}, {
          "high", "low", 3, 2, "medium", "high"}, {
          "low", "high", 2, 4, "large", "high"}, {"low", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "low"}, {
          "medium", "very high", 2, 2, "large", "low"}, {
          "medium", "low", 2, 4, "small", "medium"}, {
          "low", "low", 3, 2, "medium", "high"}, {"medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}, {"high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "low"}, {
          "high", "very high", 2, 4, "small", "high"}, {
          "very high", "very high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "medium"}, {
          "high", "very high", 3, 2, "large", "low"}, {"low", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {
          "medium", "high", 2, 4, "medium", "low"}, {"very high", "low", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "medium"}, {
          "low", "very high", 2, 4, "large", "low"}, {
          "high", "medium", 4, 2, "medium", "medium"}, {
          "low", "low", 3, 2, "medium", "medium"}, {
          "medium", "very high", 4, 
           Interval[{5, 
             DirectedInfinity[1]}], "medium", "high"}, {
          "low", "low", 3, 2, "large", "high"}, {"very high", "low", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "large", "high"}, {"high", "medium", 
           Interval[{5, 
             DirectedInfinity[1]}], 4, "small", "low"}, {
          "high", "very high", 3, 
           Interval[{5, 
             DirectedInfinity[1]}], "large", "medium"}, {
          "high", "very high", 2, 2, "small", "high"}, {"medium", "high", 2, 
           Interval[{5, 
             DirectedInfinity[1]}], "small", "low"}}, 
        "Output" -> {
         "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "acceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "good", "unacceptable", "good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "good", 
          "unacceptable", "acceptable", "acceptable", "good", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "very good", 
          "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "very good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "good", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "very good", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "very good", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "acceptable", "very good", "acceptable", "acceptable",
           "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "acceptable", "acceptable", "very good", "good", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "good", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "acceptable", "acceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "very good", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "acceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "acceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "unacceptable", "unacceptable", 
          "very good", "unacceptable", "unacceptable", "acceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "unacceptable", "unacceptable", "very good", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
          "acceptable", "unacceptable", "acceptable", "unacceptable", 
          "unacceptable", "unacceptable", "unacceptable"}|>, 
      "Predictions" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}, "LogProbabilities" -> CompressedData["
1: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
       "], 
      "CountMatrix" -> {{238, 1, 0, 0, 0}, {0, 82, 0, 0, 0}, {0, 0, 13, 0, 
       0}, {0, 0, 0, 12, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwl0ulrDgAAwOF3aBq7rNlsjL1bzTYbq12YtVhjxszeYZuirChHmyM35Y4i
RMptcjMZxTfkCqGkXKEc8QWFhEKe5cPT7x/4BZtaQs1hgUDgMx3tRGe6EE4E
3YgkimhiiKUHccSTQCK9SCKZFPqRSpA00skgkyyyySGXQeSRTwGFFFHMUEoo
pYxyKhhFJVVUM44aQtQxgUnU00AjU5jKNJqYzgxmMovZzKGZFuYyj/ksYCGL
WMwSlrKM5axgJatYzRrWso71bGAjm9jMFrayje3sYCe72M0e9rKP/RzgIIdo
5TBHOMoxjnOCk5ziNGdo4yznaOc8F7jIJS5zhatc4zo3uMktbnOHu9zjPg94
yCMe84SnPOM5L3jJK17zhre84z0f+MinwP//vvCVb3znBz/5xW/+8JeOUcMI
pysRdCeSKKKJIZY44ulJAokkkUxv+pBCX1IJkkY6GfQnkyyyGUAOuQwkj3wK
KKSIYgYzhBKGUUoZwxlBORWMpJLRVDGGsVRTw3hqCVHHROppoJHJ/ANcwWPR

         "], {318}, {}, {}, {}}, {{}, CompressedData["
1:eJwN0KFOQgEAAMCHwKRTCEznBjO44SChM+DGZoAATAlgYMxggmLW6GYwuDk+
wA+w6AZMg4lgcQySQYsbJgk2Aly4H7itdrfWCQVBUCPKOjGSbJAizTY7ZMiR
Z48DChxSpESZClVOaNDklBZnnHPBJVdcc8Mtd9zT44FHnnimz4AhL7zyxoh3
PhgzYconX3zzw4xf/pjzz4IlayLCRIgSI06CTVKk2SVLjn0KHHFMnRX8eCYr

         "], {}, {}, {}}, {{}, {}, {19, 21, 27, 49, 62, 66, 70, 99, 109, 207, 
         235, 250, 266}, {}, {}}, {{}, {}, {}, {11, 73, 95, 103, 139, 152, 
         187, 234, 246, 273, 324, 334}, {}}}, 
      "ExtendedClasses" -> {
       "unacceptable", "acceptable", "good", "very good"}, "Weights" -> 
      SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
      "BatchEvaluationTime" -> 0.00047898843930635834`, 
      "SingleEvaluationTime" -> 0.0057665, "Version" -> {13.1, 0}|>]]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9, 
   3.8685204529294043`*^9, 3.8685215146011333`*^9, 3.8685301612497177`*^9, 
   3.868530590591856*^9, 3.86853261496434*^9, 3.8685338436228123`*^9, {
   3.868535643570589*^9, 3.868535653266458*^9}, 3.86853620504729*^9, 
   3.868536647435892*^9, 3.8685368910591183`*^9, 3.868536956624065*^9, 
   3.868537492992119*^9, {3.8685379158969793`*^9, 3.868537942476584*^9}, 
   3.8685921415849247`*^9, 3.868599486276321*^9, 3.86860013955028*^9, 
   3.8686009455378437`*^9, 3.868601165154408*^9, 3.868602872755411*^9, 
   3.868604168888167*^9, 3.8686705600345984`*^9, 3.868672040003127*^9, 
   3.868681397928339*^9, 3.868938938636381*^9, 3.8689425626275787`*^9, 
   3.868943546605094*^9, 3.86894388526086*^9, 3.868944114037065*^9, 
   3.868944544993232*^9, 3.868945583119274*^9, 3.868945795964314*^9, 
   3.868946090455439*^9, 3.868946301277932*^9, 3.868946812077159*^9, 
   3.868947529554852*^9, 3.868948234247651*^9, 3.868949916263268*^9, 
   3.86895035411582*^9, 3.868950591820963*^9, 3.868955715946851*^9, 
   3.8689590912506847`*^9, 3.868961292873067*^9, {3.868964211642971*^9, 
   3.868964271971294*^9}, 3.8689658659417048`*^9, 3.868975187773774*^9, 
   3.868975807387333*^9, 3.869030236615261*^9, 3.869030576485284*^9, 
   3.8690318983554163`*^9, 3.8690322955085077`*^9, 3.8690328949105043`*^9, 
   3.869033235901104*^9, 3.869033495671227*^9, 3.869034576712833*^9, 
   3.869035610130576*^9, 3.8690361433581657`*^9, 3.869036324430427*^9, 
   3.869036425981944*^9, 3.8690403482379503`*^9, 3.869040564944063*^9, 
   3.869041421524418*^9, 3.869041561340787*^9, 3.869041673839971*^9, 
   3.8690421991522627`*^9, 3.869042855424157*^9, 3.86904326803651*^9, 
   3.869043554339016*^9, 3.869043746795423*^9, 3.869105420473537*^9, 
   3.869105653283306*^9, 3.869105982326734*^9, 3.869107184493881*^9, 
   3.869108234728773*^9, 3.869111749761622*^9, {3.869111919016803*^9, 
   3.8691119399060993`*^9}, 3.869112356812172*^9, 3.869112702187408*^9, {
   3.869112904171596*^9, 3.869112930067875*^9}, {3.8691133852077427`*^9, 
   3.869113414126828*^9}, {3.869121126953014*^9, 3.8691211520853*^9}, {
   3.869121847143949*^9, 3.86912185561662*^9}, 3.869203188780602*^9, {
   3.8692071057867537`*^9, 3.86920713930786*^9}, 3.869207400202592*^9, {
   3.869207739721821*^9, 3.8692077456111937`*^9}, {3.869207952002699*^9, 
   3.869207963437224*^9}, 3.8692080125106792`*^9, {3.869208714713435*^9, 
   3.869208729773431*^9}, 3.869209077756652*^9, 3.8692094954446297`*^9, {
   3.869210938078933*^9, 3.8692109446365433`*^9}, 3.869211902166511*^9},
 CellLabel->
  "Out[431]=",ExpressionUUID->"56447ecc-6726-459a-b59b-3d49e91f436f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedHardNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}, {
   3.868976302381322*^9, 3.868976307139587*^9}, {3.869121279126927*^9, 
   3.869121279479135*^9}},
 CellLabel->
  "In[432]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "featureLayer", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     "testData", ",", "\"\<Acceptability\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}]}], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}, {
   3.868530047989657*^9, 3.868530063111247*^9}, {3.868530190826717*^9, 
   3.868530196600292*^9}, {3.86853144384466*^9, 3.868531451560924*^9}, {
   3.868532766824644*^9, 3.8685327949413958`*^9}, 3.868532945602283*^9, {
   3.868533874444491*^9, 3.8685338747929583`*^9}, {3.868604441984084*^9, 
   3.8686044511364*^9}, {3.8689602387396393`*^9, 3.8689602481032057`*^9}, {
   3.868960681250607*^9, 3.8689606824317408`*^9}, {3.868963143100669*^9, 
   3.868963145210929*^9}, 3.86896321844506*^9, {3.868976255892177*^9, 
   3.868976256410039*^9}, 3.8689764091880903`*^9, {3.869034393625832*^9, 
   3.86903439400725*^9}, {3.869043275878063*^9, 3.8690432774187603`*^9}},
 CellLabel->
  "In[433]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.9913294797687862`"}], ",", 
   RowBox[{"\<\"Results\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "236"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "82"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "13"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "12"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "3"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.8690345877152042`*^9, 3.869035626521063*^9, 3.869036152783195*^9, 
   3.8690363341385193`*^9, 3.869036436421172*^9, 3.869040357729239*^9, 
   3.869040576634907*^9, 3.869041433742779*^9, 3.8690415722677*^9, 
   3.8690416867128763`*^9, 3.86904220858243*^9, 3.8690432824600554`*^9, 
   3.869043562445753*^9, 3.869043754721044*^9, {3.869047065454893*^9, 
   3.869047090738934*^9}, 3.8690471518063593`*^9, 3.869047184930591*^9, 
   3.8690472207124777`*^9, 3.8690472595671577`*^9, 3.8690473069192467`*^9, 
   3.869047356173808*^9, 3.869104541974283*^9, 3.8691049803090754`*^9, 
   3.869105042273468*^9, 3.869105162486998*^9, 3.8691054315005198`*^9, 
   3.8691056671929417`*^9, 3.869105994037698*^9, 3.869107195753681*^9, 
   3.8691117585270443`*^9, 3.8691119669156637`*^9, 3.869121285329372*^9, 
   3.869208833562628*^9, 3.869209098161392*^9, 3.8692095035118723`*^9, 
   3.869210954522581*^9, 3.869211920142223*^9},
 CellLabel->
  "Out[434]=",ExpressionUUID->"8b338782-00e0-41c6-8b1f-8f23224cb63a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt2", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Association", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Prediction\>\"", "->", 
         RowBox[{"trainedHardNet", "[", 
          RowBox[{
           RowBox[{"KeyDrop", "[", 
            RowBox[{"{", "\"\<Acceptability\>\"", "}"}], "]"}], "@", "#"}], 
          "]"}]}], ",", 
        RowBox[{"\"\<Target\>\"", "->", 
         RowBox[{"#", "[", "\"\<Acceptability\>\"", "]"}]}]}], "}"}], "]"}], 
     "&"}], "/@", 
    RowBox[{"Normal", "[", "testData", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval2", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt2", "]"}]}]}], "Input",
 CellChangeTimes->{{3.868975856473425*^9, 3.868975907241156*^9}, {
  3.8689759541160727`*^9, 3.868975992561887*^9}, {3.86897610020459*^9, 
  3.8689762477878838`*^9}, {3.86897641471817*^9, 3.8689764578527117`*^9}, {
  3.8690344006348124`*^9, 3.869034400937387*^9}, {3.86904291870931*^9, 
  3.8690429575864353`*^9}, {3.869121310826304*^9, 3.869121313255774*^9}},
 CellLabel->
  "In[435]:=",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.9913294797687862`"}], ",", 
   RowBox[{"\<\"Results\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "236"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "82"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "13"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "12"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "3"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.869034589981593*^9, 3.869035628358029*^9, 3.869036154844352*^9, 
   3.869036336039586*^9, 3.8690364370454893`*^9, 3.869040359402629*^9, 
   3.869040578854313*^9, 3.869041436196286*^9, 3.8690415773217983`*^9, 
   3.869041690219269*^9, 3.86904221419751*^9, {3.869042932618347*^9, 
   3.869042959198248*^9}, 3.869043287868927*^9, 3.869043565179612*^9, 
   3.8690437567886467`*^9, 3.869104986359107*^9, 3.8691051668148937`*^9, 
   3.869105434085964*^9, 3.869105669300963*^9, 3.869105996859831*^9, 
   3.869107199042075*^9, 3.869111759364867*^9, 3.869111970506278*^9, {
   3.869121299804845*^9, 3.869121316611709*^9}, 3.8692088360902042`*^9, 
   3.86920910005622*^9, 3.869209505631686*^9, 3.869210957184381*^9, 
   3.869211922653748*^9},
 CellLabel->
  "Out[436]=",ExpressionUUID->"a5624ab5-f6d2-40d4-9109-fcfc41224f4d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Quantity", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}], "]"}], 
      "/", "8"}], "/", "1024"}], "//", "N"}], ",", "\"\<Kilobytes\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.868965930761516*^9, 3.868965950743415*^9}, {
  3.8689659831088343`*^9, 3.868965987890936*^9}, {3.868966862559198*^9, 
  3.868966873437675*^9}},
 CellLabel->
  "In[437]:=",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],

Cell[BoxData[
 TemplateBox[{"5.5`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.868965937053772*^9, 3.868965951415412*^9}, {
   3.86896598435365*^9, 3.868965988537725*^9}, 3.8689668742972393`*^9, 
   3.868975214076693*^9, 3.8690319344803658`*^9, 3.869042968544685*^9, 
   3.869105674742872*^9, 3.8692091039680862`*^9, 3.869210963050486*^9, 
   3.8692119248338833`*^9},
 CellLabel->
  "Out[437]=",ExpressionUUID->"bc2c9fad-4096-4d7c-8415-27b617ee8032"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"HardNetBooleanExpression", "[", 
   RowBox[{"hnf", ",", "inputSize"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.868966922827866*^9, 3.8689669876550913`*^9}, {
  3.869031937904567*^9, 3.869031943129614*^9}, {3.869121341559927*^9, 
  3.869121348104578*^9}, {3.869210965421191*^9, 3.869210971914925*^9}},
 CellLabel->
  "In[419]:=",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train standard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868966010330719*^9, 
  3.8689660115546227`*^9}},ExpressionUUID->"85881d34-aa2c-47a4-9cef-\
231d0c092462"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"trainData", "->", "\"\<Acceptability\>\""}], ",", 
    RowBox[{"Method", "->", "\"\<NeuralNetwork\>\""}], ",", 
    RowBox[{"PerformanceGoal", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<Memory\>\"", ",", "\"\<Quality\>\""}], "}"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.868966042398858*^9, 3.868966127319048*^9}, {
  3.8689661632395573`*^9, 3.8689661961414433`*^9}, {3.868966341118702*^9, 
  3.868966368883732*^9}, {3.8689667784326067`*^9, 3.868966778957925*^9}, {
  3.8692109926431*^9, 3.869210996642137*^9}},
 CellLabel->
  "In[421]:=",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TooltipBox[
                    TemplateBox[{"\"Mixed\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (number: \"", "6", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Nominal\"", ",", "\"Nominal\"", ",", "\"Nominal\"", 
                    ",", "\"Nominal\"", ",", "\"Nominal\"", ",", 
                    "\"Nominal\""}], "}"}], Short[#, 10]& ]], Annotation[#, 
                    
                    Short[{"Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal", "Nominal"}, 10], "Tooltip"]& ], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"acceptable\"", "\"good\"", 
                    "\"unacceptable\"", "\"very good\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NeuralNetwork\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1382", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
           "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
           "Doors" -> <|"Type" -> "Nominal"|>, 
           "Passengers" -> <|"Type" -> "Nominal"|>, 
           "Cargo" -> <|"Type" -> "Nominal"|>, 
           "Safety" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["FromDataset"], 
              MachineLearning`MLProcessor[
              "FromNamedFeatures", <|
               "FeatureNames" -> {
                 "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
                  "Cargo", "Safety"}|>], 
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 6|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {
                 "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                  "Nominal"}, 
                "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
           "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 1382, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "Sequence", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                   "Invertibility" -> "Approximate", "StructurePreserving" -> 
                   True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                "DirectTraining", "BatchProcessing" -> Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                   0.5381047338323698, 0.31349173058168534`}, {
                   0.2878959194482099, 
                   0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                   0.2578066194971254, 
                   0.4093083635172316, -0.7050063333319737, 
                   0.08206678121922453, -0.2152687718915405, 
                   0.46464274419035045`}, {
                   0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                   0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                   0.3669612074237795, -0.03875817355088801, 
                   0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                   0.5767907589006783, 0.1852877321886701, 
                   0.21134659605041434`, 0.33089384854127}}, 
                  "Precisions" -> {11.396708918937332`, 11.702295237769018`, 
                   11.751709980827822`, 12.269447018561033`, 
                   12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                  None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                   "Mean" -> {-0.0027242377292722524`, -0.0004734344948340772,
                     0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                   "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 6, 
                   "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                   7052420854593502203|>], "InputDimension" -> 0, 
                "OutputDimension" -> 6, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 1301520, 
                  "DataMemory" -> 446480, "FunctionMemory" -> 62320, 
                  "LanguageVersion" -> {13.1, 0}, "Date" -> 
                  DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.5374646114340518`, -1.5374646114340518`, \
-1.4481495799387802`, -1.3901532053842829`, -1.3900959198753926`, \
-1.3059537438182822`, -1.239089852169043, -1.2261733685503937`, \
-1.2132739652746585`, -1.169323039076807, -1.1079994773194297`}, 
                   "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                   0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[7.816606057704673, 0.25703225729782303`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0}, 
             "ID" -> 5495059474424677337|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
               "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
           MachineLearning`MLProcessor[
           "EmbedNominalVector", <|
            "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NominalVector", "Weight" -> 6|>|>, 
             "Index" -> {<|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 4|>, <|
               2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                   DirectedInfinity[1]}] -> 4|>, <|
               2 -> 1, 4 -> 2, Interval[{5, 
                   DirectedInfinity[1]}] -> 3|>, <|
               "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
               "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "EmbeddingVectors" -> {
              RawArray["Real32",{{0., 0., 
                0.}, {-0.12314196676015854`, -0.861851692199707, 
                0.10532767325639725`}, {
                0.8298183679580688, -0.28949323296546936`, 
                0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                0.38437455892562866`, -0.8375512361526489, 
                0.1422276645898819}}], 
               RawArray["Real32",{{0., 0., 
                0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                0.4795919358730316}, {
                0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                0.2534555494785309, -0.4526385962963104}, {
                0.3543681204319, -0.37547722458839417`, 
                0.5876661539077759}, {-1.1276206970214844`, 
                0.17602579295635223`, -1.0098364353179932`}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.24657385051250458`, -0.8256815671920776, 
                0.8846340179443359}, {0.6182233691215515, 
                0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
               RawArray["Real32",{{0., 0., 0.}, {
                0.34666627645492554`, -0.5679200291633606, 
                0.10750995576381683`}, {
                0.6412044167518616, -0.1759643256664276, 
                0.6604856848716736}, {-0.8092290163040161, 
                0.12987354397773743`, -1.1753407716751099`}}], 
               RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                0.12715618312358856`, 0.1291729062795639}, {
                0.21379514038562775`, -0.6005780100822449, 
                0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
             272386066020895428|>]}, "Invertibility" -> "Impossible", 
         "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                "very good" -> 4|>}, "MissingCode" -> 0, 
             "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {4}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113, 
        "unacceptable" -> 0.7012987012987013, "very good" -> 
        0.03896103896103896|>|>, "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> 
       MachineLearning`MLProcessor[
        "KeyIndexSplit", <|
         "Index" -> "Acceptability", 
          "Order" -> {
           "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", "Cargo",
             "Safety", "Acceptability"}|>], "PreferLabeled" -> True, 
       "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> None, 
    "ImputationStrategy" -> Automatic, "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {4, 5}, 0., {
      1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
    "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
    Automatic, 
    "Model" -> <|
     "Method" -> "NeuralNetwork", "Network" -> 
      NetChain[<|
        "Type" -> "Chain", 
         "Nodes" -> <|
          "1" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                "], "Biases" -> 
               RawArray[
                 "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                 0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                 0.09347633272409439, 0.20684024691581726`, 
                 0.00729140592738986, -0.3824177384376526, 
                 0.2153223156929016, -0.46700865030288696`, 
                 0.21194063127040863`, 
                 0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                 0.07883942127227783, -0.375686913728714, 
                 0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                 0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                 0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                 0.1690395474433899, -0.28660914301872253`, 
                 0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                 0.17016777396202087`, -0.32100844383239746`, 
                 0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               18, "$InputDimensions" -> {18}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "4" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1:eJwtl3c41+/3x5EVSUKyV0hJWRVe50galLQ0RCrSFqGhUmRHVrL3iChRpHjd
561dpCFa9ElSRtLUVr++1/X7476v+1znr/tc5zyfj6Pt4bNsk4iQkJC/5L9r
2Ya9tn5+GwKXi/8v8Nqww8x0x/+Spv9/et5I4GdKh9TuENb/owVahtLgWEyL
9ZzcBHzqmohVJc5wLSYbfBtOsnwncSx/hXypdhGirywZ5W/B2knPaEzLMbw9
Uo1mc7PIRX4Z77LMmdVoqQo8Fjsw8Xp9GlOjTj3xi2mO2XMYOrSbeQf5gXpW
P5swLxhUrtixqLdJzErDBW1UrsE++WvkMq+M/D8m4r6iYZB6bY0mzvE40yoG
7Z99Z0u7C8jjphCc1pWjLakHaeRicbCYgGBeoM/vKdcisVUDzPH2+3r5GDtY
99eFyu0VBAFJ4qT9+wcY9zSQ2OIttLfwEqJfKFPXUkHZM26w7Houu6Z5DGVE
5SlALRBbRh2hdSp9UGJ0lZWPMZjZ/KKJ+uS+w+X2PDry0ZOqPq+n8V3fQFR0
ND7e+RGt26YIhGQ9+I7zm1m1exxT86yGpy9NUTYpGKf9jKKo/FCMfe6Eb3c6
QJ3EPPZ0qAmNBAb4tqkNHB2ms6UzxeBu0jBXX5ECnoXesHUO0c/ID6xzjiot
FRexqS7QoOwMYbgSPsgu+pnTtvfP2J0qjvOxliR/JXcok5cgO91oLHeM4VZ1
R3KDGtWUuSsMV0rpUWucJMa5x+A92IDdx5ZySkvrQO2ZE6/kfoR1bklknwfU
MMO3jGanJuCbx03wui4FOjY0cg5S/tSgYk5X7WVR7+Z26L0kyw1/fsGOzkXU
HDoC4d+zcYWdLd5vWIUPP1lgtmMsPonVRo9NquSdMJvkdi/m9/a5k2obw4AB
N+qbP59325uDFeE2TNXAhZ6bLsR2uzAo+aOBb/a1UqnGWrTTVMJRc1QwAZxw
QmuV1XjHteiZdgoOS6YxWYtJbLrRXbgzKQJLR63AHZUmGFV1D6vWVUDdqge8
/LuttHS/CbzOM2fu0xOZh201XChSoXnbJ+K0Ogaa075Dd/JNuFa7lB1xvMcq
WhzYwY8ROHHzC1IJV2VNtc5U+eiTdaiSLB0daUStov/+MviaP/P4Ot7xOcfa
Ol3Y6ImFWPwrmZeIyWUW32qZw1hXNj1JWRAsORdFTINhX4QwnlHQoq7de2Gn
61ku65QKCC26Yf1h4zVr0Z6d0KgwFTZGmkNTrxLZhCrTISEZmuu6G41c95Pp
7WhaG19F2dYfQFdKkuY5LqHUMGd4nxrFF043ZKcexFPA0Y2kudoQMTwJokyS
WOoRIWgp62HiX3Tw8NU4fuqTLbRO9hebc1kB/VKn0G78w/aZhyJPalQh8olC
Z+WywF2L+B/n5QTvituZx7s/zNR+H/87ezUfoaRNp3Ycoto4G2yY2cc9UHSn
Xz8LsTnnBTaKrccDrfXM0/EpW3w4F3ojqsHlaxVevr0aH/CS1L19FWncu8Wv
tZhNv/QrrF0/P4OZt2rYdB03HF0jTs+OXATx5Kko/a9ODoe/oP/cSXh4Ui/o
PTvK5P/44Oo9uViw8wiNKnoBBwxmooRmBZYZ7MOtKyLo/m1xrPxZytvJjUYT
6Xv0PMMfH9t/g8NNITRjKAFWqT0G7w0jUHWGK5y7fZY7+6sYLbkb7JGugO7K
r2B/NBfiXv+fcPLyNMGb0xfJwf0eHu+TRu3Z0Tjt5HE2b85ZfJ3iTxGtJ/DL
pkj0ihykG/pq2NFpgPYTRJE/Usg1i6UQukdT22YhXNekxAonJdAv07N0KnIy
vflzkt9T1WPF631FGcs7UHUvm405/cDa3DgLs912korOXLR8x5jjomb4L3UB
tTqrsNny4dQg9RxzhKLIZ1cOnjr5kI/MdmHNi1Nwp7szjos1pC+fdWl44102
/1Ars/0xjuKm5mJTnm594zZtmlcvhfjSD59vOoOBh2Xw4eHj3NWLo2m7njEa
/1Wkloh3bFRiPkYpH4LoQR0ca3gC5ny5xLKE5CB7jwu1Kwyx+Ib5tKJI06Y8
aQLKdysz7y3ybH5uMxoOhoG7Wxp7omXHSSmZkfGONWyHVyYumYLY+rOL1asO
8eYbt+LgQBCNLI+hLxnzWWWJE2hoi1NAiyqN93vIHqW/qs8Y2cxGrsjgbKcz
jJj4Eb5Nu8TtEGQClN5kwWoppJwxDrTGnYVbsYZsN0yjhZkTWGNYCC1IKUeh
irL6ZBtTktmRzepvfazfErUT1wwYwqOoOxjUVQPzxvtgvJ4Lq5jxGIS2C0DN
QxhuK0SQrPciJPFjFOxVR1cz8kjHM59iBgT4Rt4aT774UB/ncYYN6MRgJNO3
uVV0D6f8DONarD3oqYsRCiuvIc/xPlSdW81kBQL8LyEL3u/cSi5RRZSaUcUt
WBHKokJHCmYdn02CZ8/xcYawYI2NE14ttMBnpVTX/jeTlxgwZu8vh4NidQec
kxGDgmIdOi8kjD2tw/Cq4iKtvP+Wxo+djfqOhvT4+FrOflwUvKIEWmoRRte4
LbjM6Jh114kgVnum2PqEIJ32tkVChfp03DRlIi7Xc2O/VqygQ2/3okojY/4b
luP2Ka/46oHKekmLNEycnYCqS71pSnEBFXKJpOFzp/571ndi5x/iWdkudnLI
ld00mUC5GfMxapUveX33pZbmIqhtMaWO34p4+9EN1n3zP3A+1WZl3DiJ/K/1
oIZ8M78yKAXUc2VRsGALCh8Jh/RWafAz+smJvY+HhIQQDN8SBJmL01i6+n0c
+d0DH/oR9ry/yq2/8xy/nhgB7h/UMffUKbKTtwPlr6/Zok8bQLTrJcQmT8fr
Ww1wY/NNTqjjK/UcJaYq70m2xQo8PzeRjKo3cDrdIpjaX4NqT4JpnkMCi4NF
eML8vvW7hl103CKDHPZP/effA9xIKWFBiusyZBcOoEuiOQrNVqPi88e5dU8P
0Yy409jouAeFMwlF/+nqwzcNmLBCx0pOsYoW7MmBcxoyVGXLkUxkEz+9cxe7
UaUBVfa69E5wnan1XQT9ZBu+bvlY4nUzmPlBSUqPX8sXxf8HyirBOPd9IY5u
nE91Na9ZfF4pN11tEY4pNmWjjzSwv13J+PH5D15IrRReu4VBlHcx5FcMwLz0
cozY7kGbH7fD5Ze3+PYKCbbp1n8wymYYygd8uAWHMyBAqppzFVLHiqp4bFeM
IQvXQVbmmQgnzA5wQ26GnIhlInwZuZ6OriyHiT/fY/uPifzhdYdgavpx2noZ
afI6ZQgzEebvqV3BhDc2KCiIBMmF5SQYluY9s7Tp48XFcHFUKvw6K0vyb6+x
z3WfmJq4JPJOq6DR+Dn+Vq+jqIdp3OrUhdztFENyXCxHs3SjQLI8EdrmjON3
7dlqbb6hlQ14LsaCfm+cdNoFOxW2010DC3qf/opvrkTk716H2eev4/nLvlRB
cni0/J9eeNaiUOF//OOjXqyxdynkQxVLnFpKB3w0UKm9j++rUWOLFDN5RYlV
MEbuDPmSCq7/mg5/pR6wZOUPoBhdCU59k3Hn005Ubv/A3iSIgoFeBGTtS4dG
9a9Msd0NfTZlYaFgNzu5YCod/ZuFOpE9fH59B8VEz7b+lu5OhxJ06EXFI2La
FdZ//mk7ZI+CEGFiNo0C4KXF8H2GM6jn/4D30/zgwJMC5jqZ2NWcEHoRlgwK
cmFc/5wwSN5hiv89eMLOOhewoeBRQBdlbXIddOnOKgd8NezE6czR5XxkbuJf
rQVwccorEhsOofVqx1n7xfPIxl5kJveLSbn3BKDxI7boj5jNsk0udfFbpmCn
1y+Si4+jRzVAl0MjQEy6lqZI9zDb/Ug5pyfhtZR7bJWSgLJtb0GmHbHVyjfA
cGcRzA2Yh4t/yaP7BRWycDMCq+k6cDhHjU68WgI7vijQ4VuR0OW5Cg8U3+Un
quSB297RNGH/aLay/yyePSSGtwp9MGlMKW27aCVQmDuT88xzYLmH3Vhq83Nc
Mm45Ln8yFfQGRPHsxn5mul6TlV3ZQD8/SpDWsnUUMGsE1t2S4S+JjreJetoE
A45emH0ylXNOSIFyw21stmMW2+t2nkTLj1G8ySWmnzCHruTaUl5pHiZ9FkHT
vdLciYNhTKKyBP8claTvGfK4MrKKGrQTqTx3K9fxWZO/3z9WILffid8nOwMG
frxkPzXjoWf1ECeca88nHhSvz7ldzLrkn7JPCcspdooIXLUeQZqOC6HEWENg
xsfj46hYJq21i8TWr6CyezZo/jqJ8/662Try7iYMzEd84X6UPfzHVrGPfGH+
+rVIKQ4sxdeRydsfJ+me02C6zxVbpp0HvwANG2fjmTaVewQs+6oIOZt/YK0v
7NDXRZltqxWiufnXiPukSOpjhChlBUJKYQGoyn1nvpPkqTW5lplOzKZi/f3s
4LthsF/Uz2XesWSr0yJA7Y0aNf+Jr9fUEUf+bRT+TbwGWceKMSVyBnnfNMPj
ZlFsTPcaCNE1Y5WpK0iitxjUlNqtF/1Qp8l6PvQ+czet52TY8qAI8Ou2Ja2J
/rBdopmK2y/Smq505jgjiy9YLYqumtOp9ZkC2e+3wDt6ryFmzE4mvyAGdk5O
Ypf07LjVJWZsgvlJ1NXwIQ/tTJLzMMJdVaaUt8ifCTeOBOOCI/Wl+1NxyJFA
+PYdejhlDYaKaJNIgCeZJWSy2X2DcFqWg1bF14gH7eigyGrK6n7MGzaIYHui
OL6pX0JL5VNReFEfG9zajEYnG8HgZTsLXnoTT5XEUpr5+/qy0TdgRvhLNNm4
E9XmfiX3ElWbsqyvmD0+E81PijG7lDv0V6ia7PSc+Tipw6ClcIbtrfvHQKNU
kOWKsL9n55OBiD4VFcniqewj0Cfvj0LTtpLaCUOUSnjDfB3eswueDVQjJ0Rf
73WxJ4e+gobTCpi2Vgss/WbS5K0Z+OfHOBxSqeF+/FQFfTFNUt82G+VuLMe5
Qe+g9nIBnvM5BqoiE+GFyzSUNMyDkcVRNHFbId8RNhHDSjWwzckB9wVO5nLE
1+NAuRubNzcGHwXko5Z2JJ1sUcVm+Wv8mPFLmEzzchznNYl/ZBsFtw9kWVXe
uAsXvG7DybQo2PGykEasKMI/I0PZRDcLZDmeXNGOl/XVXvo2j7tyaM0IJ5hh
pYdJ9IOb3hRNS396M/6ZEz1MiqLKwvkY//A6LI2XwzRHWRheIkzqmdHoNP8j
+OeJ4/bjD6H89VnY+aca1n3KYxsnZvGpJ8shozkST4Qn0OZtibzXHSP86q+L
C7XDUEr9PFl/2Mw89iyn2bfz8dXqezRY+hqrdb0pYZ2ITf5pGxR+eRG13ALx
i1AnxGd10P5TsZC/QRh1y50YvlAUCKl+YwuvTkUnAwfqTtuCMqVL2ei0MOQK
ePga7Eqn9SKpZakp/+OxOFy3dIbdB38wxz29rOi2KFN9OQvVvX1pfroRjPqR
yCKlNWnuuHJ89NgcBDndJHohmAYkztKWqCSUjsgDBR1n6qr3A+djutSc8wRe
uj5l5YFfOJP/8qBPI4u7LRbMziz8w/eLxKGsnRyq31xE0fNr2aw6Qxa7Mxfn
zzemvqxc9u3gLww63cTGBk8gc/cO9m6hJnVciSGHT8bo7n2Bai9Ho36cML8/
iAfbH+4UXKDEdo+roueptTT3n+dXGrtj/NQ263S9k9imFEsJYx5SxKjVONrM
kvRGB+Mux1CmP/gHJ1+dRePDJ+Dvm43c9TNp9Duigcp/xdCFD1tpk4srCn3c
Q7UlPnxMYCXBNj+cWOcOy+ZkU+VEc7wWbkk6I55z+6PsqWaNA/n5E9pnxUFb
KQ9x58cxhb5yLjpGm9wsVNmzlaJ0762CTZvdIT5+bwLgf/ZoEK9Bc7/OoVyX
MPq25BvcPdPCPZxdzOtuL8WbG0tZv5GRwMU4EIMfTsHVYXJsRPgSGtzzlhWO
98SE7RHoJzwLG+yvQTyTwD/t5WQXFIwZoj3W3Qk78cLa89y3rQD/AA2Pt0bj
/UNVdK6kmVfQb6Kl1wKRG9kJuXICGMhI4JblzsdJd83x5/oZ1CCxBjPP7KDN
swxZ8/xzlLyet34raOTuPCiD8+elWJrQGJw0HIlzZzbhHpProDRhkvXSJF0c
GLkNav/1xYRb+tTSG86GX95gF5/NJb87Zcxu/gR66ijEfzRoocxuD3gdCGya
1DLatHgRyyrp5c10xHD8HntcEv2ET63nINC0HuLmjSdP3RDGmVRT1jUlEl9+
uM561Sm2YV0J9yH/BsVajQTrb95U3pODXXvVMW9hC8m0BcFktwO45kE0nigI
wwN4BKGxAUTtEnFzdTGtEVWhoaC/4LZPj3pjX8HFDY9Q28aIVQ9/pjHfHoJJ
lRnGuyayhnxvjNI1ow9WiVA02pD2LH3FfbIMomNemdaD43k2pmcaHuyKQJ0/
HaC4OJ0Uoh7BuPc70CfRG4NkAij33B9Y/dmUZb7tYFe1HEB3RRFBny6MfymC
UU2K6LvKFn95ywg8zouR5fXLYNAVxvfu/8q0Ot34kiuRtETpBLqVh7EI9/E2
7Q/GYtXJfni/uo3/Uz8VFv6nR/vK5PHJMRWB+slaTFqziTxsL2Nzmz3kW6XC
4nmZKPPHlrNdfoX/vUhQ/yDlC7ci9o31KJV0fne7Pgb9FqbdW6vpjbIZPRRZ
is8i1erbnrxgZUV/2dsEJTxXXMwsPI9gVm8dUx89h2xCp1LILV2bm75f2KvR
7RBgrg/tb5fRWPsIcj6qZ+PxRJueS2/CF+9f0q5lpVQqmWxdNXN3nYZsCMip
j6WT4bJwdNlhEkk+jpfvDsHcTUTJUVksKiwLk+xH4OD2JyimfBaS3fr4FR3d
bPWlHpw7Qx6FRwrTOpfl1Pqmjq3c4ESHxD9A2kYheGe2B8HcDOwOS8OJfBN8
fmkXhBqUs/aAKJJbpMYm/55TJ/FuGQa/Ow3btwzz+01GWNUWyaHyUC3bkKjH
t2+Q5Sz8PKFaNIo64k6y0tZPvNqqQRZlmwMXyv5xQmUHl2k0ijoiajhrdXsE
tzFMRu0yOKVGMNne5ZCW44neQWeo4f1oMigegkHtfkh9mwFrFW+ik7g6/XFb
CcpbNvG6/v316f9pgqbkDjj/RVpQ9MEe3hf0MtWH+mzgWhgEmndD1Rk1m+nS
6hT/WJIqGqPxwOLTVHh0EzyTmUkrR3ewib+HQYJPxrLPPkz5XBp9LhvDjWxY
yx1W/cCUZnaz2ApxFnslif1I/M1N1YjH4l/C+FLWA5K/R8KnwBq2SXsAn13M
4789UKUfjQHW5+bOQpfyIQiJdSIjxc8sJ1Aexm/4BIcU37CaJV/4Be73uRFZ
xazpSDG3R2o5yw00Q/Y1GfYMS+BCXy98PKuZ5NJO4HjFw5Rq8o7t1vJkbUJT
me6DWRh2QZHe5SCNCg/B82YCWshOUMOEU8wpMBj6knPxzMzlsKb/OFvn44/B
KUtRK/vTjJ+xqTTvVSFerSVu0s9cflPqZcyxmofdeZ+5iDv7ULG2hQLidqIS
1kBLfh2zcZlc790dRE8Lj+GFENn6mJ/HSMzmCgt+L0F8SxCtqt+Hb6aPRJ+r
ZbBAU0DRD7LYLrmLYLt8Ekm/qKbcuEx8lFXDmjpysQ9rcfMIc7C7bEmPHwxz
wVfUINvlP2pSF6O1i04zy48IH3sameqzu/USthq8a74NHdlylB11dQS/8AiM
bnkNXfUZwAaPw4W1i0BjXgJkzdwCmsvHCFatqUGN7kgydZb6x9W/2Mt9zqTQ
J4yzikXxsflpfNLympfRSaf/2AG89PoMWnuJgG5JK266JUyBr8wgYMRrtMrI
ILuDD6B0SjVMfqYGEi73OHFtC9RJEgK3gg6qOSRCpkdtUErWgNa8CmWPZ1+k
D/3PUPr3Mmx2cUYuYi/t6PWFtSsy2cOTUgKf2V0syL8Ut2g2W+UZGkJu9lFU
9ZuL+/qVsOrXIaa1kAdXkVj4Oyhmc65TYGXY9oOtn6BmI7noNK40DKDS/A5u
40kTFqMpgo5bjXHK7ge8zrCijYJNGND+SDQyyMA5otupPnkupU/UZwF6E5Bl
RuKpqX9xSt8o1tmmJjCbvZs8P83HkBJVuB8iLWh0CqM3GSo4tjOE3VOUQY1/
y5aZUwl9lM3AwGnf4du8ONbxxpf1hrvDlf49aDdoSVqF7ZiU64MlQ4vogZUN
fSvXw/HzctDSdTQN+T4k37uigoOy8TiyaBpOFfKhic2B9KZJB1dFvPmnsQlo
UTFEH92Og6JcDBVOekKukSdI9U2t9T3Z/eRzMwytz8jia9kTWKheQCEiCzFu
MBJNhGJ4ZRcB1Z+pBI04W9K7VYK60nLMNzIPk41X8JZRfjh18gwcc1yLcm75
4/pdi2jJ0SH2eZwtK5I5ZXXebT3S30e4+7otSYnnwQWNPvb3xi8Yyv7BfL91
4M+EZHw4pYtLmCHETD/H0XVdEdYyGM1iFK4x6VuSlCGjh7fuTKDyS41wyT4M
T0+xR3WP50SXhtm5m+rcx/536PAnjA4b78EMhTmkOqEavHd9A5U/19gZw1II
T3jOLal1YMH+38C4soVz1UhhwQeWgMPlTiayYwUn5nSWq1ohjo5n37GBrG72
yPSatf+et/Dz5iYw23sEggpL2Wvj3dg8vIcJ7/CAEwvHkVPPBW7qYXMU2r0L
0tw/sBP/OCd28x0qMwrh5yVuxee/3pB40Ht2vHsb7XSpZk8NklBVZwSLe/MK
ejwrqSzmGv0NkCKJ6pE4w6OeN1M2hLSJl7l9quFc3OK3IHfnGyt+YUl1uII5
N+5E57V2tKDxLJZKpMCOj1vQ/+MpftreaYDKB/HRw5Wkki0sGPBfj2s1NXDS
nCuwKqaXZQ7l8UVcAN6KWFEv2kWs4HQszx50g1W5Dh3Nd/nnB9dZ8JlMXHdj
ArXUVDKPqSvx/prr3JEkLRIfe4pFXpbGmUtLwHiiF/iZWNHPdgcSHMngZZgI
LpV9RZXtG0itR08QnXqa71WexrTm1TMDv9d8v2CM1dakGP5dkxRzynLG2ft3
wn9X5VkkNJLfLW024j6xLCtxTqM9HPWrTFlU4Av28tlKCHGURfNx09kvH3tQ
6TbhTpudZY+ungMl3SVYlFTKlNY404F9ymCss4GelaVj3O9RzCZKBptPnccX
fWbETLZxPjXDzEXvAxyV2kZKXiPpbx2Hn0SzaKVvDUZWFbLe33ZMdWgzUsB6
ZiF7nzlFKFFXiTIM2S4jf/0gXCJ3m/n3ptPYinxa2j0eDYai6dX1sdh0cQ1u
tivnlqTo0ZGESeTxaCNOqLNk/MVdGKT1ljeUvEecujvv1JDDGhtl2fWAEKi7
9I6ven+LQVgaOFUsQWcfZ3Zi5gPsSuxlERZS9EklDZ50jcAnV8JoFl7mxs7r
Yj2rArGpeDFr8J9Ds7w3UbRxODRkXCPJUY9Bzf8bmctspfuvLrEHWx79q+1B
mgnieCD5I9+0Zzu/ecx6vOGQBKE7ymiwIJ3rrlpL20sZWF3r49qkVKnhoy2O
7X6CLZGZLPTpDBxlcQbqV4pT/nRVK5UF3jiQMg61Xg/yBglErT8fQHTZQhL9
rI5vew3xpC7j3+dsZHWLrjCJS9F43FEXq3Yvoltvl2HjlDLUGkFwip7zfgkT
cWJJJIXrLCD7iZI2jh6XcbmbN729s5ZCb62iI4sb8cNwNMX8mUV/380k5fr2
et2b7jDNaz4JzllwnhWKbJz0Rdp8dQck6p/E9Y672Jb+mySc9Rwkf29GYyMn
tPwph4HjhPGIgTlOmPmWH5EXjt8t1mHg7WT4Km6BI9gdrPDPhk+b9WGeTALr
SL1Aa1Kns4NaNRCwXsBNDOlgD79MQudKVTL9vBrFvgObm1oAywfL4YFIGPqb
itrUCiVR8tyJdD0jEw2/ToRjR4Jw57SVrKU7nNV3STF+x0cMmdrLXIvvUeB6
6/pRvQJSP3acPkS64oGMZbQ4qgVdlZ5Dp7YdpPot5ExCPMj09Vj8s94C7lw4
ibMq75JIq/S/eb2NpZKxLNrUl5Iix6OPbygXoJSDm4eT0fWtPW75PYYUB3zI
b3k8SP0KJc+gyRRywByfr49AlS9dEL03CgtfrUOd0G2k4BVJ0+LCMHbaZPgb
4IFVa68xp4+m2Ll+J42Z6sZixcvxQo4EefW8ZAOK8yhrWjv8vqDL8ts30iJb
B3Zg8CaFPM/lKnb/Yj1X2lguF4mx7/bQhETGbuwsYetyy1BzXxY+ds8jm5Ao
GjeUAMc9Eigx5jCabGrkE3elcklC9+BS/A2aWFgGRs8VKGHNfvxt/oR9r5L/
9+5DRetNsGHHM+ucAjfcuGQJrmpPpA8ON8By2JNEDzdC7z//c107zGaZR2G2
ThF+OyWL/aFKZK/iw7xWfWK1B46ypx192J+kjJNUrlDps1203aqehRxzwNZQ
S36FWTJr2ash6BS5w6pfzQTpl2PAcGEmtIU60Jy0i+SxJY9pV4+ly156EOJS
zATZYlx1vyEu63Njg79yWJJtFxvF9lHc2Uh0C5zDz+ERFi18b5W44TwuGiFp
Yzb3OHPM+AlSnUI2S8K74VuVOqyeUIYbNxxgOnYa6GysQKvSVkKRyTA87Aln
u2dFQqh2J//Nps364s9A6vCotyz/qkDdJ3OtK2/dZNYfDPGr1XM+YHMmjg4a
iePi5+EMQQMUVSmif9NnSHgeAufKI6jprjB6dOlTkf5mWm36A8qFtrDb+XPo
7fvJqH7vHLn+fMi2PI5EZ4M6dvV7NSgWE1iYKPPPJumgdG8sLVDbh1OMhOip
bBzLerICvHqVsVNMBNMGenmvkSm88Z5tWHyvgl33XwmzP6iQ9ygr1IqegPs/
yzDL8BgU1VjOf+v3ZcfSz5DLhSQ6+CuDTd+0B078NxUCR5xDM+FnqPevJ3Wb
thPIZ4HE3R7K7TPHP4bpdKhkDnosvgpNt6xxSYEcbC+J5UyCZ8GLKk/at/oM
vZkvh2phPUztRzQWbp2L3PwOljwjHVp3RNPTmdchiZRoiiWSVs9pgt/xkHGy
FT2yXWC55W5088yF8m4enbevILOYu7BJKwNLsrUx8cUxZvRxKhmWfK/fH1TG
SnWW4ysMouEnnSxk6SUM7tiEZyY7wMD+RCzN2Uoj7+tApUEI7ffS5QOWRTKb
pzHMqCcMzgYm4ON7r6jd/TU/TTOB3PlOPm5hFF+h5wn63nfx8z/Pinm3GJ6V
vID8q8tYp8t163b/L6z18lhIWFEFRkZKdGRlMHb1h9H9gyrUuU0G2p2BT/MQ
oahD5Szy1gMmVz8e2o4VwbBNAo1me8BcdCXb/jWX6ztbTX4zSqwvLFnAcl1m
88Zf9OmXZAtY/a2ElE1l1qFulqgnYc5/0jnDbL9I4Y+R5ky9bR1LFjHDGeXa
Nl+m2VKZtwm4XLhDNy+EYK1bHN3YOIu4Zc+Y2JjxtPb2D/ZV6AOvlBzK1oQc
o5TgA/z4FHm0LXYg3xkyvFdgOEk/MkPnYll4vns8sz7RhrG/5/DR3xfQ5nBV
kgrTZ1t9QusyP+fA4IxxKJO2Ef0cduLYhgrm42KIq1qM0S/9EX1tvQCGZjdY
ltc6Gv/gHRx7p4vLRNez6gwREmuWwy+ZqzDqSTS0TTKjg5+1qGmqJIRp3oXd
YyTxe2sPtUivRWevSlYlEsWPVZNm+y3DWbH5S8yJAT60Mw1CJH3g6HF3tsVB
Q7BzfRKWXzjD2MlSuKapiJ4zfZnFDVNqLlRgtm4baVfHGmroyWQ3JZuoc1UN
hFWPoSV3xdHtP1UYp1/AcqJi6efC+WQ5IElusRdZQeo2OnbvA2TkT2EjXEVo
ctwjWA52JJe+nHao36LJg5+Qe96EndPk2dvHnxnptLJ7B5pg5b+ddpv2KYp6
2YaT/1Sw8l8RWH8qFeL1DGik1Cqyn7eOBsQqUdRCgfX3L6GiEXfJv0gfhuUa
YLvIQdZtm0dZ3jXUoRtGsn2R3IsjpfT49mi8MNqYXttzNG7vGny6+AKrdhuH
hzbYQfuEBXz6Nn+8NhxPkUcicYdWCa2tErO2G5cHcu928fvzaljnDjGK2KlD
srvfw42VQzBZwhZ/aFRgjV4IiIS84uW1v9Tfzitg3oIKZuN+nb9zfwubEyMO
4w32UtF0HnWD5DAqNIMPKZOjjy0L6EpBNlT2i9qUNKWSb+0UBpkTiE8dy6gq
mDaobSNbiTD26/F95v+wH8YNuaFsXy2TCZ2D/okSzDXPGg3OJoKjbxjbjb9Y
zuZDfK70LGibKW1z7vxS9GyzgwL/6Thb8zQTeXwW1/zTQH85J1zt+4fT2GRG
fkmLMEU+immNOcJ2ic6nG4Mx1ClSQ0n9ltzU32FocimCNAtTSIl/wZfL3ADH
ogSuvmYpL+eRheKFuyCu7zmruPOSab8q5wa0JOh1SBkL7qxEFUrkLHMuQnzL
U6it2cLu3/XCM+Z32bZrmXRf+SjVLwug8bkh5O3qSu2uwvgufibW9TZj65sr
bJqWHKiVTsdXlweYnsIKDHhRDyPqpWjUMiv2U3eofmXGKYw3HY01fcVwxu8E
+ztuAfkl5FDTUReSWfaJ+z940w8I
                "], "Biases" -> 
               RawArray["Real32",{-0.23329688608646393`, 0.1376294195652008, 
                 0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                 0.1361909657716751, -0.07115011662244797, 
                 0.0030301439110189676`, 0.04029219597578049, 
                 0.05379099026322365, 
                 0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                 0.0140318488702178, 
                 0.18612468242645264`, -0.17168177664279938`, 
                 0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                 0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                 0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                 0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                 0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                 0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "7" -> <|"Type" -> "Linear", 
             "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                "], "Biases" -> 
               RawArray["Real32",{-0.30062639713287354`, 0.12008462101221085`,
                  0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                 0.09417349845170975, -0.10099706798791885`, 
                 0.08236243575811386, -0.2349618673324585, 0.1114811822772026,
                  0.2365228235721588, -0.1581137776374817, 
                 0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                 0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                 0.08413115888834, -0.2386404424905777, 
                 0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                 0.017599068582057953`, -0.16277392208576202`, 
                 0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                 0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                 0.048794329166412354`, -0.2748609185218811, 
                 0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                 0.15255072712898254`, -0.054961107671260834`, 
                 0.12484297901391983`, -0.013735197484493256`}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
             "Parameters" -> <|
              "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
               "OutputPorts" -> 
               NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "10" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1: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
                "], "Biases" -> 
               RawArray["Real32",{-0.18632154166698456`, -0.05518893152475357,
                  0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                 0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                 0.12943300604820251`, 
                 0.21619535982608795`, -0.12615013122558594`, 
                 0.12520363926887512`, 0.1943180412054062, 
                 0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                 0.12467250972986221`, -0.3208949565887451, 
                 0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                 0.16070689260959625`, -0.07001221925020218, 
                 0.07522184401750565, 
                 0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                 0.24120552837848663`, -0.04254811629652977, 
                 0.19626277685165405`, 0.04852093756198883}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {50}, "$OutputSize" -> 50, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "11" -> <|
            "Type" -> "Elementwise", "Arrays" -> <||>, 
             "Parameters" -> <|
              "Function" -> 
               NeuralNetworks`ValidatedParameter[
                "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
           "12" -> <|
            "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["
1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                "], "Biases" -> 
               RawArray["Real32",{0.18740198016166687`, -0.1249600350856781, 
                 0.03215433284640312, -0.2378043681383133}]|>, 
             "Parameters" -> <|
              "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
               50, "$InputDimensions" -> {50}|>, 
             "Inputs" -> <|
              "Input" -> NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>,
              "Outputs" -> <|
              "Output" -> 
               NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
         "Inputs" -> <|
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
         "Outputs" -> <|
          "Output" -> NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
        "Version" -> "13.1.3", "Unstable" -> False|>], 
      "Training" -> <|
       "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
        TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
        "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
        19653.548073458904`|>, "InputType" -> "NumericalVector", "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
         "Output" -> <|
          "(f1f2f3f4f5f6)" -> <|
            "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
             "Mean" -> {0.23124615267859935`, -0.72822837729203, 
              0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
              0.10517240908924025`, -0.24024309043728495`, 0.3074998656424723,
               0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
              0.3879769949206493}, 
             "StandardDeviation" -> {0.42336656209659007`, 0.2672799034098392,
               0.07124798075524297, 0.36989547912470067`, 
              0.17138659393602926`, 0.5155818183543911, 0.688893371869374, 
              0.24977193740899778`, 0.6403849334448501, 0.4897664046907167, 
              0.46819109868519837`, 0.43423173863577835`, 0.6276718952348702, 
              0.28383206529853633`, 0.7719651260033509, 0.09756213850198994, 
              0.2950767752080472, 0.22147755480753964`}, 
             "Output" -> <|
              "(f1f2f3f4f5f6)" -> <|
                "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
             "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, "Key" -> 
             "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
      None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>, 
        "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
        "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
        "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
        "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
        "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
        "NetInitializationMethod" -> <|
         "Value" -> Automatic, "Options" -> <||>|>, 
        "OptimizationMethod" -> <|
         "Value" -> {"ADAM", "L2Regularization" -> None}, "Options" -> <||>|>,
         MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
        ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
        TrainingProgressReporting -> <|"Value" -> None, "Options" -> <||>|>, 
        "NetTrainOptions" -> <|
         "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"}, 
          "Options" -> <||>|>, 
        "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
        "ValidationSetRatio" -> <|
         "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
      Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
      "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
      "MeanCrossEntropy", "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
         Around[0.9926698116140742, 0.007247173785702781], "EvaluationTime" -> 
         0.0002390132437947042, "TestSize" -> 276, "ModelMemory" -> 101904, 
         "ModelUtility" -> 5.3529526868256205`, "TrainingSize" -> 1106, 
         "TrainingTime" -> 50.11872336272725, "TrainingMemory" -> 1025056, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.021350027675851042`, 0.008527240234488089]}, 
         "AccuracyHistory" -> {
           Around[0.9926698116140742, 0.005124525728307819]}, 
         "Configuration" -> {
          "NeuralNetwork", "NetworkType" -> "FullyConnected", "NetworkDepth" -> 
           4, "NumberOfParameters" -> 8600, "ActivationFunction" -> "SELU", 
           "L2Regularization" -> None, "Dropout" -> 0.01, 
           "NetInitializationMethod" -> Automatic, 
           "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
           MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
           "EarlyStopping" -> False, TrainingProgressReporting -> None, 
           "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
              Around[0.5039356498747214, 0.011280914837970198`], 
              "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 2744, 
              "ModelMemory" -> 101904., "ModelUtility" -> -5.255034068743364, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 474568., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[3.3682246428941447`, 0.11709052181782027`], 
                Around[5.718797544659934, 0.1974406032409913]}, 
              "AccuracyHistory" -> {
                Around[0.4977980114632854, 0.013422541870627485`], 
                Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
              Around[0.7731731038259634, 0.010538572727576656`], 
              "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 2532, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
              461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.0207920682675256`, 0.13567904919872614`], 
                Around[1.989358115693642, 0.12729332292504641`]}, 
              "AccuracyHistory" -> {
                Around[0.7666435334598815, 0.01212548962300386], 
                Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
              Around[0.8754721532521594, 0.013799020363039234`], 
              "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.6640374106578726`,
               "TrainingSize" -> 250, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 580856, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7727930479153965, 0.07355983104423623]}, 
              "AccuracyHistory" -> {
                Around[0.8754721532521594, 0.009757380872436296]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.021350027675851042`, 0.012059338789226588`], 
              "Accuracy" -> Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.021350027675851042`, 0.008527240234488089]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
             Around[0.021350027675851042`, 0.012059338789226588`], 
             "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
             "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1638549337103177`, 0.10037145501929841`], "Accuracy" -> 
              Around[0.5492390926678674, 0.023756280779855192`], 
              "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 1300, 
              "ModelMemory" -> 62416., "ModelUtility" -> -2.4356505013181984`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 315949.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0659744269130655`, 0.06346538833801657], 
                Around[1.2617354405075698`, 0.023724306617050557`]}, 
              "AccuracyHistory" -> {
                Around[0.5686355009414037, 0.0494049938117882], 
                Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
              Around[0.34906013350595955`, 0.01773043247078872], 
              "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 2744,
               "ModelMemory" -> 62416., 
              "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
              288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.7284854644248697`, 0.024470278570364008`], 
                Around[1.7449836721317225`, 0.02985267016659267]}, 
              "AccuracyHistory" -> {
                Around[0.333797137166834, 0.012654176408351573`], 
                Around[0.364323129845085, 0.01286858453924453]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.7297176649588678, 0.030635251566725513`], "Accuracy" -> 
              Around[0.7731352673792209, 0.01749760840751051], 
              "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.4608603411176038`,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 430312, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7297176649588678, 0.021662394126187413`]}, 
              "AccuracyHistory" -> {
                Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
              Around[0.8462070332421717, 0.03062402709723611], 
              "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> -0.1999951890132391, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 882408, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.38327177587574507`, 0.029923508235575796`]}, 
              "AccuracyHistory" -> {
                Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020558565549557822`, "MeanCrossEntropy" -> 
             Around[0.38327177587574507`, 0.0423182311805343], "ModelMemory" -> 
             62416, "TrainingMemory" -> 882408, "TrainingTime" -> 
             1.2870992522366111`|>, "Index" -> 2|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.35435313401532587`, 0.026162924108051638`], "Accuracy" -> 
              Around[0.8602959769418544, 0.016276096618821716`], 
              "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900, 
              "ModelMemory" -> 58320, 
              "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 250,
               "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35435313401532587`, 0.018499981052472317`]}, 
              "AccuracyHistory" -> {
                Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
              Around[0.4905470789487266, 0.05942169230008629], 
              "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 2672,
               "ModelMemory" -> 58320., "ModelUtility" -> -4.197660943845806, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 273552., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5949653673903932`, 0.05337852556796832], 
                Around[3.769761211170389, 0.12190065068836999`]}, 
              "AccuracyHistory" -> {
                Around[0.549197732950539, 0.013394029354165352`], 
                Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
              Around[0.7442585992282589, 0.013337895880245353`], 
              "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 2632,
               "ModelMemory" -> 58320., 
              "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              308650.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7090566921048821, 0.029587871638874982`], 
                Around[0.9267562156706394, 0.048804806717094945`]}, 
              "AccuracyHistory" -> {
                Around[0.7339496000489554, 0.012070557593356287`], 
                Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
              Around[0.9791671208169963, 0.012128533944401654`], 
              "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
              "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07118410180594256, 0.013542997191503502`]}, 
              "AccuracyHistory" -> {
                Around[0.9791671208169963, 0.008576168597937634]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
             Around[0.07118410180594256, 0.01915269030340499], "ModelMemory" -> 
             58320, "TrainingMemory" -> 945064, "TrainingTime" -> 
             6.2334652825440156`|>, "Index" -> 3|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
              Around[0.838474265252356, 0.01562338483938151], 
              "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 1100, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 250, 
              "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 845536, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4150311982338223, 0.022874520429674614`]}, 
              "AccuracyHistory" -> {
                Around[0.838474265252356, 0.011047401365013764`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.9363303357963932`, 0.22063573174865092`], "Accuracy" -> 
              Around[0.6016657435215405, 0.009931734042792198], 
              "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 2400, 
              "ModelMemory" -> 187664., "ModelUtility" -> -4.394526005243066, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.8628854898161876, 
              "TrainingMemory" -> 768069.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.7328302955198254`, 0.11030764480200886`], 
                Around[3.1398303760729616`, 0.1343428411885501]}, 
              "AccuracyHistory" -> {
                Around[0.6013282055836575, 0.014050468348716146`], 
                Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
              Around[0.7771993076355267, 0.016090257916624478`], 
              "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.4133613417100643`,
               "TrainingSize" -> 50, "TrainingTime" -> 1., "TrainingMemory" -> 
              768752, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.0883077850611167`, 0.06546404015990553]}, 
              "AccuracyHistory" -> {
                Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
             Around[1.0883077850611167`, 0.09258013344187536], "ModelMemory" -> 
             187664, "TrainingMemory" -> 768752, "TrainingTime" -> 
             16.33188643150958|>, "Index" -> 4|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.06349687324568681, 0.020314194118190455`], "Accuracy" -> 
              Around[0.9752187821898789, 0.013178658637319573`], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.1990832337140014`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 1031984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06349687324568681, 0.014364304415312347`]}, 
              "AccuracyHistory" -> {
                Around[0.9752187821898789, 0.009318718889391335]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
              Around[0.5614696628952743, 0.02316984504064622], 
              "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 1900, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.375448364812931, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 588357.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2425860137311924`, 0.09670887865815357], 
                Around[3.472752094517207, 0.15761956845763322`]}, 
              "AccuracyHistory" -> {
                Around[0.5412325518696653, 0.01645230430382249], 
                Around[0.5817067739208833, 0.01550253065862414]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
              Around[0.7822399753364762, 0.011053793618809461`], 
              "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 2632, 
              "ModelMemory" -> 164368., "ModelUtility" -> -3.09292339195906, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.9314427449080938, 
              "TrainingMemory" -> 599973.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1299535489778723`, 0.07202244880796001], 
                Around[1.862147339889153, 0.11678580277280175`]}, 
              "AccuracyHistory" -> {
                Around[0.7898676324542127, 0.011253506706433129`], 
                Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.42705750837440937`, 0.035076829136806445`], "Accuracy" -> 
              Around[0.8446730233225903, 0.015135382766381485`], 
              "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 1132, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.5213181632194831, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 668632, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.42705750837440937`, 0.024803063745157707`]}, 
              "AccuracyHistory" -> {
                Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
             Around[0.42705750837440937`, 0.035076829136806445`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
             "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.29713763668876286`, 0.029783149124946628`], "Accuracy" -> 
              Around[0.8857231716276136, 0.013316951171936615`], 
              "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.27080207566416914`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 518544, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.29713763668876286`, 0.02105986671133995]}, 
              "AccuracyHistory" -> {
                Around[0.8857231716276136, 0.00941650647840652]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
              Around[0.4534728434064575, 0.03657154854139636], 
              "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 2200, 
              "ModelMemory" -> 93800., "ModelUtility" -> -4.7036563931676705`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.5848931924611134`, 
              "TrainingMemory" -> 372712., "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.8582879282812748`, 0.09593272842945073], 
                Around[4.168810776492888, 0.14832220789749126`]}, 
              "AccuracyHistory" -> {
                Around[0.4184413958301533, 0.015453697183599058`], 
                Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
              Around[0.769971120234303, 0.0162893024591907], "EvaluationTime" -> 
              0.00006291890573589659, "TestSize" -> 1332, "ModelMemory" -> 
              93800, "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 
              50, "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2977572298050588`, 0.07725242580096887]}, 
              "AccuracyHistory" -> {
                Around[0.769971120234303, 0.01151827622969245]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
             Around[1.2977572298050588`, 0.1092514282939514], "ModelMemory" -> 
             93800, "TrainingMemory" -> 386192, "TrainingTime" -> 
             25.884295625347566`|>, "Index" -> 6|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5879853515835944`, 0.14718023198397873`], "Accuracy" -> 
              Around[0.7939162815913106, 0.015646642549432373`], 
              "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -3.152069743372218, 
              "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 600288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.5879853515835944`, 0.10407214009248054`]}, 
              "AccuracyHistory" -> {
                Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
              Around[0.5705716928210636, 0.02387696402198573], 
              "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 2100, 
              "ModelMemory" -> 164368., "ModelUtility" -> -4.803632164263322, 
              "TrainingSize" -> 10, "TrainingTime" -> 5.444439372449127, 
              "TrainingMemory" -> 583613.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.6845044721043254`, 0.10447663667270932`], 
                Around[4.364677185562806, 0.2100094842353753]}, 
              "AccuracyHistory" -> {
                Around[0.5492372585429602, 0.014247131834686502`], 
                Around[0.591906127099167, 0.01628060211969826]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.38151664752165954`, 0.03977608365046414], "Accuracy" -> 
              Around[0.8740940349402928, 0.013875001085229821`], 
              "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 250, 
              "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
              683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.38151664752165954`, 0.028125938478286556`]}, 
              "AccuracyHistory" -> {
                Around[0.8740940349402928, 0.009811107356336711]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00037881779653037317`, "MeanCrossEntropy" -> 
             Around[0.38151664752165954`, 0.03977608365046414], "ModelMemory" -> 
             164368, "TrainingMemory" -> 683480, "TrainingTime" -> 
             92.6247680155231|>, "Index" -> 7|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2846789544300572`, 0.10135837559026044`], "Accuracy" -> 
              Around[0.7374636238433064, 0.017014953179959547`], 
              "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.6005267903937916`,
               "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 341168, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2846789544300572`, 0.07167119470992618]}, 
              "AccuracyHistory" -> {
                Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
              Around[0.5152833374237896, 0.07249298936486862], 
              "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 2744,
               "ModelMemory" -> 58320., "ModelUtility" -> -5.074385087421649, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 295925.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[2.5190643035821725`, 0.1028129894230038], 
                Around[5.812425858174743, 0.191466359358563]}, 
              "AccuracyHistory" -> {
                Around[0.5871646538577457, 0.013267469359568705`], 
                Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00020244886234998508`, "MeanCrossEntropy" -> 
             Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
             58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 8|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
              Around[0.8717062863197803, 0.01777595950885693], 
              "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.10702789819239966`, 
              "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 374688, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3301382275974658, 0.02068135393911543]}, 
              "AccuracyHistory" -> {
                Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
              Around[0.7363490438369396, 0.017031507261842195`], 
              "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.3231968082428875`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 338064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6791528095168373, 0.027387263849560993`]}, 
              "AccuracyHistory" -> {
                Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
              Around[0.4863596829810406, 0.04278093185210315], 
              "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 2744, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.180492238404206, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.5444439372449126, 
              "TrainingMemory" -> 322133.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.508549842629893, 0.04605766705211905], 
                Around[3.771470810362135, 0.12018564135103059`]}, 
              "AccuracyHistory" -> {
                Around[0.5280828090172973, 0.013434097226343747`], 
                Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
             Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
             9.109108405185806|>, "Index" -> 9|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5038386117534089, 0.041784890614198204`], "Accuracy" -> 
              Around[0.828465928965194, 0.02654031530216917], 
              "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 400, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.7882946404845459, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 528184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5038386117534089, 0.029546379504437673`]}, 
              "AccuracyHistory" -> {
                Around[0.828465928965194, 0.018766836924992914`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
              Around[0.3679296647759494, 0.07392752974250799], 
              "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 2744,
               "ModelMemory" -> 101904., 
              "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
              449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[2.148424842980697, 0.03780978285236538], 
                Around[1.4568966776552688`, 0.026077841742531138`]}, 
              "AccuracyHistory" -> {
                Around[0.2945557228909562, 0.012245543527860529`], 
                Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
              Around[0.6180757845356775, 0.05382602805907864], 
              "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 2632, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
              461714.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.155425119141791, 0.02396130422338247], 
                Around[1.0610392976248695`, 0.02621811203957636]}, 
              "AccuracyHistory" -> {
                Around[0.5650696245779578, 0.013556795434539574`], 
                Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23257721592841687`, 0.03163453421313113], "Accuracy" -> 
              Around[0.908886547057971, 0.024356212382520913`], 
              "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 0.7369941836531197, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1045880, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23257721592841687`, 0.022368993661782865`]}, 
              "AccuracyHistory" -> {
                Around[0.908886547057971, 0.017222442939700294`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
             Around[0.23257721592841687`, 0.03163453421313113], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1045880, "TrainingTime" -> 
             1.4937384274690055`|>, "Index" -> 10|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
              Around[0.7457728338345587, 0.018472683364634448`], 
              "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -1.7509502414499094`, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 309112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8371599125387441, 0.047884777618598134`]}, 
              "AccuracyHistory" -> {
                Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
              Around[0.8882989940963734, 0.013145309817848845`], 
              "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.48100284988718467`, 
              "TrainingSize" -> 250, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 469432, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.2722926005782066, 0.022605846381320353`]}, 
              "AccuracyHistory" -> {
                Around[0.8882989940963734, 0.009295137712999018]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04678344173247784, 0.020786249475512084`], "Accuracy" -> 
              Around[0.9851396376350638, 0.010281268792086398`], 
              "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 3.8798539588000582`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 972672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04678344173247784, 0.014698097959569912`]}, 
              "AccuracyHistory" -> {
                Around[0.9851396376350638, 0.007269954882085916]}|>, <|
             "MeanCrossEntropy" -> 
              Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
              Around[0.502464111857925, 0.07130486561817233], 
              "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 2200, 
              "ModelMemory" -> 62416., "ModelUtility" -> -4.6637320197127625`,
               "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299269.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.8332223163074313`, 0.08054167103388306], 
                Around[4.86043648706169, 0.16818929238262642`]}, 
              "AccuracyHistory" -> {
                Around[0.572995990979411, 0.015538960918031978`], 
                Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
             Around[3.3468294016845603`, 1.5153492244478233`], "ModelMemory" -> 
             62416., "TrainingMemory" -> 299269.3333333333, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 11|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
              Around[0.762381947001795, 0.01642868812328819], 
              "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 1332, 
              "ModelMemory" -> 164368, "ModelUtility" -> -1.7030510878983651`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 600016, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7752070403907262, 0.03017334558439825]}, 
              "AccuracyHistory" -> {
                Around[0.762381947001795, 0.011616836777975974`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.39447704061745437`, 0.03234768531334908], "Accuracy" -> 
              Around[0.8594906763316973, 0.01476170763807768], 
              "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 1100, 
              "ModelMemory" -> 164368, "ModelUtility" -> -0.3625496870271967, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 675000, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.39447704061745437`, 0.02287326764075762]}, 
              "AccuracyHistory" -> {
                Around[0.8594906763316973, 0.01043810357277798]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
              Around[0.9455603955460657, 0.019279136977717354`], 
              "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 1.404009915150804, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 1142080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15855325263059325`, 0.025484079405049796`]}, 
              "AccuracyHistory" -> {
                Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
              Around[0.5116939418989973, 0.07010685788967808], 
              "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 2400, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
              586421.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.521906370483909, 0.03515613181787799], 
                Around[1.5882755791735657`, 0.05563504596868172]}, 
              "AccuracyHistory" -> {
                Around[0.442311083421225, 0.014256465737770922`], 
                Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
             Around[1.5550909748287374`, 0.04454750436345691], "ModelMemory" -> 
             164368., "TrainingMemory" -> 586421.3333333333, "TrainingTime" -> 
             5.818068863066169|>, "Index" -> 12|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9007091827219887, 0.030008702121127984`], "Accuracy" -> 
              Around[0.6760965348587569, 0.018079481767156038`], 
              "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.8723329888169609`, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9007091827219887, 0.02121935676445673]}, 
              "AccuracyHistory" -> {
                Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.43111245312757496`, 0.025345577264303743`], "Accuracy" -> 
              Around[0.8330426045067885, 0.015571490015669136`], 
              "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 1132,
               "ModelMemory" -> 58320, "ModelUtility" -> -0.4088030140985044, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 364536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.43111245312757496`, 0.01792202955667676]}, 
              "AccuracyHistory" -> {
                Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.1842923793671783, 0.025304164192749383`], "Accuracy" -> 
              Around[0.9457395297710746, 0.019169568233064083`], 
              "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 891920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.1842923793671783, 0.01789274609295091]}, 
              "AccuracyHistory" -> {
                Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
              Around[0.43385363675367183`, 0.011415114317526467`], 
              "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 2472, 
              "ModelMemory" -> 58320., "ModelUtility" -> -3.5149737403880033`,
               "TrainingSize" -> 10, "TrainingTime" -> 0.2945480583948779, 
              "TrainingMemory" -> 273418.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.4396046101139186`, 0.029031135765925187`], 
                Around[2.475712680707863, 0.06775654619883521]}, 
              "AccuracyHistory" -> {
                Around[0.439498971976867, 0.014905537896345295`], 
                Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
             Around[1.9576586454108909`, 0.5187408468073508], "ModelMemory" -> 
             58320., "TrainingMemory" -> 273418.6666666666, "TrainingTime" -> 
             4.386881933034051|>, "Index" -> 13|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8419793893936219, 0.040743862542620725`], "Accuracy" -> 
              Around[0.7373831716775224, 0.01693418574125903], 
              "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.8856361050895067`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 782064, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8419793893936219, 0.02881026149561968]}, 
              "AccuracyHistory" -> {
                Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
              Around[0.8250320562814308, 0.01594299951984108], 
              "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, "ModelUtility" -> -0.6112985333219293,
               "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 848080, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.4432056724888078, 0.02238507759095115]}, 
              "AccuracyHistory" -> {
                Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.16858329728652338`, 0.029069351611494675`], "Accuracy" -> 
              Around[0.945560395546066, 0.01927913697771735], 
              "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 1.2824675838731772`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 1207096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.16858329728652338`, 0.020555135649183976`]}, 
              "AccuracyHistory" -> {
                Around[0.945560395546066, 0.013632408492368258`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
             Around[0.16858329728652338`, 0.029069351611494675`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
             "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3249962292171797`, 0.12170206901231112`], "Accuracy" -> 
              Around[0.793195580192614, 0.015828005629622638`], 
              "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300, 
              "ModelMemory" -> 164368, "ModelUtility" -> -2.7896299497840076`,
               "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 589096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3249962292171797`, 0.08605635828303838]}, 
              "AccuracyHistory" -> {
                Around[0.793195580192614, 0.011192090113365015`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, 
              "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 250, 
              "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 686536,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00044256629018744604`, "MeanCrossEntropy" -> 
             Around[0.3701221449474526, 0.03366489354688038], "ModelMemory" -> 
             164368, "TrainingMemory" -> 686536, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 15|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1227673790868702`, 0.10368611279141937`], "Accuracy" -> 
              Around[0.757173277714323, 0.018196954510351714`], 
              "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -2.342528378471589, 
              "TrainingSize" -> 50, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 309656, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1227673790868702`, 0.07331715346968586]}, 
              "AccuracyHistory" -> {
                Around[0.757173277714323, 0.012867189931212827`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33220140414624993`, 0.047853257302163214`], "Accuracy" -> 
              Around[0.8965085805171233, 0.012697194170323252`], 
              "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 1132, 
              "ModelMemory" -> 62416, "ModelUtility" -> 0.07288974716187491, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 510104, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33220140414624993`, 0.03383736274022428]}, 
              "AccuracyHistory" -> {
                Around[0.8965085805171233, 0.00897827209987787]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.029497520149122013`, 0.01667491875741592], "Accuracy" -> 
              Around[0.9926698116140742, 0.007247173785702781], 
              "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 4.7583398302297795`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 39.810717055349734`, 
              "TrainingMemory" -> 948200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.029497520149122013`, 0.011790948129103553`]}, 
              "AccuracyHistory" -> {
                Around[0.9926698116140742, 0.005124525728307819]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.2949671588281193`, 0.14749235577106196`], "Accuracy" -> 
              Around[0.5835796437000327, 0.02088503617561304], 
              "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 1100, 
              "ModelMemory" -> 62416, "ModelUtility" -> -3.761313256061099, 
              "TrainingSize" -> 10, "TrainingTime" -> 3.981071705534973, 
              "TrainingMemory" -> 297120, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[2.2949671588281193`, 0.10429284493889672`]}, 
              "AccuracyHistory" -> {
                Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
             Around[2.2949671588281193`, 0.14749235577106196`], "ModelMemory" -> 
             62416, "TrainingMemory" -> 297120, "TrainingTime" -> 
             58.99948267602831|>, "Index" -> 16|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
              Around[0.7677501064780398, 0.00816276162917491], 
              "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 2664,
               "ModelMemory" -> 93800., 
              "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50, 
              "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 386088.,
               "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[1.5973296386447973`, 0.09710009617968923], 
                Around[1.6944960008299512`, 0.10490120341267964`]}, 
              "AccuracyHistory" -> {
                Around[0.7682281016221508, 0.011537187632355594`], 
                Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.33249143642424983`, 0.02780494761566639], "Accuracy" -> 
              Around[0.8613277396783116, 0.014507674452371017`], 
              "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 1132,
               "ModelMemory" -> 93800, "ModelUtility" -> 0.05248807658590138, 
              "TrainingSize" -> 250, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 502672, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.33249143642424983`, 0.01966106700957443]}, 
              "AccuracyHistory" -> {
                Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.04443140001711353, 0.021314953380441544`], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.92776201569796, 
              "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
              "TrainingMemory" -> 970336, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.04443140001711353, 0.01507194807598534]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00046938966244621503`, "MeanCrossEntropy" -> 
             Around[0.04443140001711353, 0.021314953380441544`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
             "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
              Around[0.7384665234825579, 0.010719276135332273`], 
              "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 2432, 
              "ModelMemory" -> 93800., "ModelUtility" -> -1.9350890275488193`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.37788092188698263`, 
              "TrainingMemory" -> 378786.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7726332524190396, 0.028941631998749596`], 
                Around[1.0060756456836646`, 0.05024424270156515]}, 
              "AccuracyHistory" -> {
                Around[0.7324400373766513, 0.0120571885743892], 
                Around[0.7444930095884645, 0.01307837056160318]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.34782344779765667`, 0.025712507033831242`], "Accuracy" -> 
              Around[0.8557374599745653, 0.014686070676875251`], 
              "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, 
              "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 250,
               "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
              454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.34782344779765667`, 0.018181488084928872`]}, 
              "AccuracyHistory" -> {
                Around[0.8557374599745653, 0.0103846201646034]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15276622770087278`, 0.028666652684449675`], "Accuracy" -> 
              Around[0.9498135082589592, 0.018508440411731872`], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 1.5673860415737628`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 907872, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15276622770087278`, 0.02027038450709391]}, 
              "AccuracyHistory" -> {
                Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.15276622770087278`, 0.028666652684449675`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
             "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7753042739299817, 0.039969593621796584`], "Accuracy" -> 
              Around[0.7375401740439216, 0.01714466436223822], 
              "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 1300, 
              "ModelMemory" -> 101904, "ModelUtility" -> -1.637907986699601, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 461800, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7753042739299817, 0.02826277069124294]}, 
              "AccuracyHistory" -> {
                Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35554695739060116`, 0.027033696117590978`], "Accuracy" -> 
              Around[0.8470897173852533, 0.01508748965454944], 
              "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, "ModelUtility" -> -0.08838018962147687,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 567400, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.35554695739060116`, 0.01911570984528502]}, 
              "AccuracyHistory" -> {
                Around[0.8470897173852533, 0.01066846624581379]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.15410934185340477`, 0.03040532289461026], "Accuracy" -> 
              Around[0.9596068784743268, 0.016667152171683092`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 1.5363925902488362`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1024944, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.15410934185340477`, 0.0214998100029455]}, 
              "AccuracyHistory" -> {
                Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.15410934185340477`, 0.03040532289461026], "ModelMemory" -> 
             101904, "TrainingMemory" -> 1024944, "TrainingTime" -> 
             2.891283046943182|>, "Index" -> 19|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 1000|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.9025240498596048`, 0.17368396265702707`], "Accuracy" -> 
              Around[0.7888324315844696, 0.015739599038312638`], 
              "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 1332, 
              "ModelMemory" -> 187664, "ModelUtility" -> -3.5329225623661613`,
               "TrainingSize" -> 50, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 780096, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.9025240498596048`, 0.12281310777813492`]}, 
              "AccuracyHistory" -> {
                Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
              Around[0.8854786750958584, 0.013351117434256547`], 
              "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 1132,
               "ModelMemory" -> 187664, 
              "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 250, 
              "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
              837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6454807954277998, 0.062000766216747265`]}, 
              "AccuracyHistory" -> {
                Around[0.8854786750958584, 0.009440665674180743]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00022514047861176898`, "MeanCrossEntropy" -> 
             Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
             187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
             115.3099731077524|>, "Index" -> 20|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
              Around[0.5296860458536663, 0.019284927181766578`], 
              "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 1332, 
              "ModelMemory" -> 58320, "ModelUtility" -> -2.44789502640578, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.19952623149688792`, 
              "TrainingMemory" -> 285536, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.2036312536280331`, 0.01921988365429954]}, 
              "AccuracyHistory" -> {
                Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.8399174549925484, 0.024903779896598206`], "Accuracy" -> 
              Around[0.7369045920343117, 0.018395727422659554`], 
              "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> -1.7311181711686499`, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.3981071705534972, 
              "TrainingMemory" -> 351208, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8399174549925484, 0.017609631642061807`]}, 
              "AccuracyHistory" -> {
                Around[0.7369045920343117, 0.0130077436054219]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
             Around[0.8399174549925484, 0.024903779896598206`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 351208, "TrainingTime" -> 
             2.4002626703166206`|>, "Index" -> 21|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
              Around[0.7313061583954904, 0.017144680944532857`], 
              "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 1332,
               "ModelMemory" -> 58320, "ModelUtility" -> -2.028995426006972, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 313112, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9663976578750052, 0.05017890964418109]}, 
              "AccuracyHistory" -> {
                Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35008419981942934`, 0.024708646909891732`], "Accuracy" -> 
              Around[0.8568009346457361, 0.014673031432912107`], 
              "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 1132, 
              "ModelMemory" -> 58320, "ModelUtility" -> 
              0.0029327369312612817`, "TrainingSize" -> 250, "TrainingTime" -> 
              3.981071705534973, "TrainingMemory" -> 398384, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35008419981942934`, 0.017471651783928475`]}, 
              "AccuracyHistory" -> {
                Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.042170347467092334`, 0.016000630897312476`], 
              "Accuracy" -> Around[0.9907604816520923, 0.008121627376877738], 
              "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276, 
              "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273, 
              "TrainingSize" -> 1106, "TrainingTime" -> 12.589254117941675`, 
              "TrainingMemory" -> 825792, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.042170347467092334`, 0.011314154610752645`]}, 
              "AccuracyHistory" -> {
                Around[0.9907604816520923, 0.00574285779246056]}|>, <|
             "MeanCrossEntropy" -> 
              Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
              Around[0.5804592460589959, 0.018783072828788897`], 
              "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
              "ModelMemory" -> 58320, "ModelUtility" -> -3.4638943660534287`, 
              "TrainingSize" -> 10, "TrainingTime" -> 1.2589254117941673`, 
              "TrainingMemory" -> 299984, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.987919142262011, 0.07603787179768637]}, 
              "AccuracyHistory" -> {
                Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
             Around[1.987919142262011, 0.10753378955027475`], "ModelMemory" -> 
             58320, "TrainingMemory" -> 299984, "TrainingTime" -> 
             18.65727460278956|>, "Index" -> 22|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 2|>, 
             "NumberOfParameters" -> <|"Value" -> 3600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9403941167153582, 0.030071559648660914`], "Accuracy" -> 
              Around[0.6590202792143492, 0.018327916017389055`], 
              "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 1332,
               "ModelMemory" -> 62416, "ModelUtility" -> -1.9641702588327155`,
               "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 318200, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9403941167153582, 0.021263803748423883`]}, 
              "AccuracyHistory" -> {
                Around[0.6590202792143492, 0.01295979370091334]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.45576172147997035`, 0.02603166210338864], "Accuracy" -> 
              Around[0.8256280537105091, 0.015920374420882354`], 
              "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 1132,
               "ModelMemory" -> 62416, "ModelUtility" -> -0.525479429825631, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.5011872336272722, 
              "TrainingMemory" -> 420072, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45576172147997035`, 0.01840716479886297]}, 
              "AccuracyHistory" -> {
                Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
              Around[0.9385178062088241, 0.020368186136795634`], 
              "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 276, 
              "ModelMemory" -> 62416, "ModelUtility" -> 1.0349935743091963`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 933232, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.20578142008052, 0.019371630008387233`]}, 
              "AccuracyHistory" -> {
                Around[0.9385178062088241, 0.01440248253779802]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041974250697322877`, "MeanCrossEntropy" -> 
             Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
             62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
             2.29662775876662|>, "Index" -> 23|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.5041540185761222`, 0.12792697018320168`], "Accuracy" -> 
              Around[0.7491330451581357, 0.01676873732368961], 
              "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 1332,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50, 
              "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
              461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.5041540185761222`, 0.09045802811319117]}, 
              "AccuracyHistory" -> {
                Around[0.7491330451581357, 0.01185728787351688]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3551338319540449, 0.027278187743878263`], "Accuracy" -> 
              Around[0.8473263359267194, 0.015089820198610777`], 
              "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 1132,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 250, 
              "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 527408,
               "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.3551338319540449, 0.01928859153217609]}, 
              "AccuracyHistory" -> {
                Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
              Around[0.9895518014074794, 0.008620653342748424], 
              "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 4.258968427388813, 
              "TrainingSize" -> 1106, "TrainingTime" -> 15.848931924611142`, 
              "TrainingMemory" -> 932288, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.03734914821299343, 0.013125775259394882`]}, 
              "AccuracyHistory" -> {
                Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
              Around[0.46102332820255726`, 0.018987327336901637`], 
              "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 1372,
               "ModelMemory" -> 101904, 
              "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10, 
              "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
              449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[2.678346364097339, 0.08174114510413875]}, 
              "AccuracyHistory" -> {
                Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00029572208708069134`, "MeanCrossEntropy" -> 
             Around[2.678346364097339, 0.11559943601018015`], "ModelMemory" -> 
             101904, "TrainingMemory" -> 449640, "TrainingTime" -> 
             18.983242383456506`|>, "Index" -> 24|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
              Around[0.7762423210420635, 0.014329340894644918`], 
              "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 2432, 
              "ModelMemory" -> 164368., 
              "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
              605098.6666666666, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.8208265202024376, 0.05283642239438791], 
                Around[1.4514603795294685`, 0.08835215155478726]}, 
              "AccuracyHistory" -> {
                Around[0.7878452988653784, 0.012263467049955281`], 
                Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
              Around[0.8628723375916284, 0.014402616848587043`], 
              "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 1132,
               "ModelMemory" -> 164368, "ModelUtility" -> -0.2386147056327178,
               "TrainingSize" -> 250, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 680424, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3701221449474526, 0.02380467451492236]}, 
              "AccuracyHistory" -> {
                Around[0.8628723375916284, 0.01018418804046752]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.06082621292123911, 0.019650473295384628`], "Accuracy" -> 
              Around[0.9770146234585061, 0.012716008303818851`], 
              "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276, 
              "ModelMemory" -> 164368, "ModelUtility" -> 3.2838445796528624`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 1099664, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.06082621292123911, 0.013894982920691632`]}, 
              "AccuracyHistory" -> {
                Around[0.9770146234585061, 0.008991575701254757]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
             Around[0.06082621292123911, 0.019650473295384628`], 
             "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
             "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
              Around[0.7627369072147341, 0.011750893611347561`], 
              "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 2664, 
              "ModelMemory" -> 101904., 
              "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
              468021.3333333333, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[1.0095607638414457`, 0.05525446612282441], 
                Around[1.1842784010456864`, 0.07075909436910463]}, 
              "AccuracyHistory" -> {
                Around[0.7543389604118015, 0.011774622135660197`], 
                Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.35804951443350097`, 0.026655439166062223`], "Accuracy" -> 
              Around[0.8488505284229317, 0.014960827173881168`], 
              "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 1132, 
              "ModelMemory" -> 101904, 
              "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
              527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.35804951443350097`, 0.018848241789828087`]}, 
              "AccuracyHistory" -> {
                Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
              Around[0.9880818046627218, 0.009172926997105988], 
              "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276, 
              "ModelMemory" -> 101904, "ModelUtility" -> 3.3814381242084908`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 959184, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.05985945373078884, 0.01350088664315196]}, 
              "AccuracyHistory" -> {
                Around[0.9880818046627218, 0.006486238882982798]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
             Around[0.05985945373078884, 0.01909313699480727], "ModelMemory" -> 
             101904, "TrainingMemory" -> 959184, "TrainingTime" -> 
             6.89353199975045|>, "Index" -> 26|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 300|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.3358149900117273`, 0.12222648201044096`], "Accuracy" -> 
              Around[0.7862467400481814, 0.01602150238466662], 
              "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 1300, 
              "ModelMemory" -> 187664, "ModelUtility" -> -2.825724619026342, 
              "TrainingSize" -> 50, "TrainingTime" -> 1.9952623149688797`, 
              "TrainingMemory" -> 781952, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.3358149900117273`, 0.08642717427015836]}, 
              "AccuracyHistory" -> {
                Around[0.7862467400481814, 0.01132891298099421]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
              Around[0.8858609662855659, 0.013283721779471411`], 
              "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, "ModelUtility" -> -1.3445805711537584`,
               "TrainingSize" -> 250, "TrainingTime" -> 6.309573444801933, 
              "TrainingMemory" -> 845640, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.6317653258849528, 0.05961837551263815]}, 
              "AccuracyHistory" -> {
                Around[0.8858609662855659, 0.009393009749659667]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
             Around[0.6317653258849528, 0.08431311521662489], "ModelMemory" -> 
             187664, "TrainingMemory" -> 845640, "TrainingTime" -> 
             36.874584317833964`|>, "Index" -> 27|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 10|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1154980744941485`, 0.034353683515180075`], "Accuracy" -> 
              Around[0.5814498430933545, 0.019088672339769665`], 
              "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 1332, 
              "ModelMemory" -> 93800, "ModelUtility" -> -2.347503593111097, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 386152, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[1.1154980744941485`, 0.02429172257232034]}, 
              "AccuracyHistory" -> {
                Around[0.5814498430933545, 0.01349772965529921]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.5546183182382579, 0.026395794652472045`], "Accuracy" -> 
              Around[0.8135685469111952, 0.016337844310188795`], 
              "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> -0.9566176476083332, 
              "TrainingSize" -> 250, "TrainingTime" -> 0.31622776601683794`, 
              "TrainingMemory" -> 451760, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.5546183182382579, 0.01866464539357059]}, 
              "AccuracyHistory" -> {
                Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
              Around[0.9299868058195125, 0.021652291921408842`], 
              "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.7601699845170374, 
              "TrainingSize" -> 1106, "TrainingTime" -> 0.7943282347242815, 
              "TrainingMemory" -> 918608, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.23091679939394155`, 0.02259715579830503]}, 
              "AccuracyHistory" -> {
                Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.00041019731090850185`, "MeanCrossEntropy" -> 
             Around[0.23091679939394155`, 0.0319572042010208], "ModelMemory" -> 
             93800, "TrainingMemory" -> 918608, "TrainingTime" -> 
             1.3087789598585713`|>, "Index" -> 28|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 4|>, 
             "NumberOfParameters" -> <|"Value" -> 8600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> None|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 100|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
              Around[0.7681507374150377, 0.016318407378901893`], 
              "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 1332,
               "ModelMemory" -> 93800, "ModelUtility" -> -2.137795388853302, 
              "TrainingSize" -> 50, "TrainingTime" -> 0.6309573444801932, 
              "TrainingMemory" -> 386256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.9948450772059008, 0.05585599851339633]}, 
              "AccuracyHistory" -> {
                Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
              Around[0.8617176768356566, 0.014429545856984168`], 
              "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 1132, 
              "ModelMemory" -> 93800, "ModelUtility" -> 0.052922354317971765`,
               "TrainingSize" -> 250, "TrainingTime" -> 1.5848931924611136`, 
              "TrainingMemory" -> 497976, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.3326799470819294, 0.018734832919486785`]}, 
              "AccuracyHistory" -> {
                Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.07021180454193646, 0.026976812427827776`], "Accuracy" -> 
              Around[0.9710277520559213, 0.014250347362805026`], 
              "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
              "ModelMemory" -> 93800, "ModelUtility" -> 3.0477874334351047`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 5.011872336272724, 
              "TrainingMemory" -> 966920, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.07021180454193646, 0.01907548700251455]}, 
              "AccuracyHistory" -> {
                Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
             Around[0.07021180454193646, 0.026976812427827776`], 
             "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
             "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
          "Value" -> "NeuralNetwork", 
           "Options" -> <|
            "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
             "NetworkDepth" -> <|"Value" -> 8|>, 
             "NumberOfParameters" -> <|"Value" -> 18600|>, 
             "ActivationFunction" -> <|"Value" -> "SELU"|>, 
             "L2Regularization" -> <|"Value" -> None|>, 
             "Dropout" -> <|"Value" -> 0.01|>, 
             "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
             "OptimizationMethod" -> <|
              "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
             MaxTrainingRounds -> <|"Value" -> 30|>, 
             ValidationSet -> <|"Value" -> Automatic|>, 
             "EarlyStopping" -> <|"Value" -> False|>, 
             TrainingProgressReporting -> <|"Value" -> None|>, 
             "NetTrainOptions" -> <|"Value" -> Automatic|>, 
             "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
              Around[0.7911413261337976, 0.015627505897240296`], 
              "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 2332,
               "ModelMemory" -> 187664., 
              "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50, 
              "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
              774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.7558990910227044, 0.037970217663081576`], 
                Around[0.9594474328704059, 0.07043483754789011]}, 
              "AccuracyHistory" -> {
                Around[0.7779594452749371, 0.011355683387275856`], 
                Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
              Around[0.8389781853611775, 0.015335274506302916`], 
              "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 1132, 
              "ModelMemory" -> 187664, 
              "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 250, 
              "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4042669758821077, 0.022272205006115358`]}, 
              "AccuracyHistory" -> {
                Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
             "MeanCrossEntropy" -> 
              Around[0.10406413363415194`, 0.020899367441681686`], "Accuracy" -> 
              Around[0.9736914348517792, 0.013553043838557063`], 
              "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276, 
              "ModelMemory" -> 187664, "ModelUtility" -> 2.2363622110324752`, 
              "TrainingSize" -> 1106, "TrainingTime" -> 2.51188643150958, 
              "TrainingMemory" -> 1218600, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.10406413363415194`, 0.014778084440522468`]}, 
              "AccuracyHistory" -> {
                Around[0.9736914348517792, 0.009583449203962254]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
             Around[0.10406413363415194`, 0.020899367441681686`], 
             "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
             "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["NeuralNetwork"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 1382, 
      "PreprocessorEvaluationTime" -> 3.9375*^-6, "PreprocessorMemory" -> 
      94088, "InputDimension" -> 18, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.869215141896656`16.340197867844974*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
          "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
          "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 40|>, <|
         "TrainingSizes" -> 250, "TimeBudgets" -> 138.0795097872658, 
          "ElapsedTimes" -> 151.156252, "ExperimentCounts" -> 29|>, <|
         "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
          "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 21|>}, 
        
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
           2846111867015398573|>, 
         "f2" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, "ID" -> 
           41728420326286313|>, 
         "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
             Interval[{5, 
               DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
         "f4" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
           536027689597629633|>, 
         "f5" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
           5753609278033805624|>, 
         "f6" -> <|
          "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
           8080186329754682489|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
      "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
      "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
      DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, "Instant",
         "Gregorian", 1.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "Unix", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.868966100693174*^9, 3.8689661308462877`*^9}, 
   3.8689661675114813`*^9, 3.8689663082865877`*^9, 3.868966775410522*^9, 
   3.868966840697682*^9, 3.869210988494907*^9, 3.869211542035791*^9},
 CellLabel->
  "Out[421]=",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"classifier", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689661711004057`*^9, 3.868966172114195*^9}},
 CellLabel->
  "In[422]:=",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "NeuralNetwork",ExpressionUUID->
                 "19034f41-be4d-4eaa-9650-6c15422c87b6"],
                TextCell["NeuralNetwork"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"99.1", "0.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.1329479768786114846`3., 0.4991396165558288911`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"69.1", "2.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    69.0751445086705189169`3., 2.4883140570071944353`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9564305105930941409`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0303164048540168762`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.8957977008850603884`3.", "\", \"", 
                   "1.0170633203011278933`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.8957977008850603884`3., 
                   ", ", 1.0170633203011278933`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0445471424083839287`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0316921409220950537`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 TemplateBox[{"\"95% confidence interval: [\"", 
                   RowBox[{"-", "0.0188371394358061786`3."}], "\", \"", 
                   "0.107931424252574043`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", -0.0188371394358061786`3.,
                    ", ", 0.107931424252574043`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"7.04`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.43`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNKL96k7RRV8dY+KOjpDQbrV/Z9e/5HbLZ6
aH9Nxp6Fze2dvdmLST56Lm/tC4SvXDFReEnQvIdVIuvcH96yZ0ABxLvnafFu
1ROib+2tl7O8S9z4wr5rUTe/tvVtkv11gumH1M2Pr+13x6+w3LHlsb2OQUn3
hPJ9JJtT+e0aU/7Lt/Zlp+/u8Xv22v7VOq5H6pOe2gMAbTJnmQ==
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["80", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "80", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "0.9815950920245398`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{80, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9876543209876543}], 
                    Row[{"Recall = ", 0.975609756097561}], 
                    Row[{"FScore = ", 0.9815950920245398}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.012345679012345678`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.0041841004184100415`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.012345679012345678`}], 
                    Row[{"Row fraction = ", 0.0041841004184100415`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["13", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    TemplateBox[{"\"FScore = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{13, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 1.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["238", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9979035639412998`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.99581589958159}], 
                    Row[{"FScore = ", 0.9979035639412998}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["2", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "2", "\" examples of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.14285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.024390243902439025`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{2, " examples of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.14285714285714285`}], 
                    Row[{"Row fraction = ", 0.024390243902439025`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["12", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.923076923076923`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{12, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.8571428571428571}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.923076923076923}]}], "Tooltip"]& ]}, 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "82", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.975609756097561`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{82, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.975609756097561}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "239", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.99581589958159`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{239, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.99581589958159}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "12", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{12, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "81", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9876543209876543`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{81, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9876543209876543}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "13", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{13, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "238", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{238, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "14", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.8571428571428571`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{14, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 0.8571428571428571}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["82", TraditionalForm]}, {2.5, 
                    FormBox["13", TraditionalForm]}, {1.5, 
                    FormBox["239", TraditionalForm]}, {0.5, 
                    FormBox["12", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["81", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["13", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["238", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["14", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> 1382, "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Nominal"|>, 
              "MaintenanceCost" -> <|"Type" -> "Nominal"|>, 
              "Doors" -> <|"Type" -> "Nominal"|>, 
              "Passengers" -> <|"Type" -> "Nominal"|>, 
              "Cargo" -> <|"Type" -> "Nominal"|>, 
              "Safety" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["FromDataset"], 
                 MachineLearning`MLProcessor[
                 "FromNamedFeatures", <|
                  "FeatureNames" -> {
                    "PurchasePrice", "MaintenanceCost", "Doors", "Passengers",
                     "Cargo", "Safety"}|>], 
                 MachineLearning`MLProcessor[
                 "Transpose", <|"FeatureNumber" -> 6|>], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {
                    "Nominal", "Nominal", "Nominal", "Nominal", "Nominal", 
                    "Nominal"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3", "f4", "f5", "f6"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
              "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "SynthesizeMissingValues", <|
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Distribution" -> 
                LearnedDistribution[<|
                  "ExampleNumber" -> 1382, "Preprocessor" -> 
                   MachineLearning`MLProcessor[
                    "ToMLDataset", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal"|>, 
                    "f2" -> <|"Type" -> "Nominal"|>, 
                    "f3" -> <|"Type" -> "Nominal"|>, 
                    "f4" -> <|"Type" -> "Nominal"|>, 
                    "f5" -> <|"Type" -> "Nominal"|>, 
                    "f6" -> <|"Type" -> "Nominal"|>|>, 
                    "Output" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Preprocessor" -> MachineLearning`MLProcessor["Identity"],
                     "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                    "Processor" -> 
                   MachineLearning`MLProcessor[
                    "Sequence", <|
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "ToVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                    "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 2890808244938110393|>], 
                    MachineLearning`MLProcessor[
                    "IntegerEncodeNominalVector", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                    "Index" -> {<|
                    "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                    4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, 
                    "very high" -> 4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                    2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                    "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                    "high" -> 1, "low" -> 2, "medium" -> 3|>}, "MissingCode" -> 
                    Indeterminate, "Version" -> {13.1, 0}, "ID" -> 
                    4504524607625751657, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6|>|>|>], 
                    MachineLearning`MLProcessor[
                    "NumericalizeNominalVector", <|
                    "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NominalVector", "Weight" -> 6, 
                    "SetSize" -> {4, 4, 4, 3, 3, 3}|>|>, 
                    "Boundaries" -> {{-0.5, -0.25, 0., 0.25, 
                    0.5}, {-0.5, -0.25, 0., 0.25, 0.5}, {-0.5, -0.25, 0., 
                    0.25, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}, {-0.5, -0.16666666666666669`, 
                    0.16666666666666663`, 0.5}}, "Version" -> {13.1, 0}, "ID" -> 
                    4511035240401077812, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>|>]}, 
                    "Invertibility" -> "Approximate", "StructurePreserving" -> 
                    True, "Missing" -> "Allowed"|>], "PerformanceGoal" -> 
                   "DirectTraining", "BatchProcessing" -> Automatic, 
                   "Model" -> <|
                    "RotationMatrix" -> {{-0.43683179930602617`, \
-0.061513926357366785`, -0.0784868947919604, 0.6414047502234214, 
                    0.5381047338323698, 0.31349173058168534`}, {
                    0.2878959194482099, 
                    0.12165336370895134`, -0.33964313280575464`, \
-0.2742114025086433, 0.7500067183800436, -0.38633789630361204`}, {
                    0.2578066194971254, 
                    0.4093083635172316, -0.7050063333319737, 
                    0.08206678121922453, -0.2152687718915405, 
                    0.46464274419035045`}, {
                    0.5096507616845749, -0.7681072425184313, \
-0.21739053354595045`, 
                    0.3132480040320846, -0.06631983612164699, \
-0.022047411103900964`}, {0.1024544211314184, 
                    0.3669612074237795, -0.03875817355088801, 
                    0.6117329816314337, -0.2291874109435347, \
-0.6531433668567896}, {0.624170536254758, 0.2987204307610332, 
                    0.5767907589006783, 0.1852877321886701, 
                    0.21134659605041434`, 0.33089384854127}}, 
                    "Precisions" -> {11.396708918937332`, 11.702295237769018`,
                     11.751709980827822`, 12.269447018561033`, 
                    12.57403867285441, 12.82070259258761}, "NoisePrecision" -> 
                    None, "Processor" -> 
                    MachineLearning`MLProcessor[
                    "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722507`, \
-0.0004734344948340708, 0.007416090350663906, -0.004799518592539599, 
                    0.0030089247044514933`, 0.00022409975067717126`}, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Version" -> {13.1, 0}, "ID" -> 264445836056681300|>], 
                    "PostProcessor" -> 
                    MachineLearning`MLProcessor[
                    "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                    "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                     "Method" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 6, "Options" -> <||>|>|>|>, 
                   "TrainingInformation" -> <|
                    "Configurations" -> 
                    Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                    Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                   "NaiveImputer" -> 
                   MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                    "Mean" -> {-0.0027242377292722524`, \
-0.0004734344948340772, 0.007416090350663911, -0.004799518592539599, 
                    0.0030089247044514968`, 0.00022409975067718275`}, 
                    "StandardDeviation" -> {0.2860336329284655, 
                    0.28435825358763545`, 0.28899222299440963`, 
                    0.29259907113619116`, 0.28373828390019834`, 
                    0.29156476701484074`}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 6, 
                    "Output" -> <|
                    "(f1f2f3f4f5f6)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13.1, 0}, "ID" -> 
                    7052420854593502203|>], "InputDimension" -> 0, 
                   "OutputDimension" -> 6, 
                   "Log" -> <|
                    "Example" -> 
                    MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"medium"}, "ID" -> 6764183123436243866|>, 
                    "f2" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, 
                    "Values" -> {"very high"}, "ID" -> 4447561113692615259|>, 
                    "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "ID" -> 7022495553851366910|>, 
                    "f4" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
                    242701326774276309|>, 
                    "f5" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"},
                     "ID" -> 8626706888326227617|>, 
                    "f6" -> <|
                    "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, 
                    "ID" -> 7793782657492670706|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                    "TrainingTime" -> 0.272067, "MaxTrainingMemory" -> 
                    1301520, "DataMemory" -> 446480, "FunctionMemory" -> 
                    62320, "LanguageVersion" -> {13.1, 0}, "Date" -> 
                    DateObject[{
                    2022, 8, 11, 13, 49, 57.527704`8.512452014768224}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
                    "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                   "LogPDFDistribution" -> 
                   MachineLearning`TailedQuantileDistribution[<|
                    "Quantiles" -> {-1.5374646114340518`, \
-1.5374646114340518`, -1.4481495799387802`, -1.3901532053842829`, \
-1.3900959198753926`, -1.3059537438182822`, -1.239089852169043, \
-1.2261733685503937`, -1.2132739652746585`, -1.169323039076807, \
-1.1079994773194297`}, "LeftBoundary" -> -1.4481495799387802`, "LeftScale" -> 
                    0.04465751574763577, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                   Around[7.816606057704673, 0.25703225729782303`], 
                   "EntropySampleSize" -> 10|>], 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "EvaluationStrategy" -> "ModeFinding", "Version" -> {13.1, 0},
                 "ID" -> 5495059474424677337|>], 
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f2" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f3" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f4" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f5" -> <|"Type" -> "Nominal", "Weight" -> 1|>, 
                  "f6" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 4205694865483692036|>], 
              MachineLearning`MLProcessor[
              "EmbedNominalVector", <|
               "Invertibility" -> "Impossible", "Missing" -> "Imputed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NominalVector", "Weight" -> 6|>|>, 
                "Index" -> {<|
                  "high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|"high" -> 1, "low" -> 2, "medium" -> 3, "very high" -> 
                   4|>, <|2 -> 1, 3 -> 2, 4 -> 3, Interval[{5, 
                    DirectedInfinity[1]}] -> 4|>, <|
                  2 -> 1, 4 -> 2, Interval[{5, 
                    DirectedInfinity[1]}] -> 3|>, <|
                  "large" -> 1, "medium" -> 2, "small" -> 3|>, <|
                  "high" -> 1, "low" -> 2, "medium" -> 3|>}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "EmbeddingVectors" -> {
                 RawArray["Real32",{{0., 0., 
                   0.}, {-0.12314196676015854`, -0.861851692199707, 
                   0.10532767325639725`}, {
                   0.8298183679580688, -0.28949323296546936`, 
                   0.03427627682685852}, {-0.21032746136188507`, \
-0.9608260989189148, 0.23128949105739594`}, {
                   0.38437455892562866`, -0.8375512361526489, 
                   0.1422276645898819}}], 
                  RawArray["Real32",{{0., 0., 
                   0.}, {-0.7579416036605835, -0.09459903836250305, \
-0.3054908514022827}, {
                   0.24499356746673584`, -0.543777346611023, \
-0.2311936318874359}, {-0.10140641778707504`, -0.3524824380874634, 
                   0.4795919358730316}, {
                   0.015052562579512596`, -0.48196539282798767`, \
-0.9609097242355347}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.6297598481178284, -0.11219660192728043`, \
-0.935377836227417}, {-0.4175759255886078, 
                   0.2534555494785309, -0.4526385962963104}, {
                   0.3543681204319, -0.37547722458839417`, 
                   0.5876661539077759}, {-1.1276206970214844`, 
                   0.17602579295635223`, -1.0098364353179932`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.24657385051250458`, -0.8256815671920776, 
                   0.8846340179443359}, {0.6182233691215515, 
                   0.3115577697753906, -0.14296697080135345`}, \
{-0.5634363889694214, -0.1850573867559433, 0.1582949459552765}}], 
                  RawArray["Real32",{{0., 0., 0.}, {
                   0.34666627645492554`, -0.5679200291633606, 
                   0.10750995576381683`}, {
                   0.6412044167518616, -0.1759643256664276, 
                   0.6604856848716736}, {-0.8092290163040161, 
                   0.12987354397773743`, -1.1753407716751099`}}], 
                  RawArray["Real32",{{0., 0., 0.}, {0.05746559798717499, 
                   0.12715618312358856`, 0.1291729062795639}, {
                   0.21379514038562775`, -0.6005780100822449, 
                   0.36645910143852234`}, {-0.02309783734381199, \
-0.22358153760433197`, 0.6648218631744385}}]}, "Version" -> {13.1, 0}, "ID" -> 
                272386066020895428|>]}, "Invertibility" -> "Impossible", 
            "StructurePreserving" -> True, "Missing" -> "Imputed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Preprocessor" -> 
            MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor[
                 "WrapMLDataset", <|
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                   False|>]}|>], "ScalarFeature" -> True, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
            "Processors" -> {
              MachineLearning`MLProcessor[
              "ToVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>,
                 "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 8893333862155911631|>], 
              MachineLearning`MLProcessor[
              "IntegerEncodeNominalVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
                "Index" -> {<|
                  "acceptable" -> 1, "good" -> 2, "unacceptable" -> 3, 
                   "very good" -> 4|>}, "MissingCode" -> 0, 
                "Version" -> {13.1, 0}, "ID" -> 3368851722935717418, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
              MachineLearning`MLProcessor[
              "FromVector", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "f1" -> <|
                   "Type" -> "NominalVector", "Weight" -> 1, 
                    "SetSize" -> {4}|>|>, 
                "Output" -> <|
                 "f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 6942004589393111231|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 4|>, "Key" -> 
                "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                False, "Missing" -> "Allowed"|>]}, "Invertibility" -> 
            "Perfect", "StructurePreserving" -> False, "Missing" -> 
            "Allowed"|>], "ProbabilityPostprocessor" -> Identity, "Name" -> 
         "class", 
         "Marginal" -> <|
          "acceptable" -> 0.21861471861471862`, "good" -> 0.04112554112554113,
            "unacceptable" -> 0.7012987012987013, "very good" -> 
           0.03896103896103896|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> 
          MachineLearning`MLProcessor[
           "KeyIndexSplit", <|
            "Index" -> "Acceptability", 
             "Order" -> {
              "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
               "Cargo", "Safety", "Acceptability"}|>], "PreferLabeled" -> 
          True, "KeepLabelsFormat" -> False|>], "RecalibrationFunction" -> 
       None, "ImputationStrategy" -> Automatic, "Prior" -> Automatic, 
       "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, 
       "PerformanceGoal" -> {"Memory", "Quality"}, "BatchProcessing" -> 
       Automatic, 
       "Model" -> <|
        "Method" -> "NeuralNetwork", "Network" -> 
         NetChain[<|
           "Type" -> "Chain", 
            "Nodes" -> <|
             "1" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
miTIQ3VLJM5+NQo1XXvp/wAudwn5
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.356864333152771, -0.3510497212409973, \
-0.2646922171115875, -0.31686294078826904`, 
                    0.16670307517051697`, -0.18060536682605743`, \
-0.30773669481277466`, -0.32050541043281555`, -0.010785329155623913`, \
-0.27622342109680176`, -0.010391616262495518`, -0.13256238400936127`, 
                    0.09347633272409439, 0.20684024691581726`, 
                    0.00729140592738986, -0.3824177384376526, 
                    0.2153223156929016, -0.46700865030288696`, 
                    0.21194063127040863`, 
                    0.09371590614318848, -0.14340436458587646`, \
-0.034402996301651, 0.22078663110733032`, 
                    0.07883942127227783, -0.375686913728714, 
                    0.1620882749557495, -0.3821004033088684, \
-0.33164602518081665`, 0.15527458488941193`, -0.41082215309143066`, 
                    0.1340278685092926, -0.23724667727947235`, \
-0.3362967073917389, 
                    0.06700089573860168, -0.4028159976005554, \
-0.1452922224998474, -0.18319743871688843`, -0.3633635938167572, 
                    0.1690395474433899, -0.28660914301872253`, 
                    0.21300087869167328`, -0.3579922616481781, \
-0.2949681282043457, 0.03183264657855034, 
                    0.17016777396202087`, -0.32100844383239746`, 
                    0.06300484389066696, -0.16534973680973053`, \
-0.06240158900618553, -0.16404949128627777`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 18, "$InputDimensions" -> {18}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "4" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
+ztuAfkl5FDTUReSWfaJ+z940w8I
                   "], "Biases" -> 
                  RawArray["Real32",{-0.23329688608646393`, 
                    0.1376294195652008, 
                    0.1443759649991989, -0.17362558841705322`, \
-0.2485962063074112, 0.05963020399212837, 
                    0.1361909657716751, -0.07115011662244797, 
                    0.0030301439110189676`, 0.04029219597578049, 
                    0.05379099026322365, 
                    
                    0.07614335417747498, -0.18525563180446625`, \
-0.2645242512226105, 0.10306763648986816`, -0.24289089441299438`, 
                    0.0140318488702178, 
                    0.18612468242645264`, -0.17168177664279938`, 
                    0.10367164760828018`, -0.06293782591819763, \
-0.11686903983354568`, 
                    0.13603049516677856`, -0.06282394379377365, \
-0.3033106327056885, 0.08650784194469452, 
                    0.0806133896112442, -0.19958555698394775`, \
-0.19438377022743225`, -0.004722174257040024, -0.3171789348125458, \
-0.1828349083662033, 
                    0.12102774530649185`, -0.34969279170036316`, \
-0.017302827909588814`, -0.21899807453155518`, -0.19281646609306335`, \
-0.21341904997825623`, -0.25374025106430054`, -0.2694756090641022, \
-0.181166410446167, -0.18956515192985535`, -0.1471407264471054, 
                    0.08666659891605377, -0.1714419722557068, \
-0.2743335962295532, 0.055073097348213196`, 
                    0.19364579021930695`, -0.2176293283700943, \
-0.04138600081205368}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "7" -> <|"Type" -> "Linear", 
                "Arrays" -> <|"Weights" -> CompressedData["
1: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
HMIWN1Rr3Iv/B5XLHCU=
                   "], "Biases" -> 
                  RawArray["Real32",{-0.30062639713287354`, 
                    0.12008462101221085`, 
                    0.03872831538319588, -0.07645663619041443, \
-0.0230393186211586, -0.2835630774497986, 
                    0.09417349845170975, -0.10099706798791885`, 
                    0.08236243575811386, -0.2349618673324585, 
                    0.1114811822772026, 
                    0.2365228235721588, -0.1581137776374817, 
                    0.026537848636507988`, -0.2724785804748535, \
-0.08833321183919907, -0.0690053403377533, -0.11046215891838074`, 
                    0.10241003334522247`, -0.0961226150393486, \
-0.0808977335691452, 0.19047676026821136`, -0.29568901658058167`, 
                    0.08413115888834, -0.2386404424905777, 
                    0.25963154435157776`, -0.053815796971321106`, \
-0.04868556186556816, 0.038414567708969116`, 
                    0.017599068582057953`, -0.16277392208576202`, 
                    0.12737983465194702`, -0.18431441485881805`, \
-0.15097394585609436`, -0.16963891685009003`, 
                    0.11591175198554993`, -0.09876910597085953, \
-0.10521785169839859`, -0.24262496829032898`, 
                    0.048794329166412354`, -0.2748609185218811, 
                    0.11943675577640533`, -0.1303144097328186, \
-0.17691963911056519`, -0.052801281213760376`, -0.24281111359596252`, 
                    0.15255072712898254`, -0.054961107671260834`, 
                    0.12484297901391983`, -0.013735197484493256`}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "9" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "DropoutProbability" -> 0.01, "Method" -> "AlphaDropout", 
                  "OutputPorts" -> 
                  NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "10" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1: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
                   "], "Biases" -> 
                  RawArray[
                    "Real32",{-0.18632154166698456`, -0.05518893152475357, 
                    0.2810353934764862, -0.25563400983810425`, \
-0.18380148708820343`, -0.0849757194519043, -0.09342638403177261, \
-0.08093854039907455, -0.26081642508506775`, -0.04487725719809532, \
-0.180863156914711, -0.18047316372394562`, -0.1060335636138916, 
                    0.2659180760383606, -0.06860478222370148, \
-0.12069050967693329`, 0.19650110602378845`, 0.19914939999580383`, 
                    0.12943300604820251`, 
                    0.21619535982608795`, -0.12615013122558594`, 
                    0.12520363926887512`, 0.1943180412054062, 
                    0.24534207582473755`, -0.049661390483379364`, \
-0.049864623695611954`, 0.16231706738471985`, -0.20022232830524445`, 
                    0.12467250972986221`, -0.3208949565887451, 
                    0.09485239535570145, -0.26086845993995667`, \
-0.21830962598323822`, -0.11521463841199875`, -0.23687180876731873`, \
-0.09139782190322876, 0.010404892265796661`, 0.29214856028556824`, 
                    0.16070689260959625`, -0.07001221925020218, 
                    0.07522184401750565, 
                    0.2571954131126404, -0.2691921293735504, \
-0.14605918526649475`, 0.2835448980331421, -0.06845973432064056, 
                    0.24120552837848663`, -0.04254811629652977, 
                    0.19626277685165405`, 0.04852093756198883}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {50}, "$OutputSize" -> 50, 
                  "$InputSize" -> 50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "11" -> <|
               "Type" -> "Elementwise", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   "ScaledExponentialLinearUnit"], "$Dimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>|>, 
              "12" -> <|
               "Type" -> "Linear", "Arrays" -> <|"Weights" -> CompressedData["

1:eJwViXFQk3UYgL9TiEEJXHCpGywMoZyiBkqB3/tmoMklSE2aQ88DlIEkqcNO
KzwdMBCPQj25zYlzxAm14iI0QOX7vR9TSLqFkhgi4IBwGmEMiqlRnuEfz3P3
3LNg225l1iyO4/ZKZqTM2P92Xl7GpxufexaajNyoyNxn02OGyBnmrX1KIfs3
4qMWO+wa9hdVj9W4AXrYg9ZsrPtFCzXTBppcVSO4BqT0OPwSdX92BLMd2zH4
yR4yv17LPolp5adtF3lHjxzHtUqUD1eDLOc0jA30wtGGYrw9EUlxLwehTuaF
ESUcDddpwe+EikrnSzEqXiRFezeldbzGjuRXsuoSTjzAVVHMwRvQYDoDkjF/
8p4zj1Ka2nGXMApn1S64YLYK//g20KNjqzHjVQO12eswKCmAfEbymeSKlRLW
ZLKS4nj2yvpG3pmSR+fcRhQcVajvaIbI+4Ps4FkpnvRy4dVNZlZn7Aar/yEI
bPsQ1uVcZHEuFH97IxhP55xigfVfw7uneqhDKaP8VjPNHnYylI3CvU2Tse6C
dCHx8lxarTmPzk4rZF2LQv+Jn3ibogYLDSEY5P6Z1Y940rf3IyjU1MU//KEK
NKluarQHksdSBU7dNuI+PUcWlx95pCwmSe8K1vKHhYr0W3HZ815YZLBgZbYP
DOV+jnIoZx9YalGa3k/7bi6ilWmeuPduHMl1bayDX0plO4Mp68V4VD+NRhWX
DG/2HeVrX9LBE+kQ48vvwfc3rkPRBh/0azeg2zQKWm0Ppk/YmbI2FtZ+Vc18
kgqxeWEv5D00gumOMVZ6YT3+F59LX27ZwwYlhSj2TeDYxytwR2YAXCq9C6Wp
ZbhTEU7cR0388rAHkLDMFzNnt2BBZwglX7MJqjKzkO44jFk6E04e0mPXr77i
ZjEM/uyaxO+0ahxMC8VK31A2P2w7/uVMZMuva9jAmZpVET8yVL+jojXHK4SK
wOPsm4BZoiUuiV1NlogxejszuKqhf7ycT+gz0xVdIjUOrSTL1ALssu4mb+9p
9u+2W6TIL8MXblXwznI5Tn0hw79DY5jj/XboLEjA0WPRWHSnmDpHFtF7SpsQ
fuB3drMvnE0taULNuYUQ9hZRfbINaNyTTsxJJWguhB3R/fA/R26Wlg==
                   "], "Biases" -> 
                  RawArray["Real32",{
                    0.18740198016166687`, -0.1249600350856781, 
                    0.03215433284640312, -0.2378043681383133}]|>, 
                "Parameters" -> <|
                 "OutputDimensions" -> {4}, "$OutputSize" -> 4, "$InputSize" -> 
                  50, "$InputDimensions" -> {50}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Inputs", "Input"], 
              NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "10", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath["Nodes", "11", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath["Nodes", "12", "Outputs", "Output"]}, 
            "Inputs" -> <|
             "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`AtomT]|>, 
            "Outputs" -> <|
             "Output" -> 
              NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], 
         "Training" -> <|
          "Optimizer" -> {"ADAM", "L2Regularization" -> None}, 
           TrainingProgressFunction -> {Null& , "Interval" -> 1}, 
           "TotalTrainingTime" -> 48.846142, "MeanInputsPerSecond" -> 
           19653.548073458904`|>, "InputType" -> "NumericalVector", 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Sequence", <|
           "Input" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
            "Output" -> <|
             "(f1f2f3f4f5f6)" -> <|
               "Type" -> "NumericalVector", "Weight" -> 6|>|>, "Processors" -> {
              MachineLearning`MLProcessor[
              "Standardize", <|
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                "StructurePreserving" -> True, 
                "Input" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Weight" -> 6, "Type" -> "NumericalVector"|>|>, 
                "Mean" -> {0.23124615267859935`, -0.72822837729203, 
                 0.12585475948770514`, -0.15052710409330602`, \
-0.3680239126551441, -0.25638901687510746`, -0.1490994056925565, \
-0.014513928058064425`, -0.4492557329672914, 
                 0.10517240908924025`, -0.24024309043728495`, 
                 0.3074998656424723, 
                 0.061418090249031485`, -0.20150671159470657`, \
-0.13200187201592145`, 0.07982668587708167, -0.22498580898755, 
                 0.3879769949206493}, 
                "StandardDeviation" -> {0.42336656209659007`, 
                 0.2672799034098392, 0.07124798075524297, 
                 0.36989547912470067`, 0.17138659393602926`, 
                 0.5155818183543911, 0.688893371869374, 0.24977193740899778`, 
                 0.6403849334448501, 0.4897664046907167, 0.46819109868519837`,
                  0.43423173863577835`, 0.6276718952348702, 
                 0.28383206529853633`, 0.7719651260033509, 
                 0.09756213850198994, 0.2950767752080472, 
                 0.22147755480753964`}, 
                "Output" -> <|
                 "(f1f2f3f4f5f6)" -> <|
                   "Type" -> "NumericalVector", "Weight" -> 6|>|>, 
                "Version" -> {13.1, 0}, "ID" -> 7357098232668708487|>], 
              MachineLearning`MLProcessor[
              "FirstValues", <|
               "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 6|>, 
                "Key" -> "(f1f2f3f4f5f6)", "Invertibility" -> "Perfect", 
                "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
            "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "FeatureNumber" -> 18, "Calibrator" -> 
         None, "PostProcessor" -> MachineLearning`MLProcessor["Identity"], 
         "Options" -> <|
          "NetworkType" -> <|"Value" -> "FullyConnected", "Options" -> <||>|>,
            "NetworkDepth" -> <|"Value" -> 4, "Options" -> <||>|>, 
           "NumberOfParameters" -> <|"Value" -> 8600, "Options" -> <||>|>, 
           "ActivationFunction" -> <|"Value" -> "SELU", "Options" -> <||>|>, 
           "L2Regularization" -> <|"Value" -> None, "Options" -> <||>|>, 
           "Dropout" -> <|"Value" -> 0.01, "Options" -> <||>|>, 
           "NetInitializationMethod" -> <|
            "Value" -> Automatic, "Options" -> <||>|>, 
           "OptimizationMethod" -> <|
            "Value" -> {"ADAM", "L2Regularization" -> None}, 
             "Options" -> <||>|>, 
           MaxTrainingRounds -> <|"Value" -> 1000, "Options" -> <||>|>, 
           ValidationSet -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "EarlyStopping" -> <|"Value" -> False, "Options" -> <||>|>, 
           TrainingProgressReporting -> <|
            "Value" -> None, "Options" -> <||>|>, 
           "NetTrainOptions" -> <|
            "Value" -> {LearningRateMultipliers -> {}, TargetDevice -> "CPU"},
              "Options" -> <||>|>, 
           "LossFunction" -> <|"Value" -> Automatic, "Options" -> <||>|>, 
           "ValidationSetRatio" -> <|
            "Value" -> 0.15009041591320071`, "Options" -> <||>|>|>|>, 
       "TrainingInformation" -> <|
        "Reporting" -> None, "TrainingFunction" -> Classify, "EMIterations" -> 
         Missing["KeyAbsent", "EMIterations"], "ProcessorEntropyShift" -> 0, 
         "PreprocessingTime" -> 0.507231`6.156750781582432, "LossName" -> 
         "MeanCrossEntropy", "BestModelInformation" -> 
         Dataset[<|
           "MeanCrossEntropy" -> 
            Around[0.021350027675851042`, 0.012059338789226588`], "Accuracy" -> 
            Around[0.9926698116140742, 0.007247173785702781], 
            "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276, 
            "ModelMemory" -> 101904, "ModelUtility" -> 5.3529526868256205`, 
            "TrainingSize" -> 1106, "TrainingTime" -> 50.11872336272725, 
            "TrainingMemory" -> 1025056, "ExperimentCount" -> 1, 
            "MeanCrossEntropyHistory" -> {
              Around[0.021350027675851042`, 0.008527240234488089]}, 
            "AccuracyHistory" -> {
              Around[0.9926698116140742, 0.005124525728307819]}, 
            "Configuration" -> {
             "NeuralNetwork", "NetworkType" -> "FullyConnected", 
              "NetworkDepth" -> 4, "NumberOfParameters" -> 8600, 
              "ActivationFunction" -> "SELU", "L2Regularization" -> None, 
              "Dropout" -> 0.01, "NetInitializationMethod" -> Automatic, 
              "OptimizationMethod" -> {"ADAM", "L2Regularization" -> None}, 
              MaxTrainingRounds -> 1000, ValidationSet -> Automatic, 
              "EarlyStopping" -> False, TrainingProgressReporting -> None, 
              "NetTrainOptions" -> Automatic, "LossFunction" -> Automatic}|>, 
           
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
             "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType}]}], <||>], "Configurations" -> 
         Dataset[<|<|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[4.54351109377704, 1.1795936489570147`], "Accuracy" -> 
                 Around[0.5039356498747214, 0.011280914837970198`], 
                 "EvaluationTime" -> 0.0004563018125021762, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -5.255034068743364, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 474568., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[3.3682246428941447`, 0.11709052181782027`], 
                   Around[5.718797544659934, 0.1974406032409913]}, 
                 "AccuracyHistory" -> {
                   Around[0.4977980114632854, 0.013422541870627485`], 
                   Around[0.5100732882861575, 0.013349152738201014`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.0050750919805838`, 0.0941541155282614], "Accuracy" -> 
                 Around[0.7731731038259634, 0.010538572727576656`], 
                 "EvaluationTime" -> 0.0005280310794555559, "TestSize" -> 
                 2532, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.5364501606474104`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.668272126026807, "TrainingMemory" -> 
                 461656., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.0207920682675256`, 0.13567904919872614`], 
                   Around[1.989358115693642, 0.12729332292504641`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7666435334598815, 0.01212548962300386], 
                   Around[0.7797026741920453, 0.011313468944392982`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7727930479153965, 0.10402931070863232`], "Accuracy" -> 
                 Around[0.8754721532521594, 0.013799020363039234`], 
                 "EvaluationTime" -> 0.0005023053972951728, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.6640374106578726`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 580856, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7727930479153965, 0.07355983104423623]}, 
                 "AccuracyHistory" -> {
                   Around[0.8754721532521594, 0.009757380872436296]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.021350027675851042`, 0.012059338789226588`], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0002390132437947042, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 5.3529526868256205`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 1025056, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.021350027675851042`, 0.008527240234488089]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0002390132437947042, "MeanCrossEntropy" -> 
                Around[0.021350027675851042`, 0.012059338789226588`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1025056, 
                "TrainingTime" -> 66.60681825823757|>, "Index" -> 1|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1638549337103177`, 0.10037145501929841`], 
                 "Accuracy" -> 
                 Around[0.5492390926678674, 0.023756280779855192`], 
                 "EvaluationTime" -> 0.0012617131534511656`, "TestSize" -> 
                 1300, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -2.4356505013181984`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 315949.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0659744269130655`, 0.06346538833801657], 
                   Around[1.2617354405075698`, 0.023724306617050557`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5686355009414037, 0.0494049938117882], 
                   Around[0.5298426843943311, 0.014277715533873251`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.7367345682782962`, 0.02064455318603078], "Accuracy" -> 
                 Around[0.34906013350595955`, 0.01773043247078872], 
                 "EvaluationTime" -> 0.00042400495242555093`, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -3.1830951135228505`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.18584726074662905`, "TrainingMemory" -> 
                 288392., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.7284854644248697`, 0.024470278570364008`], 
                   Around[1.7449836721317225`, 0.02985267016659267]}, 
                 "AccuracyHistory" -> {
                   Around[0.333797137166834, 0.012654176408351573`], 
                   Around[0.364323129845085, 0.01286858453924453]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.7297176649588678, 0.030635251566725513`], 
                 "Accuracy" -> 
                 Around[0.7731352673792209, 0.01749760840751051], 
                 "EvaluationTime" -> 0.00047076461298769184`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.4608603411176038`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 430312, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7297176649588678, 0.021662394126187413`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7731352673792209, 0.012372677559497428`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38327177587574507`, 0.0423182311805343], "Accuracy" -> 
                 Around[0.8462070332421717, 0.03062402709723611], 
                 "EvaluationTime" -> 0.00020558565549557822`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.1999951890132391, "TrainingSize" -> 
                 1106, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 882408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38327177587574507`, 0.029923508235575796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8462070332421717, 0.021654457227696235`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020558565549557822`, 
                "MeanCrossEntropy" -> 
                Around[0.38327177587574507`, 0.0423182311805343], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 882408, 
                "TrainingTime" -> 1.2870992522366111`|>, "Index" -> 2|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.35435313401532587`, 0.026162924108051638`], 
                 "Accuracy" -> 
                 Around[0.8602959769418544, 0.016276096618821716`], 
                 "EvaluationTime" -> 0.0003771036158774145, "TestSize" -> 900,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.022590888141083454`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 351176, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35435313401532587`, 0.018499981052472317`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8602959769418544, 0.011508938290416272`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.6823632892803912`, 1.0884967061330373`], "Accuracy" -> 
                 Around[0.4905470789487266, 0.05942169230008629], 
                 "EvaluationTime" -> 0.00038344201580715957`, "TestSize" -> 
                 2672, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -4.197660943845806, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 273552., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5949653673903932`, 0.05337852556796832], 
                   Around[3.769761211170389, 0.12190065068836999`]}, 
                 "AccuracyHistory" -> {
                   Around[0.549197732950539, 0.013394029354165352`], 
                   Around[0.43189642494691427`, 0.013595376355230818`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8179064538877607, 0.1117516439305582], "Accuracy" -> 
                 Around[0.7442585992282589, 0.013337895880245353`], 
                 "EvaluationTime" -> 0.00048350790996078553`, "TestSize" -> 
                 2632, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -1.7201008965397675`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 308650.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7090566921048821, 0.029587871638874982`], 
                   Around[0.9267562156706394, 0.048804806717094945`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7339496000489554, 0.012070557593356287`], 
                   Around[0.7545675984075624, 0.011869233593308862`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07118410180594256, 0.01915269030340499], "Accuracy" -> 
                 Around[0.9791671208169963, 0.012128533944401654`], 
                 "EvaluationTime" -> 0.000319618111460562, "TestSize" -> 276, 
                 "ModelMemory" -> 58320, "ModelUtility" -> 3.111947759495392, 
                 "TrainingSize" -> 1106, "TrainingTime" -> 3.981071705534973, 
                 "TrainingMemory" -> 945064, "ExperimentCount" -> 1, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.07118410180594256, 0.013542997191503502`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9791671208169963, 0.008576168597937634]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000319618111460562, "MeanCrossEntropy" -> 
                Around[0.07118410180594256, 0.01915269030340499], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 945064, 
                "TrainingTime" -> 6.2334652825440156`|>, "Index" -> 3|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.4150311982338223, 0.03234945702442628], "Accuracy" -> 
                 Around[0.838474265252356, 0.01562338483938151], 
                 "EvaluationTime" -> 0.0005067079065793915, "TestSize" -> 
                 1100, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.48250655972373047`, "TrainingSize" -> 
                 250, "TrainingTime" -> 2.51188643150958, "TrainingMemory" -> 
                 845536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4150311982338223, 0.022874520429674614`]}, 
                 "AccuracyHistory" -> {
                   Around[0.838474265252356, 0.011047401365013764`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.9363303357963932`, 0.22063573174865092`], 
                 "Accuracy" -> 
                 Around[0.6016657435215405, 0.009931734042792198], 
                 "EvaluationTime" -> 0.0005069637189242055, "TestSize" -> 
                 2400, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -4.394526005243066, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.8628854898161876, "TrainingMemory" -> 
                 768069.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.7328302955198254`, 0.11030764480200886`], 
                   Around[3.1398303760729616`, 0.1343428411885501]}, 
                 "AccuracyHistory" -> {
                   Around[0.6013282055836575, 0.014050468348716146`], 
                   Around[0.6020032814594235, 0.014024525737710215`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.0883077850611167`, 0.09258013344187536], "Accuracy" -> 
                 Around[0.7771993076355267, 0.016090257916624478`], 
                 "EvaluationTime" -> 0.0004904010052047261, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.4133613417100643`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1., "TrainingMemory" -> 768752, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.0883077850611167`, 0.06546404015990553]}, 
                 "AccuracyHistory" -> {
                   Around[0.7771993076355267, 0.011377530483885697`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004904010052047261, "MeanCrossEntropy" -> 
                Around[1.0883077850611167`, 0.09258013344187536], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 768752, 
                "TrainingTime" -> 16.33188643150958|>, "Index" -> 4|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.06349687324568681, 0.020314194118190455`], 
                 "Accuracy" -> 
                 Around[0.9752187821898789, 0.013178658637319573`], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.1990832337140014`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 6.309573444801933, "TrainingMemory" -> 1031984, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06349687324568681, 0.014364304415312347`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9752187821898789, 0.009318718889391335]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.8576690541242, 0.6205818684494524], "Accuracy" -> 
                 Around[0.5614696628952743, 0.02316984504064622], 
                 "EvaluationTime" -> 0.0006617014667249354, "TestSize" -> 
                 1900, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.375448364812931, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 588357.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.2425860137311924`, 0.09670887865815357], 
                   Around[3.472752094517207, 0.15761956845763322`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5412325518696653, 0.01645230430382249], 
                   Around[0.5817067739208833, 0.01550253065862414]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.4960504444335125`, 0.3711939042200393], "Accuracy" -> 
                 Around[0.7822399753364762, 0.011053793618809461`], 
                 "EvaluationTime" -> 0.0005601297064679676, "TestSize" -> 
                 2632, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.09292339195906, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.9314427449080938, "TrainingMemory" -> 
                 599973.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.1299535489778723`, 0.07202244880796001], 
                   Around[1.862147339889153, 0.11678580277280175`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7898676324542127, 0.011253506706433129`], 
                   Around[0.7746123182187395, 0.011375821230379045`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.42705750837440937`, 0.035076829136806445`], 
                 "Accuracy" -> 
                 Around[0.8446730233225903, 0.015135382766381485`], 
                 "EvaluationTime" -> 0.0006681621677373814, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.5213181632194831, "TrainingSize" -> 250,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 668632, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.42705750837440937`, 0.024803063745157707`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8446730233225903, 0.010702331789962355`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006681621677373814, "MeanCrossEntropy" -> 
                Around[0.42705750837440937`, 0.035076829136806445`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 668632, 
                "TrainingTime" -> 17.3393835219499|>, "Index" -> 5|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.29713763668876286`, 0.029783149124946628`], 
                 "Accuracy" -> 
                 Around[0.8857231716276136, 0.013316951171936615`], 
                 "EvaluationTime" -> 0.0003591955237284943, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.27080207566416914`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 518544, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.29713763668876286`, 0.02105986671133995]}, 
                 "AccuracyHistory" -> {
                   Around[0.8857231716276136, 0.00941650647840652]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.5135493523870815`, 0.6601940649179127], "Accuracy" -> 
                 Around[0.4534728434064575, 0.03657154854139636], 
                 "EvaluationTime" -> 0.0005761554862614403, "TestSize" -> 
                 2200, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -4.7036563931676705`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.5848931924611134`, "TrainingMemory" -> 
                 372712., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.8582879282812748`, 0.09593272842945073], 
                   Around[4.168810776492888, 0.14832220789749126`]}, 
                 "AccuracyHistory" -> {
                   Around[0.4184413958301533, 0.015453697183599058`], 
                   Around[0.4885042909827617, 0.014313699698948043`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.2977572298050588`, 0.1092514282939514], "Accuracy" -> 
                 Around[0.769971120234303, 0.0162893024591907], 
                 "EvaluationTime" -> 0.00006291890573589659, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.671289161791855, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 386192, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2977572298050588`, 0.07725242580096887]}, 
                 "AccuracyHistory" -> {
                   Around[0.769971120234303, 0.01151827622969245]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00006291890573589659, "MeanCrossEntropy" -> 
                Around[1.2977572298050588`, 0.1092514282939514], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 386192, 
                "TrainingTime" -> 25.884295625347566`|>, "Index" -> 6|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5879853515835944`, 0.14718023198397873`], 
                 "Accuracy" -> 
                 Around[0.7939162815913106, 0.015646642549432373`], 
                 "EvaluationTime" -> 0.0002532643509907417, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -3.152069743372218, "TrainingSize" -> 50, 
                 "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 600288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5879853515835944`, 0.10407214009248054`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7939162815913106, 0.011063847049505601`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.524590828833566, 0.845278024681349], "Accuracy" -> 
                 Around[0.5705716928210636, 0.02387696402198573], 
                 "EvaluationTime" -> 0.0006499769810158741, "TestSize" -> 
                 2100, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -4.803632164263322, "TrainingSize" -> 10, 
                 "TrainingTime" -> 5.444439372449127, "TrainingMemory" -> 
                 583613.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.6845044721043254`, 0.10447663667270932`], 
                   Around[4.364677185562806, 0.2100094842353753]}, 
                 "AccuracyHistory" -> {
                   Around[0.5492372585429602, 0.014247131834686502`], 
                   Around[0.591906127099167, 0.01628060211969826]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.38151664752165954`, 0.03977608365046414], 
                 "Accuracy" -> 
                 Around[0.8740940349402928, 0.013875001085229821`], 
                 "EvaluationTime" -> 0.00037881779653037317`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.30447626234684055`, "TrainingSize" -> 
                 250, "TrainingTime" -> 15.848931924611142`, "TrainingMemory" -> 
                 683480, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.38151664752165954`, 0.028125938478286556`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8740940349402928, 0.009811107356336711]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00037881779653037317`, 
                "MeanCrossEntropy" -> 
                Around[0.38151664752165954`, 0.03977608365046414], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 683480, 
                "TrainingTime" -> 92.6247680155231|>, "Index" -> 7|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2846789544300572`, 0.10135837559026044`], 
                 "Accuracy" -> 
                 Around[0.7374636238433064, 0.017014953179959547`], 
                 "EvaluationTime" -> 0.00048037131588355683`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.6005267903937916`, "TrainingSize" -> 50,
                  "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 341168, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2846789544300572`, 0.07167119470992618]}, 
                 "AccuracyHistory" -> {
                   Around[0.7374636238433064, 0.012031388775121004`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[4.165745080878458, 1.6491701879744913`], "Accuracy" -> 
                 Around[0.5152833374237896, 0.07249298936486862], 
                 "EvaluationTime" -> 0.00020244886234998508`, "TestSize" -> 
                 2744, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -5.074385087421649, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 295925.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[2.5190643035821725`, 0.1028129894230038], 
                   Around[5.812425858174743, 0.191466359358563]}, 
                 "AccuracyHistory" -> {
                   Around[0.5871646538577457, 0.013267469359568705`], 
                   Around[0.44340202098983345`, 0.013312313770696985`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00020244886234998508`, 
                "MeanCrossEntropy" -> 
                Around[4.165745080878458, 1.6491701879744913`], "ModelMemory" -> 
                58320., "TrainingMemory" -> 295925.3333333333, "TrainingTime" -> 
                58.99948267602831|>, "Index" -> 8|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.3301382275974658, 0.02924785122893528], "Accuracy" -> 
                 Around[0.8717062863197803, 0.01777595950885693], 
                 "EvaluationTime" -> 0.0007683004475964097, "TestSize" -> 700,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.10702789819239966`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 374688, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3301382275974658, 0.02068135393911543]}, 
                 "AccuracyHistory" -> {
                   Around[0.8717062863197803, 0.012569501510810226`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6791528095168373, 0.03873143997233954], "Accuracy" -> 
                 Around[0.7363490438369396, 0.017031507261842195`], 
                 "EvaluationTime" -> 0.00034673485424799636`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.3231968082428875`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 338064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6791528095168373, 0.027387263849560993`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7363490438369396, 0.012043094278676543`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.640010326496014, 1.1322775701349854`], "Accuracy" -> 
                 Around[0.4863596829810406, 0.04278093185210315], 
                 "EvaluationTime" -> 0.0003206432390681063, "TestSize" -> 
                 2744, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.180492238404206, "TrainingSize" -> 10, 
                 "TrainingTime" -> 0.5444439372449126, "TrainingMemory" -> 
                 322133.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.508549842629893, 0.04605766705211905], 
                   Around[3.771470810362135, 0.12018564135103059`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5280828090172973, 0.013434097226343747`], 
                   Around[0.44463655694478393`, 0.013308350428065328`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0003206432390681063, "MeanCrossEntropy" -> 
                Around[2.640010326496014, 1.1322775701349854`], "ModelMemory" -> 
                62416., "TrainingMemory" -> 322133.3333333333, "TrainingTime" -> 
                9.109108405185806|>, "Index" -> 9|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.5038386117534089, 0.041784890614198204`], 
                 "Accuracy" -> Around[0.828465928965194, 0.02654031530216917],
                  "EvaluationTime" -> 0.0009701021652031668, "TestSize" -> 
                 400, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.7882946404845459, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 528184, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5038386117534089, 0.029546379504437673`]}, 
                 "AccuracyHistory" -> {
                   Around[0.828465928965194, 0.018766836924992914`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.802660760317983, 0.3464298413761201], "Accuracy" -> 
                 Around[0.3679296647759494, 0.07392752974250799], 
                 "EvaluationTime" -> 0.00037974095890307375`, "TestSize" -> 
                 2744, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -3.3803493223549568`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2511886431509579, "TrainingMemory" -> 
                 449640., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[2.148424842980697, 0.03780978285236538], 
                   Around[1.4568966776552688`, 0.026077841742531138`]}, 
                 "AccuracyHistory" -> {
                   Around[0.2945557228909562, 0.012245543527860529`], 
                   Around[0.4413036066609426, 0.013369592496123255`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.1082322083833303`, 0.0503985391704507], "Accuracy" -> 
                 Around[0.6180757845356775, 0.05382602805907864], 
                 "EvaluationTime" -> 0.0002538579279850867, "TestSize" -> 
                 2632, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3500320163647532`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.27286835077291793`, "TrainingMemory" -> 
                 461714.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.155425119141791, 0.02396130422338247], 
                   Around[1.0610392976248695`, 0.02621811203957636]}, 
                 "AccuracyHistory" -> {
                   Around[0.5650696245779578, 0.013556795434539574`], 
                   Around[0.6710819444933972, 0.012935885904837548`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23257721592841687`, 0.03163453421313113], 
                 "Accuracy" -> 
                 Around[0.908886547057971, 0.024356212382520913`], 
                 "EvaluationTime" -> 0.0006501189256247397, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 0.7369941836531197, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1045880, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23257721592841687`, 0.022368993661782865`]}, 
                 "AccuracyHistory" -> {
                   Around[0.908886547057971, 0.017222442939700294`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006501189256247397, "MeanCrossEntropy" -> 
                Around[0.23257721592841687`, 0.03163453421313113], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1045880, 
                "TrainingTime" -> 1.4937384274690055`|>, "Index" -> 10|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8371599125387441, 0.06771930193944112], "Accuracy" -> 
                 Around[0.7457728338345587, 0.018472683364634448`], 
                 "EvaluationTime" -> 0.0006445512946640163, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.7509502414499094`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 309112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8371599125387441, 0.047884777618598134`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7457728338345587, 0.013062159673844945`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.2722926005782066, 0.031969494541386], "Accuracy" -> 
                 Around[0.8882989940963734, 0.013145309817848845`], 
                 "EvaluationTime" -> 0.0005187475095194099, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.48100284988718467`, "TrainingSize" -> 250, "TrainingTime" -> 
                 3.981071705534973, "TrainingMemory" -> 469432, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.2722926005782066, 0.022605846381320353`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8882989940963734, 0.009295137712999018]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04678344173247784, 0.020786249475512084`], 
                 "Accuracy" -> 
                 Around[0.9851396376350638, 0.010281268792086398`], 
                 "EvaluationTime" -> 0.0003008998463685076, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 3.8798539588000582`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 972672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04678344173247784, 0.014698097959569912`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9851396376350638, 0.007269954882085916]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[3.3468294016845603`, 1.5153492244478233`], "Accuracy" -> 
                 Around[0.502464111857925, 0.07130486561817233], 
                 "EvaluationTime" -> 0.0006878932843792122, "TestSize" -> 
                 2200, "ModelMemory" -> 62416., 
                 "ModelUtility" -> -4.6637320197127625`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299269.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.8332223163074313`, 0.08054167103388306], 
                   Around[4.86043648706169, 0.16818929238262642`]}, 
                 "AccuracyHistory" -> {
                   Around[0.572995990979411, 0.015538960918031978`], 
                   Around[0.43193223273643916`, 0.014171287738968941`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006878932843792122, "MeanCrossEntropy" -> 
                Around[3.3468294016845603`, 1.5153492244478233`], 
                "ModelMemory" -> 62416., "TrainingMemory" -> 
                299269.3333333333, "TrainingTime" -> 18.65727460278956|>, 
              "Index" -> 11|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7752070403907262, 0.04267155454762635], "Accuracy" -> 
                 Around[0.762381947001795, 0.01642868812328819], 
                 "EvaluationTime" -> 0.0003449395988462684, "TestSize" -> 
                 1332, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -1.7030510878983651`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 600016, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7752070403907262, 0.03017334558439825]}, 
                 "AccuracyHistory" -> {
                   Around[0.762381947001795, 0.011616836777975974`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.39447704061745437`, 0.03234768531334908], 
                 "Accuracy" -> 
                 Around[0.8594906763316973, 0.01476170763807768], 
                 "EvaluationTime" -> 0.0006664161157970796, "TestSize" -> 
                 1100, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.3625496870271967, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 675000, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.39447704061745437`, 0.02287326764075762]}, 
                 "AccuracyHistory" -> {
                   Around[0.8594906763316973, 0.01043810357277798]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15855325263059325`, 0.0360399307192143], "Accuracy" -> 
                 Around[0.9455603955460657, 0.019279136977717354`], 
                 "EvaluationTime" -> 0.0005909265740870265, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 1.404009915150804, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 1142080, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15855325263059325`, 0.025484079405049796`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9455603955460657, 0.013632408492368261`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.5550909748287374`, 0.04454750436345691], "Accuracy" -> 
                 Around[0.5116939418989973, 0.07010685788967808], 
                 "EvaluationTime" -> 0.0005695026652976444, "TestSize" -> 
                 2400, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -3.0848976492604163`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 586421.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.521906370483909, 0.03515613181787799], 
                   Around[1.5882755791735657`, 0.05563504596868172]}, 
                 "AccuracyHistory" -> {
                   Around[0.442311083421225, 0.014256465737770922`], 
                   Around[0.5810768003767697, 0.014167947833828628`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005695026652976444, "MeanCrossEntropy" -> 
                Around[1.5550909748287374`, 0.04454750436345691], 
                "ModelMemory" -> 164368., "TrainingMemory" -> 
                586421.3333333333, "TrainingTime" -> 5.818068863066169|>, 
              "Index" -> 12|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9007091827219887, 0.030008702121127984`], 
                 "Accuracy" -> 
                 Around[0.6760965348587569, 0.018079481767156038`], 
                 "EvaluationTime" -> 0.0002899004506157072, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.8723329888169609`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9007091827219887, 0.02121935676445673]}, 
                 "AccuracyHistory" -> {
                   Around[0.6760965348587569, 0.012784124157894578`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.43111245312757496`, 0.025345577264303743`], 
                 "Accuracy" -> 
                 Around[0.8330426045067885, 0.015571490015669136`], 
                 "EvaluationTime" -> 0.00048191152894941515`, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -0.4088030140985044, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 364536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.43111245312757496`, 0.01792202955667676]}, 
                 "AccuracyHistory" -> {
                   Around[0.8330426045067885, 0.011010706183258265`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.1842923793671783, 0.025304164192749383`], 
                 "Accuracy" -> 
                 Around[0.9457395297710746, 0.019169568233064083`], 
                 "EvaluationTime" -> 0.0003431830110496489, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 1.260086084177237,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 891920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.1842923793671783, 0.01789274609295091]}, 
                 "AccuracyHistory" -> {
                   Around[0.9457395297710746, 0.013554931690017837`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.9576586454108909`, 0.5187408468073508], "Accuracy" -> 
                 Around[0.43385363675367183`, 0.011415114317526467`], 
                 "EvaluationTime" -> 0.0005079351833678805, "TestSize" -> 
                 2472, "ModelMemory" -> 58320., 
                 "ModelUtility" -> -3.5149737403880033`, "TrainingSize" -> 10,
                  "TrainingTime" -> 0.2945480583948779, "TrainingMemory" -> 
                 273418.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.4396046101139186`, 0.029031135765925187`], 
                   Around[2.475712680707863, 0.06775654619883521]}, 
                 "AccuracyHistory" -> {
                   Around[0.439498971976867, 0.014905537896345295`], 
                   Around[0.4282083015304767, 0.013294357834314301`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005079351833678805, "MeanCrossEntropy" -> 
                Around[1.9576586454108909`, 0.5187408468073508], 
                "ModelMemory" -> 58320., "TrainingMemory" -> 
                273418.6666666666, "TrainingTime" -> 4.386881933034051|>, 
              "Index" -> 13|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8419793893936219, 0.040743862542620725`], 
                 "Accuracy" -> 
                 Around[0.7373831716775224, 0.01693418574125903], 
                 "EvaluationTime" -> 0.0005435876424843661, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.8856361050895067`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 782064, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8419793893936219, 0.02881026149561968]}, 
                 "AccuracyHistory" -> {
                   Around[0.7373831716775224, 0.011974277571516803`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4432056724888078, 0.03165728032389717], "Accuracy" -> 
                 Around[0.8250320562814308, 0.01594299951984108], 
                 "EvaluationTime" -> 0.00030512409784431673`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.6112985333219293, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 848080, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4432056724888078, 0.02238507759095115]}, 
                 "AccuracyHistory" -> {
                   Around[0.8250320562814308, 0.011273403072933497`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.16858329728652338`, 0.029069351611494675`], 
                 "Accuracy" -> Around[0.945560395546066, 0.01927913697771735],
                  "EvaluationTime" -> 0.0005471427735308425, "TestSize" -> 
                 276, "ModelMemory" -> 187664, "ModelUtility" -> 
                 1.2824675838731772`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.2589254117941673`, "TrainingMemory" -> 1207096, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.16858329728652338`, 0.020555135649183976`]}, 
                 "AccuracyHistory" -> {
                   Around[0.945560395546066, 0.013632408492368258`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005471427735308425, "MeanCrossEntropy" -> 
                Around[0.16858329728652338`, 0.029069351611494675`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1207096, 
                "TrainingTime" -> 1.9711948008424112`|>, "Index" -> 14|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3249962292171797`, 0.12170206901231112`], 
                 "Accuracy" -> 
                 Around[0.793195580192614, 0.015828005629622638`], 
                 "EvaluationTime" -> 0.000570296632316303, "TestSize" -> 1300,
                  "ModelMemory" -> 164368, 
                 "ModelUtility" -> -2.7896299497840076`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 589096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3249962292171797`, 0.08605635828303838]}, 
                 "AccuracyHistory" -> {
                   Around[0.793195580192614, 0.011192090113365015`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00044256629018744604`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.23861472421632335`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 686536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00044256629018744604`, 
                "MeanCrossEntropy" -> 
                Around[0.3701221449474526, 0.03366489354688038], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 686536, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 15|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1227673790868702`, 0.10368611279141937`], 
                 "Accuracy" -> 
                 Around[0.757173277714323, 0.018196954510351714`], 
                 "EvaluationTime" -> 0.0006564252659082886, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -2.342528378471589, "TrainingSize" -> 50, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 309656, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1227673790868702`, 0.07331715346968586]}, 
                 "AccuracyHistory" -> {
                   Around[0.757173277714323, 0.012867189931212827`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33220140414624993`, 0.047853257302163214`], 
                 "Accuracy" -> 
                 Around[0.8965085805171233, 0.012697194170323252`], 
                 "EvaluationTime" -> 0.0005845011120616683, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, "ModelUtility" -> 
                 0.07288974716187491, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 510104, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33220140414624993`, 0.03383736274022428]}, 
                 "AccuracyHistory" -> {
                   Around[0.8965085805171233, 0.00897827209987787]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.029497520149122013`, 0.01667491875741592], 
                 "Accuracy" -> 
                 Around[0.9926698116140742, 0.007247173785702781], 
                 "EvaluationTime" -> 0.0005284245084387881, "TestSize" -> 276,
                  "ModelMemory" -> 62416, "ModelUtility" -> 
                 4.7583398302297795`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 39.810717055349734`, "TrainingMemory" -> 948200, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.029497520149122013`, 0.011790948129103553`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9926698116140742, 0.005124525728307819]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.2949671588281193`, 0.14749235577106196`], 
                 "Accuracy" -> 
                 Around[0.5835796437000327, 0.02088503617561304], 
                 "EvaluationTime" -> 0.0006991995824458546, "TestSize" -> 
                 1100, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -3.761313256061099, "TrainingSize" -> 10, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 297120, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.2949671588281193`, 0.10429284493889672`]}, 
                 "AccuracyHistory" -> {
                   Around[0.5835796437000327, 0.014767950705102338`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006991995824458546, "MeanCrossEntropy" -> 
                Around[2.2949671588281193`, 0.14749235577106196`], 
                "ModelMemory" -> 62416, "TrainingMemory" -> 297120, 
                "TrainingTime" -> 58.99948267602831|>, "Index" -> 16|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.6459128197373742`, 0.08624450679121852], "Accuracy" -> 
                 Around[0.7677501064780398, 0.00816276162917491], 
                 "EvaluationTime" -> 0.00035556561081875285`, "TestSize" -> 
                 2664, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -3.1340616273733812`, "TrainingSize" -> 50,
                  "TrainingTime" -> 4.32467191578089, "TrainingMemory" -> 
                 386088., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[1.5973296386447973`, 0.09710009617968923], 
                   Around[1.6944960008299512`, 0.10490120341267964`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7682281016221508, 0.011537187632355594`], 
                   Around[0.7672721113339287, 0.011511014889519293`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.33249143642424983`, 0.02780494761566639], 
                 "Accuracy" -> 
                 Around[0.8613277396783116, 0.014507674452371017`], 
                 "EvaluationTime" -> 0.00011411872350072617`, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.05248807658590138, "TrainingSize" -> 250, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 502672, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.33249143642424983`, 0.01966106700957443]}, 
                 "AccuracyHistory" -> {
                   Around[0.8613277396783116, 0.010258474984518378`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.04443140001711353, 0.021314953380441544`], 
                 "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.92776201569796, "TrainingSize" -> 1106, "TrainingTime" -> 
                 50.11872336272725, "TrainingMemory" -> 970336, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.04443140001711353, 0.01507194807598534]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00046938966244621503`, 
                "MeanCrossEntropy" -> 
                Around[0.04443140001711353, 0.021314953380441544`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 970336, 
                "TrainingTime" -> 66.95041846848348|>, "Index" -> 17|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8893544490513521, 0.11938498915112786`], "Accuracy" -> 
                 Around[0.7384665234825579, 0.010719276135332273`], 
                 "EvaluationTime" -> 0.0004979061616670534, "TestSize" -> 
                 2432, "ModelMemory" -> 93800., 
                 "ModelUtility" -> -1.9350890275488193`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.37788092188698263`, "TrainingMemory" -> 
                 378786.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.7726332524190396, 0.028941631998749596`], 
                   Around[1.0060756456836646`, 0.05024424270156515]}, 
                 "AccuracyHistory" -> {
                   Around[0.7324400373766513, 0.0120571885743892], 
                   Around[0.7444930095884645, 0.01307837056160318]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.34782344779765667`, 0.025712507033831242`], 
                 "Accuracy" -> 
                 Around[0.8557374599745653, 0.014686070676875251`], 
                 "EvaluationTime" -> 0.0006241331755551713, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.033853636018289945`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 454768, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.34782344779765667`, 0.018181488084928872`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8557374599745653, 0.0103846201646034]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15276622770087278`, 0.028666652684449675`], 
                 "Accuracy" -> 
                 Around[0.9498135082589592, 0.018508440411731872`], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 93800, "ModelUtility" -> 
                 1.5673860415737628`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 907872, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15276622770087278`, 0.02027038450709391]}, 
                 "AccuracyHistory" -> {
                   Around[0.9498135082589592, 0.013087443724322741`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.15276622770087278`, 0.028666652684449675`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 907872, 
                "TrainingTime" -> 2.8710567982766673`|>, "Index" -> 18|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.7753042739299817, 0.039969593621796584`], 
                 "Accuracy" -> 
                 Around[0.7375401740439216, 0.01714466436223822], 
                 "EvaluationTime" -> 0.0005294095809603298, "TestSize" -> 
                 1300, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -1.637907986699601, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 461800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.7753042739299817, 0.02826277069124294]}, 
                 "AccuracyHistory" -> {
                   Around[0.7375401740439216, 0.012123108431705979`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35554695739060116`, 0.027033696117590978`], 
                 "Accuracy" -> 
                 Around[0.8470897173852533, 0.01508748965454944], 
                 "EvaluationTime" -> 0.0002746175830918327, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08838018962147687, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 567400, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35554695739060116`, 0.01911570984528502]}, 
                 "AccuracyHistory" -> {
                   Around[0.8470897173852533, 0.01066846624581379]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.15410934185340477`, 0.03040532289461026], 
                 "Accuracy" -> 
                 Around[0.9596068784743268, 0.016667152171683092`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 1.5363925902488362`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1024944, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.15410934185340477`, 0.0214998100029455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9596068784743268, 0.011785456323665205`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.15410934185340477`, 0.03040532289461026], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 1024944, 
                "TrainingTime" -> 2.891283046943182|>, "Index" -> 19|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 1000|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.9025240498596048`, 0.17368396265702707`], 
                 "Accuracy" -> 
                 Around[0.7888324315844696, 0.015739599038312638`], 
                 "EvaluationTime" -> 0.0005996712136378271, "TestSize" -> 
                 1332, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -3.5329225623661613`, "TrainingSize" -> 50,
                  "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 780096, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.9025240498596048`, 0.12281310777813492`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7888324315844696, 0.011129577213148127`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6454807954277998, 0.0876823244612476], "Accuracy" -> 
                 Around[0.8854786750958584, 0.013351117434256547`], 
                 "EvaluationTime" -> 0.00022514047861176898`, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3884636000131882`, "TrainingSize" -> 
                 250, "TrainingTime" -> 19.952623149688797`, "TrainingMemory" -> 
                 837288, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6454807954277998, 0.062000766216747265`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8854786750958584, 0.009440665674180743]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00022514047861176898`, 
                "MeanCrossEntropy" -> 
                Around[0.6454807954277998, 0.0876823244612476], "ModelMemory" -> 
                187664, "TrainingMemory" -> 837288, "TrainingTime" -> 
                115.3099731077524|>, "Index" -> 20|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.2036312536280331`, 0.02718102013114337], "Accuracy" -> 
                 Around[0.5296860458536663, 0.019284927181766578`], 
                 "EvaluationTime" -> 0.0004003411623066381, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.44789502640578, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.19952623149688792`, "TrainingMemory" -> 
                 285536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.2036312536280331`, 0.01921988365429954]}, 
                 "AccuracyHistory" -> {
                   Around[0.5296860458536663, 0.013636502784915922`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.8399174549925484, 0.024903779896598206`], 
                 "Accuracy" -> 
                 Around[0.7369045920343117, 0.018395727422659554`], 
                 "EvaluationTime" -> 0.000516274847757017, "TestSize" -> 1132,
                  "ModelMemory" -> 58320, 
                 "ModelUtility" -> -1.7311181711686499`, "TrainingSize" -> 
                 250, "TrainingTime" -> 0.3981071705534972, "TrainingMemory" -> 
                 351208, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.8399174549925484, 0.017609631642061807`]}, 
                 "AccuracyHistory" -> {
                   Around[0.7369045920343117, 0.0130077436054219]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000516274847757017, "MeanCrossEntropy" -> 
                Around[0.8399174549925484, 0.024903779896598206`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 351208, 
                "TrainingTime" -> 2.4002626703166206`|>, "Index" -> 21|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9663976578750052, 0.07096369456389501], "Accuracy" -> 
                 Around[0.7313061583954904, 0.017144680944532857`], 
                 "EvaluationTime" -> 0.00041860124823845356`, "TestSize" -> 
                 1332, "ModelMemory" -> 58320, 
                 "ModelUtility" -> -2.028995426006972, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 313112, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9663976578750052, 0.05017890964418109]}, 
                 "AccuracyHistory" -> {
                   Around[0.7313061583954904, 0.012123120157158964`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35008419981942934`, 0.024708646909891732`], 
                 "Accuracy" -> 
                 Around[0.8568009346457361, 0.014673031432912107`], 
                 "EvaluationTime" -> 0.0002739765903133414, "TestSize" -> 
                 1132, "ModelMemory" -> 58320, "ModelUtility" -> 
                 0.0029327369312612817`, "TrainingSize" -> 250, 
                 "TrainingTime" -> 3.981071705534973, "TrainingMemory" -> 
                 398384, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35008419981942934`, 0.017471651783928475`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8568009346457361, 0.010375400026775514`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.042170347467092334`, 0.016000630897312476`], 
                 "Accuracy" -> 
                 Around[0.9907604816520923, 0.008121627376877738], 
                 "EvaluationTime" -> 0.0004768941181220428, "TestSize" -> 276,
                  "ModelMemory" -> 58320, "ModelUtility" -> 4.117591121111273,
                  "TrainingSize" -> 1106, "TrainingTime" -> 
                 12.589254117941675`, "TrainingMemory" -> 825792, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.042170347467092334`, 0.011314154610752645`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9907604816520923, 0.00574285779246056]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[1.987919142262011, 0.10753378955027475`], "Accuracy" -> 
                 Around[0.5804592460589959, 0.018783072828788897`], 
                 "EvaluationTime" -> 0.00035368445445821, "TestSize" -> 1372, 
                 "ModelMemory" -> 58320, 
                 "ModelUtility" -> -3.4638943660534287`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 299984, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.987919142262011, 0.07603787179768637]}, 
                 "AccuracyHistory" -> {
                   Around[0.5804592460589959, 0.013281638168757414`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00035368445445821, "MeanCrossEntropy" -> 
                Around[1.987919142262011, 0.10753378955027475`], 
                "ModelMemory" -> 58320, "TrainingMemory" -> 299984, 
                "TrainingTime" -> 18.65727460278956|>, "Index" -> 22|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 2|>, 
                "NumberOfParameters" -> <|"Value" -> 3600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9403941167153582, 0.030071559648660914`], 
                 "Accuracy" -> 
                 Around[0.6590202792143492, 0.018327916017389055`], 
                 "EvaluationTime" -> 0.00017478451520069185`, "TestSize" -> 
                 1332, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -1.9641702588327155`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 318200, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9403941167153582, 0.021263803748423883`]}, 
                 "AccuracyHistory" -> {
                   Around[0.6590202792143492, 0.01295979370091334]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.45576172147997035`, 0.02603166210338864], 
                 "Accuracy" -> 
                 Around[0.8256280537105091, 0.015920374420882354`], 
                 "EvaluationTime" -> 0.00029664077538584725`, "TestSize" -> 
                 1132, "ModelMemory" -> 62416, 
                 "ModelUtility" -> -0.525479429825631, "TrainingSize" -> 250, 
                 "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 420072, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.45576172147997035`, 0.01840716479886297]}, 
                 "AccuracyHistory" -> {
                   Around[0.8256280537105091, 0.011257404712034767`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.20578142008052, 0.02739562188313486], "Accuracy" -> 
                 Around[0.9385178062088241, 0.020368186136795634`], 
                 "EvaluationTime" -> 0.00041974250697322877`, "TestSize" -> 
                 276, "ModelMemory" -> 62416, "ModelUtility" -> 
                 1.0349935743091963`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 933232, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.20578142008052, 0.019371630008387233`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9385178062088241, 0.01440248253779802]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041974250697322877`, 
                "MeanCrossEntropy" -> 
                Around[0.20578142008052, 0.02739562188313486], "ModelMemory" -> 
                62416, "TrainingMemory" -> 933232, "TrainingTime" -> 
                2.29662775876662|>, "Index" -> 23|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.5041540185761222`, 0.12792697018320168`], 
                 "Accuracy" -> 
                 Around[0.7491330451581357, 0.01676873732368961], 
                 "EvaluationTime" -> 0.00025776417474848034`, "TestSize" -> 
                 1332, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -2.9765861636628164`, "TrainingSize" -> 50,
                  "TrainingTime" -> 1.5848931924611136`, "TrainingMemory" -> 
                 461736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.5041540185761222`, 0.09045802811319117]}, 
                 "AccuracyHistory" -> {
                   Around[0.7491330451581357, 0.01185728787351688]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3551338319540449, 0.027278187743878263`], 
                 "Accuracy" -> 
                 Around[0.8473263359267194, 0.015089820198610777`], 
                 "EvaluationTime" -> 0.00016741352415807834`, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.08636092592428413, "TrainingSize" -> 
                 250, "TrainingTime" -> 5.011872336272724, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3551338319540449, 0.01928859153217609]}, 
                 "AccuracyHistory" -> {
                   Around[0.8473263359267194, 0.010670114189323416`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.03734914821299343, 0.01856264938849747], "Accuracy" -> 
                 Around[0.9895518014074794, 0.008620653342748424], 
                 "EvaluationTime" -> 0.00046938966244621503`, "TestSize" -> 
                 276, "ModelMemory" -> 101904, "ModelUtility" -> 
                 4.258968427388813, "TrainingSize" -> 1106, "TrainingTime" -> 
                 15.848931924611142`, "TrainingMemory" -> 932288, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.03734914821299343, 0.013125775259394882`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9895518014074794, 0.0060957224369158885`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[2.678346364097339, 0.11559943601018015`], "Accuracy" -> 
                 Around[0.46102332820255726`, 0.018987327336901637`], 
                 "EvaluationTime" -> 0.00029572208708069134`, "TestSize" -> 
                 1372, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -4.1139807602222875`, "TrainingSize" -> 10,
                  "TrainingTime" -> 1.2589254117941673`, "TrainingMemory" -> 
                 449640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[2.678346364097339, 0.08174114510413875]}, 
                 "AccuracyHistory" -> {
                   Around[0.46102332820255726`, 0.013426067916531857`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00029572208708069134`, 
                "MeanCrossEntropy" -> 
                Around[2.678346364097339, 0.11559943601018015`], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 449640, 
                "TrainingTime" -> 18.983242383456506`|>, "Index" -> 24|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.136143449865953, 0.3185609246117196], "Accuracy" -> 
                 Around[0.7762423210420635, 0.014329340894644918`], 
                 "EvaluationTime" -> 0.0005822405266815353, "TestSize" -> 
                 2432, "ModelMemory" -> 164368., 
                 "ModelUtility" -> -2.5548062598657255`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.5011872336272722, "TrainingMemory" -> 
                 605098.6666666666, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[0.8208265202024376, 0.05283642239438791], 
                   Around[1.4514603795294685`, 0.08835215155478726]}, 
                 "AccuracyHistory" -> {
                   Around[0.7878452988653784, 0.012263467049955281`], 
                   Around[0.7646393432187487, 0.011550990367782388`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3701221449474526, 0.03366489354688038], "Accuracy" -> 
                 Around[0.8628723375916284, 0.014402616848587043`], 
                 "EvaluationTime" -> 0.00042398268458638237`, "TestSize" -> 
                 1132, "ModelMemory" -> 164368, 
                 "ModelUtility" -> -0.2386147056327178, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.7943282347242815, "TrainingMemory" -> 
                 680424, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3701221449474526, 0.02380467451492236]}, 
                 "AccuracyHistory" -> {
                   Around[0.8628723375916284, 0.01018418804046752]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.06082621292123911, 0.019650473295384628`], 
                 "Accuracy" -> 
                 Around[0.9770146234585061, 0.012716008303818851`], 
                 "EvaluationTime" -> 0.0005707076731199294, "TestSize" -> 276,
                  "ModelMemory" -> 164368, "ModelUtility" -> 
                 3.2838445796528624`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 1.9952623149688797`, "TrainingMemory" -> 1099664, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.06082621292123911, 0.013894982920691632`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9770146234585061, 0.008991575701254757]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005707076731199294, "MeanCrossEntropy" -> 
                Around[0.06082621292123911, 0.019650473295384628`], 
                "ModelMemory" -> 164368, "TrainingMemory" -> 1099664, 
                "TrainingTime" -> 2.994363110016957|>, "Index" -> 25|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.096919582443566, 0.09761216773273969], "Accuracy" -> 
                 Around[0.7627369072147341, 0.011750893611347561`], 
                 "EvaluationTime" -> 0.0003182908419427327, "TestSize" -> 
                 2664, "ModelMemory" -> 101904., 
                 "ModelUtility" -> -2.3466851339383332`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 468021.3333333333, "ExperimentCount" -> 2, 
                 "MeanCrossEntropyHistory" -> {
                   Around[1.0095607638414457`, 0.05525446612282441], 
                   Around[1.1842784010456864`, 0.07075909436910463]}, 
                 "AccuracyHistory" -> {
                   Around[0.7543389604118015, 0.011774622135660197`], 
                   Around[0.7711348540176668, 0.011478898503508927`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.35804951443350097`, 0.026655439166062223`], 
                 "Accuracy" -> 
                 Around[0.8488505284229317, 0.014960827173881168`], 
                 "EvaluationTime" -> 0.0006409304126598495, "TestSize" -> 
                 1132, "ModelMemory" -> 101904, 
                 "ModelUtility" -> -0.10178273632499779`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 527408, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.35804951443350097`, 0.018848241789828087`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8488505284229317, 0.010578902346811345`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.05985945373078884, 0.01909313699480727], "Accuracy" -> 
                 Around[0.9880818046627218, 0.009172926997105988], 
                 "EvaluationTime" -> 0.0005164078185523458, "TestSize" -> 276,
                  "ModelMemory" -> 101904, "ModelUtility" -> 
                 3.3814381242084908`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 959184, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.05985945373078884, 0.01350088664315196]}, 
                 "AccuracyHistory" -> {
                   Around[0.9880818046627218, 0.006486238882982798]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0005164078185523458, "MeanCrossEntropy" -> 
                Around[0.05985945373078884, 0.01909313699480727], 
                "ModelMemory" -> 101904, "TrainingMemory" -> 959184, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 26|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 300|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.3358149900117273`, 0.12222648201044096`], 
                 "Accuracy" -> 
                 Around[0.7862467400481814, 0.01602150238466662], 
                 "EvaluationTime" -> 0.0005962042605259962, "TestSize" -> 
                 1300, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -2.825724619026342, "TrainingSize" -> 50, 
                 "TrainingTime" -> 1.9952623149688797`, "TrainingMemory" -> 
                 781952, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.3358149900117273`, 0.08642717427015836]}, 
                 "AccuracyHistory" -> {
                   Around[0.7862467400481814, 0.01132891298099421]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.6317653258849528, 0.08431311521662489], "Accuracy" -> 
                 Around[0.8858609662855659, 0.013283721779471411`], 
                 "EvaluationTime" -> 0.0006750899943090048, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -1.3445805711537584`, "TrainingSize" -> 
                 250, "TrainingTime" -> 6.309573444801933, "TrainingMemory" -> 
                 845640, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.6317653258849528, 0.05961837551263815]}, 
                 "AccuracyHistory" -> {
                   Around[0.8858609662855659, 0.009393009749659667]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0006750899943090048, "MeanCrossEntropy" -> 
                Around[0.6317653258849528, 0.08431311521662489], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 845640, 
                "TrainingTime" -> 36.874584317833964`|>, "Index" -> 27|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 10|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[1.1154980744941485`, 0.034353683515180075`], 
                 "Accuracy" -> 
                 Around[0.5814498430933545, 0.019088672339769665`], 
                 "EvaluationTime" -> 0.0002818293627359316, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.347503593111097, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 386152, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[1.1154980744941485`, 0.02429172257232034]}, 
                 "AccuracyHistory" -> {
                   Around[0.5814498430933545, 0.01349772965529921]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.5546183182382579, 0.026395794652472045`], 
                 "Accuracy" -> 
                 Around[0.8135685469111952, 0.016337844310188795`], 
                 "EvaluationTime" -> 0.0004369613530848399, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -0.9566176476083332, "TrainingSize" -> 250,
                  "TrainingTime" -> 0.31622776601683794`, "TrainingMemory" -> 
                 451760, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.5546183182382579, 0.01866464539357059]}, 
                 "AccuracyHistory" -> {
                   Around[0.8135685469111952, 0.011552600501704549`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.23091679939394155`, 0.0319572042010208], "Accuracy" -> 
                 Around[0.9299868058195125, 0.021652291921408842`], 
                 "EvaluationTime" -> 0.00041019731090850185`, "TestSize" -> 
                 276, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.7601699845170374, "TrainingSize" -> 1106, "TrainingTime" -> 
                 0.7943282347242815, "TrainingMemory" -> 918608, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.23091679939394155`, 0.02259715579830503]}, 
                 "AccuracyHistory" -> {
                   Around[0.9299868058195125, 0.015310482445858892`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.00041019731090850185`, 
                "MeanCrossEntropy" -> 
                Around[0.23091679939394155`, 0.0319572042010208], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 918608, 
                "TrainingTime" -> 1.3087789598585713`|>, "Index" -> 28|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 4|>, 
                "NumberOfParameters" -> <|"Value" -> 8600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> None|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 100|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.9948450772059008, 0.07899231063753653], "Accuracy" -> 
                 Around[0.7681507374150377, 0.016318407378901893`], 
                 "EvaluationTime" -> 0.00041000084249202964`, "TestSize" -> 
                 1332, "ModelMemory" -> 93800, 
                 "ModelUtility" -> -2.137795388853302, "TrainingSize" -> 50, 
                 "TrainingTime" -> 0.6309573444801932, "TrainingMemory" -> 
                 386256, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.9948450772059008, 0.05585599851339633]}, 
                 "AccuracyHistory" -> {
                   Around[0.7681507374150377, 0.011538856515786122`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.3326799470819294, 0.02649505480353214], "Accuracy" -> 
                 Around[0.8617176768356566, 0.014429545856984168`], 
                 "EvaluationTime" -> 0.0005375367851306609, "TestSize" -> 
                 1132, "ModelMemory" -> 93800, "ModelUtility" -> 
                 0.052922354317971765`, "TrainingSize" -> 250, "TrainingTime" -> 
                 1.5848931924611136`, "TrainingMemory" -> 497976, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.3326799470819294, 0.018734832919486785`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8617176768356566, 0.010203229724915757`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.07021180454193646, 0.026976812427827776`], 
                 "Accuracy" -> 
                 Around[0.9710277520559213, 0.014250347362805026`], 
                 "EvaluationTime" -> 0.000575600170090059, "TestSize" -> 276, 
                 "ModelMemory" -> 93800, "ModelUtility" -> 
                 3.0477874334351047`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 5.011872336272724, "TrainingMemory" -> 966920, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.07021180454193646, 0.01907548700251455]}, 
                 "AccuracyHistory" -> {
                   Around[0.9710277520559213, 0.010076517254503268`]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.000575600170090059, "MeanCrossEntropy" -> 
                Around[0.07021180454193646, 0.026976812427827776`], 
                "ModelMemory" -> 93800, "TrainingMemory" -> 966920, 
                "TrainingTime" -> 6.89353199975045|>, "Index" -> 29|>, <|
             "Value" -> "NeuralNetwork", 
              "Options" -> <|
               "NetworkType" -> <|"Value" -> "FullyConnected"|>, 
                "NetworkDepth" -> <|"Value" -> 8|>, 
                "NumberOfParameters" -> <|"Value" -> 18600|>, 
                "ActivationFunction" -> <|"Value" -> "SELU"|>, 
                "L2Regularization" -> <|"Value" -> None|>, 
                "Dropout" -> <|"Value" -> 0.01|>, 
                "NetInitializationMethod" -> <|"Value" -> Automatic|>, 
                "OptimizationMethod" -> <|
                 "Value" -> {"ADAM", "L2Regularization" -> None}|>, 
                MaxTrainingRounds -> <|"Value" -> 30|>, 
                ValidationSet -> <|"Value" -> Automatic|>, 
                "EarlyStopping" -> <|"Value" -> False|>, 
                TrainingProgressReporting -> <|"Value" -> None|>, 
                "NetTrainOptions" -> <|"Value" -> Automatic|>, 
                "LossFunction" -> <|"Value" -> Automatic|>|>|> -> <|
             "Experiments" -> {<|
                "MeanCrossEntropy" -> 
                 Around[0.8576732619465551, 0.10712179611542431`], "Accuracy" -> 
                 Around[0.7911413261337976, 0.015627505897240296`], 
                 "EvaluationTime" -> 0.00038608029754265313`, "TestSize" -> 
                 2332, "ModelMemory" -> 187664., 
                 "ModelUtility" -> -1.9526536156678969`, "TrainingSize" -> 50,
                  "TrainingTime" -> 0.4324671915780889, "TrainingMemory" -> 
                 774816., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                   Around[0.7558990910227044, 0.037970217663081576`], 
                   Around[0.9594474328704059, 0.07043483754789011]}, 
                 "AccuracyHistory" -> {
                   Around[0.7779594452749371, 0.011355683387275856`], 
                   Around[0.8043232069926582, 0.012462850244706676`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.4042669758821077, 0.03149765438360228], "Accuracy" -> 
                 Around[0.8389781853611775, 0.015335274506302916`], 
                 "EvaluationTime" -> 0.0005792104679524559, "TestSize" -> 
                 1132, "ModelMemory" -> 187664, 
                 "ModelUtility" -> -0.42993776665561045`, "TrainingSize" -> 
                 250, "TrainingTime" -> 1., "TrainingMemory" -> 845640, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.4042669758821077, 0.022272205006115358`]}, 
                 "AccuracyHistory" -> {
                   Around[0.8389781853611775, 0.010843676594763976`]}|>, <|
                "MeanCrossEntropy" -> 
                 Around[0.10406413363415194`, 0.020899367441681686`], 
                 "Accuracy" -> 
                 Around[0.9736914348517792, 0.013553043838557063`], 
                 "EvaluationTime" -> 0.0004533292185329558, "TestSize" -> 276,
                  "ModelMemory" -> 187664, "ModelUtility" -> 
                 2.2363622110324752`, "TrainingSize" -> 1106, "TrainingTime" -> 
                 2.51188643150958, "TrainingMemory" -> 1218600, 
                 "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                   Around[0.10406413363415194`, 0.014778084440522468`]}, 
                 "AccuracyHistory" -> {
                   Around[0.9736914348517792, 0.009583449203962254]}|>}, 
              "PredictedPerformances" -> <|
               "EvaluationTime" -> 0.0004533292185329558, "MeanCrossEntropy" -> 
                Around[0.10406413363415194`, 0.020899367441681686`], 
                "ModelMemory" -> 187664, "TrainingMemory" -> 1218600, 
                "TrainingTime" -> 3.5711896584372567`|>, "Index" -> 30|>|>, 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration["NeuralNetwork"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 14]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "ModelMemory", "ModelUtility", "TrainingSize", 
                 "TrainingTime", "TrainingMemory", "ExperimentCount", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 30], <||>], "MaxTrainingSize" -> 
         1382, "PreprocessorEvaluationTime" -> 3.9375*^-6, 
         "PreprocessorMemory" -> 94088, "InputDimension" -> 18, 
         "OutputDimension" -> 1, 
         "BaselineLogProbability" -> -0.8389001647527881, "VariableBudget" -> 
         True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, 
         "UserStop" -> False, "NaturalStop" -> True, "AbortStop" -> False, 
         "LastReportingTime" -> 3.869215141896656`16.340197867844974*^9, 
         "RoundPartitioning" -> 
         Dataset[{<|
            "TrainingSizes" -> 10, "TimeBudgets" -> 67.65895979576031, 
             "ElapsedTimes" -> 74.048303, "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 50, "TimeBudgets" -> 96.65565685108608, 
             "ElapsedTimes" -> 96.52380000000001, "ExperimentCounts" -> 
             40|>, <|"TrainingSizes" -> 250, "TimeBudgets" -> 
             138.0795097872658, "ElapsedTimes" -> 151.156252, 
             "ExperimentCounts" -> 29|>, <|
            "TrainingSizes" -> 1106, "TimeBudgets" -> 197.25644255323652`, 
             "ElapsedTimes" -> 221.90283300000002`, "ExperimentCounts" -> 
             21|>}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], <||>]|>, "AnomalyDetector" -> 
       None, 
       "Log" -> <|
        "Example" -> 
         MachineLearning`MLDataset[<|
           "f1" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"medium"}, "ID" -> 
              2846111867015398573|>, 
            "f2" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"very high"}, 
              "ID" -> 41728420326286313|>, 
            "f3" -> <|"Type" -> "Nominal", "Weight" -> 1, "Values" -> {
                Interval[{5, 
                  DirectedInfinity[1]}]}, "ID" -> 1436697572522429983|>, 
            "f4" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {2}, "ID" -> 
              536027689597629633|>, 
            "f5" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"small"}, "ID" -> 
              5753609278033805624|>, 
            "f6" -> <|
             "Type" -> "Nominal", "Weight" -> 1, "Values" -> {"low"}, "ID" -> 
              8080186329754682489|>|>, <|
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 
            0, "RawExample" -> False|>], "TrainingTime" -> 544.791181, 
         "MaxTrainingMemory" -> 4854120, "DataMemory" -> 1782536, 
         "FunctionMemory" -> 744352, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 11, 13, 59, 1.978166`7.048837721982046}, 
           "Instant", "Gregorian", 1.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "Unix", 
         "SystemWordLength" -> 64, "Evaluations" -> {}|>|>], 
    "TestSet" -> <|"Input" -> {{"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "high", 4, 4, "medium", "low"}, {
        "medium", "medium", 2, 2, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "high", "very high", 2, 4, "large", "low"}, {
        "high", "high", 4, 2, "small", "medium"}, {
        "low", "high", 3, 4, "large", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 4, "small", "medium"}, {
        "medium", "high", 4, 2, "medium", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "high", 3, 4, "small", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "high", 2, 2, "large", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "low", 4, 4, "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "medium"}, {
        "very high", "very high", 3, 4, "small", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "low", 4, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "medium", "very high", 3, 2, "small", "medium"}, {
        "high", "very high", 2, 2, "medium", "high"}, {
        "high", "medium", 4, 2, "large", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 4, "medium", "high"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "medium", "high", 4, 4, "medium", "medium"}, {
        "low", "high", 3, 2, "medium", "high"}, {
        "medium", "high", 2, 4, "large", "low"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "medium", 2, 2, "small", "medium"}, {
        "low", "very high", 2, 2, "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "low", 4, 2, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 4, 4, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "medium", 4, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "high", 2, 4, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "very high", "low", 3, 4, "small", "high"}, {
        "low", "high", 4, 2, "medium", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "medium", "very high", 2, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "medium", 3, 2, "medium", "low"}, {
        "high", "high", 2, 4, "large", "high"}, {
        "high", "medium", 2, 4, "medium", "high"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "medium", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "high", 4, 4, "large", "medium"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "very high", 4, 4, "large", "low"}, {
        "low", "very high", 2, 2, "medium", "high"}, {
        "very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "medium", 2, 4, "small", "high"}, {"low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "medium", 3, 4, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "very high", "medium", 4, 4, "large", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {
        "low", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 4, "large", "high"}, {
        "high", "low", 3, 4, "medium", "high"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 2, 4, "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "low", "medium", 4, 4, "small", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 3, 4, "small", "medium"}, {
        "high", "medium", 2, 2, "large", "medium"}, {
        "medium", "high", 4, 2, "medium", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 2, 2, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "medium", 3, 4, "small", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "medium", "medium", 3, 4, "medium", "medium"}, {
        "high", "low", 2, 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "low", "medium", 3, 4, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 4, 2, "small", "high"}, {
        "very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "very high", 2, 2, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "low", 2, 4, "large", "medium"}, {
        "low", "medium", 4, 4, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {
        "high", "very high", 3, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "high", 4, 2, "medium", "low"}, {
        "high", "medium", 4, 4, "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "medium", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "low", 4, 2, "large", "medium"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 3, 4, "large", "medium"}, {
        "very high", "medium", 4, 2, "large", "high"}, {
        "high", "high", 4, 2, "large", "medium"}, {
        "high", "medium", 2, 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "high", 4, 4, "small", "low"}, {
        "low", "low", 2, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "medium", 2, 4, "medium", "medium"}, {
        "medium", "medium", 3, 2, "large", "low"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "very high", 3, 2, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 4, "small", "high"}, {
        "low", "medium", 4, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "low", 4, 2, "small", "medium"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "low", "very high", 3, 4, "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "large", "low"}, {
        "very high", "low", 4, 4, "large", "high"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 4, "medium", "high"}, {
        "medium", "very high", 4, 4, "small", "high"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "medium", "low", 3, 4, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "low", 3, 2, "large", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "very high", 4, 4, "large", "medium"}, {
        "high", "high", 3, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "very high", "medium", 2, 2, "large", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "medium", 4, 4, "large", "medium"}, {
        "medium", "very high", 2, 4, "medium", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "very high", 2, 2, "small", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 2, 2, "medium", "medium"}, {
        "medium", "low", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 2, "large", "high"}, {
        "very high", "very high", 4, 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 4, "small", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "medium", "medium", 2, 2, "medium", "high"}, {
        "very high", "very high", 4, 4, "medium", "high"}, {
        "medium", "very high", 4, 2, "large", "high"}, {
        "medium", "very high", 4, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "large", "medium"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "medium", "very high", 2, 2, "large", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {
        "low", "high", 2, 4, "large", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 4, "small", "medium"}, {
        "high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "high", "low", 2, 4, "large", "low"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 4, "medium", "medium"}, {
        "high", "high", 2, 4, "small", "medium"}, {
        "very high", "medium", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "medium", "low"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "low", 4, 4, "medium", "low"}, {
        "low", "low", 4, 4, "small", "low"}, {
        "very high", "low", 3, 4, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 3, 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "very high", 2, 2, "medium", "high"}, {
        "very high", "very high", 3, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "medium", 2, 2, "small", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "high", 4, 2, "medium", "high"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 4, 2, "medium", "low"}, {
        "medium", "very high", 4, 2, "small", "medium"}, {"medium", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 4, 2, "small", "low"}, {
        "medium", "high", 3, 2, "medium", "medium"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "high", 3, 2, "large", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "very high", 2, 2, "medium", "medium"}, {
        "very high", "low", 2, 2, "large", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "very high", "low", 2, 4, "small", "low"}, {
        "low", "low", 2, 2, "medium", "high"}, {
        "medium", "medium", 4, 4, "small", "low"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "high", 3, 2, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "very high", "very high", 2, 4, "small", "low"}, {
        "medium", "very high", 4, 2, "medium", "low"}, {
        "medium", "high", 2, 2, "small", "medium"}, {
        "medium", "medium", 2, 4, "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "low", "very high", 3, 4, "medium", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "very high", "very high", 3, 4, "large", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {
        "high", "low", 3, 2, "medium", "high"}, {
        "low", "high", 2, 4, "large", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "low", 2, 4, "small", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "very high", 3, 2, "large", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 4, "medium", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "very high", 2, 4, "large", "low"}, {
        "high", "medium", 4, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "medium"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "low", 3, 2, "large", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "high"}, {"medium", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}}, 
      "Output" -> {
       "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
        "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
        "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "acceptable", "unacceptable", "unacceptable", "good", 
        "acceptable", "unacceptable", "unacceptable", "very good", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "good", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable"}|>, 
    "Predictions" -> {
     "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "good", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "good", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "good", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "acceptable", 
      "acceptable", "good", "unacceptable", "acceptable", "unacceptable", 
      "good", "unacceptable", "unacceptable", "very good", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", "very good",
       "acceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", "very good", 
      "very good", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "very good", "good", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", "good", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "very good", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable"}, 
    "LogProbabilities" -> CompressedData["
1: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
9XRNEKE4i9l9otgfv2sXmh9tWi3aJ2iuwyjz1xX9GQr7/Y8edMqmSY9Xb74y
Qe4LifGmRe9TrIDgYwevMsn2jZP+Q/KV79WkyLdrV4lq/6iarrqf+dxG2X+w
rwvQvjA9aCaan8LjBmX/bC8eTeyfn95/Sii1h9v9lwQ2JSzYk7ls64/lZ3GC
ywp2I/nwX55D+4eQfmc+Zfylrmh/hMLlKG+VrxycQ5Ff6RWUl9eNWaGKY2uW
UOJX178abAg/srQ/e/1k2Lbwn31rroaDb22EVStTghM84N0KZDe0bSbo/Mi9
d49yPhKm8NJhx+Ix7R3fXEnETgn8QefC1dPbF3vjd2oNFK1fgqHvR7X5Cz07
yPc/HhttFA7HTRR5/sebcIIb7roeCpn6hdmm+SG484C1LLbNFUgcbHED0/xR
dTabkV8rpt9HcUDuFknZ//sORiG5gkkIqmdNMqHEf/EKrUhYRNjprko/8CT4
2tRwmN1P2PeDFAnBBexGdP8mZ2HIPoTfmin6eR62NxQYPVr9k+g38a6dAobB
BkcgEHviOxm+R7HMuM984MXAXumze1Z49js9zpS3bkAgI221N4kyzi3V/UmW
yj/prnkU/5exytD85ZdxFF/5qwLU9QvSEnwGvH82qPxaKpOMm4CxLmWHAzMY
M3601YtEr29PfeAeuSGUBUmMCPszmBkGVhh2fohNAIm/luEBwDX9eGtF9VPc
+UjI+otfbMCs9cAbZaAHicebP/mAR1VHTNCaSbCn5Vus2UwmiUazA91BcLna
bvySf3G6s7whU28SEBg+bZcdCE0VY2PnuEOyr0auRqASf629RjjXZiq+bW8i
M/gWEUf3JooOTfUgkX9RjPJ/2qETyG7kzRaU/I7uvxHZLytyEpK/YkIUxb+x
NtdY8HOHiSbdDPjDnCdeVxAOZ8f8WluknYET5e0p3T4w85/K3NcXVuBmaVG5
wGMAgcmuo70RytYj/82pK0FxgtHwmaJf2dgJaNy6hyr9CJ7Pptz/iHz4CXBm
FNalxJnQrodxb5qHAztAqRxxpkZCcFpys+r++nUDiiv0BO8U9efvvfBG66lc
4o5QXH9cPT4JTCreciCK91W5kvafRGepBuOS1BsI7JJN8yMxy+SRB9meM1Ib
+a186GFKfBO1rUfxJYNvi/yUwVgXrb7/idrdUfwWrKlX7Q8nqfdPhzcZRkPD
ScKAMq9LFhlh/NIKFjyaiKUencQksXrbJZR/0VJbkH/RsWMU/VRCBBuVL7uB
9MpycqPEB3nzYZQP0ed2orgpv72fIl9sxOwpMIq9cFE/ke9kTzs8qaSlAtc7
dP6Wf4MbKlfOdYb7w7fkimOWSdfN+SN64PgYeF2pM2PWYi8g+EmTv01B6qap
O2WoB8h3aYjheBgEDDxS9u3VwwkusF8XDPdJf/efLYkgHOrpuFDYhmET55b4
E8gaYbof2af8L2uUP8LXekr+rhjsjwG9p4NKqx0yyeQJGHaayK+mEv7nl+ZP
ohwv9oITi8tjIj5w8PIWF1Z6oR8QeH5ztCuJJcldSH+yn9koLgmrXlPkR9cV
IfvLOLMSxTlOvl68en7HMPoRA3/cLoiXuNsDpyc9ZfiGUCh3m1z2VnoeJ7j5
Y2/V/Qn/ver+MkWXEl90Y19x4Z/fa+NqrtnDUancZlMgB8qa6ETRGZzgj10i
2dCXnGg2f3s5vmFM59CSP/zAwO2OXYCZExA8tJ+Lzn8Z2bko7vLDqPYjXBSE
7Ivf7Ib0K9Poodg/Z2e86r1OwybUTrjGlSJfcZJGNEz3KVUUTnmDF9r8c84s
xQv04ph51VE2QPDZ1vXeUJzPN0w7XYoX7lxks/mEE1y/e6GjVe4GrzufXjIz
RPtj8atm5B994wsp8i1OM0H3J7xVycjvhZ66lPsHWWxhBCzXxbiFO71hPHH+
qY2Oh311xPmnUyTxHop1RQayyfZ1Mx+gfrCb4RT/6ws/Fgtthkdenf3PEu+W
DBWtJM4PT1bpTQ8g8mgCpYZ1SP+MvzXQ/iw6b0m5X3q+9ON0WGyNdUtGMcFr
FCZ2uRIBbVt+Ky963pAQnD8jMgxW99YlHTAJxg+YGMHBiHAIsZ/o/ijNl0Rx
3U5XeBiRoJyYOhk3chre9WyPGxBYjT1nksiIGe4DXzcF2h1gecILk4Jg0Q0r
kk8SO7uC+9cV0wZu60sdSnZlso5NhhvXK48VOb+Wjq6PdnyS74O4t3m3tEkb
k31q8oYaDUxmczse5h4izNNrj2SBJkZ3/4zkwx88pcqP8GZK/sNyPxQHDa2Y
oinNE3rcMYYbcd55bvBD+Snno+TtQozx6g4bhtzmp5Xa1+AS82l/zZhpDyTR
12WS2GtU7QkTWq8XOEaMwK0/aNIDd/kCgYmZJh4kVluyPcnxmEF/ozgsdvhC
2f/5geGq/HWkzXxkh22+89XrjQ3HovPL+WNeaB/mMj5Q7ydWHQ6DyKzOrhHv
avAPI96tuxvjDS0W9xqcIu3hu07vyIRjQVC0ynnlvTQHePPybtt980i4KXm2
YZXzUZzgO2wmhMD8mRhtn7sXgQL6sgW+JJe920PEH8kvZVnyYwk50MUNyD4z
svoo9ts+0ITmJWJh6PzKanGmnF8VgrVI3mKn/agdTXMJ5XnetZ4I6Cm57nPq
rjmYjHtge9ItUep3SJy9MdUfCAw4XOgLR6v7e+xj2vDK9IX9G2bZwr0z7mGX
H/iQ6M+08wKbTHO+VZcrjPIYzppI5If6loe+WGf64AQXTKehvLxxXDcal5FT
RcmPFfOKUDmn8DjyT8XxH5T8jaY0j4K1F1KVCUauuJ2eHn9rUQRMMTJqv7KG
SaL4XCS6XxNrLlLdg99vo75fHOGA8jehSZYqf2iuoPi3GF8ZBszCPuW6N50S
4zMYbNwXAARmcYSeJDIiBX6QOn1Q+X7kHclEd6x6Sa4fEJjIbvQiEeOtDID+
H4S9T1komUeM/5E4R93FsLeX6H4kro5r9YdNbSf3Rv5zE/fdwbyUstQDVk7+
Nnxemx0Q/MPpYnT+ozV6o7jJf6ZL2f8yztQgeTA901Tn5wQd9fgqaBV94cDF
TT9eDJx8gOf01gxbcMoZrv5MflCk7w4Ed7ozzA71u78JPUer/03pv9sdjwd5
lcdp4Ws65B98VeUR6yDNWVjaO6WRBYoW847KUSg+QbUYPceanUO5v5C/00T7
Ce24u+r9ZcWaRer10SGB6P4FPv2F5E/XbKDmb3GPUHmf/W6Uf4nvjKa+H/F/
R+qVNfyaP/Jf4QkRxT6M9fQ58HG64dar2xnwp0ORvOh0GOwcYnxwSycfJzjf
rDgEdkcx7oWu8yQRbq/yIjH03wRX6O+o07o/iYPuL0oS5iP5Wiyk3B8I0tpm
wIqpXS17hs/GX2UJJyd5uACB1bf0vUnkciah/L34ZSSyO0aRBfX+8VUDWlex
byiyT8YkA8r+e9O2hg3NKyyEi664wsLLI2jj8qJAlzXSsHlFIE5wrt8A2r/7
do5F+uPNt0mnyO+/GwnQdvtzQfdIDdxipAbra3UIBFgO6T6/woNEVvQTlN8W
n1Cq3v+yRlDy22r2APJP1q7v6PwmD35Fyb+z9nugeEIz+4j2Zf7+Bur6hmjE
wazgmKWjXB2gkjuldltiGMxZ9JAXHHMMJ7hncgXKW1je6Ui+WND4+erP22Y/
Quf56Xw/ZBfygHJKfJVfc4wC8arQzCXrdaQRn08xFi5jwtanM/TMtScCyV8v
9UJybTRH9wriSi7lfiHxXhmyP3lZiur+dbyI0r8goxrpjTu/E+mH+cNG3T5F
Dw4+R3bXviNVdf/wNJfy/uq8jDivr59knun08hRO/Hxe8dIePEy/bplKnPMI
jP0m8wZO+cr4BRqV+MNk7K/v8e5wrAYb2ObuBATXf5TEAMcozXHjBt1hZ5UG
7eyXUFi656EyM1kfJzj26y4byZ/5UjWv+EsU/4B5Y1XxzrEHzY9+xJ3i39zC
Jag9c6gC2Y9oB5Nif9wkEZILw/6K6pxp+ZxiH6yfw1E9a40A+anZl+Rgyv3Z
SX1kP7Jd2mh8ftoGSv+Nt9xQfyzRX6r7IYdCSnzmO21G/fc1hCM7lz235Kr3
j22tjALnq7+Uf66XSxwKMV0TTSYQOJ0f60Wi8I+DKH6K95Si+cnSOijxRdTp
HwffN+z9KhVPwwWznMXld4h88EZaScc5FxJX1ie6Q/DbAuXIQ9b4zWotbt0u
DmyMH1atHMckUTTnJtpfeB15KL+jPyuh5Lfyi7Gq8gwl8hvZEsZ89fq+1EYU
L+tswpEcuFapFP2d82lgI7l5x6G4CXf/ptxfVzeWIPuVxWBIrqKNNRT91h0z
V+2rGf6q7yp+nqCcrypdnVG8EL+8ieQjF2pQv/8yc4uDmbdtJpQqi6V5Ri1y
91eh0FkurL9bNRIIzkhSvfeQtW5TfR9wx5DyfQp9/fp0CNbEcl5t9oFmYryQ
ZVwoaCPUN2qT5IAGVu2WhPJvmcZzlX8v2kf9fmnHzmhYnFp6dXizNYydZjVv
rGkIxC5orm/jvMcJ7hGSjp7v4u5U3Z9tuk2Zf0bi1hg4eS48c84VZ+nEC2cH
q/9lACdT867NUToQfPEWGop/wJSqvuMbYkXxX9n2l6q8/6rq/RKPY0m9v5K4
IPnxlkxUfV+zop/6fc2mdi5YnDmn5cJ0BuG0J5OPsfxJZDuscIMT/OLVV+9s
IPcXGN+KnlPEfKHs30q6C9ILo3kSkis95xgl/jJ7WWnA13YXLverkmqaNy5c
OSUAzGWsL4kiPSC43qFGZP9deX+r3t9zP1HyW25hLxuVH1PlvQJTMfX7vqT/
kN+LvT3R/Lhrp1LWpzhqEgNNt6eW6B+1hOXLTJ7tNAiGMYl7yk9MN5USfOzB
c6pzaVMNipOC+lbq+K7nkH/QjqjO/fzIlRT5CvLT00CWpFl5DPcicN3IvkOe
JD/5NMQDGua3FuTV6pPyy4igI/kLNq+nzM9A51okeP7+mVVfzSAR5jQGwOP/
JPfqA5fgY5WredeNVfejP2Sq99+vL1Hkv7JciuYn/PMoikN1zisp8mE209H5
oHjiaGQnAqN0av5sUxYBS7YWpd/omYTP/qkv7nL1AwJrZRXuJLKHzkLf1wg9
+lTyHypQl48gcMfDEOiwJ86Tlecl0fqYbFEyB3YZY0PLLzBJ/Nqag74Plf9R
gO5XGK/PU+IHc4YXcX7XMb3skGIF76+tP73uXQjkWnmNcFpBkxI8LWgCiqtm
y7XQuoS21ZT4zhvaq9rX36nuN7iXX1PkW2wQwoX/AcfwTyA=
     "], "CountMatrix" -> {{80, 0, 0, 2, 0}, {0, 13, 0, 0, 0}, {1, 0, 238, 0, 
     0}, {0, 0, 0, 12, 0}}, "IndicesMatrix" -> {{CompressedData["
1:eJwt0KFOAgEAgOETvHndYnAyt2MGNpkkZYZjYzNoACYEIDhnMEExa3Qjsjkf
gAew6IZuBhPB4pwmghQ3SRJsBv0C4at/+NePu7XOQhAEFUKWiFhljZgsG+TY
pMA2O+ySUKLMPgfzXpU6TVq0OeKEU84454JLevS54poBN9xyx5B7HnjkiRHP
vPDKG++M+WDCJ19M+WbGD7/8kTIgzSIhEcuskCEmS54tChRJ2OOQBv+qkSTf

       "], {}, {}, {142, 188}, {}}, {{}, {19, 21, 27, 49, 62, 66, 70, 99, 109,
        207, 235, 250, 266}, {}, {}, {}}, {{107}, {}, CompressedData["
1:eJwl0ulrDgAAwOF3aBq7rNlsjL1b7bKx2oWZxRqzmc07bFOUFUXaHLkpdxQh
Uu4jc5Oj+IZcIZSUK5QjvqCQUMizfHj6/QO/YEtbqDUsEAh8pqOd6EwXwomg
G5FEEU0MsfQgjngSSKQXSSSTQj9SCZJGOhlkkU0OueQxkHwKKKSIYkoYQill
lFNBJaOooppaxlJHiAbGM5FGmmhmMlOYSgvTmM4MZjKLVtqYzRzmMo/5LGAh
i1jMEpayjOWsYCWrWM0a1rKO9WxgI5vYzBa2so3t7GAnu9jNHvayj/0c4CCH
OEw7RzjKMY5zgpOc4jRnOMs5znOBi1ziMle4yjWuc4Ob3OI2d7jLPe7zgIc8
4jFPeMoznvOCl7ziNW94yzve84GPfAr8f+8LX/nGd37wk1/85g9/6Zg0jHC6
EkF3IokimhhiiSOeniSQSBLJ9KYPKfQllSBppJNBJllkk0N/csljAPkUUEgR
xZQwiMGUMpQyhlHOcEZQQSUjqWI01dQwhlrqqGccIRqYQCNNNDOJf4h0Y6U=

       "], {}, {}}, {{}, {}, {}, {11, 73, 95, 103, 139, 152, 187, 234, 246, 
       273, 324, 334}, {}}}, 
    "ExtendedClasses" -> {"acceptable", "good", "unacceptable", "very good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0006979190751445086, "SingleEvaluationTime" -> 
    0.00704475, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{3.86896617348654*^9, 3.868966311492532*^9, 
  3.8689668453138514`*^9, 3.869211547634626*^9},
 CellLabel->
  "Out[422]=",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"classifier", ",", "\"\<FunctionMemory\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.868966450981901*^9, 3.868966454228724*^9}, {
  3.8689665175597897`*^9, 3.8689665219168673`*^9}, {3.868966557967691*^9, 
  3.868966625165139*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],

Cell[BoxData[
 TemplateBox[{"753.`", "\"kB\"", "kilobytes", "\"Kilobytes\""},
  "Quantity"]], "Output",
 CellChangeTimes->{
  3.868966455151699*^9, 3.868966522419289*^9, {3.868966572943582*^9, 
   3.868966625736467*^9}, 3.868966851157722*^9, 3.8692115560464487`*^9, 
   3.8692119399774446`*^9},
 CellLabel->
  "Out[438]=",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 3.868447512030362*^9}, {3.868964810263049*^9, 
  3.868964810772952*^9}},ExpressionUUID->"d293971e-29a8-48c6-9378-\
634a3d38a3fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"softWeights", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.868598558993527*^9, 3.8685985805202436`*^9}},
 CellLabel->
  "In[424]:=",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"softWeights", ",", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.868598583187772*^9, 3.8685985949050713`*^9}},
 CellLabel->
  "In[425]:=",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.5459999999999999], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.5459999999999999], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{-0.05, 0}, {0., 13785.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{37.50666783426742, 
           52.332901548511536`}, {-99.32799274165829, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 13785]& ,
        TagBoxNote->"13785"],
       StyleBox["13785", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[13785, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0., 0}, {0.05, 537.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{51.832901548511536`, 66.65913526275565}, {
           82.02400202377434, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 537]& ,
        TagBoxNote->"537"],
       StyleBox["537", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[537, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.05, 0}, {0.1, 649.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{66.15913526275565, 80.98536897699978}, {
           80.49083298590233, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 649]& ,
        TagBoxNote->"649"],
       StyleBox["649", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[649, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.1, 0}, {0.15, 413.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{80.48536897699978, 95.31160269124389}, {
           83.72143917284693, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 413]& ,
        TagBoxNote->"413"],
       StyleBox["413", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[413, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.15, 0}, {0.2, 486.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{94.81160269124389, 109.63783640548802`}, {
           82.72214149637678, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 486]& ,
        TagBoxNote->"486"],
       StyleBox["486", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[486, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.2, 0}, {0.25, 406.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{109.13783640548802`, 123.96407011973213`}, {
           83.81726223771393, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 406]& ,
        TagBoxNote->"406"],
       StyleBox["406", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[406, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.25, 0}, {0.3, 436.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{123.46407011973213`, 138.29030383397625`}, {
           83.4065919597125, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 436]& ,
        TagBoxNote->"436"],
       StyleBox["436", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[436, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.3, 0}, {0.35, 298.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{137.79030383397625`, 152.61653754822038`}, {
           85.2956752385191, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 298]& ,
        TagBoxNote->"298"],
       StyleBox["298", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[298, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.35, 0}, {0.4, 467.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{152.11653754822038`, 166.9427712624645}, {
           82.98223267244435, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 467]& ,
        TagBoxNote->"467"],
       StyleBox["467", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[467, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.4, 0}, {0.45, 430.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{166.4427712624645, 181.2690049767086}, {
           83.48872601531278, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 430]& ,
        TagBoxNote->"430"],
       StyleBox["430", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[430, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.45, 0}, {0.5, 748.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{180.7690049767086, 195.59523869095273`}, {
           79.1356210684976, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 748]& ,
        TagBoxNote->"748"],
       StyleBox["748", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[748, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.5, 0}, {0.55, 399.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{195.09523869095273`, 209.92147240519685`}, {
           83.91308530258094, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 399]& ,
        TagBoxNote->"399"],
       StyleBox["399", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[399, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.55, 0}, {0.6, 249.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{209.42147240519685`, 224.24770611944095`}, {
           85.96643669258809, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 249]& ,
        TagBoxNote->"249"],
       StyleBox["249", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[249, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.6, 0}, {0.65, 199.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{223.74770611944095`, 238.5739398336851}, {
           86.65088715592381, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 199]& ,
        TagBoxNote->"199"],
       StyleBox["199", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[199, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.65, 0}, {0.7, 162.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{238.0739398336851, 252.9001735479292}, {
           87.15738049879225, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 162]& ,
        TagBoxNote->"162"],
       StyleBox["162", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[162, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.7, 0}, {0.75, 126.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{252.4001735479292, 267.2264072621733}, {
           87.65018483239398, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 126]& ,
        TagBoxNote->"126"],
       StyleBox["126", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[126, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.75, 0}, {0.8, 73.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{266.7264072621733, 281.5526409764175}, {
           88.37570232352984, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 73]& ,
        TagBoxNote->"73"],
       StyleBox["73", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[73, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.8, 0}, {0.85, 94.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{281.0526409764175, 295.8788746906616}, {
           88.08823312892883, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 94]& ,
        TagBoxNote->"94"],
       StyleBox["94", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[94, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.85, 0}, {0.9, 86.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{295.3788746906616, 310.2051084049057}, {
           88.19774520306254, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 86]& ,
        TagBoxNote->"86"],
       StyleBox["86", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[86, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.9, 0}, {0.95, 69.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{309.7051084049057, 324.53134211914977`}, {
           88.43045836059669, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 69]& ,
        TagBoxNote->"69"],
       StyleBox["69", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[69, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{0.95, 0}, {1., 19.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{324.03134211914977`, 338.8575758333939}, {
           89.11490882393241, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 19]& ,
        TagBoxNote->"19"],
       StyleBox["19", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[19, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        TagBox[
         DynamicBox[{
           FEPrivate`If[
            CurrentValue["MouseOver"], 
            EdgeForm[{
              GrayLevel[0.5], 
              AbsoluteThickness[1.5], 
              Opacity[0.66]}], {}, {}], 
           RectangleBox[{1., 0}, {1.05, 2397.}, "RoundingRadius" -> 0]},
          
          ImageSizeCache->{{338.3575758333939, 353.1838095476381}, {
           56.56244478768552, 89.87499999999999}}],
         "DelayedMouseEffectStyle"],
        StatusArea[#, 2397]& ,
        TagBoxNote->"2397"],
       StyleBox["2397", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2397, {}], 
       "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.07200000000000001, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-0.05, 1.05}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.868598587213368*^9, 3.868598595534347*^9}, 
   3.8685995277293787`*^9, 3.868600221413623*^9, 3.868602949041443*^9, 
   3.868604296907655*^9, 3.8686706335951767`*^9, 3.868672097574623*^9, 
   3.868681481840914*^9, 3.868947735099625*^9, 3.868948276385453*^9, 
   3.868959188370422*^9, 3.868961360146255*^9, 3.868963094406687*^9, 
   3.868965910434655*^9, 3.8690319681917677`*^9, 3.869034213800087*^9, 
   3.8690403778000517`*^9, 3.869042975607337*^9, 3.869043303143322*^9, 
   3.8691056830996943`*^9, 3.869107210252901*^9, 3.8692115670096397`*^9},
 CellLabel->
  "Out[425]=",ExpressionUUID->"dcf617e1-666a-4ea3-80b4-7ca21dd80c85"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 779, 16, 29, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1601, 48, 202, 3, 29, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1806, 53, 28339, 631, 313, "Output",ExpressionUUID->"74597de4-2dc4-487b-b151-4a7edeb6169d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30182, 689, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[30411, 697, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[30879, 708, 127693, 2373, 652, "Output",ExpressionUUID->"f5e09500-4f17-4b40-ba88-1e46fd210c2d"]
}, Open  ]],
Cell[158587, 3084, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167117, 3291, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[167437, 3298, 2756, 68, 154, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[170196, 3368, 1775, 41, 195, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[172008, 3414, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[172366, 3422, 4997, 81, 133, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[177366, 3505, 1445, 27, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[178814, 3534, 1095, 25, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179946, 3564, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[180304, 3572, 2088, 38, 133, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182429, 3615, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[182888, 3624, 2099, 42, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[185012, 3670, 1078, 19, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[186093, 3691, 630957, 11305, 495, "Output",ExpressionUUID->"56447ecc-6726-459a-b59b-3d49e91f436f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[817099, 15002, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[817609, 15012, 923, 16, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[CellGroupData[{
Cell[818557, 15032, 1242, 22, 51, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[819802, 15056, 2721, 55, 62, "Output",ExpressionUUID->"8b338782-00e0-41c6-8b1f-8f23224cb63a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[822560, 15116, 1152, 27, 51, "Input",ExpressionUUID->"431bf369-571a-4438-9ea5-687fe2d08638"],
Cell[823715, 15145, 2544, 53, 62, "Output",ExpressionUUID->"a5624ab5-f6d2-40d4-9109-fcfc41224f4d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[826296, 15203, 574, 15, 32, "Input",ExpressionUUID->"30f555f6-ae5b-4dfd-bdc5-755388129f83"],
Cell[826873, 15220, 496, 9, 44, "Output",ExpressionUUID->"bc2c9fad-4096-4d7c-8415-27b617ee8032"]
}, Open  ]],
Cell[827384, 15232, 424, 8, 29, "Input",ExpressionUUID->"e6885692-13f6-4974-9b2c-afe8fa234cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[827845, 15245, 412, 6, 69, "Chapter",ExpressionUUID->"85881d34-aa2c-47a4-9cef-231d0c092462"],
Cell[CellGroupData[{
Cell[828282, 15255, 702, 15, 29, "Input",ExpressionUUID->"0aed3bad-4fce-478f-b2bd-61ab2c146048"],
Cell[828987, 15272, 215647, 3688, 68, "Output",ExpressionUUID->"7e62337d-f359-405a-85fd-f89435da78b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1044671, 18965, 346, 7, 29, "Input",ExpressionUUID->"210cf671-ac61-409b-9991-3376e561b207"],
Cell[1045020, 18974, 313627, 5620, 495, "Output",ExpressionUUID->"40ec1740-bead-44e2-ae52-1470de3bd0e9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1358684, 24599, 368, 7, 29, "Input",ExpressionUUID->"b9f96706-1adc-45ac-abbd-80f2fee1da04"],
Cell[1359055, 24608, 377, 8, 67, "Output",ExpressionUUID->"e52445c1-8265-45b5-88f1-540c6df7324f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1359481, 24622, 541, 8, 69, "Chapter",ExpressionUUID->"d293971e-29a8-48c6-9378-634a3d38a3fe"],
Cell[1360025, 24632, 322, 8, 29, "Input",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],
Cell[CellGroupData[{
Cell[1360372, 24644, 281, 6, 29, "Input",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],
Cell[1360656, 24652, 16902, 495, 254, "Output",ExpressionUUID->"dcf617e1-666a-4ea3-80b4-7ca21dd80c85"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

