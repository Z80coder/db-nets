(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1069260,      20670]
NotebookOptionsPosition[   1064887,      20588]
NotebookOutlinePosition[   1065325,      20605]
CellTagsIndexPosition[   1065282,      20602]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Learning tabular data", "Title",
 CellChangeTimes->{{3.864793590384657*^9, 3.864793591864854*^9}, {
  3.86842606656143*^9, 
  3.8684260746987667`*^9}},ExpressionUUID->"e16c6739-4a62-4e56-b75b-\
c3030d8dbab8"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  RowBox[{"\"\<neural-logic.m\>\"", ",", 
   RowBox[{"Path", "->", 
    RowBox[{"SetDirectory", "[", 
     RowBox[{
      RowBox[{"ParentDirectory", "[", 
       RowBox[{"NotebookDirectory", "[", "]"}], "]"}], "<>", 
      "\"\</prototype\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.868007248648005*^9, {3.8680967888160133`*^9, 3.868096789366823*^9}, {
   3.8683400413446283`*^9, 3.86834004226679*^9}, {3.868341129383319*^9, 
   3.868341129948553*^9}, {3.868434777777341*^9, 3.868434779191018*^9}, {
   3.868604559041458*^9, 3.868604559653843*^9}, {3.868937073460001*^9, 
   3.868937074141531*^9}},
 CellLabel->
  "In[313]:=",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "neurallogic`*"}]], "Input",
 CellChangeTimes->{{3.864791111748754*^9, 3.8647911154679937`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["neurallogic`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["DifferentiableHardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "DifferentiableHardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardeningLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardeningLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "NeuralOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "DifferentiableHardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetTransformWeights", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetTransformWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralReshapeLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralReshapeLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["RandomBalancedNormalSoftBits", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "RandomBalancedNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["DifferentiableHardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "DifferentiableHardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomNormalSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "RandomNormalSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["ExtractWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "ExtractWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanExpression", "InformationGridButton"],
                 
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetBooleanExpression", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralChain", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralChain", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["RandomUniformSoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "RandomUniformSoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetNetArrays", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "GetNetArrays", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetBooleanFunction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetBooleanFunction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralCount", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralCount", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Require", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "Require", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["GetWeights", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "GetWeights", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralExactlyK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralExactlyK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeBalanced", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "InitializeBalanced", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SoftBits", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "SoftBits", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassify", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassify", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralLTEK", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralLTEK", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToOne", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "InitializeNearToOne", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["Soften", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "Soften", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic]},
               {
                ButtonBox[
                 StyleBox["HardClassificationLoss", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardClassificationLoss", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassifyEvaluation", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassifyEvaluation", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralMajority", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralMajority", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeNearToZero", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "InitializeNearToZero", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["HardClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassPrediction", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassPrediction", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralNAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["InitializeToConstant", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "InitializeToConstant", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["HardDropoutLayer", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardDropoutLayer", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 
                 StyleBox["HardNetClassProbabilities", 
                  "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassProbabilities", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOR", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralNOR", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["LogisticClip", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "LogisticClip", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""},
               {
                ButtonBox[
                 StyleBox["Harden", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "Harden", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNetClassScores", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNetClassScores", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["HardNeuralNOT", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "HardNeuralNOT", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["NeuralAND", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-6a971399-26fb-4896-bc10-da5389308e87", {
                   "NeuralAND", "neurallogic`"}, False},
                 ButtonNote->"neurallogic`",
                 Evaluator->Automatic], ""}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{
  3.86479111604138*^9, 3.8647911657240562`*^9, 3.864791620800887*^9, 
   3.86479194597997*^9, 3.86479198092934*^9, 3.864792204697258*^9, 
   3.864792687703233*^9, 3.864793105592959*^9, 3.864793526801218*^9, 
   3.864793732850697*^9, 3.864794507927494*^9, 3.864796071752219*^9, 
   3.864825438485825*^9, 3.864825531891514*^9, 3.8648260962141314`*^9, 
   3.864830162877289*^9, 3.8648755408909893`*^9, 3.865049480919162*^9, 
   3.865050046751976*^9, 3.865051042066378*^9, 3.8650523426134*^9, 
   3.8650543558693867`*^9, 3.865058337414798*^9, 3.8650584086343327`*^9, 
   3.86505947338*^9, 3.86506885830449*^9, 3.865397062515942*^9, 
   3.86539822002991*^9, 3.865414037240362*^9, 3.865415448442546*^9, 
   3.865415610582356*^9, 3.8654172214829617`*^9, 3.865417469191354*^9, 
   3.865419590403018*^9, 3.865420075554387*^9, 3.865428054175325*^9, 
   3.8654793173710623`*^9, 3.8655665906709213`*^9, 3.865591995941038*^9, 
   3.865658579968223*^9, 3.865772215681147*^9, 3.865779562552833*^9, 
   3.8658370145359364`*^9, 3.86584060155225*^9, 3.8659992094486027`*^9, 
   3.866003652107215*^9, 3.8660161651613417`*^9, 3.8661754677644978`*^9, 
   3.866258657623454*^9, 3.866285693609187*^9, 3.86635057486532*^9, 
   3.866512485808078*^9, 3.866512816932197*^9, 3.866553529720395*^9, 
   3.8666025113336687`*^9, 3.866606144536639*^9, 3.866608546326232*^9, 
   3.866609704076623*^9, 3.8666137219288273`*^9, 3.86671285229326*^9, 
   3.866788776837541*^9, 3.866788812552528*^9, 3.866794689702251*^9, 
   3.8667979035574636`*^9, 3.8667996941084146`*^9, 3.866800686995532*^9, 
   3.866801936715271*^9, 3.866865563143631*^9, 3.8671595128431797`*^9, 
   3.867322056244096*^9, 3.8674794507502613`*^9, 3.8675828633257*^9, 
   3.867669743397482*^9, 3.867732450434094*^9, 3.867751859422694*^9, 
   3.867752571591299*^9, 3.867811509870346*^9, 3.8678117360040903`*^9, 
   3.8678203831872883`*^9, 3.867843695133718*^9, 3.867850373374954*^9, 
   3.86800725388065*^9, 3.868015027015581*^9, 3.868070609148181*^9, 
   3.8680707782820997`*^9, 3.868071504515008*^9, 3.868078566976554*^9, 
   3.868079276409031*^9, 3.8680936161674767`*^9, 3.868332595482695*^9, 
   3.868343297990016*^9, {3.868434780605877*^9, 3.86843479524651*^9}, 
   3.868445566107071*^9, 3.868519876174618*^9, 3.86853009787873*^9, 
   3.868533409155756*^9, 3.868591470469123*^9, 3.868591573510869*^9, 
   3.8686703712738132`*^9, 3.868674802626226*^9, 3.868944309055069*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"8e0777b3-a7ff-408d-93a4-c379a9067373"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get data", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 
  3.868426122274289*^9}},ExpressionUUID->"3104f7e3-d1cf-444c-857d-\
f3d3d76d7c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ResourceData", "[", "\"\<663653b1-6151-48ad-b693-3ee813b191c6\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8684261284499598`*^9, 3.8684261339874697`*^9}, {
   3.868426165551331*^9, 3.868426166147992*^9}, {3.868443501655848*^9, 
   3.868443511617087*^9}, {3.868445089535833*^9, 3.8684450898384523`*^9}, 
   3.8684475343091707`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    TagBox[
     DynamicModuleBox[{
      TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
        "InitialData" -> 
         TypeSystem`CacheKey[
          11075714196407037080580183225774366732531148768773845082424], 
         "AllowEmbedding" -> True, "InitialShape" -> 
         TypeSystem`PackageScope`HeaderShape[<|{All, "PurchasePrice"} -> 
            1, {All, "MaintenanceCost"} -> 1, {All, "Doors"} -> 
            1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 1, {All, "Safety"} -> 
            1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Meta" -> <|"Origin" -> HoldComplete[
             Query[
             All, <|"PurchasePrice" -> "buying", "MaintenanceCost" -> "maint",
                "Doors" -> "doors", "Passengers" -> "persons", "Cargo" -> 
               "lug_boot", "Safety" -> "safety", "Acceptability" -> "class"|>][
              Dataset`DatasetHandle[178146775813870]]], "ID" -> 
           244164718120686|>, "RowTarget" -> 20, "ColumnTarget" -> 10, 
         "Shape" -> TypeSystem`PackageScope`HeaderShape[<|{
             All, "PurchasePrice"} -> 1, {All, "MaintenanceCost"} -> 
            1, {All, "Doors"} -> 1, {All, "Passengers"} -> 1, {All, "Cargo"} -> 
            1, {All, "Safety"} -> 1, {All, "Acceptability"} -> 1|>, 
           TypeSystem`PackageScope`Limited[
            TypeSystem`PackageScope`ColumnShape[
             TypeSystem`PackageScope`Limited[
              
              TypeSystem`PackageScope`RowShape[<|
               "PurchasePrice" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "MaintenanceCost" -> TypeSystem`PackageScope`AtomShape[94.5], 
                "Doors" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Passengers" -> TypeSystem`PackageScope`UnknownShape[False], 
                "Cargo" -> TypeSystem`PackageScope`AtomShape[63.], "Safety" -> 
                TypeSystem`PackageScope`AtomShape[63.], "Acceptability" -> 
                TypeSystem`PackageScope`AtomShape[126.]|>], 
              DirectedInfinity[1], 7, {All}]], 20, 
            DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
           
           TypeSystem`Struct[{
            "PurchasePrice", "MaintenanceCost", "Doors", "Passengers", 
             "Cargo", "Safety", "Acceptability"}, {
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium", "very high"]], 
             TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[
              TypeSystem`Enumeration["large", "medium", "small"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration["high", "low", "medium"]], 
             TypeSystem`Atom[
              TypeSystem`Enumeration[
              "acceptable", "good", "unacceptable", "very good"]]}], 1728], 
         "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 7,
          "DataRowCount" -> 1728, "DataColumnCount" -> 7, "SortPaths" -> {}, 
         "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 
         1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
       TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
       DynamicModule[{
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
            Style[
             Grid[{{
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["PurchasePrice", 
                    Style[
                    "PurchasePrice", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "PurchasePrice"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "PurchasePrice"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["MaintenanceCost", 
                    Style[
                    "MaintenanceCost", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "MaintenanceCost"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "MaintenanceCost"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Doors", 
                    Style[
                    "Doors", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Doors"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Doors"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Passengers", 
                    Style[
                    "Passengers", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Passengers"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Passengers"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Cargo", 
                    Style[
                    "Cargo", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Cargo"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Cargo"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Safety", 
                    Style[
                    "Safety", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Safety"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Safety"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                Item[
                 Pane[
                  Annotation[
                   EventHandler[
                    MouseAppearance[
                    Mouseover["Acceptability", 
                    Style[
                    "Acceptability", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Acceptability"}, 1]]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                    All, "Acceptability"}, "ColumnHeader", True], "Mouse"], 
                  ImageSize -> {{1, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                 GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["4"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["large", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["low", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["PurchasePrice"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["very high", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["MaintenanceCost"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{94.5, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes["2"], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Doors"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{34, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation[
                   RawBoxes[
                    StyleBox[
                    RowBox[{"Interval", "[", 
                    RowBox[{"{", 
                    RowBox[{"5", ",", "\[Infinity]"}], "}"}], "]"}], 
                    FontFamily -> Dynamic[
                    CurrentValue[{"StyleHints", "CodeFont"}]], 
                    ShowStringCharacters -> True]], 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Passengers"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{60, Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["small", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Cargo"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["medium", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Safety"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{63., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}], 
                Item[
                 Pane[
                  Annotation["unacceptable", 
                   TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                    Key["Acceptability"]}, "Item", False], "Mouse"], 
                  ImageSize -> {{126., Full}, Automatic}, 
                  ImageMargins -> {{5, 3}, {4, 5}}], 
                 ItemSize -> {Full, Automatic}]}, {
                Item[
                 Deploy[
                  Pane[
                   Row[{
                    Spacer[2], 
                    Style[
                    Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 1728, 1], {1, 1728 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[1728, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 1728, 1], {1, 1728 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
                   ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
                 RGBColor[
                  0.9764705882352941, 0.9764705882352941, 0.9764705882352941],
                  Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
                SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
              BaseStyle -> {
               ContextMenu -> 
                Dynamic[
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
                "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
              Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
              Spacings -> {0, 0}, Alignment -> Left, 
              BaseStyle -> {
               FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
                Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
             NumberMarks -> False, ShowAutoStyles -> False]], 
          TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
         Dynamic[
          TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
             Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
             
             Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
               TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
               TypeSystem`NestedGrid`PackagePrivate`datasetData[
                TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                 TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                 TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                 TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                Not[
                 FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
           TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
           TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
             TypeSystem`SparseGrid[
              TypeSystem`H["(data no longer present)"]], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
          TrackedSymbols :> {
           TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
         DynamicModuleValues :> {}], 
       TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
         TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
          TypeSystem`PackageScope`SubViewPathbar[
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
           TypeSystem`NestedGrid`PackagePrivate`updateState[
           TypeSystem`NestedGrid`PackagePrivate`$state$$, 
            TypeSystem`NestedGrid`PackagePrivate`$path$$, 
            TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
            TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
         TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
       TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
         Framed[
          Dynamic[
           Replace[
           TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
            TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
               Blank[]] -> "", 
             TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               TypeSystem`NestedGrid`PackagePrivate`localHold[
               TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                Blank[]], 
               Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                Blank[]]] :> (
              Increment[
               TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
               TypeSystem`NestedGrid`PackagePrivate`path$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
               TypeSystem`NestedGrid`PackagePrivate`pathType$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
               TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
              TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
               TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
              TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
               TypeSystem`NestedGrid`PackagePrivate`path$, 
                TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
             Spacer[10], Blank[] :> Spacer[10]}], 
           TrackedSymbols :> {
            TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
          FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
          Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}, 
      DynamicWrapperBox[
       DynamicBox[
        ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
         StandardForm], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[]], 
      Initialization :> (TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]), DynamicModuleValues :> {}, 
      BaseStyle -> {LineBreakWithin -> False}, 
      UnsavedVariables :> {TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
      Deploy, DefaultBaseStyle -> "Deploy"]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("Dataset[<>]"& )],
  False,
  BoxID -> 11075714196407037080580183225774366732531148768773845082424,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.868447534840249*^9, 3.8684985354123583`*^9, 
  3.868519879764835*^9, 3.8685300999400797`*^9, 3.868533465833148*^9, 
  3.868591722379105*^9, 3.868670373439299*^9, 3.868944316441147*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"97e716f5-e291-4891-968e-b1b7f7b73be3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"trainData", ",", "testData"}], "}"}], "=", 
   RowBox[{
    InterpretationBox[
     TagBox[
      DynamicModuleBox[{Typeset`open = False}, 
       FrameBox[
        PaneSelectorBox[{False->GridBox[{
           {
            PaneBox[GridBox[{
               {
                StyleBox[
                 StyleBox[
                  AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                   BoxBaselineShift->-0.25,
                   BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                  
                  FontColor->RGBColor[
                   0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                 ShowStringCharacters->False,
                 FontFamily->"Source Sans Pro Black",
                 FontSize->0.6538461538461539 Inherited,
                 FontWeight->"Heavy",
                 PrivateFontOptions->{"OperatorSubstitution"->False}], 
                StyleBox[
                 RowBox[{
                  StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                 ShowAutoStyles->False,
                 ShowStringCharacters->False,
                 FontSize->Rational[12, 13] Inherited,
                 FontColor->GrayLevel[0.1]]}
              },
              GridBoxSpacings->{"Columns" -> {{0.25}}}],
             Alignment->Left,
             BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
             BaselinePosition->Baseline,
             FrameMargins->{{3, 0}, {0, 0}}], 
            ItemBox[
             PaneBox[
              TogglerBox[Dynamic[Typeset`open], {True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeCloser"],
                ImageSizeCache->{11., {1., 10.}}], False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "IconizeOpener"],
                ImageSizeCache->{11., {1., 10.}}]},
               Appearance->None,
               BaselinePosition->Baseline,
               ContentPadding->False,
               FrameMargins->0],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{1, 1}, {0, 0}}],
             Frame->{{
                RGBColor[
                0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                 0.5], False}, {False, False}}]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
         GridBox[{
           {GridBox[{
              {
               PaneBox[GridBox[{
                  {
                   StyleBox[
                    StyleBox[
                    AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    ShowStringCharacters->False,
                    FontFamily->"Source Sans Pro Black",
                    FontSize->0.6538461538461539 Inherited,
                    FontWeight->"Heavy",
                    PrivateFontOptions->{"OperatorSubstitution"->False}], 
                   StyleBox[
                    RowBox[{
                    StyleBox["TrainTestSplit", "ResourceFunctionLabel"], " "}],
                    ShowAutoStyles->False,
                    ShowStringCharacters->False,
                    FontSize->Rational[12, 13] Inherited,
                    FontColor->GrayLevel[0.1]]}
                 },
                 GridBoxSpacings->{"Columns" -> {{0.25}}}],
                Alignment->Left,
                BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
                BaselinePosition->Baseline,
                FrameMargins->{{3, 0}, {0, 0}}], 
               ItemBox[
                PaneBox[
                 TogglerBox[Dynamic[Typeset`open], {True->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeCloser"]], False->
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "FEBitmaps", "IconizeOpener"]]},
                  Appearance->None,
                  BaselinePosition->Baseline,
                  ContentPadding->False,
                  FrameMargins->0],
                 Alignment->Left,
                 BaselinePosition->Baseline,
                 FrameMargins->{{1, 1}, {0, 0}}],
                Frame->{{
                   RGBColor[
                   0.8313725490196079, 0.8470588235294118, 0.8509803921568627,
                     0.5], False}, {False, False}}]}
             },
             BaselinePosition->{1, 1},
             GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
             GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
           {
            StyleBox[
             PaneBox[GridBox[{
                {
                 RowBox[{
                  TagBox["\<\"Version (latest): \"\>",
                   "IconizedLabel"], " ", 
                  TagBox["\<\"1.0.0\"\>",
                   "IconizedItem"]}]},
                {
                 TagBox[
                  
                  TemplateBox[{
                   "\"Documentation \[RightGuillemet]\"", 
                    "https://resources.wolframcloud.com/FunctionRepository/\
resources/a34a1447-6c23-486c-b454-6e05993a545e/"},
                   "HyperlinkURL"],
                  "IconizedItem"]}
               },
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              Alignment->Left,
              BaselinePosition->Baseline,
              FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
             FontFamily->"Roboto",
             FontSize->11]}
          },
          BaselinePosition->{1, 1},
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
               GrayLevel[0.8]}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
         Typeset`open],
         BaselinePosition->Baseline,
         ImageSize->Automatic],
        Background->RGBColor[
         0.9686274509803922, 0.9764705882352941, 0.984313725490196],
        BaselinePosition->Baseline,
        DefaultBaseStyle->{},
        FrameMargins->{{0, 0}, {1, 0}},
        FrameStyle->RGBColor[
         0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
        RoundingRadius->4]],
      {"FunctionResourceBox", 
       RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
       "TrainTestSplit"},
      TagBoxNote->"FunctionResourceBox"],
     ResourceFunction[
      ResourceObject[<|
       "Name" -> "TrainTestSplit", "ShortName" -> "TrainTestSplit", "UUID" -> 
        "a34a1447-6c23-486c-b454-6e05993a545e", "ResourceType" -> "Function", 
        "Version" -> "1.0.0", "Description" -> 
        "Split data into training and testing sets", "RepositoryLocation" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
        "SymbolName" -> 
        "FunctionRepository`$b9ece19f331b48bdb8cc57c2aceeaede`TrainTestSplit",
         "FunctionLocation" -> 
        CloudObject[
         "https://www.wolframcloud.com/obj/f537c689-a756-4eaf-b897-\
cf34330f7f7b"]|>, {
       ResourceSystemBase -> 
        "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
     Selectable->False], "[", 
    RowBox[{"data", ",", 
     RowBox[{"\"\<TestSetSize\>\"", "->", 
      RowBox[{"Scaled", "[", "0.2", "]"}]}], ",", 
     RowBox[{"\"\<Shuffle\>\"", "->", "True"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.868445433613286*^9},
 CellLabel->"In[4]:=",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create feature encoders", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 
  3.86843398679764*^9}},ExpressionUUID->"fc79f348-c5f7-48d3-80d6-\
e4dab5b13de8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoders", "[", "data_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"features", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"Keys", "@", 
         RowBox[{"First", "[", "data", "]"}]}], "]"}]}], ",", 
      "featureValues"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"featureValues", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", 
          RowBox[{"Normal", "[", 
           RowBox[{"DeleteDuplicates", "[", 
            RowBox[{"data", "[", 
             RowBox[{"All", ",", "#"}], "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@",
        "features"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Association", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "#", "]"}], "->", 
         RowBox[{"NetEncoder", "[", 
          RowBox[{"{", 
           RowBox[{"\"\<Class\>\"", ",", 
            RowBox[{"Last", "[", "#", "]"}], ",", "\"\<IndicatorVector\>\""}],
            "}"}], "]"}]}], "&"}], "/@", "featureValues"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoders", "=", 
   RowBox[{"Encoders", "[", "trainData", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"inputSize", "=", 
   RowBox[{"Total", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", 
       RowBox[{"#", "[", "\"\<Output\>\"", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"Normal", "/@", 
      RowBox[{"Values", "[", 
       RowBox[{"Drop", "[", 
        RowBox[{"encoders", ",", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classes", "=", 
   RowBox[{"Normal", "[", 
    RowBox[{"DeleteDuplicates", "[", 
     RowBox[{"data", "[", 
      RowBox[{"All", ",", "\"\<Acceptability\>\""}], "]"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.868426687511053*^9, 3.868426801572831*^9}, {
   3.8684269173036003`*^9, 3.8684269578937387`*^9}, {3.8684269966730623`*^9, 
   3.868427061846773*^9}, {3.868427135120562*^9, 3.868427173055786*^9}, {
   3.868427218784813*^9, 3.868427313389267*^9}, {3.868427822986774*^9, 
   3.8684278511841917`*^9}, {3.8684280835200367`*^9, 3.868428089883707*^9}, {
   3.868428156521447*^9, 3.8684281614416733`*^9}, {3.8684281955955667`*^9, 
   3.868428284555341*^9}, 3.868434324643379*^9, {3.868434449433856*^9, 
   3.8684344506731787`*^9}, {3.868437882742872*^9, 3.8684378847594643`*^9}, {
   3.868443521427595*^9, 3.86844353043198*^9}, {3.868445371253304*^9, 
   3.868445422686679*^9}, {3.868682465592621*^9, 3.868682467103612*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"featureLayer", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<Catenate\>\"", "->", 
       RowBox[{"CatenateLayer", "[", "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"First", "[", "#", "]"}], "]"}], "->", "\"\<Catenate\>\""}],
         "&"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "encoders", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<PurchasePrice\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<PurchasePrice\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<MaintenanceCost\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<MaintenanceCost\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Doors\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Doors\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Passengers\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Passengers\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Cargo\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Cargo\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Safety\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Safety\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868511402960554*^9, 3.868511420437525*^9}, {
   3.8685114920935707`*^9, 3.86851156446668*^9}, 3.868511640913454*^9, {
   3.8686824585003*^9, 3.86868246003918*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.86843932450987*^9}},ExpressionUUID->"1674350a-bfdf-4c15-99d4-\
bba009f90f57"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"softNet", ",", "hardNet"}], "}"}], "=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"numClasses", "=", 
        RowBox[{"Length", "[", "classes", "]"}]}], ",", 
       "classificationLayerSize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"classificationLayerSize", "=", 
       RowBox[{"180", "*", "numClasses"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"HardNeuralChain", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"HardNeuralNAND", "[", 
          RowBox[{"inputSize", ",", "classificationLayerSize"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"HardNeuralReshapeLayer", "[", 
          RowBox[{"classificationLayerSize", ",", "numClasses"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868434027583748*^9, 3.868434035787488*^9}, {
   3.8684347252717743`*^9, 3.868434739712077*^9}, {3.8684348123552837`*^9, 
   3.868434889688067*^9}, {3.868436138483499*^9, 3.8684361400155487`*^9}, {
   3.868439429843689*^9, 3.868439430063843*^9}, {3.868439981288126*^9, 
   3.86843999564869*^9}, {3.868440077141582*^9, 3.8684400780122023`*^9}, {
   3.868440461557928*^9, 3.868440463889024*^9}, {3.8684406325500402`*^9, 
   3.868440632800852*^9}, {3.8684407142457123`*^9, 3.868440714673073*^9}, 
   3.8684407820700693`*^9, {3.868441017230885*^9, 3.868441018893251*^9}, {
   3.8684411315833893`*^9, 3.868441133033833*^9}, {3.868518724134651*^9, 
   3.868518725441156*^9}, {3.868518928530555*^9, 3.868518943190036*^9}, {
   3.868519041547244*^9, 3.868519068014036*^9}, {3.868519147675601*^9, 
   3.868519154814497*^9}, {3.868519330700121*^9, 3.868519338754211*^9}, {
   3.868519481675853*^9, 3.868519515993621*^9}, {3.868519704140811*^9, 
   3.8685197412954483`*^9}, {3.8685197864581833`*^9, 3.868519804727289*^9}, {
   3.868520025904859*^9, 3.868520026662962*^9}, {3.868520165374518*^9, 
   3.868520172724663*^9}, {3.868520227657476*^9, 3.8685202280400333`*^9}, {
   3.868520278697311*^9, 3.868520283147401*^9}, {3.8685206145298347`*^9, 
   3.8685206150078983`*^9}, {3.868537004723915*^9, 3.868537005683709*^9}, {
   3.8686716248609867`*^9, 3.86867162498657*^9}, {3.8689423409409943`*^9, 
   3.868942344276237*^9}, {3.868947806296569*^9, 3.868947806625355*^9}, 
   3.868955246204385*^9, {3.868957393208212*^9, 3.8689574013451433`*^9}, {
   3.868957440249872*^9, 3.8689574443738937`*^9}, {3.8689577953130703`*^9, 
   3.868957801168947*^9}, {3.868958026730661*^9, 3.8689580269562798`*^9}, {
   3.868960876079372*^9, 3.8689608783682137`*^9}},
 CellLabel->
  "In[314]:=",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<FeatureLayer\>\"", "->", "featureLayer"}], ",", 
       RowBox[{"\"\<SoftNet\>\"", "->", "softNet"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<FeatureLayer\>\"", "->", "\"\<SoftNet\>\""}], "}"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868436150363471*^9, 3.868436214879616*^9}, {
   3.8684363176157846`*^9, 3.868436401711966*^9}, {3.868436439018614*^9, 
   3.868436449976253*^9}, {3.868436507251442*^9, 3.868436566344318*^9}, {
   3.868436601752877*^9, 3.868436606688592*^9}, {3.8684378203450413`*^9, 
   3.868437848662979*^9}, {3.868438156495153*^9, 3.8684381757432423`*^9}, {
   3.868438230057756*^9, 3.8684382404094887`*^9}, {3.868438312361177*^9, 
   3.868438339094953*^9}, {3.8684384459605*^9, 3.868438454771668*^9}, {
   3.8684385462566147`*^9, 3.8684385862545233`*^9}, {3.8684386245588503`*^9, 
   3.868438717976014*^9}, {3.868438791131241*^9, 3.8684388742400846`*^9}, {
   3.868438957513969*^9, 3.8684389581925077`*^9}, {3.8684390163704367`*^9, 
   3.868439068705132*^9}, {3.868442351137228*^9, 3.868442398109271*^9}, 
   3.8684433338319263`*^9, {3.86844712352503*^9, 3.868447133785776*^9}, {
   3.868511573996563*^9, 3.868511634912119*^9}},
 CellLabel->
  "In[315]:=",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainableNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\"\<Net\>\"", "->", "net"}], ",", 
       RowBox[{"\"\<Loss\>\"", "->", 
        RowBox[{"HardClassificationLoss", "[", "]"}]}]}], 
      "\[RightAssociation]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Acceptability\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<Loss\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
       RowBox[{"\"\<Net\>\"", "->", "\"\<Loss\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Acceptability\>\"", "->", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684424197508583`*^9, 3.868442462956246*^9}, 
   3.8684433239111013`*^9, {3.868447095425324*^9, 3.868447102608048*^9}},
 CellLabel->
  "In[316]:=",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Train net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 
  3.868439333949903*^9}},ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-\
772879a58a20"],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{
    "trainableNet", ",", "trainData", ",", "All", ",", "\[IndentingNewLine]", 
     
     RowBox[{"ValidationSet", "\[Rule]", "testData"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"LossFunction", "->", "\"\<Loss\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Method", "->", 
      RowBox[{"{", "\"\<ADAM\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"BatchSize", "->", "Automatic"}], ",", "\[IndentingNewLine]", 
     RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "20000"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.8684393523282022`*^9, {3.868440869499402*^9, 3.86844087371313*^9}, {
   3.8684411260993*^9, 3.868441126210587*^9}, {3.868442499709556*^9, 
   3.8684425018843727`*^9}, {3.868446172833139*^9, 3.868446186731524*^9}, {
   3.8685364797630873`*^9, 3.868536496883217*^9}, {3.868600076169417*^9, 
   3.868600076637474*^9}, {3.868600134889481*^9, 3.868600135284954*^9}, {
   3.868601255470386*^9, 3.8686012558943872`*^9}, {3.868602902814464*^9, 
   3.868602903232891*^9}, {3.868943377521962*^9, 3.868943381357031*^9}, {
   3.8689434141572866`*^9, 3.868943425164989*^9}, {3.868943586951866*^9, 
   3.8689436089616327`*^9}, {3.868944023717293*^9, 3.8689440271979637`*^9}, {
   3.868944083020088*^9, 3.868944086825481*^9}, {3.868947817163151*^9, 
   3.8689478172894077`*^9}, {3.868949946458611*^9, 3.868949960076432*^9}},
 CellLabel->
  "In[317]:=",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate soft net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 
  3.868447037389845*^9}},ExpressionUUID->"b925ae5d-4091-4d4b-a37f-\
d801edc11fc9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainedSoftNet", "=", 
   RowBox[{"NetGraph", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{"\"\<TrainedNet\>\"", "->", 
       RowBox[{"NetDelete", "[", 
        RowBox[{
         RowBox[{"NetFlatten", "[", 
          RowBox[{"result", "[", "\"\<TrainedNet\>\"", "]"}], "]"}], ",", 
         "\"\<Loss/Error\>\""}], "]"}]}], "\[RightAssociation]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868441715962099*^9, 3.868441726772949*^9}, {
   3.868442062468679*^9, 3.868442075018716*^9}, {3.868442527005735*^9, 
   3.86844256484381*^9}, {3.868442825916274*^9, 3.868442879501833*^9}, {
   3.868442927862575*^9, 3.868442930140501*^9}, {3.868442994108386*^9, 
   3.868442997385559*^9}, {3.868443171305544*^9, 3.868443172008521*^9}, {
   3.868443210207801*^9, 3.86844327444496*^9}, {3.868443832176667*^9, 
   3.868443841549613*^9}, {3.868443968480337*^9, 3.86844397610231*^9}, {
   3.868445156069516*^9, 3.868445169542899*^9}, {3.86844548965233*^9, 
   3.8684454911676607`*^9}, {3.868445524601853*^9, 3.868445525318458*^9}, {
   3.8684457755379953`*^9, 3.8684457785428762`*^9}, {3.868445841953512*^9, 
   3.868445843190568*^9}, {3.868446029551764*^9, 3.8684460319907627`*^9}, {
   3.868446204633617*^9, 3.8684462159667997`*^9}, {3.868446498761023*^9, 
   3.868446502318582*^9}, 3.868446990300243*^9, {3.868447023781098*^9, 
   3.868447024311913*^9}},
 CellLabel->
  "In[318]:=",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"trainedSoftNet", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.868441761355565*^9, 3.86844176541033*^9}, {
   3.868442023100346*^9, 3.8684420354226837`*^9}, {3.868444107190956*^9, 
   3.868444110989802*^9}, {3.868444188263138*^9, 3.868444188997357*^9}, {
   3.8684443072021*^9, 3.868444343231183*^9}, {3.86844438017598*^9, 
   3.868444387605728*^9}, {3.868444533736438*^9, 3.868444535818205*^9}, {
   3.868444625239705*^9, 3.868444635677659*^9}, {3.8684447356698933`*^9, 
   3.8684447565897284`*^9}, 3.86844479804601*^9, {3.868445054584428*^9, 
   3.868445061735847*^9}, {3.868447028248465*^9, 3.868447028907001*^9}},
 CellLabel->
  "In[319]:=",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "Net",ExpressionUUID->"e2de0586-9489-45a8-a05b-f67911fd9611"],
                
                TextCell["Net"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"99.1", "0.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.1329479768786114846`3., 0.4991396165558288911`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265187726`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9621478312640041608`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0064815818266125702`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.9491846676107790204`3.", "\", \"", 
                   "0.9751109949172293012`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.9491846676107790204`3., 
                   ", ", 0.9751109949172293012`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0385871693699680399`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0067365248801363464`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", "0.025114119609695347`3.",
                    "\", \"", "0.0520602191302407327`3.", "\"]\""}, 
                  "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.025114119609695347`3., 
                   ", ", 0.0520602191302407327`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"4.32`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"2.24`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNK30nhu66/5a39g9AkHinZ1/ZcNrnhZ9se
k2wOo9U56TDDN/bOc4yXxpx6Yr/iQWvmycPH7ZM/s38XNHlnbyzcwxDO8Nb+
y/rl//blvyBo3sMqkXXuD2/Zw3xKqjkbvx60/2nz1j6kLl9lQdRLew2bVXZq
z+7iVE+q+QC3Cmz2
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["15", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9375`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.967741935483871`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9375}], 
                    Row[{"FScore = ", 0.967741935483871}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["250", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "250", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9960159362549801`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9980039920159681`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{250, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9960159362549801}], 
                    Row[{"FScore = ", 0.9980039920159681}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.014285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.0625`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.014285714285714285`}], 
                    Row[{"Row fraction = ", 0.0625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.014285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.014285714285714285`}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["68", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9714285714285714`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9784172661870503`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{68, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9714285714285714}], 
                    Row[{"Recall = ", 0.9855072463768116}], 
                    Row[{"FScore = ", 0.9784172661870503}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.09090909090909091`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.014492753623188406`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.09090909090909091}], 
                    Row[{"Row fraction = ", 0.014492753623188406`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["10", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9090909090909091`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9523809523809524`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{10, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9090909090909091}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.9523809523809524}]}], "Tooltip"]& ]}, 
                   
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.9375`"}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.9375}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9960159362549801`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9960159362549801}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "69", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{69, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9855072463768116}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "250", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{250, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "70", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9714285714285714`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{70, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9714285714285714}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9090909090909091`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{11, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.9090909090909091}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["16", TraditionalForm]}, {2.5, 
                    FormBox["251", TraditionalForm]}, {1.5, 
                    FormBox["69", TraditionalForm]}, {0.5, 
                    FormBox["10", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["15", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["250", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["70", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["11", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Expression"|>, 
              "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
              "Doors" -> <|"Type" -> "Expression"|>, 
              "Passengers" -> <|"Type" -> "Expression"|>, 
              "Cargo" -> <|"Type" -> "Expression"|>, 
              "Safety" -> <|"Type" -> "Expression"|>|>, 
            "Output" -> <|
             "PurchasePrice" -> <|"Type" -> "Expression"|>, 
              "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
              "Doors" -> <|"Type" -> "Expression"|>, 
              "Passengers" -> <|"Type" -> "Expression"|>, 
              "Cargo" -> <|"Type" -> "Expression"|>, 
              "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
            MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> False,
             "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> <|
          "very good" -> 0.25, "unacceptable" -> 0.25, "acceptable" -> 0.25, 
           "good" -> 0.25|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> 
       MachineLearning`PackageScope`$BatchProcessing, 
       "Model" -> <|
        "Method" -> "Net", "Net" -> 
         NetGraph[<|
           "Type" -> "Graph", 
            "Inputs" -> <|
             "PurchasePrice" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"medium", "low", "very high", "high"}, 
                 "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                 "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                 "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"low", "very high", "high", "medium"}, 
                 "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                 "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                 "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
              NetEncoder["Class", <|"Labels" -> {4, 2, 3, 
                   Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                  "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4, 
                 "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
              NetEncoder["Class", <|"Labels" -> {4, 
                   Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"large", "medium", "small"}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"high", "low", "medium"}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
            "Outputs" -> <|
             "Output" -> 
              NetDecoder[
               "Class", <|
                "Labels" -> {
                  "very good", "unacceptable", "acceptable", "good"}, 
                 "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 4, 
                 "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
            "Nodes" -> <|
             "TrainedNet" -> <|
               "Type" -> "Graph", 
                "Inputs" -> <|"PurchasePrice" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "MaintenanceCost" -> 
                  NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Doors" -> 
                  NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Passengers" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Cargo" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Safety" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                "Nodes" -> <|
                 "Net/SoftNet/1" -> <|
                   "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1:eJy0nAk8VV37948hVCqRJEKZKqJZcvbaoTKFBmmShDSQuRIlEhkyU4YyRMZS
iJKzr0toUJIGleaJRimax9c+z3u8dd/dz30/z//9f/p8+6291rXW2WcN1xr2
dkY6esx3EeZwOD4SPf/NX7nJ0Nt75eYFYuzFqpVukya6CfUEpQw4nHU3bhAB
evZ96U2wjf45bm1iIXkTeINc2tZGbt0uIm755aTJNoKk+nUSLylFsvsyhx7X
8YM8uvGE6zGaQ68w6SRiW92q7Qc2QPO+DJK9Io2avfwg9JtQSRo5g4jqwilw
9/0S0B7DoUsWmTCq0utI0Eoz6BqoA6b6KUTX0BCyFkcwVspO5EzLW3j4MYeK
kswlGmeVsK3sGjy9MB69Cieh6XRLTHs3Fqsi5THy1n5wIPrIks7Vo1mdqClE
u+89gqMUJvLjtXSn8uP72rQwhlFj8WKpBqrEjuyF/d6pKk/A/AmFeoFa2GX0
DkQzFfD7g7Hodk0N1Zpa4eTcFzClvQ8+4HKxy2s6SH6wxPmBxhitdZw34Iwx
bgukkZNjw2NptyKELZMNRzor0IJ41+Mrea0+C3ln59vxYteM4ZUtMeLlLJrP
m3uom1Q5+5AzU815bwes4U0Im8SLebqKZ+K7knfuaDSjqMOht36IhE+HbjNo
XEFamuohpUvS4GxUBS80hEOrX8oGbuM6xnz9O15UmxHZeP4SZZ1VAmKblLlF
Q1LI7jhr0uz6gdRs0iYHJtaAmeE21FI4CO3JkXjiYBgqrg1EbbNAmlUWh/wd
aEOC8WQSF19W2/LjeOvt+OnGHz3hbGoo7vWIxoBB+lTNq0gc9jUONdx+8HbL
3wa9snjieWgmJWzNwG6fQnL22EuqYcpSWL+rFqKE3xCrcfuZ3HfZzGUjdyps
hA1UNUQS0/uL4eO1UeTDu1Ri+/4I7HZqJUcPJJE1x31gz+L3cNaGQye9ecvc
1twPi/LjKeMSGu5vpMBzxX7gVUVQ9fLakCUzBBoeBDDzjs6EXSW6VEayN/Sv
cma2lmTyFNLuwGiHWmZaRB8yR2E4DJoQS3arj8CXBkdg0Xl5Mk17LFrnnwS9
sdsoxzUUcThqhX2C1KDmWBb5evIgN/frAOqduRyW102ntjo+Y3IrxXBFMode
5pcDzcbloPZEnKpSvkNmhrUwQVu4jPJCIL7rC2BO5lOmr5EdiUyoIw4LeMzR
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
bkchxn1pkWx/CvGwpKtrLEmJXccJFYOoiVOVMzidt21pgEUDPl5kTo+Wv8Gs
ZsY02mUg2WZMoKsDZDjTcZP/Z03Vqjf8t+x88+uXpe9w7p+RoBDeO+E6vzBj
JT2Zd4zBmI/4+UAdM21Vgjdf66H2k460vscOvnNOCp7WaknTPNzo1JG2tHGf
iPtY35MCBzzHGXdEXHN9lQKBLt02/AgLzN7gIY23edO8oNZCVLDqaQM1k71E
drLnadLqcgq4qVrwROc91U99RFdX3yL3giQqClMpsNVUKvi3Y1y8b80/fvam
tQvh8wv6+7WL94ap0rWLOfJn/rB2EVtc96drF0Yj1oDbjk1QUVgHy62PQP3d
4zBFH0G2rwyXl1UAY255gEHLfRDudwJqFh4D0QkL+ObxDCx0d8H3yiDYdFkL
nud+g8GPDaCD6XYI7CfiVrbn+QviIP625TI2sUsx21vghgfBEUMmr2PHXmSC
wi4PvuvBdD5+tTZ81j0iLnbnoaGmCodPzJK244TRhvkCvw7/el4so5z8r+bF
z/JKmOAn1yoNhTv8QdAZ+UjqJ9tMy4Mni82g8+uJMDA3EvrWn4LnjXPPFoaz
wGh9KExuNgXu9jsM19NT4VGHBXCx8Jf/VRd0aFgLONnDHuIjRFxNm37QPTkD
qq5Vw3hLM4JZm0gt3o/u3vClmb4eNKpZAA286k9B88wpX7yQhr7wp4G2q6lt
4Wya0mcqGZx0ohG3/Qim2tKQBAdK8VpIOid8pM9ZUGHsyLK2pbN9Uv9y7Bjb
1Us6drRU9P+pscO23BXmdZLhWpw1lnDvr/M3TdpDEybvF3O/jgvnLG/hDSk7
a/jvY+eA+3VjeLBXhltjFYlLXV3AvpUuVC1zkgj7CaU+1n9xb+GEjo9xv1c1
+jxUpyXjVKlby494bI4meZ+8hYPCHqD9t9folNKGFhbL0/IxM/nZRbJUum0P
rh3Xgr7lN6eOoRqcoALS32Bq1L/qm4ni9/Cf2qWi0hy+osciHJq2BAaMFXEj
ttTxlxxj4byRCay4uYc9qjUDW19fWP5qBFvhNsoiZsxNHOov4kJnjYHeBV+Z
QPOBA7hD4h7YIs4ILmVEwoj8nbzaprvY/1sVk51iBxVrV6LHyb3gXz0aND9Y
45TosZhtHAzVJhb8rZ3HLBZp7uQfeJ/gP32Qg/xgVeZq3g1LdWMg2UIHI+Nz
of3IDTjo7DHJJf8KcEhvjYvEEeh54zxbeNAR9WrT8FL2dqjQUsQXZzLYy3db
8IltsXRdTUcugxfIf3kN+nvtxBV9jME1bzPwoauw4q4tHopR40zexEIKrf/B
aOsyabsRwifPe4K56zi4K7cJlORFnNugzeAwS4Y72S4adJJKwVxmNCTLev3I
L6CWH0TNfTqS+8VYcnwVTbZP3GiZdSxpWyRRy7TxFFW9iiblR5LIPpLG3PCg
wT13SancaMbptBlJX3v508gv0RTzOoku7omkwpmtaeCm3eKuhdlgf08Dtscp
wfRtF/iDvV4z2BDJ6lpVgcKEzfyw7oegzP0FW9O5EzxSPWuhnpMAE4uIqb80
k+RaFkpuZubBPLtoKFvxjs/zFnHv5og4vfVmoHhbHhyYEnQ1XYvzp6nAm5XN
QNZlDDQbZc8vXJsG2dO8mFKeDMSXtMXyTcXg+FgFpmUqSondpscd+KxLPdYo
gnGoiHs2thwybMzB+d0N+D7+Fpy3PwE+eAPGlTTarY1e0O/rDSnS37D5/2GL
UzfBXW4+t8r2OnjFn4VqtQlwxk+TW3VQJM3z8UIfQs+pKFdvQ9RzCOXXDZJy
fvVyTtBmHbvShbX9yfFEB+pY2ZZ6aX1Gg9Z6lBpiQ1lLzqF2ZUeyP+lI3T1d
6JuaBe2IFHENl0TcwYctqYl0vrHdB4qR5bai1QutaL9t4xzZJh8LvA2oR4Uc
9Yw+hpNmXkC1Ufq0/Eg5eu2PwLfjzGncMBkaYiKmYl0HPnZSDH/GV8TdOdwF
O1Y7YPv5Ocz6bSDu8tyFLUP3QO8VtWz+kBIMuAL8rCM6fI39eEl+oizrmTcV
X1Vs4Xd2M+FnaLbC+XtDIez1PVx5ez67WrgZ5u+cDB+6FIOH5SnQyEuXIv3t
20Zd2qMElsqGwhTxl0aSIMfoGftyNhPE58phYeN4cPxZLpipiLg1fHOu6dzf
902HhM04sXaAtG8eNt/6U33zQ3kLaFnsLe2bdjO8cHvLIuZ/+TIoDCqB9ZjF
q16YCx6yZXzyzSy+x/AgEDn5waWjRShp8II7tsasQWcKdGst4j7ltOfbmjjy
70q84J02x/fjE2CbrTIkLP3luyJFbp1+4/f/298y/j2Zti1pf6Y27X27mXSu
x1KhxSZ+y4kgOtI2mooCnKkqYiu93e9Li2x7Udr3eVRW1ZFbLr+Jfg1UdeKe
MBkuOseLSl33U3VlNDPeUgMHH1ziefsRuDptC6hVmSKU2+EFzh/SksfBLsMg
/Drbmjm1mZH/zTCarYvJY4eeNcPIyXL8YZsekF7YHAeU+cCy2BxcPdcbet0b
RW27JeGVL2spOcyfRGO0qO0sb9L3DaBli3VJK4PHoZ8+0cWu97BX+Cd0fH8K
27svo35H11P+mYVSRinacN+nyXB67ZdR/qLUf5xzyXauY3/1vZtU9y5/+o7O
/+U7sYBWZjeuKdwn/ilzFtlL44FP+7KCghxxyvXH4q6Bt8SXLSPEX+fdFHvu
tWSpI2vFZx7eFdtBG6Ze/FCsflCGVXdsK73PFfP7Uo3fX/av/5fxuI0c95j7
nzXheznvpf3FbU17sYAhiLila2TEq3u3EQdbpIo3ntISw/0e4vlTmotj7gwS
nw7XEjfllc6hP7YSnzFQF49V3gFHzu8SX84Ohg191cTbwhNRYIumIyfoumgT
3HMtBe0eJ2H3837YZc1hnH0xDNE/EF06bUGjRwdx8zUDfPg4AV9la3BN5wv3
+HX4r9r4UrXsn17r99E98SPvxmk34GiFiFtunQxh4RvAZKSIu9zSB7T3C/9j
+hxab5LhFk1QhSQzHuy8ykD9cDTofrkD83MioOesI/Dq+yV4ONYXPtuIuGvT
JoCPbO6PNf+O1RP+UNbhH3+598/0VZ2rv6yrFozoLPapciVjkKGwmFXkkjmK
1tnYUOTi1dQvcS3ND+lFx8cDbfRdTVaD11CBvi21P7FcyrOTfbhp9j1py7op
5NbZjZLO7aKo7StoolwmdncohcTiGvG0x/tQX+Y5zlKcy92KGodNFF+zEl8c
rUx4WUdsOXoOjjRSws19k3m/yduwuXajXeYWscu78rHLklzeU1OOPudsAZ+u
78Qvh/dj1gXT2DGnOaws7xgrGejFqMKDuY9vxa5VT2dZx9azC4Pz4eCN5sy3
40m2+5oOU3H95b3EGV0Z7kWUI2sic1Eb7u3wBJShTJztOhu3LavEhW2HoE6L
SjzhbsOXtjuJ2Wbp0rbxbsglFNARXUDtQn/co16JAW+f4mXvDViiWCY91pQv
TsaYQ5+9EJ1GTKBruBf4dTzC9g68zuysLeHNewuYvKiFZLT9WTaoeSQ7FjMK
JHPz+KUXL7OunzP4+RkfANZX8m82vObDRmpA58pRABsmkcLiTzhhx0Jq+WYB
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
fe879g6qxuh3iFDXiF4jmlFY1Y/y+k/b+8d2Bwjf3oNfBQh/1d43z8ziSvIS
OL2+36G5ZgtM6D8WXycw1GLCazghb456vl/hfNM9WJ/0Ej5qSKFXfhPUZV+F
0Ni3cD85CZ6bSaP9kWZYbFEPV689g3ae5ZDlaY9YvR9WzF6FtYUBaNuojMvs
N6Om+zas9OmCs57ngfKdRqQe9+GJXmfsInUW6rWXolqnNaj/yAKnH3oFNo02
VOs5Q6fsX4rHvFP+63WbP6uf0Qd7YrLjUAANLVxFtHCqtRam6TwDXi9uHkZH
Z5aLj3lmhDnRdmqP4eyT28AN0kKHN0b4QdkR5YcKKJ8vVZAIdZU9adCqKTQq
4hT8EfG6Zqs+ig0F/UmnYIxeuFUftQBQFvUELb9kqKj9JpLYqtixdGG4DTc1
8hRYzDgJixXzkGfj/QmU15W/MdjjzUl0cy7GdicTsNezXJRPP4TfpdNw6LMd
OIO2+svFvhj8CrGw8zYUdt2NsaV56LnUBzfNOIlHO7hjuzd9YFl7BZJndxsG
PXwP0i1x7Pf77TBg6GN4Dte4QatDIeR9GlgkecNaqUNwZcVN4WC/vbDm7H24
ac9QF4+7IGVTATb5DSBjqg8PHzL0xndDzvnTTtLOubvwq15lfnHzXCKMduDC
fCdxtZPvsPreD4Wy8Y+tlq5kaFCr/1f9hGHLNnYhS6NuiLwftwiXeoeAh00O
uTy3nFi8/s6pF1lDXEYAKyHzRV/Kq0LROCpJ6yrF0IULfmMLDLzJtlJ/dket
CjvHcwvrfT+F1eltyxZPlyamrB9rmruXHN8byOb1DmV7Vc9lP3YuIuqlVdxL
tTGguseOmK01g63BTkCt/Ihu69hrpb0JYrY4ivbsmCW6ffyJleetL6zRdCXo
qb6VC8rqSE7kfuU0gyg5ml0Ax7rvI/8u1jOst3fbXFvOIEkkifX81Vz7V2Pf
488dfoodXz7Z9Ltx9Fd7/C6fSMGJM31Qs+ttHPCpFn13euG5la/Qath7tLDK
wl4yL8W+Lq88u5dfRlvZyWjkXvu7vKIXDH18/SWuMO9cEPhyC3q4C+iYC1PR
QXsqzjrp2gZv73BbDXv1M8FEAx9UjLXDsrIMOFLVG8+XbcTEyE5I6iZjzHgH
HC3Sgh27d6Ge2UAcda+M/G/5NmpmfcV9nd5uC9hYE0+GyPYAwaMRMMFAirqn
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
+1uOkr8a4/4HwQPpJQ==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{15120}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {15120}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{15120}, NeuralNetworks`RealT]|>|>,
                   "Net/SoftNet/2" -> <|
                   "Type" -> "NetArray", 
                    "Arrays" -> <|"Array" -> CompressedData["
1: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
5QD7UQ==
                    "]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {720}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>|>, 
                  "Net/SoftNet/3" -> <|
                   "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
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

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {15120},
                     "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{15120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{15120}, NeuralNetworks`RealT]|>|>,
                   "Net/SoftNet/4" -> <|
                   "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
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

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {720}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>|>, 
                  "Net/SoftNet/5" -> <|
                   "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{720, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{15120}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{720, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                  "Net/FeatureLayer/Catenate" -> <|
                   "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                  "Net/SoftNet/6" -> <|
                   "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{720, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{720, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                  "Net/SoftNet/7" -> <|
                   "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{720, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>|>, 
                  "Net/SoftNet/8" -> <|
                   "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT], 
                    "Weights" -> 
                    NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>|>, 
                  "Net/SoftNet/9" -> <|
                   "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 180}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4, 180}, 
                    NeuralNetworks`RealT]|>|>, 
                  "Loss/SoftProbs" -> <|
                   "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4, 180}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                  "Loss/SoftmaxLayer" -> <|
                   "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
                "Edges" -> {
                 NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input1"] -> 
                  NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input2"] -> 
                  NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input3"] -> 
                  NeuralNetworks`NetPath["Inputs", "Doors"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input4"] -> 
                  NeuralNetworks`NetPath["Inputs", "Passengers"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input5"] -> 
                  NeuralNetworks`NetPath["Inputs", "Cargo"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Inputs", "Input6"] -> 
                  NeuralNetworks`NetPath["Inputs", "Safety"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/3", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/1", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/4", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/2", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/5", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/3", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/8", "Inputs", "Weights"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/4", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/6", "Inputs", "Weights"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/5", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/6", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/FeatureLayer/Catenate", "Outputs", "Output"],
                   NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/7", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/6", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/8", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/7", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/9", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/8", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftProbs", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Net/SoftNet/9", "Outputs", "Output"], 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftmaxLayer", "Inputs", "Input"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftProbs", "Outputs", "Output"], 
                  NeuralNetworks`NetPath["Outputs", "Output"] -> 
                  NeuralNetworks`NetPath[
                   "Nodes", "Loss/SoftmaxLayer", "Outputs", "Output"]}|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath["Nodes", "TrainedNet", "Inputs", "Cargo"] -> 
              NeuralNetworks`NetPath["Inputs", "Cargo"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "Doors"] -> 
              NeuralNetworks`NetPath["Inputs", "Doors"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "MaintenanceCost"] -> 
              NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "Passengers"] -> 
              NeuralNetworks`NetPath["Inputs", "Passengers"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "PurchasePrice"] -> 
              NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Inputs", "Safety"] -> 
              NeuralNetworks`NetPath["Inputs", "Safety"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet", "Outputs", "Output"]}|>, <|
           "Version" -> "13.1.3", "Unstable" -> False|>], "Processor" -> 
         MachineLearning`MLProcessor["Identity"]|>, 
       "Log" -> <|
        "FunctionMemory" -> 241104, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 8, 16, 28, 12.459063`7.848060367758132}, 
           "Instant", "Gregorian", 1.]|>|>], 
    "TestSet" -> <|
     "Input" -> {{"medium", "high", 3, 4, "large", "medium"}, {
        "medium", "low", 4, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "large", "high"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 2, "small", "high"}, {
        "very high", "low", 2, 4, "medium", "high"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "very high", 2, 4, "medium", "high"}, {
        "very high", "medium", 2, 2, "medium", "high"}, {
        "low", "medium", 4, 2, "large", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "low", 2, 4, "medium", "medium"}, {
        "medium", "high", 4, 4, "small", "medium"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "low", "very high", 3, 2, "large", "medium"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "low", 3, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "medium", 3, 2, "medium", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "high", 3, 4, "small", "high"}, {
        "very high", "very high", 2, 2, "small", "low"}, {
        "high", "low", 4, 2, "medium", "medium"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 4, "large", "high"}, {
        "high", "very high", 4, 2, "large", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "medium", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 3, 4, "small", "low"}, {
        "high", "low", 2, 4, "large", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "high", 3, 4, "medium", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 2, 2, "medium", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 3, 4, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "high", 3, 4, "medium", "low"}, {
        "very high", "low", 4, 2, "large", "medium"}, {
        "very high", "high", 4, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "medium", "high", 3, 4, "small", "high"}, {
        "high", "medium", 3, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "high", 2, 2, "small", "low"}, {
        "medium", "low", 4, 2, "medium", "medium"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 2, "large", "medium"}, {
        "high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "low", 4, 4, "large", "medium"}, {
        "very high", "high", 3, 4, "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "very high", 3, 2, "large", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "very high", "high", 4, 4, "large", "low"}, {
        "high", "low", 2, 2, "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "high", "high", 2, 2, "large", "medium"}, {
        "medium", "high", 2, 4, "small", "high"}, {
        "medium", "medium", 2, 2, "large", "high"}, {
        "low", "medium", 2, 2, "medium", "low"}, {
        "high", "medium", 3, 2, "large", "medium"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 2, 4, "large", "medium"}, {
        "medium", "medium", 2, 4, "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "low", "low", 3, 4, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {
        "medium", "medium", 3, 2, "large", "high"}, {
        "high", "low", 4, 2, "small", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "high", 3, 2, "medium", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "high", 3, 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "medium", 2, 2, "large", "high"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "high", 4, 2, "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "low", 4, 2, "medium", "low"}, {
        "medium", "medium", 4, 4, "large", "high"}, {
        "medium", "medium", 3, 4, "small", "high"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 4, "medium", "low"}, {
        "very high", "medium", 4, 4, "small", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {
        "very high", "medium", 4, 2, "small", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 2, "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 4, "small", "high"}, {
        "very high", "high", 4, 4, "large", "medium"}, {
        "low", "high", 3, 2, "medium", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "low", 4, 4, "large", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "low", 4, 4, "large", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "very high", 2, 4, "small", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "very high", "low", 2, 4, "large", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 4, "large", "medium"}, {
        "very high", "high", 3, 2, "medium", "low"}, {
        "low", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 3, 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 2, 4, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 4, 2, "large", "low"}, {
        "very high", "medium", 3, 2, "small", "high"}, {
        "very high", "very high", 2, 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 2, "small", "high"}, {
        "medium", "medium", 4, 2, "small", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 4, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "medium", 3, 2, "large", "high"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "low", "low", 2, 2, "small", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 2, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 2, "small", "high"}, {
        "low", "high", 4, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "medium", "medium", 2, 2, "large", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 3, 2, "small", "low"}, {
        "high", "medium", 4, 4, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "medium", 3, 2, "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "low", 3, 4, "large", "high"}, {
        "very high", "low", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "high", "medium", 2, 4, "medium", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "very high", 2, 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 3, 4, "medium", "high"}, {
        "low", "medium", 2, 2, "large", "medium"}, {
        "medium", "low", 3, 4, "large", "high"}, {
        "medium", "high", 3, 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 3, 2, "medium", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "very high", "low", 4, 2, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 4, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "low", 2, 2, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "low", 2, 2, "small", "high"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "high", 3, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "high", "high", 3, 2, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "high", 3, 2, "small", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "medium", "very high", 3, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "low", 2, 4, "small", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "medium", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "low", "high", 2, 2, "small", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 4, "large", "low"}, {
        "medium", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {
        "low", "very high", 4, 4, "medium", "low"}, {"very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 3, 4, "large", "low"}, {
        "high", "low", 4, 4, "medium", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "medium", 3, 4, "medium", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "high", 4, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "low", 2, 4, "small", "low"}, {
        "medium", "low", 2, 4, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 2, 2, "small", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "very high", 3, 2, "large", "high"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "high", 2, 2, "medium", "low"}, {
        "high", "high", 2, 4, "medium", "low"}, {
        "high", "low", 4, 4, "medium", "high"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "low", 3, 2, "large", "medium"}, {
        "very high", "high", 3, 4, "large", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 3, 4, "large", "medium"}, {
        "medium", "low", 2, 2, "medium", "high"}, {
        "high", "medium", 2, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "low", "medium", 4, 2, "large", "high"}, {
        "very high", "high", 2, 4, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "low", "medium", 2, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "low"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "low", "high", 2, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}}, 
      "Output" -> {
       "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "good", "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "very good", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "unacceptable", "good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "very good", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "unacceptable",
         "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable"}|>, 
    "Predictions" -> {
     "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "good", "good", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "very good", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", "very good",
       "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "very good", "unacceptable",
       "good", "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "good", "unacceptable", "very good", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", "good", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable"}, "LogProbabilities" -> CompressedData["
1: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
     "], "CountMatrix" -> {{15, 0, 1, 0, 0}, {0, 250, 1, 0, 0}, {0, 0, 68, 1, 
     0}, {0, 0, 0, 10, 0}}, 
    "IndicesMatrix" -> {{{3, 122, 134, 157, 159, 165, 210, 223, 241, 250, 262,
        282, 296, 314, 339}, {}, {94}, {}, {}}, {{}, CompressedData["
1:eJwN0ulrDwAAANCftWF2mB1sxs62GcayDcO2tnawNglrGwkjV47c5MhZ7shR
JOGDI7nvo9xJKKKcH0SOhCSSM+/D+w9eatO0wVObBQKBXwQRTAjNCaUVYYQT
QSRRRBNDLHG0JZ4E2pNIB5JIJoVU0kgng0yy6EQ2OXQjlx7kkU8BvehNIX3o
SxHFlFBKGeVUUEkV/ammhloGMogh1FFPA40MYzgjGMkoRtPEGMYyjvFMYCKT
mMwUpjODmcxiNnOYyzzms4CFLGIxS1jKMpazgpWsYjVrWMs61rOBjWxiM1vY
yja2s4Od7GI3e9jLPvZzgIMc4jBHOMoxjnOCk5ziNGc4yznOc4GLXOIyV7jK
Na5zg5vc4jZ3uMs97vOAhzziMU94yjOe84KXvOI1b3jLO97zgY984jNf+Mo3
vvODn/zmD3/5R0DyIIIJoQUtCSWMcCKIpDVRtCGaGGKJox3xJJBIBzqSRDIp
pJJGOhlkkkU2nelCV3LoRndyySOfAnrSi94U0o8iiimhlDLKqaCSKgZQTQ21
DKWOehpo5D8NE2eu
       "], {206}, {}, {}}, {{}, {}, {1, 7, 8, 15, 17, 23, 29, 36, 42, 43, 44, 
       47, 49, 54, 60, 67, 73, 75, 79, 81, 82, 92, 101, 107, 112, 127, 135, 
       143, 146, 151, 152, 155, 163, 164, 170, 189, 190, 198, 202, 207, 213, 
       221, 222, 228, 233, 235, 243, 246, 248, 257, 259, 266, 278, 292, 305, 
       306, 315, 320, 323, 328, 331, 334, 335, 336, 337, 338, 342, 346}, {
       64}, {}}, {{}, {}, {}, {84, 86, 110, 111, 172, 200, 214, 225, 239, 
       255}, {}}}, 
    "ExtendedClasses" -> {"very good", "unacceptable", "acceptable", "good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0004450491329479769, "SingleEvaluationTime" -> 
    0.0043235, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{
  3.8684443883703527`*^9, 3.868444628441779*^9, 3.8684447374621*^9, 
   3.868444798788579*^9, {3.8684450567305193`*^9, 3.8684450634502573`*^9}, 
   3.86844514160921*^9, {3.868445216184236*^9, 3.868445245788845*^9}, 
   3.86844550286349*^9, 3.868445684338311*^9, 3.868445860318709*^9, 
   3.868446035571615*^9, 3.8684462387314863`*^9, 3.868446531804*^9, 
   3.868446992824225*^9, 3.868447029560577*^9, 3.8684986039156446`*^9, 
   3.8685204529294043`*^9, 3.8685215146011333`*^9, 3.8685301612497177`*^9, 
   3.868530590591856*^9, 3.86853261496434*^9, 3.8685338436228123`*^9, {
   3.868535643570589*^9, 3.868535653266458*^9}, 3.86853620504729*^9, 
   3.868536647435892*^9, 3.8685368910591183`*^9, 3.868536956624065*^9, 
   3.868537492992119*^9, {3.8685379158969793`*^9, 3.868537942476584*^9}, 
   3.8685921415849247`*^9, 3.868599486276321*^9, 3.86860013955028*^9, 
   3.8686009455378437`*^9, 3.868601165154408*^9, 3.868602872755411*^9, 
   3.868604168888167*^9, 3.8686705600345984`*^9, 3.868672040003127*^9, 
   3.868681397928339*^9, 3.868938938636381*^9, 3.8689425626275787`*^9, 
   3.868943546605094*^9, 3.86894388526086*^9, 3.868944114037065*^9, 
   3.868944544993232*^9, 3.868945583119274*^9, 3.868945795964314*^9, 
   3.868946090455439*^9, 3.868946301277932*^9, 3.868946812077159*^9, 
   3.868947529554852*^9, 3.868948234247651*^9, 3.868949916263268*^9, 
   3.86895035411582*^9, 3.868950591820963*^9, 3.868955715946851*^9, 
   3.8689590912506847`*^9, 3.868961292873067*^9},
 CellLabel->
  "Out[319]=",ExpressionUUID->"3fdb3f09-8f53-43da-b542-2986dbb67978"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedSoftNet2", "=", 
  RowBox[{"HardNetTransformWeights", "[", 
   RowBox[{"trainedSoftNet", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"#", ">", "0.5"}], ",", "1", ",", "0"}], "]"}], "&"}], 
       ")"}], "/@", "#"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8689387761034718`*^9, 3.8689388321917343`*^9}, {
  3.868942269083345*^9, 3.868942286923271*^9}, {3.868942617229506*^9, 
  3.86894262873884*^9}, {3.868942816172244*^9, 3.8689428718902693`*^9}, {
  3.868947592890992*^9, 3.868947595857012*^9}},
 CellLabel->
  "In[320]:=",ExpressionUUID->"260659aa-9626-49a2-b96d-2673b75262e7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox[
                    FormBox["\"Cargo\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-7.999999999999997, 
                    2.1435917623294274`*^-7}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", 
                    "\"TrainedNet/Net/FeatureLayer/Catenate\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/FeatureLayer/Catenate", 
                    "Tooltip"]& ], TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-6.999999919615306, 
                    3.0000001875642783`}], 
                    
                    Offset[{0, -13.5}, {-6.999999919615306, 
                    3.0000001875642783`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Doors\"", TraditionalForm], 
                    Offset[{0, -7}, {-7.9999999732051, 1.000000214359176}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"Maintenan..\"", "\"MaintenanceCost\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "MaintenanceCost", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-7.999999946410203, 
                    2.0000002143591757`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Passengers\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-7.999999919615306, 
                    3.0000002143591753`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"PurchaseP..\"", "\"PurchasePrice\"", LabelStyle -> 
                    "TextStyling"], 
                    Annotation[#, "PurchasePrice", "Tooltip"]& ], 
                    TraditionalForm], 
                    
                    Offset[{0, -7}, {-7.9999998928204095`, 
                    4.000000214359175}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Safety\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {-7.9999998660255125`, 
                    5.000000214359175}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Loss/SoftmaxLayer\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Loss/SoftmaxLayer", 
                    "Tooltip"]& ], TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999998392306175, 
                    6.000000026794895}], 
                    
                    Offset[{0, -13.5}, {-0.9999998392306175, 
                    6.000000026794895}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    
                    Offset[{0, -7}, {1.6076938217470707`*^-7, 
                    5.999999999999998}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Loss/SoftProbs\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Loss/SoftProbs", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-1.999999839230617, 
                    6.000000053589792}], 
                    
                    Offset[{0, -13.5}, {-1.999999839230617, 
                    6.000000053589792}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/6\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/6", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999839230616, 
                    6.00000016076938}], 
                    
                    Offset[{0, -13.5}, {-5.999999839230616, 
                    6.00000016076938}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/1\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/1", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-8.999999839230615, 
                    6.000000241154072}], 
                    
                    Offset[{0, -13.5}, {-8.999999839230615, 
                    6.000000241154072}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/3\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/3", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-7.9999998392306155`, 
                    6.000000214359175}], 
                    
                    Offset[{0, -13.5}, {-7.9999998392306155`, 
                    6.000000214359175}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/2\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/2", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-5.999999866025513, 
                    5.00000016076938}], 
                    
                    Offset[{0, -13.5}, {-5.999999866025513, 
                    5.00000016076938}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/4\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/4", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999866025513, 
                    5.000000133974483}], 
                    
                    Offset[{0, -13.5}, {-4.999999866025513, 
                    5.000000133974483}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/5\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/5", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-6.9999998392306155`, 
                    6.000000187564277}], 
                    
                    Offset[{0, -13.5}, {-6.9999998392306155`, 
                    6.000000187564277}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/8\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/8", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-3.9999998392306164`, 
                    6.000000107179586}], 
                    
                    Offset[{0, -13.5}, {-3.9999998392306164`, 
                    6.000000107179586}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/7\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/7", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-4.999999839230616, 
                    6.000000133974483}], 
                    
                    Offset[{0, -13.5}, {-4.999999839230616, 
                    6.000000133974483}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox[
                    TagBox[
                    TooltipBox[
                    "\"TrainedNe..\"", "\"TrainedNet/Net/SoftNet/9\"", 
                    LabelStyle -> "TextStyling"], 
                    Annotation[#, "TrainedNet/Net/SoftNet/9", "Tooltip"]& ], 
                    TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-2.999999839230617, 
                    6.000000080384689}], 
                    
                    Offset[{0, -13.5}, {-2.999999839230617, 
                    6.000000080384689}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, {
                    FontColor -> GrayLevel[0.5]}, StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{-5.217758092674727, 
                    1.7392528529019002`}, {-7.479056899628359, 
                    1.562829375887932}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.31622779143670915`, 0.9486832895772231}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{-4.919349484592803, 
                    2.459674907063233}, {-7.455901643484479, 
                    2.0881968009051284`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.4472136194660424,
                     0.8944271790168733}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337044`}, {-7.449999931673011, 
                    2.5500001996219823`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334008,
                     0.7071067622396938}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-7.449999919615307, 
                    3.000000199621982}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{3.889087400733703, 
                    3.8890871923183177`}, {-7.449999907557602, 
                    3.450000199621982}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396942, -0.7071068001334005}], 
                    InsetBox[
                    FormBox["\"3\"", TraditionalForm], 
                    
                    Offset[{4.919349616406267, 
                    2.4596746434363035`}, {-7.455901594621123, 
                    3.9118035986551067`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.44721357153387337`, -0.8944272029829576}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337029`*^-7, 
                    5.499999999999998}, {-0.44999983923061765`, 
                    6.000000012057702}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    InsetBox[
                    FormBox["\"4\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-1.4499998392306173`, 
                    6.000000038852599}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox["\"21\"", TraditionalForm], 
                    
                    Offset[{-5.2177580926747265`, 
                    1.739252852901899}, {-6.47905681924367, 
                    4.562829349093034}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.31622779143670887`, 0.948683289577223}], 
                    InsetBox[
                    FormBox["\"15120\"", TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-8.449999839230616, 
                    6.000000226416878}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox["\"720\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.449999866025513, 
                    5.000000146032186}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"15120\"", TraditionalForm], 
                    
                    Offset[{1.4737193820835151`*^-7, 
                    5.499999999999997}, {-7.449999839230616, 
                    6.000000199621981}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897856063913`*^-8}], 
                    InsetBox[
                    FormBox["\"720\"", TraditionalForm], 
                    
                    Offset[{-3.889087192318317, 
                    3.889087400733703}, {-4.44999985128832, 
                    5.55000011923729}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334005,
                     0.7071067622396939}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"720\"", "\"21\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337036`*^-7, 
                    5.499999999999999}, {-6.449999839230616, 
                    6.000000172827084}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885523`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"720\"", "\"21\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-5.449999839230616, 
                    6.000000146032187}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"720\"", TraditionalForm], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-4.449999839230617, 
                    6.00000011923729}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    FormBox["\"720\"", TraditionalForm], 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-3.4499998392306166`, 
                    6.000000092442392}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    FormBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"4\"", "\"180\""}, 
                    "RowWithSeparators"], TraditionalForm], 
                    
                    Offset[{1.4737193332337026`*^-7, 
                    5.499999999999997}, {-2.449999839230617, 
                    6.000000065647496}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.67948969678855*^-8}]}, {
                    FontColor -> GrayLevel[0.7], FontSize -> 8, FontWeight -> 
                    "Thin"}, StripOnInput -> False]}, {
                    GrayLevel[0.7], {
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.999999999999997, 
                    2.1435917623294274`*^-7}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Cargo\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Cargo", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999999732051, 
                    1.000000214359176}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Doors\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Doors", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.999999946410203, 
                    2.0000002143591757`}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"MaintenanceCost\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"MaintenanceCost", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.999999919615306, 
                    3.0000002143591753`}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Passengers\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Passengers", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999998928204095`, 
                    4.000000214359175}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"PurchasePrice\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"PurchasePrice", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999998660255125`, 
                    5.000000214359175}, {-6.999999919615306, 
                    3.0000001875642783`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Safety\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Safety", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999998392306175, 6.000000026794895}, {
                    1.6076938217470707`*^-7, 5.999999999999998}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.999999839230617, 
                    6.000000053589792}, {-0.9999998392306175, 
                    6.000000026794895}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.999999919615306, 
                    3.0000001875642783`}, {-5.999999839230616, 
                    6.00000016076938}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 21\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-8.999999839230615, 
                    6.000000241154072}, {-7.9999998392306155`, 
                    6.000000214359175}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 15120\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 15120\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999866025513, 
                    5.00000016076938}, {-4.999999866025513, 
                    5.000000133974483}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 720\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 720\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-7.9999998392306155`, 
                    6.000000214359175}, {-6.9999998392306155`, 
                    6.000000187564277}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 15120\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 15120\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999866025513, 
                    5.000000133974483}, {-3.9999998392306164`, 
                    6.000000107179586}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 720\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 720\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-6.9999998392306155`, 
                    6.000000187564277}, {-5.999999839230616, 
                    6.00000016076938}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
720\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 720\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-5.999999839230616, 
                    6.00000016076938}, {-4.999999839230616, 
                    6.000000133974483}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
720\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 720\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.6794897029117842`*^-8}]
                    }, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.999999839230616, 
                    6.000000133974483}, {-3.9999998392306164`, 
                    6.000000107179586}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 720\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 720\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999998392306164`, 
                    6.000000107179586}, {-2.999999839230617, 
                    6.000000080384689}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 720\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 720\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999839230617, 
                    6.000000080384689}, {-1.999999839230617, 
                    6.000000053589792}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
4\[Times]180\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]180\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.479056899628359, 
                    1.562829375887932}, {-0.25, 0}, 
                    Offset[8], {1.000000080384691, 2.999999973205102}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Cargo\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input5\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Cargo", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input5"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.455901643484479, 
                    2.0881968009051284`}, {-0.25, 0}, 
                    Offset[8], {1.000000053589794, 1.9999999732051024`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Doors\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input3\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Doors", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input3"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.449999931673011, 
                    2.5500001996219823`}, {-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"MaintenanceCost\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"MaintenanceCost", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.449999919615307, 
                    3.000000199621982}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Passengers\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input4\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Passengers", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input4"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.449999907557602, 
                    3.450000199621982}, {-0.25, 0}, 
                    Offset[8], {0.999999973205103, -1.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"PurchasePrice\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"PurchasePrice", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.455901594621123, 
                    3.9118035986551067`}, {-0.25, 0}, 
                    Offset[8], {0.9999999464102061, -2.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Safety\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input6\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 3\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Safety", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input6"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.44999983923061765`, 
                    6.000000012057702}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Output\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Output"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-1.4499998392306173`, 
                    6.000000038852599}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 4\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.47905681924367, 
                    4.562829349093034}, {-0.25, 0}, 
                    Offset[8], {1.00000008038469, 2.9999999732051017`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"vector \"", 
                    StyleBox["\"(\[VeryThinSpace]size: 21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    "\" of booleans\""}, "RowDefault"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector ", 
                    Style["(\[VeryThinSpace]size: 21\[VeryThinSpace])", 
                    GrayLevel[0.5]], " of booleans"}], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-8.449999839230616, 
                    6.000000226416878}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 15120\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 15120\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.449999866025513, 
                    5.000000146032186}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 720\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 720\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-7.449999839230616, 
                    6.000000199621981}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794897856063926`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 15120\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 15120\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.44999985128832, 
                    5.55000011923729}, {-0.25, 0}, 
                    Offset[8], {1.000000026794897, 0.999999973205103}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 720\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 720\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-6.449999839230616, 
                    6.000000172827084}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999991, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
720\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Weights\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 720\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Weights"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-5.449999839230616, 
                    6.000000146032187}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
720\[Times]21\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 720\[Times]21\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-4.449999839230617, 
                    6.00000011923729}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 720\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 720\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-3.4499998392306166`, 
                    6.000000092442392}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 720\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 720\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-2.449999839230617, 
                    6.000000065647496}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: \
4\[Times]180\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    "(\[VeryThinSpace]size: 4\[Times]180\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.999999999999997, 2.1435917623294274`*^-7}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Cargo\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Cargo", Bold]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-6.999999919615306, 3.0000001875642783`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.3], 
                    
                    LineBox[{{-0.2, 0.2}, {-0.1, 0.2}, {0., 
                    0.}, {-0.1, -0.2}, {-0.2, -0.2}}], 
                    LineBox[{{0., 0.}, {0.2, 0.}}], 
                    LineBox[{{0.125, 0.075}, {0.2, 0.}, {0.125, -0.075}}]}, 
                    ImageSize -> 16], {-6.999999919615306, 
                    3.0000001875642783`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/FeatureLayer/Catenate\"", Bold, 
                    StripOnInput -> False]}, {
                    StyleBox[
                    "CatenateLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/FeatureLayer/Catenate", Bold], 
                    Style[
                    CatenateLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.9999999732051, 1.000000214359176}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Doors\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Doors", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.999999946410203, 2.0000002143591757`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"MaintenanceCost\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["MaintenanceCost", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.999999919615306, 3.0000002143591753`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Passengers\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Passengers", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.9999998928204095`, 4.000000214359175}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"PurchasePrice\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["PurchasePrice", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-7.9999998660255125`, 5.000000214359175}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Safety\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Safety", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-0.9999998392306175, 6.000000026794895}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    GraphicsBox[
                    TagBox[
                    RasterBox[CompressedData["
1:eJztWFtIk2EYdnO6zaFuc9N5SHSbp6lT2cmpqNOpOwiRUhkUoXkgCoVpSBdF
dROdLqqbLqKuuomC6EARFEGR0F1FEdVVFEQXRecDnZ5HNhiytWn/1oG98Prr
9/7/93zv+73f+72P5SNTA+PitLS0aRl+DAzPugKB4a2DSvyxcnJ648Tk2Kh3
cmZsYizQPJKOQQe0FCpJS0lKUpKS/1syMjJUpaWl4yaTaX9FRcU2rVbbl2hM
vV4/7fF4Xvv9/m/d3d1P8PzS39//w263nxeJROJEYNbU1OwjBrC+wt9Rjkkk
kmyLxXKS42VlZZuExszLy3NxbqvVetrtdj/Nzs42hWxSqbSANpvNdlZoXKfT
ec3n833Kzc21er3eD3g25eTkNFL5O3C/OxyOi0Jiwh8d58UeXtDpdCvoWyQ1
m81HhcRFjDs5L/Z3T3V19e6GhoZjGo3GvVCzsrL0QuLCxwHiVlVV7UK8r+bn
5/tCNuZVc3PzFaxpr5CYFKVSaSNua2vrTZ6hzMzMvJCtrq7uMG3FxcVrhcaF
iFpaWq5zfuKiTniKiopWMX85xvqRAMx5kclkJcA5F55HnZ2d9+HnmkRhhkt6
eroCZ7eO60gGXkr+TUHN1UEbk604Dzui1dtEKu7SIeiZZOuf3ueUJFcKCtgq
xc5Hg8EwIyQu7nQ/52UvhbvvRjTFPTgkJC7vm7a2tlvBvnSzkHPHEvQTWpfL
9Yi9eWFh4WAysdmj9fT0PGe81Wp1ezzfKBSKCvIJ9B8H+ESPa14KNvpiC/qa
t319fa9410d7D3sjR495nDyCvTX6+mfsexkvo9G4dSnY6KV6yYHIEeRy+bKF
drFYLGWeEZM5AZ+NHGe8Ojo67hF7KX4zz7DXDzlnSUnJuoX2ysrKnbTV1tYe
7O3tfRFuQ86vpg0xDywSVgTOdYrf1tfXH4m0JsT1XXt7+232sfQ7xF2o4G4b
gmd9djGg8GU7v+N84JgZC+0hfzDvFvobrcYsprcGR1jO3OC+ku9FWdf83Y1a
40VPP1deXj4Vib+Qp8eDSY6JPH6DM/SRXCHae+AKh4jLPh7xfk/OErKpVCon
+UuknIgkXFtXV9fjYB6t/9W7jC/fA/+8hNy9ExrnuWLNw7o/I68N8eCG7oVY
9bmpqekE44+z/TLIneYQ027+HwBruMuzRz4XD2Y4biwFR3nA91HLWokTZiP/
voz9sceL+TuCmq5hfcA+qZOBl5KU/E3yE7YM2js=
                    "], {{0, 29.333333333333332`}, {16., 0}}, {0, 255}, 
                    ColorFunction -> RGBColor, ImageResolution -> 135.], 
                    BoxForm`ImageTag[
                    "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                    Magnification -> Automatic], Selectable -> False], 
                    DefaultBaseStyle -> "ImageGraphics", 
                    ImageSizeRaw -> {16., 29.333333333333332`}, 
                    PlotRange -> {{0, 16.}, {0, 29.333333333333332`}}, 
                    ImageSize -> 16], TraditionalForm]], {-0.9999998392306175,
                     6.000000026794895}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Loss/SoftmaxLayer\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "SoftmaxLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Loss/SoftmaxLayer", Bold], 
                    Style[
                    SoftmaxLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{1.6076938217470707`*^-7, 5.999999999999998}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-1.999999839230617, 6.000000053589792}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"\[Sum]\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-1.999999839230617, 
                    6.000000053589792}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Loss/SoftProbs\"", Bold, StripOnInput -> 
                    False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Total", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Loss/SoftProbs", Bold], 
                    HoldForm[
                    AggregationLayer[Total]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-5.999999839230616, 6.00000016076938}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-5.999999839230616, 
                    6.00000016076938}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/6\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/6", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-8.999999839230615, 
                    6.000000241154072}], 
                    
                    Offset[{-10.5, -10.5}, {-8.999999839230615, 
                    6.000000241154072}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-8.999999839230615, 
                    6.000000241154072}], 
                    
                    Offset[{10.5, 10.5}, {-8.999999839230615, 
                    6.000000241154072}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-8.999999839230615, 
                    6.000000241154072}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/1\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/1", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-7.9999998392306155`, 6.000000214359175}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-7.9999998392306155`, 
                    6.000000214359175}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/3\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/3", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], 
                    EdgeForm[
                    GrayLevel[0.7]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-5.999999866025513, 
                    5.00000016076938}], 
                    
                    Offset[{-10.5, -10.5}, {-5.999999866025513, 
                    5.00000016076938}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-5.999999866025513, 5.00000016076938}], 
                    
                    Offset[{10.5, 10.5}, {-5.999999866025513, 
                    5.00000016076938}]]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"A\"", Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-5.999999866025513, 
                    5.00000016076938}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/2\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "NetArrayLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/2", Bold], 
                    Style[
                    NetArrayLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.98, 0.98, 0.98]], 
                    EdgeForm[
                    GrayLevel[0.97]], 
                    DiskBox[{-4.999999866025513, 5.000000133974483}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"C\"", 
                    GrayLevel[0.33], Bold, 12, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999866025513, 
                    5.000000133974483}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/4\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "CompiledLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/4", Bold], 
                    Style[
                    CompiledLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 15), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-6.9999998392306155`, 6.000000187564277}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-6.9999998392306155`, 
                    6.000000187564277}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/5\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/5", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 16), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-3.9999998392306164`, 6.000000107179586}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    GrayLevel[0.33], 14, Bold, Italic, FontColor -> 
                    RGBColor[0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`], FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], 
                    TraditionalForm]], {-3.9999998392306164`, 
                    6.000000107179586}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/8\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "ThreadingLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/8", Bold], 
                    Style[
                    ThreadingLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 17), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-4.999999839230616, 6.000000133974483}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Min\"", 
                    GrayLevel[0.33], Bold, 10, StripOnInput -> False], 
                    TraditionalForm]], {-4.999999839230616, 
                    6.000000133974483}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/7\"", Bold, StripOnInput -> 
                    False]}, {
                    TagBox[
                    RowBox[{"AggregationLayer", "[", "Min", "]"}], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/7", Bold], 
                    HoldForm[
                    AggregationLayer[Min]]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 18), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    DiskBox[{-2.999999839230617, 6.000000080384689}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.33], Bold, 6, StripOnInput -> False], 
                    TraditionalForm]], {-2.999999839230617, 
                    6.000000080384689}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"TrainedNet/Net/SoftNet/9\"", Bold, StripOnInput -> 
                    False]}, {
                    StyleBox[
                    "ReshapeLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["TrainedNet/Net/SoftNet/9", Bold], 
                    Style[
                    ReshapeLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 19), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    Part[CompressedData["
1:eJxTTMoPSmViYGAQBmIQ/fc/CMgfSEqScgw+2mOXyDD71///0geur9CRZGDg
cDi5yvgfSL5xWZclA8MH+6mh6X9AfIfgozJA7Q4Q9fIH7MF8Dgfd1ed+gPjz
VybxMTAIOPwMZfqO4Is4WLFtWPn///v9RqFnGBkYJBxOnbxc8G9yq90/sDvE
HaSZb1wBMvanrZrBDJI/xmD2FSh+wOz/SS4QPwlsn+KBy//0BED8o2B5mPkS
Dr/A9sHUi0D5wgeYVv3lAPEh6qUPZIVM4wGp72HMefX/P/+BcyGG7Aj7YOol
HHrB8uwHZv1PYQXxAYjzj6k=
                    "], NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 21, 8, 8, 8, 8, 8, 21, 8, 21, 21, 21, 21, 21, 21,
                     21, 21, 21, 21}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, 
                    ImageSize -> {549.4999999999998, 370.00000147371924`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{27.999999999999957`, 26.5}, {25., 15.}},
                     ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"PurchasePrice\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"PurchasePrice\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"PurchasePrice"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"PurchasePrice\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"PurchasePrice"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"MaintenanceCost\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"MaintenanceCost\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"MaintenanceCost"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"MaintenanceCost\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"MaintenanceCost"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Doors\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Doors\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Doors"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Doors\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Doors"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Passengers\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Passengers\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Passengers"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Passengers\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Passengers"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Cargo\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Cargo\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Cargo"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Cargo\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Cargo"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Safety\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Safety\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Safety"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Safety\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Safety"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Port", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Output\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Output\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Output"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Output\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Output"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"class\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "TrainedNet/Net/SoftNet/1" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{15120}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{15120}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {15120}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/2" -> <|
                    "Type" -> "NetArray", 
                    "Arrays" -> <|
                    "Array" -> NeuralNetworks`Private`DummyArray[{720}]|>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {720}|>, "Inputs" -> <||>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{720}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/3" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
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

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {15120},
                     "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{15120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{15120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/4" -> <|
                    "Type" -> "Compiled", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
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

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|"Linux-x86-64" -> 
                    ByteArray[CompressedData["
1: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
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                    "Real", "$OutputType" -> "Real", "$InputShape" -> {720}, 
                    "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                    "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                    "$Scalar" -> {False, False}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{720}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{720}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/5" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{720, 21}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{15120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{720, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/FeatureLayer/Catenate" -> <|
                    "Type" -> "Catenate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> 1|>, 
                    "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                    NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                    NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
                    "TrainedNet/Net/SoftNet/6" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                    NeuralNetworks`TensorT[{720, 21}, NeuralNetworks`RealT]|>,
                     "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{720, 21}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/7" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Min, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{720, 21}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{720}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/8" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{720}, 
                    NeuralNetworks`RealT], "Weights" -> 
                    NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{720}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Net/SoftNet/9" -> <|
                    "Type" -> "Reshape", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Dimensions" -> 
                    NeuralNetworks`ValidatedParameter[{4, 180}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{720}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4, 180}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Loss/SoftProbs" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Total, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[2]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4, 180}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "TrainedNet/Loss/SoftmaxLayer" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "PurchasePrice" -> <|"Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {
                    "\"medium\"", "\"low\"", "\"very high\"", "\"high\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                    "13.1.3"|>, 
                    "MaintenanceCost" -> <|
                    "Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {
                    "\"low\"", "\"very high\"", "\"high\"", "\"medium\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                    "13.1.3"|>, 
                    "Doors" -> <|"Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {4, 2, 3, 
                    Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                     "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4,
                     "$Version" -> "13.1.3"|>, 
                    "Passengers" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {4, 
                    Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                    "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> 
                    False, "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                    "Cargo" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {"\"large\"", "\"medium\"", "\"small\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 3, "$Version" -> 
                    "13.1.3"|>, 
                    "Safety" -> <|"Form" -> NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Type" -> "Class", 
                    "Labels" -> {"\"high\"", "\"low\"", "\"medium\""}, 
                    "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                    "Multilabel" -> False, "$Count" -> 3, "$Version" -> 
                    "13.1.3"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {
                    "\"very good\"", "\"unacceptable\"", "\"acceptable\"", 
                    "\"good\""}, "InputDepth" -> 1, "Multilabel" -> False, 
                    "Dimensions" -> 4, "$Rank" -> 0, "$Version" -> 
                    "13.1.3"|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input2"] -> 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input3"] -> NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input4"] -> 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input5"] -> NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs",
                     "Input6"] -> NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/3", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/8", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/4", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/6", "Inputs", "Weights"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/5", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", 
                    "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/6", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/7", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/8", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftProbs", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/9", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftmaxLayer", "Inputs", 
                    "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftProbs", "Outputs", 
                    "Output"], NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftmaxLayer", "Outputs", 
                    "Output"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate"], 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftProbs"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/6"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/3"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/4"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/5"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/8"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/7"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/9"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Cargo"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/FeatureLayer/Catenate"], 
                    NeuralNetworks`NetPath["Inputs", "Doors"], 
                    NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
                    NeuralNetworks`NetPath["Inputs", "Passengers"], 
                    NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
                    NeuralNetworks`NetPath["Inputs", "Safety"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftmaxLayer"], 
                    NeuralNetworks`NetPath["Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Loss/SoftProbs"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/6"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/3"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/4"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/5"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/8"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/7"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "TrainedNet/Net/SoftNet/9"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.868938834906114*^9, 3.868942290900338*^9, 3.868942630782495*^9, {
   3.868942845605949*^9, 3.8689428742107487`*^9}, 3.8689435525843678`*^9, 
   3.868943890786571*^9, 3.8689441215536537`*^9, 3.868944549704063*^9, 
   3.868945588071299*^9, 3.868945804268083*^9, 3.86894609599631*^9, 
   3.8689463034671392`*^9, 3.868946820777964*^9, 3.868947540776207*^9, 
   3.868947597268972*^9, 3.868948237569412*^9, 3.868950358586295*^9, 
   3.868955718961672*^9, 3.8689590939411716`*^9, 3.868961294933449*^9},
 CellLabel->
  "Out[320]=",ExpressionUUID->"4ac2eb61-1faf-43c5-b783-cfe1b6edd288"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"measurements", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"trainedSoftNet2", ",", 
    RowBox[{"testData", "->", "\"\<Acceptability\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.8689422990507183`*^9},
 CellLabel->
  "In[321]:=",ExpressionUUID->"5078f7c8-7b76-4fb4-adfc-89539893ca31"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   StyleBox[
    FrameBox[GridBox[{
       {
        ItemBox[
         FrameBox[
          StyleBox["\<\"Classifier Measurements\"\>", "SuggestionsBarText",
           StripOnInput->False,
           FontSize->12],
          FrameMargins->{{10, 5}, {-4, 2}},
          FrameStyle->None,
          StripOnInput->False],
         Alignment->{Left, Bottom},
         Background->RGBColor[0.96, 0.96, 0.96],
         Frame->{{False, False}, {True, False}},
         FrameStyle->Opacity[0.1],
         ItemSize->{Automatic, 1},
         StripOnInput->False]},
       {
        ItemBox[
         TagBox[
          FrameBox[
           TagBox[GridBox[{
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Classifier method"], 
                   TextCell["Classifier method"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               
               InterpretationBox[Cell[
                "Net",ExpressionUUID->"0ed826b0-2b13-4fa3-83ba-7b16769c44e4"],
                
                TextCell["Net"]]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Number of test examples"], 
                   TextCell["Number of test examples"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], "346"},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Accuracy"], 
                   TextCell["Accuracy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"99.1", "0.5"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    99.1329479768786114846`3., 0.4991396165558288911`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  TagBox[
                   TooltipBox[
                    InterpretationBox[
                    Cell["Accuracy baseline"], 
                    TextCell["Accuracy baseline"]], 
                    "\"Accuracy if predicting the commonest class\"", 
                    LabelStyle -> "TextStyling"], 
                   Annotation[#, "Accuracy if predicting the commonest class",
                     "Tooltip"]& ], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{
                 RowBox[{"(", 
                   InterpretationBox[
                    
                    TemplateBox[{"72.5", "2.4"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                    Around[
                    72.5433526011560729785`3., 2.4027745155265187726`3.]], 
                   ")"}], "\"%\"", "percent", "\"Percent\""},
                "QuantityPostfix"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Geometric mean of probabilities"], 
                   TextCell["Geometric mean of probabilities"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.9621478312640041608`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0064815818266125702`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", 
                   "0.9491846676107790204`3.", "\", \"", 
                   "0.9751109949172293012`3.", "\"]\""}, "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.9491846676107790204`3., 
                   ", ", 0.9751109949172293012`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Mean cross entropy"], 
                   TextCell["Mean cross entropy"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TagBox[
                TooltipBox[
                 TemplateBox[{"0.0385871693699680399`3.", 
                   StyleBox[
                    
                    TemplateBox[{
                    "\" \[PlusMinus] \"", "0.0067365248801363464`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                  "RowDefault"],
                 
                 TemplateBox[{
                  "\"95% confidence interval: [\"", "0.025114119609695347`3.",
                    "\", \"", "0.0520602191302407327`3.", "\"]\""}, 
                  "RowDefault"],
                 TooltipStyle->{}],
                Annotation[#, 
                 
                 Row[{"95% confidence interval: [", 0.025114119609695347`3., 
                   ", ", 0.0520602191302407327`3., "]"}], "Tooltip"]& ]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Single evaluation time"], 
                   TextCell["Single evaluation time"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"2.76`", 
                 
                 RowBox[{
                  "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]",
                    "\"example\""}], "milliseconds per example", 
                 FractionBox["\"Milliseconds\"", "\"Examples\""]},
                "Quantity"]},
              {
               TemplateBox[{
                 TemplateBox[{5}, "Spacer1"], 
                 StyleBox[
                  InterpretationBox[
                   Cell["Batch evaluation speed"], 
                   TextCell["Batch evaluation speed"]], 
                  GrayLevel[0.4], StripOnInput -> False]},
                "RowDefault"], 
               TemplateBox[{"1.13`", 
                 
                 RowBox[{
                  "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                   "\[InvisibleSpace]", "\"ms\""}], 
                 "examples per millisecond", 
                 FractionBox["\"Examples\"", "\"Milliseconds\""]},
                "Quantity"]},
              {
               ItemBox[
                GraphicsBox[RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQGwI+2FNK30nhu66/5a39g9AkHinZ1/ZcNrnhZ9se
k2wOo9U56TDDN/bOc4yXxpx6Yr/iQWvmycPH7ZM/s38XNHlnbyzcwxDO8Nb+
y/rl//blvyBo3sMqkXXuD2/Zw3xKqjkbvx60/2nz1j6kLl9lQdRLew2bVXZq
z+7iVE+q+QC3Cmz2
                  "], {{0, 0}, {4, 4}}, {0, 1}],
                 Epilog->{{
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["15", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" examples of \"", "\"very good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9375`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.967741935483871`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " examples of ", "very good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9375}], 
                    Row[{"FScore = ", 0.967741935483871}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"very good\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "very good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["250", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "250", "\" examples of \"", "\"unacceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
                    
                    
                    TemplateBox[{"\"Recall = \"", "0.9960159362549801`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9980039920159681`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{250, " examples of ", "unacceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 1.}], 
                    Row[{"Recall = ", 0.9960159362549801}], 
                    Row[{"FScore = ", 0.9980039920159681}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "acceptable", 
                    " misclassified as ", "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"unacceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "unacceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.014285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.0625`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "very good", " misclassified as ",
                     "acceptable"}], 
                    Row[{"Column fraction = ", 0.014285714285714285`}], 
                    Row[{"Row fraction = ", 0.0625}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.014285714285714285`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.00398406374501992`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "unacceptable", 
                    " misclassified as ", "acceptable"}], 
                    Row[{"Column fraction = ", 0.014285714285714285`}], 
                    Row[{"Row fraction = ", 0.00398406374501992}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["68", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "68", "\" examples of \"", "\"acceptable\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9714285714285714`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9784172661870503`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{68, " examples of ", "acceptable", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9714285714285714}], 
                    Row[{"Recall = ", 0.9855072463768116}], 
                    Row[{"FScore = ", 0.9784172661870503}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"good\"", 
                    "\" misclassified as \"", "\"acceptable\""}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "good", " misclassified as ", 
                    "acceptable"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 3.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"very good\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "very good", " misclassified as ",
                     "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 2.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "0", "\" example of \"", "\"unacceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Column fraction = \"", "0.`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"Row fraction = \"", "0.`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{0, " example of ", "unacceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.}], 
                    Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 1.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "1", "\" example of \"", "\"acceptable\"", 
                    "\" misclassified as \"", "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Column fraction = \"", "0.09090909090909091`"}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{
                    "\"Row fraction = \"", "0.014492753623188406`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{1, " example of ", "acceptable", 
                    " misclassified as ", "good"}], 
                    Row[{"Column fraction = ", 0.09090909090909091}], 
                    Row[{"Row fraction = ", 0.014492753623188406`}]}], 
                    "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[1.], 
                    InsetBox[
                    FormBox["10", TraditionalForm], {0.5, 0.5}, BaseStyle -> 
                    10], 
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, 0.5}, Automatic, {
                    1., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" examples of \"", "\"good\"", 
                    "\" correctly classified\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9090909090909091`"}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"FScore = \"", "0.9523809523809524`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{10, " examples of ", "good", 
                    " correctly classified"}], 
                    Row[{"Precision = ", 0.9090909090909091}], 
                    Row[{"Recall = ", 1.}], 
                    Row[{"FScore = ", 0.9523809523809524}]}], "Tooltip"]& ]}, 
                   
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 3.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "16", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "0.9375`"}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{16, " example", "s", " of class ", "very good"}], 
                    Row[{"Recall = ", 0.9375}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 2.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "251", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9960159362549801`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{251, " example", "s", " of class ", "unacceptable"}], 
                    Row[{"Recall = ", 0.9960159362549801}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 1.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "69", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Recall = \"", "0.9855072463768116`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{69, " example", "s", " of class ", "acceptable"}], 
                    Row[{"Recall = ", 0.9855072463768116}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {4.5, 0.5}, Automatic, {
                    10., 1.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "10", "\" example\"", "\"s\"", "\" of class \"", 
                    "\"good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{10, " example", "s", " of class ", "good"}], 
                    Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "15", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"very good\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{15, " example", "s", " classified as ", 
                    "very good"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "250", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"unacceptable\""}, "RowDefault"]}, {
                    TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{250, " example", "s", " classified as ", 
                    "unacceptable"}], 
                    Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {2.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "70", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"acceptable\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9714285714285714`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    
                    Row[{70, " example", "s", " classified as ", 
                    "acceptable"}], 
                    Row[{"Precision = ", 0.9714285714285714}]}], 
                    "Tooltip"]& ], 
                   TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    Opacity[0.], 
                    RectangleBox[{0, 0}, {1, 1}]}], {3.5, -0.5}, Automatic, {
                    1., 10.}], 
                    TagBox[
                    GridBox[{{
                    
                    TemplateBox[{
                    "11", "\" example\"", "\"s\"", "\" classified as \"", 
                    "\"good\""}, "RowDefault"]}, {
                    
                    TemplateBox[{"\"Precision = \"", "0.9090909090909091`"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Row[{11, " example", "s", " classified as ", "good"}], 
                    Row[{"Precision = ", 0.9090909090909091}]}], 
                    "Tooltip"]& ]},
                 Frame->True,
                 FrameLabel->{
                   FormBox["\"predicted class\"", TraditionalForm], 
                   FormBox["\"actual class\"", TraditionalForm]},
                 FrameTicks->{{{{3.5, 
                    FormBox[
                    RotationBox["\"very good\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["\"unacceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["\"acceptable\"", BoxRotation -> 0.], 
                    TraditionalForm]}, {0.5, 
                    FormBox[
                    RotationBox["\"good\"", BoxRotation -> 0.], 
                    TraditionalForm]}}, {{3.5, 
                    FormBox["16", TraditionalForm]}, {2.5, 
                    FormBox["251", TraditionalForm]}, {1.5, 
                    FormBox["69", TraditionalForm]}, {0.5, 
                    FormBox["10", TraditionalForm]}}}, {{{0.5, 
                    FormBox[
                    RotationBox["15", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox["250", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox["70", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox["11", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}, {{0.5, 
                    FormBox[
                    RotationBox[
                    "\"very good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {1.5, 
                    FormBox[
                    RotationBox[
                    "\"unacceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {2.5, 
                    FormBox[
                    RotationBox[
                    "\"acceptable\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}, {3.5, 
                    FormBox[
                    RotationBox[
                    "\"good\"", BoxRotation -> 1.5707963267948966`], 
                    TraditionalForm]}}}},
                 FrameTicksStyle->13,
                 GridLinesStyle->Directive[
                   GrayLevel[0.5, 0.4]],
                 ImageSize->212.4,
                 
                 Method->{
                  "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                   Automatic, 
                   "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                   "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                   Scaled[0.02], "RangePadding" -> Scaled[0.05]},
                 PlotRangePadding->None],
                Alignment->Center,
                StripOnInput->False], "\[SpanFromLeft]"}
             },
             AutoDelete->False,
             ColumnsEqual->False,
             
             GridBoxAlignment->{
              "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
             GridBoxDividers->{"Columns" -> {False, {
                  Opacity[0.15]}, False}},
             
             GridBoxItemSize->{
              "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], 
                 Offset[1.1199999999999999`], {
                  Offset[1.75]}, 
                 Offset[0.27999999999999997`]}, "Rows" -> {
                 Offset[0.2], {
                  Offset[0.8]}, 
                 Offset[0.2]}}],
            "Grid"],
           FrameMargins->{{10, 10}, {10, 5}},
           FrameStyle->None,
           StripOnInput->False],
          Deploy,
          DefaultBaseStyle->"Deploy"],
         Alignment->Center,
         BaseStyle->{
          FontWeight -> "Light", FontSize -> 11, FontFamily -> "DejaVu Sans", 
           NumberMarks -> False, Deployed -> False},
         StripOnInput->False]}
      },
      DefaultBaseStyle->"Column",
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.5599999999999999]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], 
          Offset[0.8], {
           Offset[0.4]}, 
          Offset[0.2]}}],
     Background->GrayLevel[1],
     FrameMargins->{{0, 0}, {0, 0}},
     FrameStyle->GrayLevel[0.85],
     RoundingRadius->5,
     StripOnInput->False],
    StripOnInput->False,
    LineBreakWithin->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  ClassifierMeasurementsObject[<|
   "Model" -> ClassifierFunction[<|
      "ExampleNumber" -> Missing[], "ClassNumber" -> 4, 
       "Input" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "ToMLDataset", <|
           "Input" -> <|
             "PurchasePrice" -> <|"Type" -> "Expression"|>, 
              "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
              "Doors" -> <|"Type" -> "Expression"|>, 
              "Passengers" -> <|"Type" -> "Expression"|>, 
              "Cargo" -> <|"Type" -> "Expression"|>, 
              "Safety" -> <|"Type" -> "Expression"|>|>, 
            "Output" -> <|
             "PurchasePrice" -> <|"Type" -> "Expression"|>, 
              "MaintenanceCost" -> <|"Type" -> "Expression"|>, 
              "Doors" -> <|"Type" -> "Expression"|>, 
              "Passengers" -> <|"Type" -> "Expression"|>, 
              "Cargo" -> <|"Type" -> "Expression"|>, 
              "Safety" -> <|"Type" -> "Expression"|>|>, "Preprocessor" -> 
            MachineLearning`MLProcessor["Identity"], "ScalarFeature" -> False,
             "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
            "Missing" -> "Allowed"|>], "Processor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>]|>, 
       "Output" -> <|
        "Preprocessor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
         "Processor" -> 
         MachineLearning`MLProcessor[
          "Identity", <|
           "Invertibility" -> "Perfect", "Missing" -> "Allowed"|>], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> <|
          "very good" -> 0.25, "unacceptable" -> 0.25, "acceptable" -> 0.25, 
           "good" -> 0.25|>|>, "LabelSplitter" -> 
       MachineLearning`MLProcessor[
        "FeatureLabelSplit", <|
         "Processor" -> MachineLearning`MLProcessor["RuleSplit"], 
          "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
       "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
       "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {4, 5}, 0., {
         1, {{0, 1, 2, 3, 4}, {{2}, {3}, {4}, {5}}}, {1., 1., 1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> 
       MachineLearning`PackageScope`$BatchProcessing, 
       "Model" -> <|
        "Method" -> "Net", "Net" -> 
         NetGraph[<|
           "Type" -> "Graph", 
            "Inputs" -> <|
             "PurchasePrice" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"medium", "low", "very high", "high"}, 
                 "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                 "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                 "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "MaintenanceCost" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"low", "very high", "high", "medium"}, 
                 "OutputForm" -> "IndicatorVector", "Dimensions" -> {}, 
                 "Multilabel" -> False, "$Count" -> 4, "$Version" -> 
                 "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Doors" -> 
              NetEncoder["Class", <|"Labels" -> {4, 2, 3, 
                   Interval[{5, 
                    DirectedInfinity[1]}]}, "OutputForm" -> "IndicatorVector",
                  "Dimensions" -> {}, "Multilabel" -> False, "$Count" -> 4, 
                 "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Passengers" -> 
              NetEncoder["Class", <|"Labels" -> {4, 
                   Interval[{5, 
                    DirectedInfinity[1]}], 2}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Cargo" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"large", "medium", "small"}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]], "Safety" -> 
              NetEncoder[
               "Class", <|
                "Labels" -> {"high", "low", "medium"}, "OutputForm" -> 
                 "IndicatorVector", "Dimensions" -> {}, "Multilabel" -> False,
                  "$Count" -> 3, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{3}, 
                 NeuralNetworks`IndexIntegerT[0, 1]]]|>, 
            "Outputs" -> <|
             "Output" -> 
              NetDecoder[
               "Class", <|
                "Labels" -> {
                  "very good", "unacceptable", "acceptable", "good"}, 
                 "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 4, 
                 "$Rank" -> 0, "$Version" -> "13.1.3"|>, 
                NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]]|>, 
            "Nodes" -> <|
             "TrainedNet/Net/SoftNet/1" -> <|
               "Type" -> "NetArray", "Arrays" -> <|"Array" -> CompressedData["

1:eJzdWEuqXUcMfPbAZJgteAvxMIOQLdgreAZnZAg4g+BZlh4/zIXL4fTpKqlK
0n0FNvY93VK3Wp+S3n/+++Nfb5+env755cdfH5///fPbt+fvn969/OfL89cP
v3198+Ofv/7+dMB/f/z8w+B+PbOX1cPKPcrf6XOcZ3WWjCz2m0qHUk8EnbpX
cPrMlXyXXpW+jJzs3Vz70Ty3+7bKS9FzK3MMo0+1l8nTyjtW2213Dtd6B1Rv
5M6fu++ofrfN0XwZOYcyr6v2ZnD2frv7Re3G7EViIsKvWV3R/fdnQ+u0k3dO
8K/MvgouXcnXu+uOWj+TR6JyV9+UsYNiV/fUvsJy/aszXa3rsOUOmbh09AjR
szBr3XmzshdWyFZxN+f66P5KDhPxuat4WeWPqr4zC/UMhZlrMHlJ4f8sIr1d
J9japXj7znlDNsYidbHDD6r76qoayNTgqlqklBHhHlP5R4cuF5eM9GpVXNlR
a3f7O3vHlX6EC6jeDH0HRV5y2zrLk7LcK5LDkHyYkanqJTOyHgXVMwHGX6bX
RrTeP6oPubhkNb/d7a+S6Z7DqeUqeJN7rsfKUnBM9R2r82EFJ5nUv7lyvVpu
dS2eJPMoV1VHKmY73TylqidR5CnHN2RtZQ5Q1xvku+NNnVzOVfOyfaMyltl5
oBpZzjSldrB+WD0bq5olOvIjwvHvf++oda6eAlk7dSbk5DXq3FzR36hybQVf
zMrc5arjd1fOrYDb5spYYepUVU5Fz3P8NytDWQMza9FaMcW/d1DEbsVdqzgQ
ikivVgHWTrfYqq5LUShtfJWbIj7O9nru2VxW9iPPUq5kIjo7ctwZFOdg767U
jWBC3lwhw3Ez+5Q6Km155TPZXqmiRrm4+yTs4i0bj1fznQpE4gH1LWcPw8rb
/a7uTRTnR/hm9BwVve7UmH6Bi0/e21Ux71LkVTSHdc3UzvRPyB1nstjeRomq
HojBFC5RXS+Q71Pe6AZVfpnM77Nn6OAeu7UR+a59jGwFp4q8x2625OiNqnR0
z1bcPFnFRbpr5eoexzdE7zupPjpR3f+qsIv/1bs7z4HGVlcNidRAln9P9CN1
n6foM1WydzKQu6vfjJn/OOo/EpNRZGrBpPkPkj8zupwzAScq3khxp52MCG+M
+gQiU52Do0D9VpE3kLqojDv0jJkeb0LtYH/rQBcnOr5ThvOdyXhNudgFx7lV
vKXCpgpOd+W3jE9X5KdsTqzk6Aw3d4Lt36vPU42K+zpixJXrVD0z6tdV8yJG
Nlu7ozaL5Bo1T2VmAxH7TfJx9Yxn9001Y8nuzdZthX9HeJAjF539ror3TK/K
xl4lr3TqRPJZ9R1dPnq2h+n13Fw0s18Zq+r7d/XRqzOgayN2UMRLhS9OrO2d
utAenDlPd291hIrXRO/rzFvoPgVHdN9TCYS3XL1nJi6Qc7E9zWqfurdQxfTV
Od08zlUjlPGPrJke98wbT6sJarzm+2Z7+8zeaX3aZKC1JTKXmAC0Xkdlqn3J
2dOzbzz9bdWI5OMq2yi5VESeC1HOfBYnzjtNrRkZv0Bt6O7REPmVfWJ0lnVc
g8hR3WElM8LDWX3sHlfvc/vddefV3si862oNes5dTJzJUXBjd55Vr1fMKrpy
/6NzMOT8FXdTzKg6z+nap0IlD47md6Vtu/j0Lo5YHpDRp4Ba/so/puZ3BJPP
toIqr67qhyu2Hdx8p5PVtaupWf4chcJeWRmZ94v2a6vfps4MEDh8y4FM3Gd6
2CowcxBHTHeC4Xq7311geEVnr/GoPnCGTP2sqO832RNs3n0GpnZGuBgrMwvF
/IxZp97fPe+oij8ErA1VM6wuG+zuW8HtIlz6/lskz2fPxK5zg+l9z87cMceM
5PKumVX1LK/insj85Cy+unO0AopaydR9VV2eYPtdD4bO5ZC+FZmZnMmL2jti
c2UOVcSaOl6n1LgMGA7B3nFKX3eEgpu6+2HletVZj74w8W13YN++kosxmGh7
NlcgfFvZt5/xjmy8T+SAWY6M3tVxDmUPhuYoRM+qB2DOEtEb0Zflx+6e0B0j
Ll43MdbPUDG7mDBv6LA/69sT3wCVmal5bA2pzE8rWVX+FM3jE/MNy/N2vyMz
kAwqbajqkaI+isybXLX6TLajD3WC5Y6PHp8VvOFK//G3ifY8InLO6N0m1YNd
fKvruaqXvP3b0eMoegW2/52UCyNrHcjUHnZdt/1dPAkFwx8yZ71/U3ce7KqD
R50T6jDyza3f9b4O2Ss9q9/QuhThGNH93TlFje6+Y4o9d76VzXvoPZXvEelp
I3qu/h+RU5XrWGR6E9csAd3rmguia6r6s5WtXXkO8VVkbpfpwdCareb5jAw0
f1bV4q510fUudPHabJxW1VPF+ztze7ZWTvHDCqA9spLjKWU6ayajo7LfUoB9
96n88wqOPBXleZFar/YR9T1ZHZUypumJ2pdd5+5l1XD5NNprrH5X2bM7zyuQ
qeGZ2on2fK4+tlPnyie780EFmLtH50/Rc6y+RfqsDKeK3DljK2TvBF9jc8lr
4xqTzjDlzp3nQOs/OutU1KgJ7/KCbDxG3/asNjpsou6hOrh9hkcg9TMSH9Og
PnOVbbLxozpHBIrYVdWGTH+klKXmN8e51f2f4/fjGiUqe0CFDnWuVMHZP0X7
oY6eO4oJvULlPInN81dcQZ0XVDGWtad7vXr/lTw2Pt2+Vx0HlRy3y66ILqVt
mRySnYex9Rl9g468X5nnVXDwHt+9/wd/q3+L
                   "]|>, 
                "Parameters" -> <|
                 "Dimensions" -> 
                  NeuralNetworks`TensorT[{15120}, NeuralNetworks`RealT], 
                  "$ArrayDimensions" -> {15120}|>, "Inputs" -> <||>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{15120}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/2" -> <|
               "Type" -> "NetArray", "Arrays" -> <|"Array" -> CompressedData["

1:eJyVU8kNwjAQNDwQbdACFBDRQqjASOQVCSk8EL+USEnEj0iR2TnsB7GX9e7M
euZ0f/bDPqX0Oi4/fX5fpyl/bodyeOTxch53y/ZbMtLcpb9Vx8p5G1v3a3z7
f32O7qMe0ZflsvwojrAzDKhWzT2aY92XzcvBF/FAd1p4RThRHuvrxJUuFA9H
Jw5/9EV7xF/lKR0zranZ1bWiOqxXtByu7B1a9OvqNrqnvNeiG4Sn3qO6yv/q
rVgM6ULpUHmn1T+tekELzZ/VVDyYNh1fKJyuFhQmB5fjOYePo6GIk9sX3UVL
6cl5J8QF9XB6u1pRHkO6duLRDB38jkeVP1UfZyZRbeZz5QumV7aYJlysLXqf
ux/flRBA
                   "]|>, 
                "Parameters" -> <|
                 "Dimensions" -> 
                  NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT], 
                  "$ArrayDimensions" -> {720}|>, "Inputs" -> <||>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/3" -> <|
               "Type" -> "Compiled", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
Wv1Dfdy7TgKtDBab+dgrxV3f1eavImljPpJXRFc+LrzXYnh4AFJqjO/j7ndG
aG23+7gv85GM7Hu5LrH5pGfxLK01A+9F3QvHmlyC6m9JfX/A9tm6uvPcbUbZ
qxkPgvtdYqtIuo+Znkf6h0/1v/eH4bJjkeC8uwqk2bdwEYLassPxvoZb0pOH
cJUknWkrfqAo6uUW6SNeive2OW5W7AQNEXTs6ufSXEDlGQ0wSiDgrj41eEPa
GIC3um9LDdF4q69035Rm/4PZsT4SdB7I7Cc/FTDYFawHbz3cLWz1QKxLNSeI
0L6fO8sVFNjUmLeovH3B4UHWVP57yRWdCUDOvdz9s6PHS/C9Zwmw64LLpP2m
qNt5tMNlTX+R1DRO7G5LWfNqcUp38liDQy/3O1OOkqn3rYoC0LeFmQHrrxJp
41lEdYkMjCsFbwFyYx+STEnHDalvCepr6SqUnoz/OKCiwaGPW0io92Yfd4oT
anXv6eXSlkxQb2+BdNO2cly270GYjxR2fvKapQKlZa7sSunnHpvdrlTtu4fy
GtLyeqGtZ2r30KG2oZRul9gBXI2p3bIrDaP+XTekhu2IMFFDodS3Beg61Fa8
Si4J07E0YLUs7uUmpzAf43K4IeqwHe12CfIDf0KGiByjza4Pd4wCT5h+X2m9
LLJBAfYU9CtluYb7UGmDS9AtMrTsrrW5BMlRq/A0jNCJvrUvBREfID1BYzeL
9nYVjw3ekjZvQOLodN7b8X6su1DaeHuCyjOA+MnfJE2qtrFYmaerZ2CX0sel
zZkgnD9KpJuiCOEUR7a9X6lIAKWIvMeru0DanKQWXzKI77Bckqrt48n9CAJx
Y6slEn9DcS/3mBVqNeX3cZ8ZQmudDOxliiOunF193PXmqK//fR83Uw+ZQtK1
tuIWhQwCx7+0BtLtnsDN0S6XoNoJBlwPtFYIIRgMPZTnK0wTQMiW5TBPx602
x2+kzd/ZIaLlJTI7UZt9qSK5n1tkzENB7c6DrqK9gynegy5B35M8NdyT2uSS
zzQdIQQteiD3LIF5HlL0n3yc55u98prFNE/cKrqGrrS9bWtwiU0bp4rRwUKp
6Xcq990ZqQD2tpoiRrtB8/txMXSN9HG3GQfg87d0ySK7l/RxE2Bib13BeGmv
NxQjDoqkvqUTddnvEiShrARivZtc1sgKpYZvJ7p3h0tQGql+nHS+AZma4XZt
188t2CuXjM6+T2GOxXFcYiUkQ7lVTT5Jd3r4V1xLmXfHkmtyyT5NFIQLIDBr
6KCWo0heM5vuhbg+K5Nf6Rr2byqRZkfh4aoJAs3xtWD7TYWr5I9ecLfGrRM8
BbkNkcBSE71lLkEnSCs03Av8Bu16uZ+oAtmwSCGD6Auw6xreRh5A9v2uFcLS
CfIasO+UpjE9tsuawXxp9s/I3x+0wXTZMElE/218kgvzcXOCIT4x4ijlmHS6
PiVFLlmtyTFgvbCDKOA8MbTflDbmTZBTPND2njLBikC7fvQAxOf1toKSBtne
puKxBpjlp3GzdKSAqr4l5FImlyTTwNv/iD8lZ6R8RWJDdIiRfTjVIX8EFiWm
IhE8BGE8xR34VL1LUBzIwq603qWXW4isIrgeHGa/Oe4woJvPZ6JpNK42ORwe
TAE9faaNppFBlPoLt7mz3aOn6kdSOlxiC0gGMFdF1/CV7vfAtR/Ei6+pEF4S
/Po//0RJq8PVQQUMslrXFBwjoWXjdVyWYKDZ/XjYkt2Wmmbipmrn3WYfqXjX
x122eILQXt+QZpdNND7g6wkeolrrXWKbSfXI8jvloq7FY8jj9y/EzQxylj14
pBnNa7xBF0kN16Pc1JYv3ZSNe+SevW03DysKIT1DYDDD5fGhl5s0jaOMBwtL
FHatIAacg4KIE9/ajiOlkzvViIUAd+5t++CngEKFZolHlFvgcnjt4dSPh1g2
TVl8JB1uW5Iir0leqoz4p9tSIMgbEP4cI3t/qP/DI3Ce85SG8c4jbXzby335
r5hULG0OJxKQs6h7eLThXS/3Lp6W+x37uVv/ZXq3pIZJeCHRVSx9uruXm1iE
qLPrBQk+xzMKshnZO/8OSHpxeNKrL5A2tgPKY28I7U8XQaafm0tUUxBvZkja
HKtnPn17irO3g/WdT8NPacOH3Da5Rvgz/3TQjpn0TmRLAAy3EABdRWZZ1x+l
eZlwLCoLHdNi296ONezs5f6UjqNd8WcRaJHf4wYk6i/E89NtPD9JInDZv2tp
c1MFNcdDCjCcEAHivrlkb1fyqKxY6quslIADW0gt7wgrWMJ+ASWSO0HO7d/w
cm1xqVwyb6JhFEuzO5BFXumHWgUvUUu6QGaDeLHaBOG/DLdXVFrlEGUrVEu/
EKUnZC09nP7EiGOIfrsr9XeXR6O4UizywSduHNLAQ1dFl+xK93CUXCI9aYBj
2O9dEj9wgtrh3qh45N55u9yVrZD96xR0g0uMxdoSsInbpMaJAbVgM8QKVRV7
WJYCqZCNB4VbV+WSFyiA/r7noVzyBwpHf4DOf5qmqnd2+SkSoIp+rT2hlHLq
5ya6IAPq2AOVl+dEa7shbfZTirtjl6K/WHrSmOA5ZZh0ZFxWV4iWEbIeTbBA
qg/o37YfKTntwYlkfE0gw5cBvqshlvr131iwOlXavEesLBy6h0YbIFsdWyyw
ODQuBNyUNhPOClXBh5UKsGAogIfwRNYNqt56FBWJ4LX2RNqHaLl1Hp72b/Ry
p+oqHXlniQJKqkIz8YSKAyrDfOlJXUIZETshNL5rGYTQ+JJQoFPklyiJJFzr
colNxlPsq10pXUWjYCUnd5SrzPFGpCLBW15TgDMcXf/rJ6oQWtqkAO/upXmp
snXHB/8GQN1bboNQHc60FUUoivdpK7O9xBtiaMuEfPBNqbzGzhQf98wBVWVU
7K2w7+MmGbKUrA2XKiCze8TgzrS3mIiIqBa4OdYAaegn/IvKyKwJGXktZK5p
PCWlRSubUg5BcZc2odTQa4XQhNefR/plh9o+SCFa/KyqP091jfqDO5hWv0Cy
K2brIstbGCGXXMJt0AkWRweIJA4p7TUhmraXeF3c5tTLpRuKcapOmW8Rq/hy
XKUAy9um/KakTR9Xy5DISy35grEO8MC/MftxQTgY5CZzic0i4XbXni8iQvXp
E+eIMh4sNwDDRyqKzMHjy5XBZenrBPmwaGnepVbirkOKhEi5ZDZSRkuCn9yz
BbJm2QRlrAV5kEyfUN3r/U9YkMbnpHwobjmZaP6324hVxYeVbbs2KwpgoZm8
iMjOOHmmieoJk1cp3rXIJZPotkDuwlXyVe7DNX64qnOa6tcQa77hGm91Zqgf
8YfIqzu+WCpqkaWA4b0jpNvxnRGH/ZU7Z6morUgkS3kkr7lOw8OvuN/BCJcp
eXNTK8hE1AY1TM11L2U+L2l6i4ekbYSUHCNbkM3bQ8yJjcGJbn73BzFD0zOi
nC7q4xb9hQLFDSmuqg3KeZqeLcITEKS/ZQvw+mgn5A1iLeTcz82MHp8DmhYr
IKql4hVKKywnNhCh8v1vysFk9gA5Lgy8lxyYuPRbCDW0kq+95lEE8cmic0o7
eP+jcpzuz01xINfDZ4IIIIeoYxOLUyjVCpRFg0tsKTFA59AkOj5AVlumcoDT
J97h+aADUuM1PAsMFkhNw8R2yt2LW96okFgM5dQ3KHjshgZRYYEUXhpPiKe/
50tNT6r9+bACVtJd/AnlOFRTeJETAaY1E1V1Z7vfHpLJo9pcYv8gKHxVsBh3
NeczYEV4YhuBaLFUnRG6UlbKa9jVFVG6B/UCFUv0jgySJy8daVP8JM5hpU9Z
ig1do+a+GvaXV+/zcgn6gzSu7O2+JT3pj2Jy+wdRh3y0v0TaLBLccZnMjxBn
MJr+ZNyLkA1HmVzDUJoEetqV9MhWExU6rFZPDX7wbwPPC1VXKEljDfGwCjOB
IiK+QYbWmQfxFYSoDVYQkGp/wAUK7n0yjtDS+73XlKoc6aU7onrpQbcsoi1l
7w2lgvL98GXSHrRMAiH9o6Ri9Ky7UgKRDWXgdt/iOzu3/KCIw/dzboqgNRMa
N+DLpXjXwityiQEerJBHGuChbBeEMiGO6gyhrMAJGrIHaGXnEtujnEluhmS9
tLTDYW//EsinInywxVK5xBpvlYA65imNqNthGm5EaYf94wn+nKL+wmvyEvDq
d8SIPfmP8WQNS9OtLhPLYCgythB4SSmhExdMTWVQYsfgshiJkHs+aHKJfamk
8IYRURBAGTCKLOQPB+AvdWLpAwv3baoE3LFH0ZDfy/3cjKB15UZ8XdWQjy95
juGO3A/fTzmG1pDJUHDi9UIXLK8bTFW5JOlhU4oIeFo0YVdqTTcUTP8RryOt
9u4vXrBUu70DsuznbGUGc2xRFPRyh0wm+kiBdJOHO9rTW5zS5DDWcFu6KYkQ
wc2IfuQbiZFtLkEPULAqaIUM0K9kemRmdOtM1qMMxwefeq17OnKjzPGh26aa
Tm6iyb/2ia7AaqiRBEZoD161phvKjCix0uq7do82JEAussCZOt3k0ApMgbkQ
9SPYUjIuzg/eUEWhvUjZYbQXWYAXhF03pI1J+MoUyoRNO1Wy7RIpGtDWmfnE
PQ9A04KYjFL/b/jWymZYXJ/BXX8z9DUSKx3IRcdQqxAiZVA6ETNh8dhE8QIX
ipIfsnlf8wfNV+l8V/rfgg36wWL2xwlxTg/CELG5BEs+OwB5TLOCZGcLa0hp
s3rfBa+whiXeRAEZIa+xEFVPZ3uubits7Sr2a3Aq7RelNCWNdRRJG1/iRTFk
AdMTqj2Z4pWKmxD9iTxv38+1NxKjWJgvNYyZsIpbB1b6I76CPNv/tqTpXQok
3EGX2CvEYmTww5U2KC9gzZ2HrxhlN6WGxNoRYpHvW7w+R8uSmaS1y241DvBu
zNz7zeDQYrx4XQjFhSmHNoHmzU3Joo6iQ/UpESBSEary/JD9FekqU7WTn2Ko
j7veEYQTXz8KwoEF9hEiNEBN4EfEDQgXfnjcKAFXx6NFAvjVb5pWhP4hFRzD
pbCrrO3GIUVyH/cuvopxJnbZSvyepVpRu2wpfIuVcU2yMbQ9ehu3F1m+1DcU
31QcvCk1NTIbmVXhyB5S2LCdFuT6VCtG/3W5sWDVppp1wPymaPVG2HvohXBl
RgSuQ/KaP+iXqx4FPXHnKaLIjxSjS/6XRcW/L0yeIae5Mr/QJzXiNyfLRifm
iCiUI5Iw5Uo3qUxRJN20S+mKkQPENgv4UiYK6A4tMgjoBdLs7eXjl8pPQVLI
URyjwFF8RxDjp5puSA1ziTxaLDVdhrvee1HH6GgDLMciy2Ht6ddQgFYLw5KZ
E3fXYa37bPa/K/nBIqnvpYn7K0DUWzxSHAZzu04UxlBHdhePNkC8Mci8/iLw
l69G91bdH7ZtscvMq387xaTv0ybRxM1ziGW/EqjtN0VdzooGMJWXljlE/dN4
c6aZAet1gdT34WoS+7C8Rjhul2rEv61IejLpYwQYaxiGoDkPL41gNbJsDmoN
FvZyafPxIgkKkEK8xGoY7eXOMsJXOPH93LvT8DJCBGkBh2tyhkXSv+JIodQ0
VHB3XI4W1b/3rwcnxb3lUNtNaeM/eKuhRHpyoyre7xpFuZ4xEe9tFLC8IOZ/
szBtgoXpN1JDPAZckcGgu9UhZNcDRQKsRg9pK/OzxLvJxXWNZfr029f5jjfz
HRwu8W8udCq6Zjy1sMihmH/bduF3To6Ftjen2Dt+lz+os/NCemjWn32D8tLe
M0VfkM6Tp2/sElWvoXytKQk/Xiqq7jmmKdneXCh67hHedVFsWSbqDDj/mmN8
vlg+cjdipCjZ3PpZKiDtLoowt64UnyefW9i2w9z6DWrtupZgfv0h+lZ+N8nc
+i3eVxZlbt2I9z2LMbfm/0Q+Z9wVcWboTJVHrZPYmGEx3fDc92MSy4ytP8eY
X/+MtJ2TIQmQbP3APcc6/vqqqHqzBqLnZNHocw/mF5xL4osvd7d6rJw7/Thp
9tvTZXHOirgWj8si+KLm4etWj8uJqFX6/rlH36rj2ueEmouK+keepZweYq/9
Yg7nl+TjMra5dZP4R/K5E31J5m+OfPM1koZrv8y56PWSa6LqL5AYtvtBywtv
mf0qqr4Njb9NG0TV5biMdvWLqn/WuJjKmp5mcfy1VOIaOuvkEHtQJ4fmKmHs
D72wZLrm2e97mjyu/oRoHDYtS1isiDK/lNTkEe6HAXEvE8xvWIQtlNBmDzSX
Dj4fi2r18HIuR19ENXlsL5Gxq8w9gdS4kiF2HtEylbHvG0wYPrLJwysBx4lr
9ug5PnSEq52NM9Ig3/jodVlhnLl1t3jHOEn+5rHdTHakg5kl2Sr48lZD/6JH
iuMXQLOUGeeMwBjeOTf0l13dYe70D3YglHa+/J382Wv5tTctHkxHJM8LUc89
Lh8Yr6t/2OZOtRjOxd8byyJGxuQtHisdBIjjvs1lcSJF90LZEblOtHI6eali
zEVtRTtGr+02t14PNnHu+K9gO2vxVhFYhwNYx4fCBNw6mDZI288iWj16FuNE
wBTMNbgFvG7x8No4wXYqd5jfuEfQ889oacw0hbzZw2ozQiuUN3msnKUkLMZZ
0dvqwfRHXzwbfO5htQe17oJuDu7GW4PNHisF4/X2hq2nBUr4eXepjH1LOxrZ
0ImhI188ElUz6VfH24D5pd3PPQ67BCCr+3JPWVTLM8XCLlHnVoLr9yMPw0bK
wsytX2OaYR/VcumhqPotsqqe5xfAqujIvkZeiqrXE94I39pqnIRWa6nofOtu
8xtDuHqKd48+6x65NtjkEbkQjOBVX5j5G5PMYqrbDGQu73bJ2CuYiOZBMPtv
dFBL1jzE5hKt47IjTQdALZqin/pP9imcZey1xBfOsiOTmRL0zaKy/pHWlNKh
Iz98iR5Luvqbryqah47MlSAbIz/qlfe9awOT155gk9tBKT+P18kvomqP2gQk
1tYIsNKYCQq7B7Lwn+jspaJOV8oFJK66d2PPokauhQGW0p/B3olWQovH1UWE
kG89ijr1TGEMQh6mnFbaVmnEaIO3j9jVeBwZMeY3mrCFw95pMdN7FNumx24O
OCtRyBX6LP0g9O6EsW+xKWaKHWeKs367CqHqPQpVzijMnfqBPH2P7IizVk56
2wzDTyrHUmZN79KY8uVwmWIVSWhBm/cl1uM/KeDxm7ahA5O/Dz8+xDbRRpJM
ALEPboRG7ylZmPn1BhQFv2iAoXNRsPw12fwGGzfUt7fL3mxWRDR5XP4csXZV
Bpb+L6uGEOs6QUi/gUlUaiDjGIVWLAViY9/xQhB0+EI8HIS1emxvGTqyWxs5
uuamsv6TZYoPhaLOAd7Qhqwwygz3xikePn0nShWLZewtKCK+RxHRqVvl9g/f
j16LavHoW44Hz01FUaa/ptyWsZ2nIsbkTUNs5zhovDGRhSmc9lT/gij5uxQo
+YBMt+fkT6Lquzh1G/tFnS9ndAumBMXRegqjxiBFXA+cqO67ok5TDkQf8qN+
k5+6U2Rsk4kh9G+wpxQ8rr+D0Bk70XpguBYUxW9B0Hpz5IdvLlM2MPpdLzTd
fZNSJOqcT5kOA09ve2PSNVjWIOrkfww98mtx5jdsVeE37oQiodnjKh4eIiFu
LVT0P/fw+hwPMgnPPQ5GQuNuXCuwtRVPQ7u7IA1Z8dD3D8ESe2zxEAVxMlwZ
SJo9vJQhqtXj4KaJygQLcJ+ozGei6in03PFRpMnj780ydv1U3JFHwI6modYb
MMOvdPAIP72tf2NRb9nDBHOnt2KcjeiW0nfHx7pPDh1ZgSczckOvya+vzSFx
NWpkgSpKZUe61YG4qVXR8g9w8veJBkjwl5cgWltlwKkL3oJs8tCag6QRDVG0
dAxCWk+84Gc8N6VMr/QI/wKix1fK6DFSqhBBUDSdoLXYJg/mhgl834wzv/4W
G8/3JYhwsbjBmEF14UP4fHmC/GHc2LWwFo/5S8r/mZ+6c1Z12Pqgc+delo2W
G/FuEZlwD1jJtJysZR/niwd9EDmqH2LEN5wJBcWj8gEUF6u0fOdwbr6GCG5+
vZp0CbcaxQGG+SVIDZcdcRUmQ+szXHExEHTW4a3eFg+r9QGEBVwTdZ5ENuXa
9tr5mswcCqYeJNzo50Nst6kTBBANJvAAkEp3t/402jXAdtMKBcrDPgydkcAD
zsab1iH23GkTsN4+98BI1hjmgWHYxv1aLwqZLRURRosymvh7GEUhDAo0DpIq
I4yGMPhKJI7euH+JoHiemyWn+RjpE1bk/To9ADPUArCjNARGAbDR1OiNNHth
8bz0EwD2whvAsDkAxjIAsDpNAAvXALDwdBitEIH1AFhqIgJz+To/xNAcwE7q
ANgXnscLmTtnrN64f5Fr8byqaRYw2jEAy1oBow3MvPScn60HYE8nwWj9MzZs
pO0EsPRFAHb2wvkd9wfWAhg2F0bLMACwzk8rC5lx+2DSmwgsbPkfx17ko9G+
ALCaecub+OLv8iOMGifDaH0IzNYNJj1uYap6lwG6N3yegu4N72Whe8M6xL1h
ttjYUkKew1JeGhYaHfVafdRtEjuQKsa2UDmMNPSfRFFlSCKajH8UPPwtCuhO
MV99p9jdF/X9zJv83+4UK6/oKj/+z+/+/o+NRNwNtrcFU8H+l/vB6OIvelcD
uyIHv+6rtV2gmUGn84N80AG48xgtJMtNfXauXKwZa6k6dudq6EPqrUi1rcoJ
1MWv3r6tEYc/zSWxd1LruG6VGxbzLf1+51b9+ZmTfmI1ViFgMV1TtcgHnNMD
Ka48RsDxdFfhDMMLS0L3m5CXfx+ZdS6g2MKCYpsdIvg6oDUgYB+WPZNDW6it
/UrDpj0r9XAVpbKcuShY/c2cwxtZBwNz/mykbjG8GKCxjLc/0jDDjkfRJHeS
7cWqiyc7Keq7RgZk5+wQy8PEhZ9cyiGDwxvSfjChUbWfidOwGxxt9QWnV5jq
ksvX+wJ0thodm5X9EhOwYmjaU54BEIdyGLuwfA7LXd8ZS//cN92Zkx5pWN6u
3YmGwXTUwwyph7m3T6C/1ei0JX5ZKbBHUKWx/VjO6/1nmcPt2uiK0wdMdcWJ
pK++4uTPWBl4THiOfBohpfYIujXsODMFWyedS/1SIJ7xF3k1upUzCfFoqaHi
cbspeX12yMWrOI/Bv1C8TVsDjonPzRPM52kY2nNuoltCGevUN5oeWoj3bdgf
Phm/fGXlXFcbqL110tVIQ8vPLDU0ydT09WJCjjlG+/9j4GpB6VpTN6OK5t5O
owriWBxbOonfzKGG8u6LkyusSA74Pcg/Uoe0t/NW5D7Qba4Q3DlLjxTrNAqW
8m6kfhFQb6qvOf0M73G6Za3uTopB5pJNOXVsQ2qNRhFGXOfjNXNekVXHQPfp
CB1r+eJUQwjEtLmW9VqXczUrZpZiVVqk2dkVVulGJ5U3GWmJOb2UObW6EtJn
pFghulEbo6G+47Ikh7Kwln9QaEQcJg0OoB9fklthJTSKryqXuC1Ap3EPfrws
66Q+jTuDnV9lRTG+SNxv/YVG+UT3Zp2W2z7tDnTpO0tbfY6zR31t95I7TyeP
Gd5OIw7iGjemHtNtsEo1rkMs9qLT50Y4i+Xqa7x/6VYsruXfFppSF+E3TICT
ggyHFe20eBoprWIROr19hEYi+RjZLqczSIbosvgyLGMyybUYHQp1FdPymJum
4seMy1PNQm0tNDtpJP4KFrraiNGPGW/K0gEyq4mLq0vUrC1kH6y2SjetI8TH
pyfm/FU9u1a3Tnj1o5uvTDNP25SpPiKbQ11CzaMm1GlVLRxJx+/fiv99/zZD
df+WMq1TyFNexQYT0JjLSAyYutGB+U+ArgW6wBitq5bdHJLqDOzZpSy9POau
XLrqDOy2GJ08ajJIfN7ljOX4GVjhCvU84eynMI/5W6HyDOzzL3qqrCqmjTsD
u+PI5DyqKPcGS5tKg2idNB39BrfvQVfRlS6Ft7zmjvLXCFlpv6JELjngPfE8
iu9na0iPIxrypb710PDrKFglrzETED8ryPbKyvq4hd+gX0ycern2x6DRlNTL
/c5CudUuO12f8kAuOUVDv3jae5/4eq1yCLRbj0Mv7uVOmTlh17vmN0/lNnHJ
4NuUQZegw6QJv3H6ySWvlxqwWgpOywvKGF9Th2uWqxE6Pvh3uMROYl/3pK5p
TE5pujkK+EfQ/p8MHVQ7gLdOQZ8INfyaXGInP1bum/UXj8pcgg4hCIfNHcqf
tI70D5d0j0YBwnF09G03yGfU2oD15l0fFx3+RKfP8ttuS5s1J+xPNXxIaXMJ
OoNP1tLtErQBobbKawqIsyb1dOJUiZ+/1I3YzG/bqZAtQ5tp8W2LerkXcME4
9nMLjdFv/E0Je+ewiZ+0S/plKU0uQVdIHui0WP8nusrzu7f2KhL7uA7EsBEm
T8YdR615vUgpHFHH0LUTjNWgzGSg51YEqMV74gkTw4DyF3JJi1wSOBPkm3hK
LrGeRwg6X5q9o3w1aXVEU37LDAPW6xvotycElJACCHYEUAJo5iyu6fzIjRuR
1XQVSQ2DBdBCe3rZwf/eXw+KAgkVtYDYE5Yj4Q66xJJPjj+q0as6U4tvcPcO
H5LX+OHWeqZDdlqWUiKv+X1dTx6nnuYpyZ13OKc58ZqiUIPGAdCkPu42veTv
BIv0/rSda7169WBbIa6srptS360YUIRUTJo6/mcqv4ayXm6XSqTOZxQwhgw/
07bvtEx2uiMlQl4T4/ks1ar6JbMxons4qsElKBfXhKhp63cwdlN8P7eIrTzB
snuzIqGfe/dbpMqbfdz9uE5H+rgeKgDnUkUCEDkdn+BBR9GV/rIW5S+ALcXg
M++AjdfFvdxMFg5xarDoyqCij5s56EX84CMTDS7ZO+3rBM7kF341MMdYU6E0
+/fxO9rr5DWzFyFFlhE/7WdrrSEdedjhEuQO+r9ZKpdcmaD/G9Jm+kQzHka/
5U7BTw10Fn6HrNOul5uIs1TQy11myBvvt+9cgsKROk/Vu8Qa4zivfo3Gf6SL
8Ef96FdEw5NA7nUnSmLTwrGmAoV7tRCjsN9LFuNM77wirylRe3L/hxTwnEzC
YbtdYmfgQw5MMcFdYjhiOfpp9kqXS++STGnjOhSZZOh4OG6kHTe98RFlwGMC
3kqSymuExCmVNuV5ECODUumw57zA8J3ZPUFlbQN8F++kBy96bEvu7L/1hB7t
qcfyThGZnRgvX9XvdEUdLEKHDnsVt75F1m9/Bj8d8SM+Rd2JY8j4ZbekTxtY
Km3vVYDsLhjiPr6rl7ueaDn2cafGEodfApGQImQusdwnyvOC/QsVTbekvmHY
eKUGn0CB6Ja3nBGWw/xy4O699ldPWpvP33v1d2dz6dZNja2t7fcGnrza9LK9
8cmrLxrbNz1hrhy/lfMPu/v4+FVTuLn1/Yn7aaWizp2nlcvJ0pixrkNR4xeE
T0TVJ4/+RaIpnFjmTvqq1bOsZQxW/Qdtci6JX5Xubkbr3INW0C6MavaoXYA6
u5s9tN3xHRGXsn6/ohQTWI7jO2V+P/UvfqT4AItA5sS9sOceXnMA86ochrD5
9y639aKfydNFv+7w/9K0/FfRzQui82so2fznd/Zn/jbvzYmTDid/IJ+7+TKO
gjYeb/bD+p3YeIOl/+6y90tkR25dv72Cc3pSzPFvsy9efB+1JJpWexgWo29F
siP3Y5QbePI+RbMv5dy4vYULH5jMshjJitwKtCElL4wxdzr++fAGr+OMlwrv
9vdliq6xlJnipb8q8P2wtQIfifCr6Zj8c7Jv/Mi1/7Jb9toX31VpH5S3Jo+U
xZjf0MQFOjxSKjup2NHicXD+JXEo2kOunYuEmdDqUYtL9X2zRzh85dkPC/bL
npfEkmtoI56bPYEnc+snYiSFvsG48sZtwgtaWazAjabCG/0fxrqfe9Tatl8U
X7wqb9kDbMebytj42nkaWjvTqGcLmfeEEUZTMp7zbRkFIVms7fd5Fk+PBWpD
I2cy9LRrwFcjZNcIo0oSAP8p9tm4XyS4OM9tCQfAZgGYjx6ANU5a/pw/QAWw
PWQAW5Lqs5F2HcCqfAHsrNX5sPvRUwDMd3IG+eO69Gv0/kjq51boFX70cetS
fo5QeNSNfVRIOoQdFazWR6/006fTn5hQOjn6VM8opu5RvDZyQ6WgK8srDuNI
mNQu2ooo5pQCn2hOC2/GMXdUc1WoLnOF4vfUoGYymEYN5N33MSQ9MmFeZmEt
vEWmywCyTg0pxl+XJEBlKr3CqJZv6qm6cWTuk0dd5sD0MozXpzJowRjx2g2B
DVPHKNTo4LE0chjVwjKdSXUOig4G+ACO5mljqrtGjcZ2VOcb4HcnaSo6fp9D
jefdz7JUFX4/s2gzNGqsSHwfNiPTkDX1NgkKzc/w6txUXQDmsjorrKoqqVya
hkFaQE5JmpHPVE4e9Z5gKWfG1zEkMyicSTS8xEzCVCXm767t9DzmIb2Dhvrr
oKZdNnmHYJO4VpcHxXKuZ41GMnrJzVREWzldRdu386k/8O4PCFS03cDoedSV
Dsx15p0k9H4XS+X7XeqYVRqa8bAwsK2qo52ro+vre9owTWaPkDQ0YpMEmrGp
Foc4+hUWF6K5NMmUtID2I24W1Ovi3bmaHCiF30J93glyvILkSNVnYdeRGjTh
m2KicrdSs93Haq60cpuhoWS7gAJluyCOlmqm5OmZ9h7eCg7bgDO1Gr2eaD2O
Pk+N/g+rp9Kqyl2FfodiwpoCUnsKUvOSxKfOA2auayDVd5JVqk/QIcEibN16
peqPL66usEotiIGyGusEW/x8AGXmfVdlRQ/ry/Ya1KnqSjvIHAVGBqwXo3sn
1ylDe3fJWEPhazPIHPmnz1SiKvDVQlH3nrGGgjd4Z+nGutWkIy39BVrw+Mfo
XpPH+OPNGzDOX/l7sa9sSY/jm5xGG54loQMBziJ9HWW12vAuqiERnRWTDfct
YcdMwmd8lZzSvWisIb8XirM/Fp/yx/DTnUWnGsoiFkMBk7iq38FnwunneEVH
4ScTj4MdMAQWHCJslmm4D/udeAqlRMvgbYV7xu94f+RaNM6jwcQt6wQZbSUJ
iAvbU00NUG561996j+YVeW98iLhouPUZYkq06gTOVEPJBvwx5Uy1G3F8t//t
WMMo233CEZkfnWAW580dCZu73+3V1lGe6x8c9e+6kAEzdiT7mTSiuRryndBo
JQ/aqKqzB7u9FfYi+iPlkdPuktHBu8GA0lUyDynlfWTyCqj4r3SN6bGfxSNh
2kdEAS8OEU2JFwCsPz6iQSZcpFwirWxIKTmDuaEjP0WnmhQRPojrlPohdEmj
fiRyNf7Ytn4rIHbfvITGXxgVg0YTNdjjmpJFxOOP3dveKGuI3acUQyJ2nZK8
/vyxhttvJtxxacDwxdSZtqKHgymHTJ4hoXXcCkNsLm41r3JTnkweHWsoipmH
ix1qkZOpbspjbXtG+9fjUztGWcPU9mUNhQnIPG5EbGGPv7UTGT3+sT5yByja
cVUTO2P8SQP7T0H7JfJDNkYnVpPYD9tm6U8wEhmmWvetrE+50rR2QuGycf34
x4wTn49/PGry2fjH+BObxj9Wn/CbcFTDPE1pKt2jo7JEnDuniJ1IsKfaZiUi
7nZpqfPJOQzlkxV4PkHvd9Q3JFmmGkMy0Rca6dcxBE7QV02jP+FWnTOEPCJl
asX9lzzyHW25lMk+SuSRJ+j+KkedHXzU8duU2mzlFkhdhC/546sGAgzQ20lo
qpvROamq8JPMkkDQTlUF7RckuxUB8VXl8cYQSlPpH5OIYYCR43dps15jFuWW
GOtpDUbdr8WYz8E+JXem8dF+FL7n5Yjv64lZ1PR7+mkO2SGeRwOqc3JcWcz8
NYz0DeTgh5zsZUzNOdQKwdx94ccEG7imDMjzwPcxZPEdiyNdkOxK+wvxx5JI
L/TYKiMiGlierLW+LJIPBiGPNC+f7i2wbSlsVbyzcFR6RWtXSpQVQjnc8Ek5
6yt3zp2I/ncpTY/AIQ8N5j82RSuavW0TzmeKGkakKMY9PtT9frbKu1plKX4b
ISg8Lh2U/cv/JwnH36Cb8gMst/rz2xzrzVSr2xLZ8KMTEsC92vYyCL7tLp69
dLwXFb5zn3BNrwLCVu+HSE9gylnadAQQHzZta2cRi7/d/gr5TIF65BH/enRl
K74jOcKhbvyx3NdosRt/DcW1x4e6Pmjw8KPQTc6jTftx+PcRi3DBdo3fd5+O
26ObleodzrZgj+hdnu60A7z7LEaF4E4Ag5oLaRYZSrNw6UFDFmSfCnMBZERj
sLdwwclUXSyPKnRk4e9z/iRLv3w6O8Wva2oOQ7vK8ZA5u57EYYptU/za1k+3
0OJblKcFl2c4enfZZnxvm1bFW9nhUd3prKOmRx+nR4jTQyLowZwWfUemnm0X
gNVwqBUBwnSOVrW2CStVgO3IoJCU7ySN5mFPRhZHzdZgGS2JmPsl5lm/JFBn
NUU1rsG4cclEHYdYx0o4TFfaox8xoaVjFjudzBDyfOs4rzRI1vyd8zUY/HAB
lUoKdcRf/6ycQ4TPkaL1UYaH8bG9P9aIyKenX0x1zRGiHy7c2fpLjXx2EG9z
fovkygO5rjBhurrtuWvCi8oKVzpsAos2ib8CvQ4NidgsQ/gkwO3tpl476mFX
oZjpQGUb1vL13VXAAbSvbFawat2rK7No5+s2p7FDOBs1g4Jn/Wn4RKy/K96S
b5XeBVKqEGBcWg0tLSCLHi7w/IN3P9pQud34tMLEs8FKWPeD25OEYNMar2rr
86TZb1+Vi1O/q4jL1JIEcMTfS+zQaP+c7cslsRlI24xkNB6NnhaQS48fMKvS
SqVBYPLUrYvhQPTA0gLq6Ims+CpOjtAQbUaeJKl3cI3FFVbpv1BbeI7hPjT0
joYd6pcXtkPNeb+cioo59FaYvTm1ulZVNHfTGVTeiiwQhz5UUC/pT6yEqLrB
MPRbyTbCzry7ipQGV/+dsmdQbXnfaLBL3TWenV/EfoM7yPIJPlhc4emZ7sXI
5RjxLFbWO2kFWh9q5x2sH2Zbv38YR6nRX13tXz9kzVnrDoM3fC72Yi8dsTtk
jlVinoMNtiI6AfDBAgfw7n9JHZ97TpH5S/XfNMRHrb6vx8Z7WpSO4d3goWy0
4fYQw1G+u1ubNT2D3KHhyFqSRv1urm/u32lajxa84inSdA7wGCRN1SvDQ5gY
ht4Ar0s5OozyB+ovA4NeAJ9eSp/xVcKiT/Qj27ByPdNHJn5bG4VPZ6WtYuO+
x5Tw6I8RRrwfXvWJ3v+PzcAwR5gQvSfeDCPGwvsdMWw59MfAsxX8jRrXfxP6
P4PnE/B37bj+PmijeKH6RP0MQB7BiBig+sT7YV4WiZhX9anqtyARvq36VPXb
kwjaVZ+q8VfBszH28VMFH0Yi/t8gqk9Vfwo822AfP1Vy+EX5WnfVp6pfB4Sl
B8+V4+hE/NaTiH7Vpwr+pRLu5b/4kimfZf/qZyh1qPpU9U8lE/yrPlX9VmQC
X/Wp6l8Mz5Oxj5+qfk8lnOe/4DeQCX2oPlXyjIBn9COl6lPVf4SM/g8EHz9V
/ZfIhHxVn6p+bJw90lXyYRFtXezjp6of/fEDX2CScF8IQnMkBsba2NrYhUWG
xYcFhoftCowPi4p0j4oM8Q4Mi0R//ZclRG5BnTOs/VfCt4kh/v5r42NDAiM8
QuJXhuyMdw+MD0S/5/r4+6PmmpDAYOL7//pe6P/6tuf/nx+M/wems574GzP+
PvKQndEhW+Lnh1n7+2/budM/OiQ2LioSeI9P9k/kLYsNCfFemRAREhu2BR8p
PjQ2Kkn5RvWlO7eERCNZ4ONEhERsiU6eH80LcyT+CbO3XZMQGR8WEeLvBhTF
h4wfZ8Kg/nEh8T6BsfFxyyfI3Z8faBccEhIc6O+01c7R39aJZ+fvtMU+yN82
2Jpvx7MNtN8a4oArxW15ZGLUFhwJf/48NjAaGPF3CwwPxzuW7oyO/QizMiTJ
X/U2+KWxsVGxML+ambXxyeEh60Li4kHC/t7rQiLjomIBbUuoGsIzMDIYMAmm
lBBoAlxYxOM2GDA+JBbkqOxQiQhmUktHLf5YkFFkfGD4/MgoYD4wbn7clqjo
kPnBIVvCiVfGh20NQXKcHxcPUsLxJ/aHRAbjvdY283nzrTnBwYE2jkE2gTZO
9o4hdjZbQoIcgm35jjw7J4fALXZbHIO32PO22gcH7nS097e3nRe9ZV44egv+
597qV+T/X70gf35S+HyvfznHfK//x+7xPzPhvxxEydZ4cyLixv8HwylZqA==

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                  "Real", "$OutputType" -> "Real", "$InputShape" -> {15120}, 
                  "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                  "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                  "$Scalar" -> {False, False}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{15120}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{15120}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/4" -> <|
               "Type" -> "Compiled", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "LayerFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    Map[
                    Map[If[# > 0.5, 1., 0.]& , #]& , 
                    NeuralNetworks`Private`Compilation`input]]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_2a5deeda_9f58_4905_9c6b_4d12504a6fe7", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1: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
seU1Wk2gFsNGLeXyrJ43lTE9L9U8uH3hnjTdpDiHQIp9lVZqkxiyrXMzwe0a
E4gzh7+o1W2kvYbVS5YD8DlAhKZWtYBu6EkeWlEiXy3Dw9kvJppJzrE2CPtr
wP7rMMjqFa1iuXhTO8KuWY5bxCs1dqneScCOGl5GLAxLQLH9J+9ZpUZlQfLX
OIcEE4ULJktbJZiZLhV/QypdtpMQTDugDGfdtxLujK8q55/vcEC28JPaFrIW
qm3hPTXX5j5nWichnoP0vaEv9WzyqJ1gtafPP3yFL8+11X7ZraaxR+/pQyu3
5JMeRIyfNnz2yqMzELg8HJhhHQsvIhNgOatNIE9tAndW5TjnMV+dnUYErl3t
mbQlkTYrcqYF64Fr9iJf1sNRitQov69qB5TuxwQKYzesypZcsV5RN62Fd/5u
b7U2WpX1qX16QC2TH5dUDNfyi+l7CJn0g0zGiu9akfawLoM0SkEaGZdxFLGO
CuWvJRXvIeL9qkT5B1AUJ+9bVeyp80UBn6IuCLLUKDNdKz7U8usyRQTKO0Bh
vL5rlSoK7lXvBL4QVX9S81y9g0geyVqVVbBWtfO4b9j6DGfHT+pNxH/iXITP
Vqo3H1/+tCft8in1PmKdzgfqBmf1/uNF83eTfklU71sGLOnWg0wLWiiocnmJ
tDDgotbCG1ykLJQLfMRL8pgfrptX3K4o1yTxVmSZUwwuc9rpJ0che962WdKL
+/ASNeqwGvUPnwFAHXlsDvlKuA/ylZ2+Sx5VDtVJWbt0BOwFHGYMN5MMMJOF
+gfrrNJTRjwgfPtYMGhfaH/7yEqYUmtEvadEd7Ll51EV17l62tRhBobNmide
J4gfvC1tjBGsJR3x7ihRuGdIs1+iB1HHDfRgOCBYQzpyqD5f2rgXtfyaiqSb
vrQ1c0/Xv9na5uStKOzj2hesEwQPOvVxXYLsPDTcS3q5n8/ypj/mLC1tczjd
XbZZLnkzz4D1e9EVOYxyHY0SUV8sNc1eaqWbqu9cOmgX0TZ0RbGwl7v+5TrB
ug7n3vqxuOGaCHd3G86dlm6HzW0pV+Q1vy2FR42rbQ5XuxQr5ZIr9BkwpPyB
XHKdBq0/bKEVg1q/J7bJa67gwKfbkiJlZaflkh8noy9GD8klEXhLVCKX3KD7
UCzcqW629ebsfXVeCf3cT9azH4j19xxuu3laUSR9uqePO7QkCzjrut3LHVqI
Wv1Dfdy7TgKtDBab+dgrxV3f1eavImljPpJXRFc+LrzXYnh4AFJqjO/j7ndG
aG23+7gv85GM7Hu5LrH5pGfxLK01A+9F3QvHmlyC6m9JfX/A9tm6uvPcbUbZ
qxkPgvtdYqtIuo+Znkf6h0/1v/eH4bJjkeC8uwqk2bdwEYLassPxvoZb0pOH
cJUknWkrfqAo6uUW6SNeive2OW5W7AQNEXTs6ufSXEDlGQ0wSiDgrj41eEPa
GIC3um9LDdF4q69035Rm/4PZsT4SdB7I7Cc/FTDYFawHbz3cLWz1QKxLNSeI
0L6fO8sVFNjUmLeovH3B4UHWVP57yRWdCUDOvdz9s6PHS/C9Zwmw64LLpP2m
qNt5tMNlTX+R1DRO7G5LWfNqcUp38liDQy/3O1OOkqn3rYoC0LeFmQHrrxJp
41lEdYkMjCsFbwFyYx+STEnHDalvCepr6SqUnoz/OKCiwaGPW0io92Yfd4oT
anXv6eXSlkxQb2+BdNO2cly270GYjxR2fvKapQKlZa7sSunnHpvdrlTtu4fy
GtLyeqGtZ2r30KG2oZRul9gBXI2p3bIrDaP+XTekhu2IMFFDodS3Beg61Fa8
Si4J07E0YLUs7uUmpzAf43K4IeqwHe12CfIDf0KGiByjza4Pd4wCT5h+X2m9
LLJBAfYU9CtluYb7UGmDS9AtMrTsrrW5BMlRq/A0jNCJvrUvBREfID1BYzeL
9nYVjw3ekjZvQOLodN7b8X6su1DaeHuCyjOA+MnfJE2qtrFYmaerZ2CX0sel
zZkgnD9KpJuiCOEUR7a9X6lIAKWIvMeru0DanKQWXzKI77Bckqrt48n9CAJx
Y6slEn9DcS/3mBVqNeX3cZ8ZQmudDOxliiOunF193PXmqK//fR83Uw+ZQtK1
tuIWhQwCx7+0BtLtnsDN0S6XoNoJBlwPtFYIIRgMPZTnK0wTQMiW5TBPx602
x2+kzd/ZIaLlJTI7UZt9qSK5n1tkzENB7c6DrqK9gynegy5B35M8NdyT2uSS
zzQdIQQteiD3LIF5HlL0n3yc55u98prFNE/cKrqGrrS9bWtwiU0bp4rRwUKp
6Xcq990ZqQD2tpoiRrtB8/txMXSN9HG3GQfg87d0ySK7l/RxE2Bib13BeGmv
NxQjDoqkvqUTddnvEiShrARivZtc1sgKpYZvJ7p3h0tQGql+nHS+AZma4XZt
188t2CuXjM6+T2GOxXFcYiUkQ7lVTT5Jd3r4V1xLmXfHkmtyyT5NFIQLIDBr
6KCWo0heM5vuhbg+K5Nf6Rr2byqRZkfh4aoJAs3xtWD7TYWr5I9ecLfGrRM8
BbkNkcBSE71lLkEnSCs03Av8Bu16uZ+oAtmwSCGD6Auw6xreRh5A9v2uFcLS
CfIasO+UpjE9tsuawXxp9s/I3x+0wXTZMElE/218kgvzcXOCIT4x4ijlmHS6
PiVFLlmtyTFgvbCDKOA8MbTflDbmTZBTPND2njLBikC7fvQAxOf1toKSBtne
puKxBpjlp3GzdKSAqr4l5FImlyTTwNv/iD8lZ6R8RWJDdIiRfTjVIX8EFiWm
IhE8BGE8xR34VL1LUBzIwq603qWXW4isIrgeHGa/Oe4woJvPZ6JpNK42ORwe
TAE9faaNppFBlPoLt7mz3aOn6kdSOlxiC0gGMFdF1/CV7vfAtR/Ei6+pEF4S
/Po//0RJq8PVQQUMslrXFBwjoWXjdVyWYKDZ/XjYkt2Wmmbipmrn3WYfqXjX
x122eILQXt+QZpdNND7g6wkeolrrXWKbSfXI8jvloq7FY8jj9y/EzQxylj14
pBnNa7xBF0kN16Pc1JYv3ZSNe+SevW03DysKIT1DYDDD5fGhl5s0jaOMBwtL
FHatIAacg4KIE9/ajiOlkzvViIUAd+5t++CngEKFZolHlFvgcnjt4dSPh1g2
TVl8JB1uW5Iir0leqoz4p9tSIMgbEP4cI3t/qP/DI3Ce85SG8c4jbXzby335
r5hULG0OJxKQs6h7eLThXS/3Lp6W+x37uVv/ZXq3pIZJeCHRVSx9uruXm1iE
qLPrBQk+xzMKshnZO/8OSHpxeNKrL5A2tgPKY28I7U8XQaafm0tUUxBvZkja
HKtnPn17irO3g/WdT8NPacOH3Da5Rvgz/3TQjpn0TmRLAAy3EABdRWZZ1x+l
eZlwLCoLHdNi296ONezs5f6UjqNd8WcRaJHf4wYk6i/E89NtPD9JInDZv2tp
c1MFNcdDCjCcEAHivrlkb1fyqKxY6quslIADW0gt7wgrWMJ+ASWSO0HO7d/w
cm1xqVwyb6JhFEuzO5BFXumHWgUvUUu6QGaDeLHaBOG/DLdXVFrlEGUrVEu/
EKUnZC09nP7EiGOIfrsr9XeXR6O4UizywSduHNLAQ1dFl+xK93CUXCI9aYBj
2O9dEj9wgtrh3qh45N55u9yVrZD96xR0g0uMxdoSsInbpMaJAbVgM8QKVRV7
WJYCqZCNB4VbV+WSFyiA/r7noVzyBwpHf4DOf5qmqnd2+SkSoIp+rT2hlHLq
5ya6IAPq2AOVl+dEa7shbfZTirtjl6K/WHrSmOA5ZZh0ZFxWV4iWEbIeTbBA
qg/o37YfKTntwYlkfE0gw5cBvqshlvr131iwOlXavEesLBy6h0YbIFsdWyyw
ODQuBNyUNhPOClXBh5UKsGAogIfwRNYNqt56FBWJ4LX2RNqHaLl1Hp72b/Ry
p+oqHXlniQJKqkIz8YSKAyrDfOlJXUIZETshNL5rGYTQ+JJQoFPklyiJJFzr
colNxlPsq10pXUWjYCUnd5SrzPFGpCLBW15TgDMcXf/rJ6oQWtqkAO/upXmp
snXHB/8GQN1bboNQHc60FUUoivdpK7O9xBtiaMuEfPBNqbzGzhQf98wBVWVU
7K2w7+MmGbKUrA2XKiCze8TgzrS3mIiIqBa4OdYAaegn/IvKyKwJGXktZK5p
PCWlRSubUg5BcZc2odTQa4XQhNefR/plh9o+SCFa/KyqP091jfqDO5hWv0Cy
K2brIstbGCGXXMJt0AkWRweIJA4p7TUhmraXeF3c5tTLpRuKcapOmW8Rq/hy
XKUAy9um/KakTR9Xy5DISy35grEO8MC/MftxQTgY5CZzic0i4XbXni8iQvXp
E+eIMh4sNwDDRyqKzMHjy5XBZenrBPmwaGnepVbirkOKhEi5ZDZSRkuCn9yz
BbJm2QRlrAV5kEyfUN3r/U9YkMbnpHwobjmZaP6324hVxYeVbbs2KwpgoZm8
iMjOOHmmieoJk1cp3rXIJZPotkDuwlXyVe7DNX64qnOa6tcQa77hGm91Zqgf
8YfIqzu+WCpqkaWA4b0jpNvxnRGH/ZU7Z6morUgkS3kkr7lOw8OvuN/BCJcp
eXNTK8hE1AY1TM11L2U+L2l6i4ekbYSUHCNbkM3bQ8yJjcGJbn73BzFD0zOi
nC7q4xb9hQLFDSmuqg3KeZqeLcITEKS/ZQvw+mgn5A1iLeTcz82MHp8DmhYr
IKql4hVKKywnNhCh8v1vysFk9gA5Lgy8lxyYuPRbCDW0kq+95lEE8cmic0o7
eP+jcpzuz01xINfDZ4IIIIeoYxOLUyjVCpRFg0tsKTFA59AkOj5AVlumcoDT
J97h+aADUuM1PAsMFkhNw8R2yt2LW96okFgM5dQ3KHjshgZRYYEUXhpPiKe/
50tNT6r9+bACVtJd/AnlOFRTeJETAaY1E1V1Z7vfHpLJo9pcYv8gKHxVsBh3
NeczYEV4YhuBaLFUnRG6UlbKa9jVFVG6B/UCFUv0jgySJy8daVP8JM5hpU9Z
ig1do+a+GvaXV+/zcgn6gzSu7O2+JT3pj2Jy+wdRh3y0v0TaLBLccZnMjxBn
MJr+ZNyLkA1HmVzDUJoEetqV9MhWExU6rFZPDX7wbwPPC1VXKEljDfGwCjOB
IiK+QYbWmQfxFYSoDVYQkGp/wAUK7n0yjtDS+73XlKoc6aU7onrpQbcsoi1l
7w2lgvL98GXSHrRMAiH9o6Ri9Ky7UgKRDWXgdt/iOzu3/KCIw/dzboqgNRMa
N+DLpXjXwityiQEerJBHGuChbBeEMiGO6gyhrMAJGrIHaGXnEtujnEluhmS9
tLTDYW//EsinInywxVK5xBpvlYA65imNqNthGm5EaYf94wn+nKL+wmvyEvDq
d8SIPfmP8WQNS9OtLhPLYCgythB4SSmhExdMTWVQYsfgshiJkHs+aHKJfamk
8IYRURBAGTCKLOQPB+AvdWLpAwv3baoE3LFH0ZDfy/3cjKB15UZ8XdWQjy95
juGO3A/fTzmG1pDJUHDi9UIXLK8bTFW5JOlhU4oIeFo0YVdqTTcUTP8RryOt
9u4vXrBUu70DsuznbGUGc2xRFPRyh0wm+kiBdJOHO9rTW5zS5DDWcFu6KYkQ
wc2IfuQbiZFtLkEPULAqaIUM0K9kemRmdOtM1qMMxwefeq17OnKjzPGh26aa
Tm6iyb/2ia7AaqiRBEZoD161phvKjCix0uq7do82JEAussCZOt3k0ApMgbkQ
9SPYUjIuzg/eUEWhvUjZYbQXWYAXhF03pI1J+MoUyoRNO1Wy7RIpGtDWmfnE
PQ9A04KYjFL/b/jWymZYXJ/BXX8z9DUSKx3IRcdQqxAiZVA6ETNh8dhE8QIX
ipIfsnlf8wfNV+l8V/rfgg36wWL2xwlxTg/CELG5BEs+OwB5TLOCZGcLa0hp
s3rfBa+whiXeRAEZIa+xEFVPZ3uubits7Sr2a3Aq7RelNCWNdRRJG1/iRTFk
AdMTqj2Z4pWKmxD9iTxv38+1NxKjWJgvNYyZsIpbB1b6I76CPNv/tqTpXQok
3EGX2CvEYmTww5U2KC9gzZ2HrxhlN6WGxNoRYpHvW7w+R8uSmaS1y241DvBu
zNz7zeDQYrx4XQjFhSmHNoHmzU3Joo6iQ/UpESBSEary/JD9FekqU7WTn2Ko
j7veEYQTXz8KwoEF9hEiNEBN4EfEDQgXfnjcKAFXx6NFAvjVb5pWhP4hFRzD
pbCrrO3GIUVyH/cuvopxJnbZSvyepVpRu2wpfIuVcU2yMbQ9ehu3F1m+1DcU
31QcvCk1NTIbmVXhyB5S2LCdFuT6VCtG/3W5sWDVppp1wPymaPVG2HvohXBl
RgSuQ/KaP+iXqx4FPXHnKaLIjxSjS/6XRcW/L0yeIae5Mr/QJzXiNyfLRifm
iCiUI5Iw5Uo3qUxRJN20S+mKkQPENgv4UiYK6A4tMgjoBdLs7eXjl8pPQVLI
URyjwFF8RxDjp5puSA1ziTxaLDVdhrvee1HH6GgDLMciy2Ht6ddQgFYLw5KZ
E3fXYa37bPa/K/nBIqnvpYn7K0DUWzxSHAZzu04UxlBHdhePNkC8Mci8/iLw
l69G91bdH7ZtscvMq387xaTv0ybRxM1ziGW/EqjtN0VdzooGMJWXljlE/dN4
c6aZAet1gdT34WoS+7C8Rjhul2rEv61IejLpYwQYaxiGoDkPL41gNbJsDmoN
FvZyafPxIgkKkEK8xGoY7eXOMsJXOPH93LvT8DJCBGkBh2tyhkXSv+JIodQ0
VHB3XI4W1b/3rwcnxb3lUNtNaeM/eKuhRHpyoyre7xpFuZ4xEe9tFLC8IOZ/
szBtgoXpN1JDPAZckcGgu9UhZNcDRQKsRg9pK/OzxLvJxXWNZfr029f5jjfz
HRwu8W8udCq6Zjy1sMihmH/bduF3To6Ftjen2Dt+lz+os/NCemjWn32D8tLe
M0VfkM6Tp2/sElWvoXytKQk/Xiqq7jmmKdneXCh67hHedVFsWSbqDDj/mmN8
vlg+cjdipCjZ3PpZKiDtLoowt64UnyefW9i2w9z6DWrtupZgfv0h+lZ+N8nc
+i3eVxZlbt2I9z2LMbfm/0Q+Z9wVcWboTJVHrZPYmGEx3fDc92MSy4ytP8eY
X/+MtJ2TIQmQbP3APcc6/vqqqHqzBqLnZNHocw/mF5xL4osvd7d6rJw7/Thp
9tvTZXHOirgWj8si+KLm4etWj8uJqFX6/rlH36rj2ueEmouK+keepZweYq/9
Yg7nl+TjMra5dZP4R/K5E31J5m+OfPM1koZrv8y56PWSa6LqL5AYtvtBywtv
mf0qqr4Njb9NG0TV5biMdvWLqn/WuJjKmp5mcfy1VOIaOuvkEHtQJ4fmKmHs
D72wZLrm2e97mjyu/oRoHDYtS1isiDK/lNTkEe6HAXEvE8xvWIQtlNBmDzSX
Dj4fi2r18HIuR19ENXlsL5Gxq8w9gdS4kiF2HtEylbHvG0wYPrLJwysBx4lr
9ug5PnSEq52NM9Ig3/jodVlhnLl1t3jHOEn+5rHdTHakg5kl2Sr48lZD/6JH
iuMXQLOUGeeMwBjeOTf0l13dYe70D3YglHa+/J382Wv5tTctHkxHJM8LUc89
Lh8Yr6t/2OZOtRjOxd8byyJGxuQtHisdBIjjvs1lcSJF90LZEblOtHI6eali
zEVtRTtGr+02t14PNnHu+K9gO2vxVhFYhwNYx4fCBNw6mDZI288iWj16FuNE
wBTMNbgFvG7x8No4wXYqd5jfuEfQ889oacw0hbzZw2ozQiuUN3msnKUkLMZZ
0dvqwfRHXzwbfO5htQe17oJuDu7GW4PNHisF4/X2hq2nBUr4eXepjH1LOxrZ
0ImhI188ElUz6VfH24D5pd3PPQ67BCCr+3JPWVTLM8XCLlHnVoLr9yMPw0bK
wsytX2OaYR/VcumhqPotsqqe5xfAqujIvkZeiqrXE94I39pqnIRWa6nofOtu
8xtDuHqKd48+6x65NtjkEbkQjOBVX5j5G5PMYqrbDGQu73bJ2CuYiOZBMPtv
dFBL1jzE5hKt47IjTQdALZqin/pP9imcZey1xBfOsiOTmRL0zaKy/pHWlNKh
Iz98iR5Luvqbryqah47MlSAbIz/qlfe9awOT155gk9tBKT+P18kvomqP2gQk
1tYIsNKYCQq7B7Lwn+jspaJOV8oFJK66d2PPokauhQGW0p/B3olWQovH1UWE
kG89ijr1TGEMQh6mnFbaVmnEaIO3j9jVeBwZMeY3mrCFw95pMdN7FNumx24O
OCtRyBX6LP0g9O6EsW+xKWaKHWeKs367CqHqPQpVzijMnfqBPH2P7IizVk56
2wzDTyrHUmZN79KY8uVwmWIVSWhBm/cl1uM/KeDxm7ahA5O/Dz8+xDbRRpJM
ALEPboRG7ylZmPn1BhQFv2iAoXNRsPw12fwGGzfUt7fL3mxWRDR5XP4csXZV
Bpb+L6uGEOs6QUi/gUlUaiDjGIVWLAViY9/xQhB0+EI8HIS1emxvGTqyWxs5
uuamsv6TZYoPhaLOAd7Qhqwwygz3xikePn0nShWLZewtKCK+RxHRqVvl9g/f
j16LavHoW44Hz01FUaa/ptyWsZ2nIsbkTUNs5zhovDGRhSmc9lT/gij5uxQo
+YBMt+fkT6Lquzh1G/tFnS9ndAumBMXRegqjxiBFXA+cqO67ok5TDkQf8qN+
k5+6U2Rsk4kh9G+wpxQ8rr+D0Bk70XpguBYUxW9B0Hpz5IdvLlM2MPpdLzTd
fZNSJOqcT5kOA09ve2PSNVjWIOrkfww98mtx5jdsVeE37oQiodnjKh4eIiFu
LVT0P/fw+hwPMgnPPQ5GQuNuXCuwtRVPQ7u7IA1Z8dD3D8ESe2zxEAVxMlwZ
SJo9vJQhqtXj4KaJygQLcJ+ozGei6in03PFRpMnj780ydv1U3JFHwI6modYb
MMOvdPAIP72tf2NRb9nDBHOnt2KcjeiW0nfHx7pPDh1ZgSczckOvya+vzSFx
NWpkgSpKZUe61YG4qVXR8g9w8veJBkjwl5cgWltlwKkL3oJs8tCag6QRDVG0
dAxCWk+84Gc8N6VMr/QI/wKix1fK6DFSqhBBUDSdoLXYJg/mhgl834wzv/4W
G8/3JYhwsbjBmEF14UP4fHmC/GHc2LWwFo/5S8r/mZ+6c1Z12Pqgc+delo2W
G/FuEZlwD1jJtJysZR/niwd9EDmqH2LEN5wJBcWj8gEUF6u0fOdwbr6GCG5+
vZp0CbcaxQGG+SVIDZcdcRUmQ+szXHExEHTW4a3eFg+r9QGEBVwTdZ5ENuXa
9tr5mswcCqYeJNzo50Nst6kTBBANJvAAkEp3t/402jXAdtMKBcrDPgydkcAD
zsab1iH23GkTsN4+98BI1hjmgWHYxv1aLwqZLRURRosymvh7GEUhDAo0DpIq
I4yGMPhKJI7euH+JoHiemyWn+RjpE1bk/To9ADPUArCjNARGAbDR1OiNNHth
8bz0EwD2whvAsDkAxjIAsDpNAAvXALDwdBitEIH1AFhqIgJz+To/xNAcwE7q
ANgXnscLmTtnrN64f5Fr8byqaRYw2jEAy1oBow3MvPScn60HYE8nwWj9MzZs
pO0EsPRFAHb2wvkd9wfWAhg2F0bLMACwzk8rC5lx+2DSmwgsbPkfx17ko9G+
ALCaecub+OLv8iOMGifDaH0IzNYNJj1uYap6lwG6N3yegu4N72Whe8M6xL1h
ttjYUkKew1JeGhYaHfVafdRtEjuQKsa2UDmMNPSfRFFlSCKajH8UPPwtCuhO
MV99p9jdF/X9zJv83+4UK6/oKj/+z+/+/o+NRNwNtrcFU8H+l/vB6OIvelcD
uyIHv+6rtV2gmUGn84N80AG48xgtJMtNfXauXKwZa6k6dudq6EPqrUi1rcoJ
1MWv3r6tEYc/zSWxd1LruG6VGxbzLf1+51b9+ZmTfmI1ViFgMV1TtcgHnNMD
Ka48RsDxdFfhDMMLS0L3m5CXfx+ZdS6g2MKCYpsdIvg6oDUgYB+WPZNDW6it
/UrDpj0r9XAVpbKcuShY/c2cwxtZBwNz/mykbjG8GKCxjLc/0jDDjkfRJHeS
7cWqiyc7Keq7RgZk5+wQy8PEhZ9cyiGDwxvSfjChUbWfidOwGxxt9QWnV5jq
ksvX+wJ0thodm5X9EhOwYmjaU54BEIdyGLuwfA7LXd8ZS//cN92Zkx5pWN6u
3YmGwXTUwwyph7m3T6C/1ei0JX5ZKbBHUKWx/VjO6/1nmcPt2uiK0wdMdcWJ
pK++4uTPWBl4THiOfBohpfYIujXsODMFWyedS/1SIJ7xF3k1upUzCfFoqaHi
cbspeX12yMWrOI/Bv1C8TVsDjonPzRPM52kY2nNuoltCGevUN5oeWoj3bdgf
Phm/fGXlXFcbqL110tVIQ8vPLDU0ydT09WJCjjlG+/9j4GpB6VpTN6OK5t5O
owriWBxbOonfzKGG8u6LkyusSA74Pcg/Uoe0t/NW5D7Qba4Q3DlLjxTrNAqW
8m6kfhFQb6qvOf0M73G6Za3uTopB5pJNOXVsQ2qNRhFGXOfjNXNekVXHQPfp
CB1r+eJUQwjEtLmW9VqXczUrZpZiVVqk2dkVVulGJ5U3GWmJOb2UObW6EtJn
pFghulEbo6G+47Ikh7Kwln9QaEQcJg0OoB9fklthJTSKryqXuC1Ap3EPfrws
66Q+jTuDnV9lRTG+SNxv/YVG+UT3Zp2W2z7tDnTpO0tbfY6zR31t95I7TyeP
Gd5OIw7iGjemHtNtsEo1rkMs9qLT50Y4i+Xqa7x/6VYsruXfFppSF+E3TICT
ggyHFe20eBoprWIROr19hEYi+RjZLqczSIbosvgyLGMyybUYHQp1FdPymJum
4seMy1PNQm0tNDtpJP4KFrraiNGPGW/K0gEyq4mLq0vUrC1kH6y2SjetI8TH
pyfm/FU9u1a3Tnj1o5uvTDNP25SpPiKbQ11CzaMm1GlVLRxJx+/fiv99/zZD
df+WMq1TyFNexQYT0JjLSAyYutGB+U+ArgW6wBitq5bdHJLqDOzZpSy9POau
XLrqDOy2GJ08ajJIfN7ljOX4GVjhCvU84eynMI/5W6HyDOzzL3qqrCqmjTsD
u+PI5DyqKPcGS5tKg2idNB39BrfvQVfRlS6Ft7zmjvLXCFlpv6JELjngPfE8
iu9na0iPIxrypb710PDrKFglrzETED8ryPbKyvq4hd+gX0ycern2x6DRlNTL
/c5CudUuO12f8kAuOUVDv3jae5/4eq1yCLRbj0Mv7uVOmTlh17vmN0/lNnHJ
4NuUQZegw6QJv3H6ySWvlxqwWgpOywvKGF9Th2uWqxE6Pvh3uMROYl/3pK5p
TE5pujkK+EfQ/p8MHVQ7gLdOQZ8INfyaXGInP1bum/UXj8pcgg4hCIfNHcqf
tI70D5d0j0YBwnF09G03yGfU2oD15l0fFx3+RKfP8ttuS5s1J+xPNXxIaXMJ
OoNP1tLtErQBobbKawqIsyb1dOJUiZ+/1I3YzG/bqZAtQ5tp8W2LerkXcME4
9nMLjdFv/E0Je+ewiZ+0S/plKU0uQVdIHui0WP8nusrzu7f2KhL7uA7EsBEm
T8YdR615vUgpHFHH0LUTjNWgzGSg51YEqMV74gkTw4DyF3JJi1wSOBPkm3hK
LrGeRwg6X5q9o3w1aXVEU37LDAPW6xvotycElJACCHYEUAJo5iyu6fzIjRuR
1XQVSQ2DBdBCe3rZwf/eXw+KAgkVtYDYE5Yj4Q66xJJPjj+q0as6U4tvcPcO
H5LX+OHWeqZDdlqWUiKv+X1dTx6nnuYpyZ13OKc58ZqiUIPGAdCkPu42veTv
BIv0/rSda7169WBbIa6srptS360YUIRUTJo6/mcqv4ayXm6XSqTOZxQwhgw/
07bvtEx2uiMlQl4T4/ks1ar6JbMxons4qsElKBfXhKhp63cwdlN8P7eIrTzB
snuzIqGfe/dbpMqbfdz9uE5H+rgeKgDnUkUCEDkdn+BBR9GV/rIW5S+ALcXg
M++AjdfFvdxMFg5xarDoyqCij5s56EX84CMTDS7ZO+3rBM7kF341MMdYU6E0
+/fxO9rr5DWzFyFFlhE/7WdrrSEdedjhEuQO+r9ZKpdcmaD/G9Jm+kQzHka/
5U7BTw10Fn6HrNOul5uIs1TQy11myBvvt+9cgsKROk/Vu8Qa4zivfo3Gf6SL
8Ef96FdEw5NA7nUnSmLTwrGmAoV7tRCjsN9LFuNM77wirylRe3L/hxTwnEzC
YbtdYmfgQw5MMcFdYjhiOfpp9kqXS++STGnjOhSZZOh4OG6kHTe98RFlwGMC
3kqSymuExCmVNuV5ECODUumw57zA8J3ZPUFlbQN8F++kBy96bEvu7L/1hB7t
qcfyThGZnRgvX9XvdEUdLEKHDnsVt75F1m9/Bj8d8SM+Rd2JY8j4ZbekTxtY
Km3vVYDsLhjiPr6rl7ueaDn2cafGEodfApGQImQusdwnyvOC/QsVTbekvmHY
eKUGn0CB6Ja3nBGWw/xy4O699ldPWpvP33v1d2dz6dZNja2t7fcGnrza9LK9
8cmrLxrbNz1hrhy/lfMPu/v4+FVTuLn1/Yn7aaWizp2nlcvJ0pixrkNR4xeE
T0TVJ4/+RaIpnFjmTvqq1bOsZQxW/Qdtci6JX5Xubkbr3INW0C6MavaoXYA6
u5s9tN3xHRGXsn6/ohQTWI7jO2V+P/UvfqT4AItA5sS9sOceXnMA86ochrD5
9y639aKfydNFv+7w/9K0/FfRzQui82so2fznd/Zn/jbvzYmTDid/IJ+7+TKO
gjYeb/bD+p3YeIOl/+6y90tkR25dv72Cc3pSzPFvsy9efB+1JJpWexgWo29F
siP3Y5QbePI+RbMv5dy4vYULH5jMshjJitwKtCElL4wxdzr++fAGr+OMlwrv
9vdliq6xlJnipb8q8P2wtQIfifCr6Zj8c7Jv/Mi1/7Jb9toX31VpH5S3Jo+U
xZjf0MQFOjxSKjup2NHicXD+JXEo2kOunYuEmdDqUYtL9X2zRzh85dkPC/bL
npfEkmtoI56bPYEnc+snYiSFvsG48sZtwgtaWazAjabCG/0fxrqfe9Tatl8U
X7wqb9kDbMebytj42nkaWjvTqGcLmfeEEUZTMp7zbRkFIVms7fd5Fk+PBWpD
I2cy9LRrwFcjZNcIo0oSAP8p9tm4XyS4OM9tCQfAZgGYjx6ANU5a/pw/QAWw
PWQAW5Lqs5F2HcCqfAHsrNX5sPvRUwDMd3IG+eO69Gv0/kjq51boFX70cetS
fo5QeNSNfVRIOoQdFazWR6/006fTn5hQOjn6VM8opu5RvDZyQ6WgK8srDuNI
mNQu2ooo5pQCn2hOC2/GMXdUc1WoLnOF4vfUoGYymEYN5N33MSQ9MmFeZmEt
vEWmywCyTg0pxl+XJEBlKr3CqJZv6qm6cWTuk0dd5sD0MozXpzJowRjx2g2B
DVPHKNTo4LE0chjVwjKdSXUOig4G+ACO5mljqrtGjcZ2VOcb4HcnaSo6fp9D
jefdz7JUFX4/s2gzNGqsSHwfNiPTkDX1NgkKzc/w6txUXQDmsjorrKoqqVya
hkFaQE5JmpHPVE4e9Z5gKWfG1zEkMyicSTS8xEzCVCXm767t9DzmIb2Dhvrr
oKZdNnmHYJO4VpcHxXKuZ41GMnrJzVREWzldRdu386k/8O4PCFS03cDoedSV
Dsx15p0k9H4XS+X7XeqYVRqa8bAwsK2qo52ro+vre9owTWaPkDQ0YpMEmrGp
Foc4+hUWF6K5NMmUtID2I24W1Ovi3bmaHCiF30J93glyvILkSNVnYdeRGjTh
m2KicrdSs93Haq60cpuhoWS7gAJluyCOlmqm5OmZ9h7eCg7bgDO1Gr2eaD2O
Pk+N/g+rp9Kqyl2FfodiwpoCUnsKUvOSxKfOA2auayDVd5JVqk/QIcEibN16
peqPL66usEotiIGyGusEW/x8AGXmfVdlRQ/ry/Ya1KnqSjvIHAVGBqwXo3sn
1ylDe3fJWEPhazPIHPmnz1SiKvDVQlH3nrGGgjd4Z+nGutWkIy39BVrw+Mfo
XpPH+OPNGzDOX/l7sa9sSY/jm5xGG54loQMBziJ9HWW12vAuqiERnRWTDfct
YcdMwmd8lZzSvWisIb8XirM/Fp/yx/DTnUWnGsoiFkMBk7iq38FnwunneEVH
4ScTj4MdMAQWHCJslmm4D/udeAqlRMvgbYV7xu94f+RaNM6jwcQt6wQZbSUJ
iAvbU00NUG561996j+YVeW98iLhouPUZYkq06gTOVEPJBvwx5Uy1G3F8t//t
WMMo233CEZkfnWAW580dCZu73+3V1lGe6x8c9e+6kAEzdiT7mTSiuRryndBo
JQ/aqKqzB7u9FfYi+iPlkdPuktHBu8GA0lUyDynlfWTyCqj4r3SN6bGfxSNh
2kdEAS8OEU2JFwCsPz6iQSZcpFwirWxIKTmDuaEjP0WnmhQRPojrlPohdEmj
fiRyNf7Ytn4rIHbfvITGXxgVg0YTNdjjmpJFxOOP3dveKGuI3acUQyJ2nZK8
/vyxhttvJtxxacDwxdSZtqKHgymHTJ4hoXXcCkNsLm41r3JTnkweHWsoipmH
ix1qkZOpbspjbXtG+9fjUztGWcPU9mUNhQnIPG5EbGGPv7UTGT3+sT5yByja
cVUTO2P8SQP7T0H7JfJDNkYnVpPYD9tm6U8wEhmmWvetrE+50rR2QuGycf34
x4wTn49/PGry2fjH+BObxj9Wn/CbcFTDPE1pKt2jo7JEnDuniJ1IsKfaZiUi
7nZpqfPJOQzlkxV4PkHvd9Q3JFmmGkMy0Rca6dcxBE7QV02jP+FWnTOEPCJl
asX9lzzyHW25lMk+SuSRJ+j+KkedHXzU8duU2mzlFkhdhC/546sGAgzQ20lo
qpvROamq8JPMkkDQTlUF7RckuxUB8VXl8cYQSlPpH5OIYYCR43dps15jFuWW
GOtpDUbdr8WYz8E+JXem8dF+FL7n5Yjv64lZ1PR7+mkO2SGeRwOqc3JcWcz8
NYz0DeTgh5zsZUzNOdQKwdx94ccEG7imDMjzwPcxZPEdiyNdkOxK+wvxx5JI
L/TYKiMiGlierLW+LJIPBiGPNC+f7i2wbSlsVbyzcFR6RWtXSpQVQjnc8Ek5
6yt3zp2I/ncpTY/AIQ8N5j82RSuavW0TzmeKGkakKMY9PtT9frbKu1plKX4b
ISg8Lh2U/cv/JwnH36Cb8gMst/rz2xzrzVSr2xLZ8KMTEsC92vYyCL7tLp69
dLwXFb5zn3BNrwLCVu+HSE9gylnadAQQHzZta2cRi7/d/gr5TIF65BH/enRl
K74jOcKhbvyx3NdosRt/DcW1x4e6Pmjw8KPQTc6jTftx+PcRi3DBdo3fd5+O
26ObleodzrZgj+hdnu60A7z7LEaF4E4Ag5oLaRYZSrNw6UFDFmSfCnMBZERj
sLdwwclUXSyPKnRk4e9z/iRLv3w6O8Wva2oOQ7vK8ZA5u57EYYptU/za1k+3
0OJblKcFl2c4enfZZnxvm1bFW9nhUd3prKOmRx+nR4jTQyLowZwWfUemnm0X
gNVwqBUBwnSOVrW2CStVgO3IoJCU7ySN5mFPRhZHzdZgGS2JmPsl5lm/JFBn
NUU1rsG4cclEHYdYx0o4TFfaox8xoaVjFjudzBDyfOs4rzRI1vyd8zUY/HAB
lUoKdcRf/6ycQ4TPkaL1UYaH8bG9P9aIyKenX0x1zRGiHy7c2fpLjXx2EG9z
fovkygO5rjBhurrtuWvCi8oKVzpsAos2ib8CvQ4NidgsQ/gkwO3tpl476mFX
oZjpQGUb1vL13VXAAbSvbFawat2rK7No5+s2p7FDOBs1g4Jn/Wn4RKy/K96S
b5XeBVKqEGBcWg0tLSCLHi7w/IN3P9pQud34tMLEs8FKWPeD25OEYNMar2rr
86TZb1+Vi1O/q4jL1JIEcMTfS+zQaP+c7cslsRlI24xkNB6NnhaQS48fMKvS
SqVBYPLUrYvhQPTA0gLq6Ims+CpOjtAQbUaeJKl3cI3FFVbpv1BbeI7hPjT0
joYd6pcXtkPNeb+cioo59FaYvTm1ulZVNHfTGVTeiiwQhz5UUC/pT6yEqLrB
MPRbyTbCzry7ipQGV/+dsmdQbXnfaLBL3TWenV/EfoM7yPIJPlhc4emZ7sXI
5RjxLFbWO2kFWh9q5x2sH2Zbv38YR6nRX13tXz9kzVnrDoM3fC72Yi8dsTtk
jlVinoMNtiI6AfDBAgfw7n9JHZ97TpH5S/XfNMRHrb6vx8Z7WpSO4d3goWy0
4fYQw1G+u1ubNT2D3KHhyFqSRv1urm/u32lajxa84inSdA7wGCRN1SvDQ5gY
ht4Ar0s5OozyB+ovA4NeAJ9eSp/xVcKiT/Qj27ByPdNHJn5bG4VPZ6WtYuO+
x5Tw6I8RRrwfXvWJ3v+PzcAwR5gQvSfeDCPGwvsdMWw59MfAsxX8jRrXfxP6
P4PnE/B37bj+PmijeKH6RP0MQB7BiBig+sT7YV4WiZhX9anqtyARvq36VPXb
kwjaVZ+q8VfBszH28VMFH0Yi/t8gqk9Vfwo822AfP1Vy+EX5WnfVp6pfB4Sl
B8+V4+hE/NaTiH7Vpwr+pRLu5b/4kimfZf/qZyh1qPpU9U8lE/yrPlX9VmQC
X/Wp6l8Mz5Oxj5+qfk8lnOe/4DeQCX2oPlXyjIBn9COl6lPVf4SM/g8EHz9V
/ZfIhHxVn6p+bJw90lXyYRFtXezjp6of/fEDX2CScF8IQnMkBsba2NrYhUWG
xYcFhoftCowPi4p0j4oM8Q4Mi0R//ZclRG5BnTOs/VfCt4kh/v5r42NDAiM8
QuJXhuyMdw+MD0S/5/r4+6PmmpDAYOL7//pe6P/6tuf/nx+M/wems574GzP+
PvKQndEhW+Lnh1n7+2/budM/OiQ2LioSeI9P9k/kLYsNCfFemRAREhu2BR8p
PjQ2Kkn5RvWlO7eERCNZ4ONEhERsiU6eH80LcyT+CbO3XZMQGR8WEeLvBhTF
h4wfZ8Kg/nEh8T6BsfFxyyfI3Z8faBccEhIc6O+01c7R39aJZ+fvtMU+yN82
2Jpvx7MNtN8a4oArxW15ZGLUFhwJf/48NjAaGPF3CwwPxzuW7oyO/QizMiTJ
X/U2+KWxsVGxML+ambXxyeEh60Li4kHC/t7rQiLjomIBbUuoGsIzMDIYMAmm
lBBoAlxYxOM2GDA+JBbkqOxQiQhmUktHLf5YkFFkfGD4/MgoYD4wbn7clqjo
kPnBIVvCiVfGh20NQXKcHxcPUsLxJ/aHRAbjvdY283nzrTnBwYE2jkE2gTZO
9o4hdjZbQoIcgm35jjw7J4fALXZbHIO32PO22gcH7nS097e3nRe9ZV44egv+
597qV+T/X70gf35S+HyvfznHfK//x+7xPzPhvxxEydZ4cyLixv8HwylZqA==

                    "]]|>, "orcInstance" -> 1196266192, "orcModuleId" -> 
                    1193738784, "targetMachineId" -> 1146637968|>, 
                    140583070877600, 140583070877456, 140583070877536, 
                    140583070871552, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]} -> \"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]]"]], "GradientFunction" -> NeuralNetworks`ValidatedParameter[
                    CompiledCodeFunction[<|"Signature" -> TypeSpecifier[{
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]], 
                    "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]} -> "PackedArray"["Real64", 
                    LiteralType[2, "Integer64"]]], "Input" -> 
                    Compile`Program[{}, 
                    Function[{
                    Typed[NeuralNetworks`Private`Compilation`input, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Compilation`outgrad, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]], 
                    Typed[NeuralNetworks`Private`Misc`output, 
                    TypeSpecifier["PackedArray"]["MachineReal", 2]]}, 
                    Native`UncheckedBlock[
                    NeuralNetworks`Private`Compilation`outgrad]]], 
                    "ErrorFunction" -> Null, "InitializationName" -> 
                    "Initialization_0970f0b0_a561_4e27_97a8_c7f3ab85b0ec", 
                    "ExpressionName" -> "Main_ExprInvocation", "CName" -> 
                    "Main_CInvocation", "FunctionName" -> "Main", "SystemID" -> 
                    "Linux-x86-64", "VersionData" -> {13.1, 0, 0}, 
                    "CompiledIR" -> <|
                    "Linux-x86-64" -> ByteArray[CompressedData["
1:eJytWAtUU9ea3icJOQcM4QSjBgl4ImDRUnoSAgRBm5CAEcEGpFPaepsHSSoa
IARE8JmXJFqsUbletLaN1na8nXYW1sf1evtIAC2t2IFaq169KoqPaX1Wq7Z6
x9nnJBHGmVlrZs1krZz/7H//z72//e+9j8hQX2FAAACkAIBCZeBsNh+AKNg2
cMjUkle+MK94uFc7ptxeSsmIOAD8zAJgDEMEGLA9Hv5RR8oGRR9rNhuX5G1E
3Jy0KCwhmfWmwS4oYhRuHFPYi0v4MkwwJ0Zi8KqtvaIUVbynHVdsZBj7sN18
QlnsJb5GJAa3YFr6NJ94edf8DcThPmh3DQHADEglk73RhKEYiJ5N7RSI0uAj
4RnO6p0+ncE4n0g1O/1xbeAyJnc48xhkZ4rcG5izdXJJ5/Ka345uMngx3t50
RlcHKCQ5Sg3LOCCehWsM3osy7qv9vtTo7BRQ3MJ1cho4DvnGqe/uwOJ37CK7
dYOmtduxj52SrAJXUeLr3/HLu4cbuXeIMbzW8mHVl9I0vWDX2yl238YPvfEf
vnfg3asTtpknb51dorBvlBZ1kL/2/gKF4MsHhgcYY6dPldVyQb0z4TM9cQz7
F/muqfENGF5x9Hzs+N3FeJytzIoX4Dr3rA+3uKeCQux7p9N2YQFaDufiBZh7
ovf8Y/hD5X+1Y4gPjJHXytmI2h61K4foBakBhiZx2wVaIMCH8v8GfCDmqiu2
7TbFY+pi5AIL+RZSZV/IdD2iWGAvoouxTwLxA2iiLxXE65CrOuZ2HEyyWDdT
/ZPAPPAI2Jnn40A0tMMeS3kkJjKqcnAuSE30PUOpfBTLTgXRXRbfjqdVMKY/
Dkw/ScymOl4AH4IHCEAD0J0G0YO7Qbb5N6oD8TIDcfYXQKo/LodfibP62nbE
O8EpeRViZSd63wTf6piO6EACmA3HAIdjMNYrF3ijFWIROQU7LIYTpdhCZHSz
JuveMjtxzlj2FccU1qBbvhUvHesObCFZldkK7ONoBSk6MIV10h1gjE1eHmDm
P4jK97ty7J6GBcxmNbpkF7r8pC7m0gD7uh+Fz1sEugSgS0nU5kcbCbQWxNms
aAP9TjFDAvBdhzb50WY5WuvjwifVHGBftqNWP9pAoC0D7Bt2dCmONocU6d49
OGqzoyVxGC++sK29AyDSws5tN4L78pb/aaim+RXu2qPzxRM4xpVHFP17//IW
OtSQg39TvGjNsbt87IOP/3LE37kuamPQ+GnHT9+eFSGHRZVMAORwUHBBgPu1
L94xEb7DhWgPgLZKwe7QgGF2+ACCgG9t40QCsEDkxxRU/FHBQhCSkgFhmYVx
0miMMiGnOZSdfb5yOeA/UWOTO22evAOwQMAGixbj6NTjxmvYIABrAkEXAh1Q
fnTAmwPUMADaPUa5W3NYxQYglYqRCJv6aF0fxw4ElCkQNmVK5k0EiH90VD/O
TM6m7dIJQdd20e/XVFoAKwAojyDsMWnNmZDOSPCWT+VywAmNSsjjwU0Y1w6q
RntcPc1IonI6oXCOxG6F/1YBAuTjMTZVc5I7+Qm8Ul979JRZh1nKkmJwVUDV
v90w8HcgzcLswt4hoZmPzPAqZe6e9kI72tqCNnY2cC6DuOs4966dm8UpTO4O
Jn27XWgmo2gxV2I/c0afckY7c0Z/S3uTFV2Goa1qj9WKLrUym1s8VsKT0M/j
XvNxh8i4OjLu4i3uLQ03C+9NOisSnhQldeuTzeSa/M9c+QPKvL3Mgs9cBW5m
fv8tfrMOXbYAzV3gscGn3WP1eaw6tDkdbX4QBc0usXu0mKdB4LF1elo7HRk3
bnFvnOf+EuBeI5mGvu3C4e3Cfvp5Ri/8RiTsdSR9o2f/4FPm9SnzOunngR5Z
h1LmZeZ39DwPnT5y5n/PzO/q4XxV47FWeWxWV9MCtEXnaRJ4mvyehG/nxd0A
cT9ruMM+7kV53BDBvQazINKTzgSTuxXJ34mEZxzJZ84Lh4eSfkSSzYJyWZdy
+jZXfr8mNZyIzrOkBW3pLC+964ujRiB5YfI3euFVUdLZYNJKJJkKWJR0S8+u
XO2S9ffkdylnwAF51F0wrMz3wmZP+6EYmKlnCYwHQ5emo7ZOx/yLOPdagHtJ
w71DpgS/UyQPD004OZR0FgagTsjvcs3Y60p098jalXn9PQUHgnl9PTDHgn71
3gYMhVE1wAGs8iScPsy9pou7fh7Wg7hLZNwlIu6ehluHcy+SXNi8c579r+e5
wxruAzLlwjW9sNuRdHJowjVR0mVRUq8oCc7gVdEkM/FO/mfKGQeYeR2uvP6q
z+Dsw2SXwjjVniVWOHoe7iWce4uO9ibJvePj3tVwKYy2Qty/BqktWU0ovZyE
aJtETaQ42jdsGFT58XRjgVhS+JZP9H4LIWLMS5z/wfmYXsbL9RazTV9LKOtr
rTUWk42QZIqzMsWZJGGutxGlNXWLW4gWWQ6RniN9zlDTNJVIL1lcZyLEORmE
hJRIppbV1xEyQrH4DbpJiMXTpdnTpXnaufqmmmaTVlu2uElvqLHUNLUqLfV1
Jm2xVqvRVy8yGRU2m75VW2HSW3KkWsl/zfz/MDKdSGvW28RSWZm+po76hxgS
ao2yghwHqST71Dpnhb56z6LG2SnPNr6fmCb7+c/LqrM2jVnUuPvZTW/PWdaY
mCavOBhm8f5pTnXKwx1zFj2bmKYGf4TrXQRtjYmxpcN1hC6tsnbCueuBiM0b
6HFeFh7eHntVQS3zy9TkUvgcL72o417RQNjHDVPgj7ui4d7tsjvQ1nR6VbZ4
GkKYrLJu65HtRfJ3umZ09DAWwQUuPDMkPEMIh/XU86ojuVsvHNgu7AsBCRmE
pZCqTWh/wU5X/ja4GJkz/K4CuDB9PVRt0kN81FP7Jasog6qa1BmO3w74ioTv
5dEDGm5UOaOoHFbG27DswV0EPOteXSUm5+wW6WCJZqMJ4nSAs1x53n82c44W
aggfz/U+3EV9Ab/Oaeb4Nmk0PjOHuZcmHR0a3DdmZ6JYvg1nMX/kYCkDB8UZ
x5UKeaZfd9IuYDAEdXg6KRCTdmjycCyjfrMId/JcF6BB+xmwNQ0/KJZOLFLI
2xIZXE4xh0Owgv4NLjnHnMCeLBCnvwutqrk7XmEY3rcSVJXOqa6UG0/vDwrG
4af21j0/IMd4Qfzo3VkqkfRYtEyVRRw6+lN27c3HK1jcQY664f7SsnP333ut
vRzZUHa/eUelvPLKstqH3kFK/X5tqjpKlX32ofeD9HH48aUrLs40TC6OUi1e
fzqmAin/5MpMQwYU2PfFQ+/vCSjQeiPlHyjv536LKjimkKob7rSWnf6t/lwg
K0nl4i9578Td2scHXsKhpFlBBRlVjgyuAB4pMnj3xGUD5ByTAYCI4bzBPF5r
G9Lt57C6LQntrlMSAttj0nDNRwIEJ7wPUXM4mZ5DJT2H1CYmbQcdIC0buNP0
1Cg61iI8js7FczEwBSl3/aNATMBBZso0bbFYJmHXMw0pDN1mAkMpXapwPGPn
BybzXliptU+WcS5KV6pKUSsJvnvUUpsQ/x0xlpGhZpd6jzXNVXYWp4QFvrgz
Kp62UZhihzDVIed1KGKfYCqFlqVwxaZxdQji6sjuwgXeca5j/ESGWXneggvZ
n+MT01zLpsqxqCdY65IWulztAj6OOYPC+a9msZGSdLzPGxx0EwK12S9XZLUZ
bOnp6qy27U6aDNvSsb6oH9YJiLmYEznOdvPsity2ovcproCTiCvloCeWgbJT
2Gy+UzcwoJCz93AcOHTxIpRXoQMZjoF123+VxDAkZ3A3ImgXCDSYU+FCkYn9
Eo6KNGgKRBgbT1btYak2Ip/2sFUEL7BwSJ4N89rsojG4/iS3Atmw4qeZhukQ
JvdWPPS+w5cbH/0Sq6LRcb+17Ny99Q/7ECHHLl11dJLCwFBfHDtB8so6KV6o
IlVZf+eVY0eHUybgZegghO2V7Nqfvryesp8G6Z/XP/AeolF5I2WmYVpJCKfr
T46ZB4F5IpdiPlcKofrFif1Q8mtK8jeKKYWR5Kx72BctH1kK11PMVMDHDq4/
GVtBrYOZhnQ1BfOH3tvpDKLssXtGbyyFy1gal4yG/Zw+BEKC9VdJBrrXtABf
cOSWcGCzqND/XI9b9lpbDBRIuGBJkPWektiRCyP4WP3f1Rw+I/aSBk/T8A/9
D7AheBobflIygo3KKoiNwhFsGH0qChsLQ9hYGsLGQgoFJ8LY2Aex0fI3wfja
HQQxwUha5BwE4eRiCZEpT0Edgn4JqzA85T6hfA+rMLftcg80YlXibB1p0Mlh
x7oklpk8QuJBr+I29Cxvxo/G45/jfYEj51+PwSUWOYuPLJBRuWdFMHLu4HoB
jZFzM23MwSY8tuLMiteP/envsNCkReEJX65grYkm1r04v68JoEziqPZ+Tkqs
G+dxBktXqfiFWb/2RalGFZpwnWql5vl5iIh970JECNbCUrXu/swLKT90Q+D8
9Ms6CiYxECbv3Nx3HUqSJaEStr6TQ03+xZk2Bk5VxjtLy04/XPXQexyWtlNN
N1Oaw6AW0BiBoJ4SwggWqln/V2ycpbHxEo0NLIKN6O/lCfzCqXxmbJqGHSVm
aPhFGmx4HaVjZM/uNAncOv9Xie42jFnN9VVozI6tq2tcPCYT1juS+WKeOdoZ
Ln7MuJohTVkR06MroWeNcAQzlAoWXPy4U6djV/tle1jBUlUyZ9LUu8uxTz92
dJebyMyoyVvWyNrW85fOFCT/Ifg5XOMkHvAi8Q5CsMsxEf8+t18iLIazDwiM
bR5gV+XMwTUNPnaM5g/BA3yvccoFwcyKq7/e2uZIMFpvdsFizCINdhUUXkii
Kg+7J0PppEIAVAjNOPtvGQr5IcXEdKPJN1rfHkQSn9YPoO6E3iB5pCs96HUg
dkLQGZwEQ+qPZ1UKI3rnTymET/TGBmMnTTUKbuVDGDIQWP8Y02AqDhFMpSuY
3qsQcHJZFgBLYOnYgQa4oTOAgrS6KrCDYmylHOWzhp0zqQ0Dw3QHFA+YZKfJ
+q4/kSnwMpKp/b0QaYv1igj7EFvPD+g2I2vhuBsYcAd/VbElrQX2zVNjus1+
uGCnwA1o17g+uO38eLhrC2MSpV3yRHuI0lZsjWgbht5O6zworvoIxFARVD6J
oCoKRuB36nr9nXKc4391AM60lQClEBdT9hfwblO7/bxVY77il/euOvaVtZRX
9GjJCi7dPBfa0nJW4HTzivmDsPyx2cJ5Kt7jzycdEhfxb5/7e1S6s4ece3FW
b1OsGsmIv33u3gwiqkvdu+riBAe1TT7+5ByrArypepRbT7qfLw/GUupf1mqD
lPrpB0l08xNtN918FE3r1p9oniyKlYgCTmPALSu7Iu3lhfjn7o0bvbBvv0Hv
xF++k1gystEKGbS7e3WvDY461GxaGUOHd/rz3ymYIhVLKT02ibd6oDRnymiD
x/fWPPei6hG1oXS8feJnVS8tkx/euxuIUM2VcPHJbsZNVgt43Y652Z2BFnvM
ptBNG5jgweNNSOOZHTrqdkydCy3wMPk8pNS4U+fKqrA9io6lrt+hmzV4G3bG
QfoRpPnhswEY1Q/C8tQvct+PUPpjVCoAwvAZJUIpPpYBwDT4zgMjlOanhvxQ
nzwiNMJ/Cb4ngBEasVMXrssRGvG7HYS+LERohH8JCcW8e5RfAM9v3eFcIjQi
fzwsd/ypOC+H25ef4t8HoTGL0AifDf2OAyM0wk9EQvoRGuFnwPYYMEIj/Nyw
XO5T8mok9BkmQiPjA0bNGzuSV/ieEQ9GaIRP/X4HMeMIYeYBhRfq/iWT1dTV
NNXoLTVL4aWuvk4F73HUbcxiaa7NNLVYTdVNmTXiYpvJVDZ3ca3JVlNNX+Mq
Ftc11dSatEqbSd9kGt1DK9aaaqutrZlWskYWetTkSGf/Bz9aMi+XNJMGUqvP
zhFrpSZJrjYvVy/TVueas/QGWbaBNFVTgWiVs+ua66tpJbr9sk1vtZpsWqXe
YqEZRS1W24jMXNMSbeTSXGSz1dsaTU1FLdUmK9U5r6nVYqo0NTbNMjVpyypN
dY31NqhWveCJhFpfZ4SaobzCEpQDegRCzTegwSaTrU5vCTOejJUNDkldk96S
WVcPE9U3ZjZW11tNmUZTtQVe3slMMWE06rNkhix9Vl6OzJSdVW0y5BqlEhmZ
DXOvzq6WGatzSHOOUQ+v9lp4s7dWP2ehrvovlz35DvC/+gqQucSSWfqfRo3C
wr8DslC/2Q==
                    "]]|>, "orcInstance" -> 103887264, "orcModuleId" -> 
                    65969520, "targetMachineId" -> 104809904|>, 
                    140583876174368, 140583876173968, 140583876174048, 
                    140583876173824, 
                    "{\"PackedArray\"[\"Real64\", LiteralType[2, \
\"Integer64\"]], \"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]], \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]} -> \
\"PackedArray\"[\"Real64\", LiteralType[2, \"Integer64\"]]"]], "$InputType" -> 
                  "Real", "$OutputType" -> "Real", "$InputShape" -> {720}, 
                  "$Batched" -> True, "$CompileBatchedWrapper" -> False, 
                  "$MXOpName" -> "79fe9d2a940901ab", "$Checked" -> True, 
                  "$Scalar" -> {False, False}|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/5" -> <|
               "Type" -> "Reshape", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Dimensions" -> 
                  NeuralNetworks`ValidatedParameter[{720, 21}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{15120}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{720, 21}, NeuralNetworks`RealT]|>|>,
               "TrainedNet/Net/FeatureLayer/Catenate" -> <|
               "Type" -> "Catenate", "Arrays" -> <||>, 
                "Parameters" -> <|"Level" -> 1|>, 
                "Inputs" -> <|"Input1" -> NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input2" -> 
                  NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input3" -> 
                  NeuralNetworks`TensorT[{4}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input4" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input5" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Input6" -> 
                  NeuralNetworks`TensorT[{3}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>, 
                "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]]|>|>, 
              "TrainedNet/Net/SoftNet/6" -> <|
               "Type" -> "Threading", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   neurallogic`DifferentiableHardAND[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                  NeuralNetworks`ValidatedParameter[1]|>, 
                "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{21}, 
                    NeuralNetworks`IndexIntegerT[0, 1]], "Weights" -> 
                  NeuralNetworks`TensorT[{720, 21}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{720, 21}, NeuralNetworks`RealT]|>|>,
               "TrainedNet/Net/SoftNet/7" -> <|
               "Type" -> "Aggregation", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> Min, "Levels" -> 
                  NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{720, 21}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/8" -> <|
               "Type" -> "Threading", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> 
                  NeuralNetworks`ValidatedParameter[
                   neurallogic`DifferentiableHardNOT[
                    Slot["Input"], 
                    Slot["Weights"]]& ], "Broadcasting" -> 
                  NeuralNetworks`ValidatedParameter[1]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT], 
                  "Weights" -> 
                  NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Net/SoftNet/9" -> <|
               "Type" -> "Reshape", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Dimensions" -> 
                  NeuralNetworks`ValidatedParameter[{4, 180}]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{720}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4, 180}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Loss/SoftProbs" -> <|
               "Type" -> "Aggregation", "Arrays" -> <||>, 
                "Parameters" -> <|
                 "Function" -> Total, "Levels" -> 
                  NeuralNetworks`ValidatedParameter[2]|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{4, 180}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
              "TrainedNet/Loss/SoftmaxLayer" -> <|
               "Type" -> "Softmax", "Arrays" -> <||>, 
                "Parameters" -> <|"Level" -> -1|>, 
                "Inputs" -> <|
                 "Input" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                "Outputs" -> <|
                 "Output" -> 
                  NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>|>, 
            "Edges" -> {
             NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input1"] -> 
              NeuralNetworks`NetPath["Inputs", "PurchasePrice"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input2"] -> 
              NeuralNetworks`NetPath["Inputs", "MaintenanceCost"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input3"] -> NeuralNetworks`NetPath["Inputs", "Doors"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input4"] -> NeuralNetworks`NetPath["Inputs", "Passengers"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input5"] -> NeuralNetworks`NetPath["Inputs", "Cargo"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Inputs", 
                "Input6"] -> NeuralNetworks`NetPath["Inputs", "Safety"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/3", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/1", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/4", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/2", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/5", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/3", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/8", "Inputs", "Weights"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/4", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/6", "Inputs", "Weights"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/5", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/6", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/FeatureLayer/Catenate", "Outputs", 
                "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/7", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/6", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/8", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/7", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/9", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/8", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Loss/SoftProbs", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Net/SoftNet/9", "Outputs", "Output"], 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Loss/SoftmaxLayer", "Inputs", "Input"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Loss/SoftProbs", "Outputs", "Output"], 
              NeuralNetworks`NetPath["Outputs", "Output"] -> 
              NeuralNetworks`NetPath[
               "Nodes", "TrainedNet/Loss/SoftmaxLayer", "Outputs", 
                "Output"]}|>, <|"Version" -> "13.1.3", "Unstable" -> False|>],
          "Processor" -> MachineLearning`MLProcessor["Identity"]|>, 
       "Log" -> <|
        "FunctionMemory" -> 235552, "LanguageVersion" -> {13.1, 0}, "Date" -> 
         DateObject[{2022, 8, 8, 16, 28, 15.994063`7.956533787422558}, 
           "Instant", "Gregorian", 1.]|>|>], 
    "TestSet" -> <|
     "Input" -> {{"medium", "high", 3, 4, "large", "medium"}, {
        "medium", "low", 4, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "large", "high"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "low", "high", 4, 2, "small", "high"}, {
        "very high", "low", 2, 4, "medium", "high"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "very high", 2, 4, "medium", "high"}, {
        "very high", "medium", 2, 2, "medium", "high"}, {
        "low", "medium", 4, 2, "large", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "very high", 2, 2, "small", "low"}, {
        "medium", "low", 2, 4, "medium", "medium"}, {
        "medium", "high", 4, 4, "small", "medium"}, {
        "very high", "low", 4, 4, "small", "medium"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "high", 4, 4, "large", "high"}, {
        "low", "very high", 3, 2, "large", "medium"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 4, 2, "small", "low"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "low", 3, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "low", "medium", 3, 2, "medium", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "very high", 3, 2, "medium", "low"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "high", 3, 4, "small", "high"}, {
        "very high", "very high", 2, 2, "small", "low"}, {
        "high", "low", 4, 2, "medium", "medium"}, {"very high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 4, 2, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "very high", "very high", 2, 2, "large", "low"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 4, "large", "high"}, {
        "high", "very high", 4, 2, "large", "high"}, {"high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "medium", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 3, 4, "small", "low"}, {
        "high", "low", 2, 4, "large", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "high", 3, 4, "medium", "high"}, {"high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "high", 2, 2, "medium", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 3, 4, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "very high", "high", 3, 4, "medium", "low"}, {
        "very high", "low", 4, 2, "large", "medium"}, {
        "very high", "high", 4, 4, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {
        "medium", "high", 3, 4, "small", "high"}, {
        "high", "medium", 3, 4, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "high", 2, 2, "small", "low"}, {
        "medium", "low", 4, 2, "medium", "medium"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "medium", "high", 4, 2, "large", "medium"}, {
        "high", "low", 2, 4, "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "medium", "low", 4, 4, "large", "medium"}, {
        "very high", "high", 3, 4, "medium", "medium"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "very high", 3, 2, "large", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "low", 3, 4, "medium", "low"}, {
        "very high", "high", 4, 4, "large", "low"}, {
        "high", "low", 2, 2, "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "high", "high", 2, 2, "large", "medium"}, {
        "medium", "high", 2, 4, "small", "high"}, {
        "medium", "medium", 2, 2, "large", "high"}, {
        "low", "medium", 2, 2, "medium", "low"}, {
        "high", "medium", 3, 2, "large", "medium"}, {"very high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 2, 4, "large", "medium"}, {
        "medium", "medium", 2, 4, "large", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "low", "low", 3, 4, "medium", "high"}, {"low", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "high", "high", 3, 4, "small", "low"}, {
        "medium", "medium", 3, 2, "large", "high"}, {
        "high", "low", 4, 2, "small", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "high", 3, 2, "medium", "high"}, {"very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"medium", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "high", 4, 2, "large", "low"}, {"medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "high", 3, 2, "small", "low"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "high", "medium", 2, 2, "large", "high"}, {
        "high", "low", 2, 2, "large", "low"}, {
        "low", "medium", 2, 4, "medium", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "very high", "high", 4, 2, "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "high", "low", 4, 2, "medium", "low"}, {
        "medium", "medium", 4, 4, "large", "high"}, {
        "medium", "medium", 3, 4, "small", "high"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "low"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 4, "medium", "low"}, {
        "very high", "medium", 4, 4, "small", "low"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "very high", "very high", 2, 2, "small", "high"}, {
        "very high", "medium", 4, 2, "small", "medium"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "medium"}, {
        "very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "high", "low", 2, 2, "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "high", 3, 4, "small", "high"}, {
        "very high", "high", 4, 4, "large", "medium"}, {
        "low", "high", 3, 2, "medium", "low"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "low", 4, 4, "large", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "low", "high", 4, 4, "small", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "high", "low", 4, 4, "large", "high"}, {"low", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 2, 2, "large", "low"}, {
        "medium", "very high", 2, 4, "small", "low"}, {
        "very high", "very high", 4, 4, "large", "medium"}, {
        "very high", "low", 2, 2, "small", "low"}, {
        "very high", "low", 2, 4, "large", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 4, "large", "medium"}, {
        "very high", "high", 3, 2, "medium", "low"}, {
        "low", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 2, 4, "small", "medium"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "very high", 3, 2, "small", "low"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "medium", 2, 4, "large", "low"}, {"very high", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"medium", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "very high", "very high", 4, 2, "large", "low"}, {
        "very high", "medium", 3, 2, "small", "high"}, {
        "very high", "very high", 2, 4, "large", "low"}, {"medium", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "high", 2, 2, "small", "high"}, {
        "medium", "medium", 4, 2, "small", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 4, 4, "medium", "low"}, {
        "very high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "medium", 3, 2, "large", "high"}, {
        "low", "medium", 2, 4, "medium", "high"}, {
        "low", "low", 2, 2, "small", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "medium", "low", 3, 2, "medium", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "medium", 2, 2, "small", "high"}, {
        "medium", "low", 4, 2, "small", "high"}, {
        "low", "high", 4, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {
        "medium", "medium", 2, 2, "large", "low"}, {"very high", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"low", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "very high", "medium", 4, 4, "medium", "low"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"very high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "medium", 3, 2, "small", "low"}, {
        "high", "medium", 4, 4, "large", "medium"}, {"high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "high"}, {
        "medium", "medium", 3, 2, "large", "medium"}, {"low", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "low", 3, 4, "large", "high"}, {
        "very high", "low", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"high", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "high", "medium", 2, 4, "medium", "high"}, {"low", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {
        "low", "very high", 2, 4, "medium", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "medium", "medium", 4, 2, "large", "medium"}, {
        "very high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 3, 4, "medium", "high"}, {
        "low", "medium", 2, 2, "large", "medium"}, {
        "medium", "low", 3, 4, "large", "high"}, {
        "medium", "high", 3, 2, "large", "medium"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "low", "high", 3, 2, "medium", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {
        "medium", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 2, "small", "high"}, {"low", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 2, "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "low"}, {
        "very high", "low", 4, 2, "medium", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "medium", "low", 4, 4, "small", "low"}, {
        "medium", "very high", 4, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "medium", "low", 2, 2, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {"low", "low", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "very high", "low", 2, 2, "small", "high"}, {"medium", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "high", "high", 3, 4, "large", "high"}, {"very high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "medium"}, {
        "low", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "very high", "very high", 2, 4, "large", "high"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "medium", "high"}, {
        "medium", "high", 2, 2, "medium", "high"}, {
        "low", "medium", 3, 4, "small", "low"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "high", "high", 3, 2, "large", "medium"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "very high", "high", 2, 4, "large", "medium"}, {"high", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "medium"}, {
        "very high", "very high", 2, 2, "medium", "medium"}, {
        "medium", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {
        "low", "high", 3, 2, "small", "medium"}, {"very high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "medium"}, {
        "medium", "very high", 3, 4, "small", "medium"}, {"medium", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "large", "low"}, {
        "very high", "low", 2, 4, "small", "low"}, {"high", "very high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "very high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "low"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "high"}, {
        "medium", "very high", 2, 2, "medium", "medium"}, {
        "high", "low", 3, 4, "small", "high"}, {
        "very high", "low", 4, 2, "large", "low"}, {
        "low", "high", 2, 2, "small", "low"}, {
        "high", "very high", 2, 4, "small", "high"}, {"low", "low", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "high", "very high", 3, 4, "large", "low"}, {
        "medium", "medium", 2, 2, "medium", "medium"}, {
        "low", "low", 3, 2, "medium", "high"}, {
        "low", "very high", 4, 4, "medium", "low"}, {"very high", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "high", "low", 3, 4, "large", "low"}, {
        "high", "low", 4, 4, "medium", "low"}, {"high", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"high", "medium", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}, {
        "low", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "medium"}, {
        "low", "medium", 3, 4, "medium", "low"}, {"high", "very high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {"high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "high", "high", 4, 4, "small", "medium"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "low"}, {
        "high", "low", 2, 4, "small", "low"}, {
        "medium", "low", 2, 4, "large", "high"}, {"medium", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {
        "medium", "very high", 2, 2, "small", "low"}, {"low", "high", 3, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "medium", "very high", 3, 2, "large", "high"}, {"very high", "medium", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "very high", "high", 2, 2, "medium", "low"}, {
        "high", "high", 2, 4, "medium", "low"}, {
        "high", "low", 4, 4, "medium", "high"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "low"}, {
        "high", "low", 3, 2, "large", "medium"}, {
        "very high", "high", 3, 4, "large", "high"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "small", "medium"}, {
        "very high", "low", 3, 4, "large", "medium"}, {
        "medium", "low", 2, 2, "medium", "high"}, {
        "high", "medium", 2, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "small", "high"}, {
        "low", "medium", 4, 2, "large", "high"}, {
        "very high", "high", 2, 4, "large", "low"}, {"high", "low", 
         Interval[{5, 
           DirectedInfinity[1]}], 
         Interval[{5, 
           DirectedInfinity[1]}], "small", "high"}, {"low", "high", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "medium"}, {"high", "medium", 2, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "high"}, {
        "medium", "very high", 4, 4, "medium", "medium"}, {"low", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "high"}, {
        "low", "medium", 2, 4, "large", "high"}, {"high", "high", 
         Interval[{5, 
           DirectedInfinity[1]}], 4, "medium", "low"}, {
        "high", "very high", 3, 2, "medium", "low"}, {"high", "medium", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "medium", "high"}, {"medium", "very high", 
         Interval[{5, 
           DirectedInfinity[1]}], 2, "large", "high"}, {
        "very high", "low", 3, 4, "medium", "medium"}, {
        "low", "high", 2, 2, "medium", "medium"}, {"very high", "low", 4, 
         Interval[{5, 
           DirectedInfinity[1]}], "large", "medium"}}, 
      "Output" -> {
       "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", "good", 
        "good", "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "very good", "unacceptable", "very good", 
        "unacceptable", "unacceptable", "unacceptable", "acceptable", 
        "acceptable", "very good", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "acceptable", "good", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "very good", "unacceptable", "good", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "very good", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "acceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "good", 
        "unacceptable", "acceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "unacceptable", 
        "very good", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable", "acceptable", "unacceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "unacceptable", "unacceptable", "very good", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
        "acceptable", "unacceptable", "unacceptable", "acceptable", 
        "unacceptable", "unacceptable", "acceptable", "acceptable", 
        "acceptable", "acceptable", "acceptable", "very good", "unacceptable",
         "unacceptable", "acceptable", "unacceptable", "unacceptable", 
        "unacceptable", "acceptable"}|>, 
    "Predictions" -> {
     "acceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "good", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "good", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "good", "good", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "very good", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "acceptable", "very good", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", "good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "good", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "acceptable", "unacceptable", "unacceptable", "very good",
       "unacceptable", "unacceptable", "acceptable", "good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "very good", "unacceptable",
       "good", "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "good", "unacceptable", "very good", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "acceptable", "unacceptable", "very good", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", "good", 
      "unacceptable", "acceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "unacceptable", 
      "very good", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable", "acceptable", "unacceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "unacceptable", "unacceptable", "very good", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "unacceptable", "unacceptable", 
      "acceptable", "unacceptable", "unacceptable", "acceptable", 
      "unacceptable", "unacceptable", "acceptable", "acceptable", 
      "acceptable", "acceptable", "acceptable", "very good", "unacceptable", 
      "unacceptable", "acceptable", "unacceptable", "unacceptable", 
      "unacceptable", "acceptable"}, "LogProbabilities" -> CompressedData["
1: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
     "], "CountMatrix" -> {{15, 0, 1, 0, 0}, {0, 250, 1, 0, 0}, {0, 0, 68, 1, 
     0}, {0, 0, 0, 10, 0}}, 
    "IndicesMatrix" -> {{{3, 122, 134, 157, 159, 165, 210, 223, 241, 250, 262,
        282, 296, 314, 339}, {}, {94}, {}, {}}, {{}, CompressedData["
1:eJwN0ulrDwAAANCftWF2mB1sxs62GcayDcO2tnawNglrGwkjV47c5MhZ7shR
JOGDI7nvo9xJKKKcH0SOhCSSM+/D+w9eatO0wVObBQKBXwQRTAjNCaUVYYQT
QSRRRBNDLHG0JZ4E2pNIB5JIJoVU0kgng0yy6EQ2OXQjlx7kkU8BvehNIX3o
SxHFlFBKGeVUUEkV/ammhloGMogh1FFPA40MYzgjGMkoRtPEGMYyjvFMYCKT
mMwUpjODmcxiNnOYyzzms4CFLGIxS1jKMpazgpWsYjVrWMs61rOBjWxiM1vY
yja2s4Od7GI3e9jLPvZzgIMc4jBHOMoxjnOCk5ziNGc4yznOc4GLXOIyV7jK
Na5zg5vc4jZ3uMs97vOAhzziMU94yjOe84KXvOI1b3jLO97zgY984jNf+Mo3
vvODn/zmD3/5R0DyIIIJoQUtCSWMcCKIpDVRtCGaGGKJox3xJJBIBzqSRDIp
pJJGOhlkkkU2nelCV3LoRndyySOfAnrSi94U0o8iiimhlDLKqaCSKgZQTQ21
DKWOehpo5D8NE2eu
       "], {206}, {}, {}}, {{}, {}, {1, 7, 8, 15, 17, 23, 29, 36, 42, 43, 44, 
       47, 49, 54, 60, 67, 73, 75, 79, 81, 82, 92, 101, 107, 112, 127, 135, 
       143, 146, 151, 152, 155, 163, 164, 170, 189, 190, 198, 202, 207, 213, 
       221, 222, 228, 233, 235, 243, 246, 248, 257, 259, 266, 278, 292, 305, 
       306, 315, 320, 323, 328, 331, 334, 335, 336, 337, 338, 342, 346}, {
       64}, {}}, {{}, {}, {}, {84, 86, 110, 111, 172, 200, 214, 225, 239, 
       255}, {}}}, 
    "ExtendedClasses" -> {"very good", "unacceptable", "acceptable", "good"}, 
    "Weights" -> SparseArray[Automatic, {346}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0008820693641618497, "SingleEvaluationTime" -> 
    0.00276675, "Version" -> {13.1, 0}|>]]], "Output",
 CellChangeTimes->{
  3.8689423000413103`*^9, 3.8689426328835506`*^9, {3.868942847495308*^9, 
   3.8689428757521133`*^9}, 3.868943553817169*^9, 3.868943892124319*^9, 
   3.868944122795635*^9, 3.868944551968522*^9, 3.8689455916725407`*^9, 
   3.8689458070001574`*^9, 3.868946097740024*^9, 3.868946307350904*^9, 
   3.868946822983776*^9, 3.868947543055826*^9, 3.868947599156425*^9, 
   3.868948239278075*^9, 3.868950360111157*^9, 3.868955720509842*^9, 
   3.8689590961041927`*^9, 3.868961296500168*^9},
 CellLabel->
  "Out[321]=",ExpressionUUID->"8e93046e-96c1-4389-8e74-4d2f494411fb"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluate hard net", "Chapter",
 CellChangeTimes->{{3.8647936427675457`*^9, 3.864793644095471*^9}, {
  3.868426121194284*^9, 3.868426122274289*^9}, {3.8684262976181192`*^9, 
  3.868426322530819*^9}, {3.8684339851586647`*^9, 3.868433996669791*^9}, {
  3.8684393240537577`*^9, 3.868439333949903*^9}, {3.868446283613234*^9, 
  3.8684462871734*^9}, {3.868447036013533*^9, 3.868447049013842*^9}, {
  3.8684475100383997`*^9, 
  3.868447512030362*^9}},ExpressionUUID->"161daabc-615f-418f-a171-\
832b4a2218d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"hnf", "=", 
   RowBox[{"HardNetFunction", "[", 
    RowBox[{"hardNet", ",", "trainedSoftNet"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8684476109990253`*^9, 3.868447614967239*^9}, {
   3.8684988741865396`*^9, 3.868498874592616*^9}, {3.868499185605513*^9, 
   3.8684992093586597`*^9}, 3.868501716401897*^9, {3.868514975845937*^9, 
   3.868514978733061*^9}, {3.868533857047714*^9, 3.8685338619606743`*^9}, {
   3.868592161602441*^9, 3.8685921624093037`*^9}, {3.868937316229151*^9, 
   3.8689373167579613`*^9}, {3.868937496012*^9, 3.86893752144172*^9}, {
   3.868937596537734*^9, 3.868937603616037*^9}, 3.868937747599498*^9, 
   3.868938118528597*^9, {3.868939027026972*^9, 3.8689390465517597`*^9}},
 CellLabel->
  "In[322]:=",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"hncwt", "=", 
   RowBox[{"HardNetClassify", "[", 
    RowBox[{"hnf", ",", "featureLayer", ",", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"encoders", "[", "\"\<Acceptability\>\"", "]"}], "]"}], ",", 
     "testData", ",", "\"\<Acceptability\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"eval", "=", 
  RowBox[{"HardNetClassifyEvaluation", "[", "hncwt", "]"}]}]}], "Input",
 CellChangeTimes->{{3.868518101019845*^9, 3.8685181135715637`*^9}, {
   3.868530047989657*^9, 3.868530063111247*^9}, {3.868530190826717*^9, 
   3.868530196600292*^9}, {3.86853144384466*^9, 3.868531451560924*^9}, {
   3.868532766824644*^9, 3.8685327949413958`*^9}, 3.868532945602283*^9, {
   3.868533874444491*^9, 3.8685338747929583`*^9}, {3.868604441984084*^9, 
   3.8686044511364*^9}, {3.8689602387396393`*^9, 3.8689602481032057`*^9}, {
   3.868960681250607*^9, 3.8689606824317408`*^9}},
 CellLabel->
  "In[323]:=",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Accuracy\"\>", "\[Rule]", "0.9884393063583815`"}], ",", 
   RowBox[{"\<\"Counts\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"unacceptable\"\>"}], 
         ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "250"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "68"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"very good\"\>"}], ",", 
         
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "14"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "10"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"unacceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"acceptable\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"acceptable\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}], ",", 
      RowBox[{
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"Prediction\"\>", "\[Rule]", "\<\"good\"\>"}], ",", 
         RowBox[{"\<\"Target\"\>", "\[Rule]", "\<\"very good\"\>"}]}], 
        "\[RightAssociation]"}], "\[Rule]", "1"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.868533879017746*^9, 3.868535667588807*^9, 3.868536213741539*^9, 
   3.868536669450602*^9, 3.868536920899683*^9, 3.868536972335367*^9, 
   3.8685375019147253`*^9, 3.868537949682953*^9, 3.868597361547201*^9, 
   3.868599496763803*^9, 3.8686001483266697`*^9, 3.868600952973316*^9, 
   3.868601178987914*^9, 3.868602884019575*^9, 3.868603272274043*^9, 
   3.868603310295109*^9, 3.868603361139974*^9, 3.868603694134548*^9, 
   3.868603772165483*^9, 3.868603811228598*^9, 3.8686041791759577`*^9, {
   3.868604446284284*^9, 3.8686044534371147`*^9}, 3.868604573111279*^9, 
   3.868604637559408*^9, 3.868604702753818*^9, 3.8686705802316713`*^9, 
   3.868672051173403*^9, 3.8686754044946423`*^9, 3.8686814293999166`*^9, 
   3.868682667868638*^9, 3.8686973963790894`*^9, 3.868938140285779*^9, 
   3.868938577595131*^9, 3.868938686435397*^9, 3.868939052514969*^9, 
   3.868945854341071*^9, 3.868946319184554*^9, 3.868946847673664*^9, 
   3.868947566782549*^9, 3.8689482560661783`*^9, 3.868950374941135*^9, 
   3.868955737296377*^9, 3.868959122277761*^9, 3.868960059013652*^9, {
   3.868960243845112*^9, 3.868960251426134*^9}, 3.868960350312483*^9, 
   3.8689605111581583`*^9, 3.868960687618081*^9, 3.868960739271611*^9, 
   3.868961306423067*^9},
 CellLabel->
  "Out[324]=",ExpressionUUID->"1392e018-a0a9-4ce4-8eaa-543f0f8c6df2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"tmp1", "=", 
   RowBox[{"Map", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"d", "=", 
          RowBox[{"Drop", "[", 
           RowBox[{"#", ",", 
            RowBox[{"-", "1"}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"Values", "[", 
            RowBox[{"trainedSoftNet", "[", 
             RowBox[{"d", ",", "\"\<Probabilities\>\""}], "]"}], "]"}], "]"}],
           ",", 
          RowBox[{"Flatten", "[", 
           RowBox[{"HardNetClassProbabilities", "[", 
            RowBox[{"HardNetClassScores", "[", 
             RowBox[{"HardNetClassBits", "[", 
              RowBox[{"hnf", ",", "featureLayer", ",", 
               RowBox[{"{", "d", "}"}]}], "]"}], "]"}], "]"}], "]"}]}], 
         "}"}]}], "\[IndentingNewLine]", "]"}], "&"}], ",", 
     RowBox[{"Normal", "[", "testData", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.868534500633864*^9, 3.868534530856123*^9}, {
   3.868534632169736*^9, 3.868534646264037*^9}, {3.868534678794361*^9, 
   3.868534701575143*^9}, {3.8685348592982283`*^9, 3.868534879711412*^9}, {
   3.8689592232795486`*^9, 3.868959373725676*^9}, 3.8689595069835777`*^9, {
   3.86896134733706*^9, 
   3.8689613476338453`*^9}},ExpressionUUID->"5a479eae-a14a-4e16-be45-\
c641694c4dfb"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.868961341829483*^9},
 CellLabel->
  "Out[325]=",ExpressionUUID->"bb585fbc-0f2c-4f2d-8e99-8bbc435e2f80"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", "=", "#"}], "}"}], ",", 
     RowBox[{
      RowBox[{"Total", "[", 
       RowBox[{
        RowBox[{"d", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "-", 
        RowBox[{"d", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "<", "0.00001"}]}], "]"}], 
   "&"}], "/@", "tmp1"}]], "Input",
 CellChangeTimes->{{3.868959378725573*^9, 3.868959482804295*^9}},
 CellLabel->
  "In[276]:=",ExpressionUUID->"a3f04598-6a66-46f7-ade9-0b15965d1e09"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", 
   ",", "True", ",", "True", ",", "True", ",", "True", ",", "True", ",", 
   "True", ",", "True", ",", "True", ",", "True", ",", "True"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.868959381184671*^9, 3.8689594836429167`*^9}},
 CellLabel->
  "Out[276]=",ExpressionUUID->"0c73e9ea-cd97-422c-8046-801052078b28"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"softWeights", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"ExtractWeights", "[", "trainedSoftNet", "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.868598558993527*^9, 3.8685985805202436`*^9}},
 CellLabel->
  "In[258]:=",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Histogram", "[", 
  RowBox[{"softWeights", ",", 
   RowBox[{"PlotRange", "->", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.868598583187772*^9, 3.8685985949050713`*^9}},
 CellLabel->
  "In[259]:=",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.21], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.21], Thickness[Small]}], RectangleBox[{-21., 0}, {-20.5, 5.},
      RoundingRadius->0], RectangleBox[{-20.5, 0}, {-20., 17.},
      RoundingRadius->0], RectangleBox[{-20., 0}, {-19.5, 15.},
      RoundingRadius->0], RectangleBox[{-19.5, 0}, {-19., 8.},
      RoundingRadius->0], RectangleBox[{-19., 0}, {-18.5, 18.},
      RoundingRadius->0], RectangleBox[{-18.5, 0}, {-18., 30.},
      RoundingRadius->0], RectangleBox[{-18., 0}, {-17.5, 32.},
      RoundingRadius->0], RectangleBox[{-17.5, 0}, {-17., 21.},
      RoundingRadius->0], RectangleBox[{-17., 0}, {-16.5, 26.},
      RoundingRadius->0], RectangleBox[{-16.5, 0}, {-16., 28.},
      RoundingRadius->0], RectangleBox[{-16., 0}, {-15.5, 34.},
      RoundingRadius->0], RectangleBox[{-15.5, 0}, {-15., 43.},
      RoundingRadius->0], RectangleBox[{-15., 0}, {-14.5, 37.},
      RoundingRadius->0], RectangleBox[{-14.5, 0}, {-14., 36.},
      RoundingRadius->0], RectangleBox[{-14., 0}, {-13.5, 34.},
      RoundingRadius->0], RectangleBox[{-13.5, 0}, {-13., 58.},
      RoundingRadius->0], RectangleBox[{-13., 0}, {-12.5, 96.},
      RoundingRadius->0], RectangleBox[{-12.5, 0}, {-12., 77.},
      RoundingRadius->0], RectangleBox[{-12., 0}, {-11.5, 57.},
      RoundingRadius->0], RectangleBox[{-11.5, 0}, {-11., 58.},
      RoundingRadius->0], RectangleBox[{-11., 0}, {-10.5, 79.},
      RoundingRadius->0], RectangleBox[{-10.5, 0}, {-10., 52.},
      RoundingRadius->0], RectangleBox[{-10., 0}, {-9.5, 78.},
      RoundingRadius->0], RectangleBox[{-9.5, 0}, {-9., 87.},
      RoundingRadius->0], RectangleBox[{-9., 0}, {-8.5, 62.},
      RoundingRadius->0], RectangleBox[{-8.5, 0}, {-8., 64.},
      RoundingRadius->0], RectangleBox[{-8., 0}, {-7.5, 90.},
      RoundingRadius->0], RectangleBox[{-7.5, 0}, {-7., 80.},
      RoundingRadius->0], RectangleBox[{-7., 0}, {-6.5, 114.},
      RoundingRadius->0], RectangleBox[{-6.5, 0}, {-6., 110.},
      RoundingRadius->0], RectangleBox[{-6., 0}, {-5.5, 108.},
      RoundingRadius->0], RectangleBox[{-5.5, 0}, {-5., 128.},
      RoundingRadius->0], RectangleBox[{-5., 0}, {-4.5, 155.},
      RoundingRadius->0], RectangleBox[{-4.5, 0}, {-4., 175.},
      RoundingRadius->0], RectangleBox[{-4., 0}, {-3.5, 235.},
      RoundingRadius->0], RectangleBox[{-3.5, 0}, {-3., 223.},
      RoundingRadius->0], RectangleBox[{-3., 0}, {-2.5, 264.},
      RoundingRadius->0], RectangleBox[{-2.5, 0}, {-2., 315.},
      RoundingRadius->0], RectangleBox[{-2., 0}, {-1.5, 341.},
      RoundingRadius->0], RectangleBox[{-1.5, 0}, {-1., 502.},
      RoundingRadius->0], RectangleBox[{-1., 0}, {-0.5, 692.},
      RoundingRadius->0], RectangleBox[{-0.5, 0}, {0., 1910.},
      RoundingRadius->0], RectangleBox[{0., 0}, {0.5, 8709.},
      RoundingRadius->0], RectangleBox[{0.5, 0}, {1., 2766.},
      RoundingRadius->0], RectangleBox[{1., 0}, {1.5, 12.},
      RoundingRadius->0], RectangleBox[{1.5, 0}, {2., 6.},
      RoundingRadius->0], RectangleBox[{2., 0}, {2.5, 3.},
      RoundingRadius->0], RectangleBox[{2.5, 0}, {3., 1.},
      RoundingRadius->0], RectangleBox[{3., 0}, {3.5, 1.},
      RoundingRadius->0], RectangleBox[{3.5, 0}, {4., 5.},
      RoundingRadius->0], RectangleBox[{4., 0}, {4.5, 4.},
      RoundingRadius->0], RectangleBox[{4.5, 0}, {5., 1.},
      RoundingRadius->0], RectangleBox[{5., 0}, {5.5, 2.},
      RoundingRadius->0], RectangleBox[{5.5, 0}, {6., 3.},
      RoundingRadius->0], RectangleBox[{6., 0}, {6.5, 1.},
      RoundingRadius->0], RectangleBox[{6.5, 0}, {7., 1.},
      RoundingRadius->0], RectangleBox[{7., 0}, {7.5, 4.},
      RoundingRadius->0], RectangleBox[{7.5, 0}, {8., 1.},
      RoundingRadius->0], RectangleBox[{8., 0}, {8.5, 1.},
      RoundingRadius->0], RectangleBox[{8.5, 0}, {9., 1.},
      RoundingRadius->0], RectangleBox[{9., 0}, {9.5, 1.},
      RoundingRadius->0], RectangleBox[{10., 0}, {10.5, 1.},
      RoundingRadius->0], RectangleBox[{13., 0}, {13.5, 1.},
      RoundingRadius->0], RectangleBox[{13.5, 0}, {14., 9.},
      RoundingRadius->
       0]}, {}, {}}, {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-21.7, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{-21., 14.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.868598587213368*^9, 3.868598595534347*^9}, 
   3.8685995277293787`*^9, 3.868600221413623*^9, 3.868602949041443*^9, 
   3.868604296907655*^9, 3.8686706335951767`*^9, 3.868672097574623*^9, 
   3.868681481840914*^9, 3.868947735099625*^9, 3.868948276385453*^9, 
   3.868959188370422*^9},
 CellLabel->
  "Out[259]=",ExpressionUUID->"250bb9a8-58da-4614-877e-feabce98780c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 782.25},
WindowMargins->{{1440, Automatic}, {0, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a91410a-fdc1-4cfe-a437-7a311bcf3ad2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 214, 4, 98, "Title",ExpressionUUID->"e16c6739-4a62-4e56-b75b-c3030d8dbab8"],
Cell[797, 28, 733, 16, 29, "Input",ExpressionUUID->"3d283193-d4ed-4662-9e0d-84eec54ddecd"],
Cell[CellGroupData[{
Cell[1555, 48, 202, 3, 29, "Input",ExpressionUUID->"b6c0dc4a-3793-4071-8577-e783d118064e"],
Cell[1760, 53, 27782, 620, 313, "Output",ExpressionUUID->"8e0777b3-a7ff-408d-93a4-c379a9067373"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29579, 678, 204, 4, 69, "Chapter",ExpressionUUID->"3104f7e3-d1cf-444c-857d-f3d3d76d7c7a"],
Cell[CellGroupData[{
Cell[29808, 686, 465, 9, 29, "Input",ExpressionUUID->"4d8c095b-e185-42e8-80ee-27a0867c4855"],
Cell[30276, 697, 127624, 2372, 652, "Output",ExpressionUUID->"97e716f5-e291-4891-968e-b1b7f7b73be3"]
}, Open  ]],
Cell[157915, 3072, 8493, 202, 37, "Input",ExpressionUUID->"ba27c735-2399-42eb-ad4b-c0f8a3f95181"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166445, 3279, 317, 5, 69, "Chapter",ExpressionUUID->"fc79f348-c5f7-48d3-80d6-e4dab5b13de8"],
Cell[166765, 3286, 2756, 68, 154, "Input",ExpressionUUID->"2edd8689-bcff-48b4-83d7-4dbc778e046c"],
Cell[169524, 3356, 1775, 41, 195, "Input",ExpressionUUID->"6c7ad687-6d4c-4bac-b40e-f187c4e5c0d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[171336, 3402, 355, 6, 69, "Chapter",ExpressionUUID->"1674350a-bfdf-4c15-99d4-bba009f90f57"],
Cell[171694, 3410, 2770, 49, 133, "Input",ExpressionUUID->"ad2ef6d3-cd02-4807-bcb7-4197c5c0f639"],
Cell[174467, 3461, 1445, 27, 32, "Input",ExpressionUUID->"d4969fd9-cfe3-4b00-becd-a1837d573614"],
Cell[175915, 3490, 1095, 25, 117, "Input",ExpressionUUID->"7439541b-c071-4819-9fbd-8e1e8cfa2b4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177047, 3520, 355, 6, 69, "Chapter",ExpressionUUID->"3ba812ad-d11b-4f60-9a7a-772879a58a20"],
Cell[177405, 3528, 1624, 31, 154, "Input",ExpressionUUID->"387375e3-e26e-4be9-88bf-1141a90e448f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179066, 3564, 456, 7, 69, "Chapter",ExpressionUUID->"b925ae5d-4091-4d4b-a37f-d801edc11fc9"],
Cell[179525, 3573, 1755, 33, 97, "Input",ExpressionUUID->"dc052208-a168-4c64-b029-ac8d65307887"],
Cell[CellGroupData[{
Cell[181305, 3610, 859, 14, 29, "Input",ExpressionUUID->"0e2adce8-9cfc-4570-baad-c4cfc7b05c63"],
Cell[182167, 3626, 253526, 4626, 495, "Output",ExpressionUUID->"3fdb3f09-8f53-43da-b542-2986dbb67978"]
}, Open  ]],
Cell[CellGroupData[{
Cell[435730, 8257, 710, 17, 29, "Input",ExpressionUUID->"260659aa-9626-49a2-b96d-2673b75262e7"],
Cell[436443, 8276, 414187, 8246, 68, "Output",ExpressionUUID->"4ac2eb61-1faf-43c5-b783-cfe1b6edd288"]
}, Open  ]],
Cell[CellGroupData[{
Cell[850667, 16527, 327, 7, 29, "Input",ExpressionUUID->"5078f7c8-7b76-4fb4-adfc-89539893ca31"],
Cell[850997, 16536, 194275, 3657, 495, "Output",ExpressionUUID->"8e93046e-96c1-4389-8e74-4d2f494411fb"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1045321, 20199, 507, 8, 69, "Chapter",ExpressionUUID->"161daabc-615f-418f-a171-832b4a2218d6"],
Cell[1045831, 20209, 823, 14, 29, "Input",ExpressionUUID->"d5f7f5e3-d7b8-496b-8c38-f73def7abcc2"],
Cell[CellGroupData[{
Cell[1046679, 20227, 1000, 19, 51, "Input",ExpressionUUID->"f5f447dd-5588-4178-92cf-69aee019ae5a"],
Cell[1047682, 20248, 3871, 78, 87, "Output",ExpressionUUID->"1392e018-a0a9-4ce4-8eaa-543f0f8c6df2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1051590, 20331, 1466, 35, 92, "Input",ExpressionUUID->"5a479eae-a14a-4e16-be45-c641694c4dfb"],
Cell[1053059, 20368, 160, 3, 33, "Output",ExpressionUUID->"bb585fbc-0f2c-4f2d-8e99-8bbc435e2f80"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1053256, 20376, 558, 17, 29, "Input",ExpressionUUID->"a3f04598-6a66-46f7-ade9-0b15965d1e09"],
Cell[1053817, 20395, 4956, 69, 282, "Output",ExpressionUUID->"0c73e9ea-cd97-422c-8046-801052078b28"]
}, Open  ]],
Cell[1058788, 20467, 322, 8, 29, "Input",ExpressionUUID->"3b63cdad-d22a-47bf-85a7-a8a2628437dc"],
Cell[CellGroupData[{
Cell[1059135, 20479, 281, 6, 29, "Input",ExpressionUUID->"cc97491a-dd5c-471f-bfe6-ce6dda57775e"],
Cell[1059419, 20487, 5428, 96, 235, "Output",ExpressionUUID->"250bb9a8-58da-4614-877e-feabce98780c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

